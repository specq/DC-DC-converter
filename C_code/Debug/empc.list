
empc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800787c  0800787c  0001787c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800791c  0800791c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007924  08007924  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007924  08007924  00017924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800792c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000070  0800799c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800799c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144bd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024fa  00000000  00000000  0003455d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  00036a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001240  00000000  00000000  00037dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000295b1  00000000  00000000  00039000  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e53f  00000000  00000000  000625b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107cc9  00000000  00000000  00070af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001787b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000567c  00000000  00000000  00178834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007864 	.word	0x08007864

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007864 	.word	0x08007864

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <swap>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void swap(int* a, int* b)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	int t = *a;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	60fb      	str	r3, [r7, #12]
    *a = *b;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]
    *b = t;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <partition>:

int partition (int arr[], int low, int high)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b088      	sub	sp, #32
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	607a      	str	r2, [r7, #4]
	int pivot = arr[high];    // pivot
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	4413      	add	r3, r2
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	617b      	str	r3, [r7, #20]
	int i = (low - 1);  // Index of smaller element
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]

    for (int j = low; j <= high- 1; j++)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	e018      	b.n	8000600 <partition+0x56>
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
 80005ce:	69bb      	ldr	r3, [r7, #24]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	4413      	add	r3, r2
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	429a      	cmp	r2, r3
 80005dc:	dd0d      	ble.n	80005fa <partition+0x50>
        {
            i++;    // increment index of smaller element
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	3301      	adds	r3, #1
 80005e2:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	18d0      	adds	r0, r2, r3
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	4619      	mov	r1, r3
 80005f6:	f7ff ffc3 	bl	8000580 <swap>
    for (int j = low; j <= high- 1; j++)
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	3301      	adds	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3b01      	subs	r3, #1
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	429a      	cmp	r2, r3
 8000608:	dde1      	ble.n	80005ce <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	3301      	adds	r3, #1
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	68fa      	ldr	r2, [r7, #12]
 8000612:	18d0      	adds	r0, r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	4619      	mov	r1, r3
 800061e:	f7ff ffaf 	bl	8000580 <swap>
    return (i + 1);
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	3301      	adds	r3, #1
}
 8000626:	4618      	mov	r0, r3
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <quickSort>:

void quickSort(int arr[], int low, int high)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b086      	sub	sp, #24
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
    if (low < high)
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	429a      	cmp	r2, r3
 8000640:	da13      	bge.n	800066a <quickSort+0x3c>
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
    	int pi = partition(arr, low, high);
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff ffaf 	bl	80005aa <partition>
 800064c:	6178      	str	r0, [r7, #20]

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3b01      	subs	r3, #1
 8000652:	461a      	mov	r2, r3
 8000654:	68b9      	ldr	r1, [r7, #8]
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f7ff ffe9 	bl	800062e <quickSort>
        quickSort(arr, pi + 1, high);
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3301      	adds	r3, #1
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4619      	mov	r1, r3
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f7ff ffe2 	bl	800062e <quickSort>
    }
}
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <get_median>:

int get_median(int *values){
 8000672:	b580      	push	{r7, lr}
 8000674:	b084      	sub	sp, #16
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
	int n = sizeof(values)/sizeof(values[0]);
 800067a:	2301      	movs	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
    quickSort(values, 0, n-1);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3b01      	subs	r3, #1
 8000682:	461a      	mov	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ffd1 	bl	800062e <quickSort>
    return values[SIZE/2];
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68db      	ldr	r3, [r3, #12]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b0      	sub	sp, #192	; 0xc0
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
	if (htim->Instance == htim3.Instance)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	f040 847e 	bne.w	8000faa <HAL_TIM_PeriodElapsedCallback+0x912>
    {
		if(iter < 10000){
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d807      	bhi.n	80006ca <HAL_TIM_PeriodElapsedCallback+0x32>
			iter++;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006c4:	801a      	strh	r2, [r3, #0]
			htim2.Instance->CCR2 = input;
			u /= 1000;
			u += us;
		}
	}
}
 80006c6:	f000 bc70 	b.w	8000faa <HAL_TIM_PeriodElapsedCallback+0x912>
			for(uint8_t i = 0; i<SIZE; i++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80006d0:	e023      	b.n	800071a <HAL_TIM_PeriodElapsedCallback+0x82>
 80006d2:	bf00      	nop
 80006d4:	20000130 	.word	0x20000130
 80006d8:	2000008c 	.word	0x2000008c
				value0[i] = (int)adc_buf0[i];
 80006dc:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80006e0:	4ac6      	ldr	r2, [pc, #792]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x364>)
 80006e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006e6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80006f0:	440b      	add	r3, r1
 80006f2:	f843 2c98 	str.w	r2, [r3, #-152]
				value1[i] = (int)adc_buf1[i];
 80006f6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80006fa:	4ac1      	ldr	r2, [pc, #772]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80006fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000700:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800070a:	440b      	add	r3, r1
 800070c:	f843 2cb4 	str.w	r2, [r3, #-180]
			for(uint8_t i = 0; i<SIZE; i++){
 8000710:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000714:	3301      	adds	r3, #1
 8000716:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800071a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800071e:	2b06      	cmp	r3, #6
 8000720:	d9dc      	bls.n	80006dc <HAL_TIM_PeriodElapsedCallback+0x44>
			y[0] = get_median(value0); y[0] *= 1075; y[0] /= 10000;
 8000722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffa3 	bl	8000672 <get_median>
 800072c:	4602      	mov	r2, r0
 800072e:	4bb5      	ldr	r3, [pc, #724]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	4bb4      	ldr	r3, [pc, #720]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f240 4233 	movw	r2, #1075	; 0x433
 800073a:	fb02 f303 	mul.w	r3, r2, r3
 800073e:	4ab1      	ldr	r2, [pc, #708]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000740:	6013      	str	r3, [r2, #0]
 8000742:	4bb0      	ldr	r3, [pc, #704]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4ab0      	ldr	r2, [pc, #704]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000748:	fb82 1203 	smull	r1, r2, r2, r3
 800074c:	1312      	asrs	r2, r2, #12
 800074e:	17db      	asrs	r3, r3, #31
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	4aac      	ldr	r2, [pc, #688]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000754:	6013      	str	r3, [r2, #0]
			y[1] = get_median(value1);   y[1] *= 28686; y[1] /= 10000;
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff89 	bl	8000672 <get_median>
 8000760:	4602      	mov	r2, r0
 8000762:	4ba8      	ldr	r3, [pc, #672]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	4ba7      	ldr	r3, [pc, #668]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f247 020e 	movw	r2, #28686	; 0x700e
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	4aa4      	ldr	r2, [pc, #656]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000774:	6053      	str	r3, [r2, #4]
 8000776:	4ba3      	ldr	r3, [pc, #652]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	4aa3      	ldr	r2, [pc, #652]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800077c:	fb82 1203 	smull	r1, r2, r2, r3
 8000780:	1312      	asrs	r2, r2, #12
 8000782:	17db      	asrs	r3, r3, #31
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	4a9f      	ldr	r2, [pc, #636]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000788:	6053      	str	r3, [r2, #4]
			int x0_prev = x[0];
 800078a:	4ba0      	ldr	r3, [pc, #640]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			int x1_prev = x[1];
 8000792:	4b9e      	ldr	r3, [pc, #632]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			x_est[0] = 97136*x0_prev - 978*x1_prev + 14878*u;    x_est[0] /= 100000;
 800079a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800079e:	4a9c      	ldr	r2, [pc, #624]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80007a0:	fb02 f203 	mul.w	r2, r2, r3
 80007a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80007a8:	499a      	ldr	r1, [pc, #616]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80007aa:	fb01 f303 	mul.w	r3, r1, r3
 80007ae:	441a      	add	r2, r3
 80007b0:	4b99      	ldr	r3, [pc, #612]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f643 211e 	movw	r1, #14878	; 0x3a1e
 80007b8:	fb01 f303 	mul.w	r3, r1, r3
 80007bc:	4413      	add	r3, r2
 80007be:	4a97      	ldr	r2, [pc, #604]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	4b96      	ldr	r3, [pc, #600]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a96      	ldr	r2, [pc, #600]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80007c8:	fb82 1203 	smull	r1, r2, r2, r3
 80007cc:	1352      	asrs	r2, r2, #13
 80007ce:	17db      	asrs	r3, r3, #31
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	4a92      	ldr	r2, [pc, #584]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80007d4:	6013      	str	r3, [r2, #0]
			x_est[1] = 173187*x0_prev + 97046*x1_prev + 18083*u; x_est[1] /= 100000;
 80007d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80007da:	4a92      	ldr	r2, [pc, #584]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80007dc:	fb02 f203 	mul.w	r2, r2, r3
 80007e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80007e4:	4990      	ldr	r1, [pc, #576]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80007e6:	fb01 f303 	mul.w	r3, r1, r3
 80007ea:	441a      	add	r2, r3
 80007ec:	4b8a      	ldr	r3, [pc, #552]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f244 61a3 	movw	r1, #18083	; 0x46a3
 80007f4:	fb01 f303 	mul.w	r3, r1, r3
 80007f8:	4413      	add	r3, r2
 80007fa:	4a88      	ldr	r2, [pc, #544]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80007fc:	6053      	str	r3, [r2, #4]
 80007fe:	4b87      	ldr	r3, [pc, #540]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4a87      	ldr	r2, [pc, #540]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000804:	fb82 1203 	smull	r1, r2, r2, r3
 8000808:	1352      	asrs	r2, r2, #13
 800080a:	17db      	asrs	r3, r3, #31
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	4a83      	ldr	r2, [pc, #524]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000810:	6053      	str	r3, [r2, #4]
			x[0] = 200*y[0] + 800*x_est[0]; x[0] /= 1000;
 8000812:	4b7c      	ldr	r3, [pc, #496]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	22c8      	movs	r2, #200	; 0xc8
 8000818:	fb02 f203 	mul.w	r2, r2, r3
 800081c:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000824:	fb01 f303 	mul.w	r3, r1, r3
 8000828:	4413      	add	r3, r2
 800082a:	4a78      	ldr	r2, [pc, #480]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	4b77      	ldr	r3, [pc, #476]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a7e      	ldr	r2, [pc, #504]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000834:	fb82 1203 	smull	r1, r2, r2, r3
 8000838:	1192      	asrs	r2, r2, #6
 800083a:	17db      	asrs	r3, r3, #31
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	4a73      	ldr	r2, [pc, #460]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000840:	6013      	str	r3, [r2, #0]
			x[1] = 200*y[1] + 800*x_est[1]; x[1] /= 1000;
 8000842:	4b70      	ldr	r3, [pc, #448]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	22c8      	movs	r2, #200	; 0xc8
 8000848:	fb02 f203 	mul.w	r2, r2, r3
 800084c:	4b73      	ldr	r3, [pc, #460]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000854:	fb01 f303 	mul.w	r3, r1, r3
 8000858:	4413      	add	r3, r2
 800085a:	4a6c      	ldr	r2, [pc, #432]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800085c:	6053      	str	r3, [r2, #4]
 800085e:	4b6b      	ldr	r3, [pc, #428]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	4a72      	ldr	r2, [pc, #456]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000864:	fb82 1203 	smull	r1, r2, r2, r3
 8000868:	1192      	asrs	r2, r2, #6
 800086a:	17db      	asrs	r3, r3, #31
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	4a67      	ldr	r2, [pc, #412]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000870:	6053      	str	r3, [r2, #4]
			int dx0 = x[0] - xs0;
 8000872:	4b66      	ldr	r3, [pc, #408]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2232      	movs	r2, #50	; 0x32
 8000878:	1a9b      	subs	r3, r3, r2
 800087a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			int dx1 = x[1] - xs1;
 800087e:	4b63      	ldr	r3, [pc, #396]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f241 3288 	movw	r2, #5000	; 0x1388
 8000886:	1a9b      	subs	r3, r3, r2
 8000888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			int H11 = -1000*dx0-49999;              H11 = H11<=0;
 800088c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000890:	4a67      	ldr	r2, [pc, #412]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000892:	fb02 f303 	mul.w	r3, r2, r3
 8000896:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800089a:	3b4f      	subs	r3, #79	; 0x4f
 800089c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80008a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bfd4      	ite	le
 80008a8:	2301      	movle	r3, #1
 80008aa:	2300      	movgt	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			int H12 = -948*dx0+317*dx1-246980;      H12 = H12<=0;
 80008b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80008b6:	4a5f      	ldr	r2, [pc, #380]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80008b8:	fb02 f203 	mul.w	r2, r2, r3
 80008bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008c0:	f240 113d 	movw	r1, #317	; 0x13d
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	f5a3 3371 	sub.w	r3, r3, #246784	; 0x3c400
 80008ce:	3bc4      	subs	r3, #196	; 0xc4
 80008d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80008d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bfd4      	ite	le
 80008dc:	2301      	movle	r3, #1
 80008de:	2300      	movgt	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			int H13 = 948*dx0-317*dx1-740942;       H13 = H13<=0;
 80008e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80008ea:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 80008ee:	fb02 f203 	mul.w	r2, r2, r3
 80008f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008f6:	f46f 719e 	mvn.w	r1, #316	; 0x13c
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	f5a3 2334 	sub.w	r3, r3, #737280	; 0xb4000
 8000904:	f6a3 634e 	subw	r3, r3, #3662	; 0xe4e
 8000908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800090c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000910:	2b00      	cmp	r3, #0
 8000912:	bfd4      	ite	le
 8000914:	2301      	movle	r3, #1
 8000916:	2300      	movgt	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			int H14 = 997*dx0+69*dx1-64337;         H14 = H14<=0;
 800091e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000922:	f240 32e5 	movw	r2, #997	; 0x3e5
 8000926:	fb02 f103 	mul.w	r1, r2, r3
 800092a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800092e:	4613      	mov	r3, r2
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	4413      	add	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	440b      	add	r3, r1
 800093a:	f5a3 437b 	sub.w	r3, r3, #64256	; 0xfb00
 800093e:	3b51      	subs	r3, #81	; 0x51
 8000940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000948:	2b00      	cmp	r3, #0
 800094a:	bfd4      	ite	le
 800094c:	2301      	movle	r3, #1
 800094e:	2300      	movgt	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			int H15 = -997*dx0-69*dx1-126088;       H15 = H15<=0;
 8000956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800095a:	f46f 7279 	mvn.w	r2, #996	; 0x3e4
 800095e:	fb02 f203 	mul.w	r2, r2, r3
 8000962:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000966:	f06f 0144 	mvn.w	r1, #68	; 0x44
 800096a:	fb01 f303 	mul.w	r3, r1, r3
 800096e:	4413      	add	r3, r2
 8000970:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8000974:	3b88      	subs	r3, #136	; 0x88
 8000976:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800097a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800097e:	2b00      	cmp	r3, #0
 8000980:	bfd4      	ite	le
 8000982:	2301      	movle	r3, #1
 8000984:	2300      	movgt	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			int H16 = 1000*dx0-150000;              H16 = H16<=0;
 800098c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 800099c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80009a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80009a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bfd4      	ite	le
 80009ac:	2301      	movle	r3, #1
 80009ae:	2300      	movgt	r3, #0
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			if(H11 && H12 && H13 && H14 && H15 && H16){
 80009b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d066      	beq.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x3f4>
 80009be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d062      	beq.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x3f4>
 80009c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d05e      	beq.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x3f4>
 80009ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d05a      	beq.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x3f4>
 80009d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d056      	beq.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x3f4>
 80009de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d052      	beq.n	8000a8c <HAL_TIM_PeriodElapsedCallback+0x3f4>
				u = -5237*dx0; u -= 366*dx1;
 80009e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009f8:	e020      	b.n	8000a3c <HAL_TIM_PeriodElapsedCallback+0x3a4>
 80009fa:	bf00      	nop
 80009fc:	2000033c 	.word	0x2000033c
 8000a00:	20000170 	.word	0x20000170
 8000a04:	2000022c 	.word	0x2000022c
 8000a08:	68db8bad 	.word	0x68db8bad
 8000a0c:	20000090 	.word	0x20000090
 8000a10:	00017b70 	.word	0x00017b70
 8000a14:	fffffc2e 	.word	0xfffffc2e
 8000a18:	200000a0 	.word	0x200000a0
 8000a1c:	20000098 	.word	0x20000098
 8000a20:	14f8b589 	.word	0x14f8b589
 8000a24:	0002a483 	.word	0x0002a483
 8000a28:	00017b16 	.word	0x00017b16
 8000a2c:	10624dd3 	.word	0x10624dd3
 8000a30:	fffffc18 	.word	0xfffffc18
 8000a34:	fffffc4c 	.word	0xfffffc4c
 8000a38:	ffffeb8b 	.word	0xffffeb8b
 8000a3c:	4a8b      	ldr	r2, [pc, #556]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8000a3e:	fb02 f203 	mul.w	r2, r2, r3
 8000a42:	4b8b      	ldr	r3, [pc, #556]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a89      	ldr	r2, [pc, #548]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000a4a:	6013      	str	r3, [r2, #0]
				int error = 5000-y[1];
 8000a4c:	4b89      	ldr	r3, [pc, #548]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000a54:	3308      	adds	r3, #8
 8000a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				integral += error; u += 5*integral;
 8000a5a:	4b87      	ldr	r3, [pc, #540]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a62:	4413      	add	r3, r2
 8000a64:	4a84      	ldr	r2, [pc, #528]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b83      	ldr	r3, [pc, #524]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	441a      	add	r2, r3
 8000a72:	4b7f      	ldr	r3, [pc, #508]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	4a7d      	ldr	r2, [pc, #500]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000a7a:	6013      	str	r3, [r2, #0]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0.5/3.3*4095);
 8000a7c:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	487d      	ldr	r0, [pc, #500]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000a86:	f002 fc3f 	bl	8003308 <HAL_DAC_SetValue>
			if(H11 && H12 && H13 && H14 && H15 && H16){
 8000a8a:	e254      	b.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x89e>
				int H51 = 998*dx0+70*dx1+126100;  H51 = H51<=0;
 8000a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a90:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000a94:	fb02 f203 	mul.w	r2, r2, r3
 8000a98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a9c:	2146      	movs	r1, #70	; 0x46
 8000a9e:	fb01 f303 	mul.w	r3, r1, r3
 8000aa2:	4413      	add	r3, r2
 8000aa4:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8000aa8:	3394      	adds	r3, #148	; 0x94
 8000aaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000aae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	bfd4      	ite	le
 8000ab6:	2301      	movle	r3, #1
 8000ab8:	2300      	movgt	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				int H52 = -1000*dx0-50000;       H52 = H52<=0;
 8000ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ac4:	4a6e      	ldr	r2, [pc, #440]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8000ac6:	fb02 f303 	mul.w	r3, r2, r3
 8000aca:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000ace:	3b50      	subs	r3, #80	; 0x50
 8000ad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bfd4      	ite	le
 8000adc:	2301      	movle	r3, #1
 8000ade:	2300      	movgt	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				int H53 = -1000*dx1-5000000;     H53 = H53<=0;
 8000ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000aea:	4a65      	ldr	r2, [pc, #404]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8000aec:	fb02 f203 	mul.w	r2, r2, r3
 8000af0:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8000af2:	4413      	add	r3, r2
 8000af4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bfd4      	ite	le
 8000b00:	2301      	movle	r3, #1
 8000b02:	2300      	movgt	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				int H54 = 1000*dx0-10*dx1-53000;  H54 = H54<=0;
 8000b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b12:	fb02 f203 	mul.w	r2, r2, r3
 8000b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b1a:	f06f 0109 	mvn.w	r1, #9
 8000b1e:	fb01 f303 	mul.w	r3, r1, r3
 8000b22:	4413      	add	r3, r2
 8000b24:	f5a3 434f 	sub.w	r3, r3, #52992	; 0xcf00
 8000b28:	3b08      	subs	r3, #8
 8000b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	bfd4      	ite	le
 8000b32:	2301      	movle	r3, #1
 8000b34:	2300      	movgt	r3, #0
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	67fb      	str	r3, [r7, #124]	; 0x7c
				if(H51 && H52 && H53 && H54){
 8000b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d015      	beq.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x4d6>
 8000b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d011      	beq.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x4d6>
 8000b4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00d      	beq.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x4d6>
 8000b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00a      	beq.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x4d6>
					u = 662000;
 8000b58:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000b5a:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8000b5c:	601a      	str	r2, [r3, #0]
					HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2.5/3.3*4095);
 8000b5e:	f640 431e 	movw	r3, #3102	; 0xc1e
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	4845      	ldr	r0, [pc, #276]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000b68:	f002 fbce 	bl	8003308 <HAL_DAC_SetValue>
 8000b6c:	e1e3      	b.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x89e>
					int H31 = -1000*dx1-5000000;         H31 = H31<=0;
 8000b6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b72:	4a43      	ldr	r2, [pc, #268]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8000b74:	fb02 f203 	mul.w	r2, r2, r3
 8000b78:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8000b7a:	4413      	add	r3, r2
 8000b7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8000b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	bfd4      	ite	le
 8000b84:	2301      	movle	r3, #1
 8000b86:	2300      	movgt	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	67bb      	str	r3, [r7, #120]	; 0x78
					int H32 = -1000*dx0+10*dx1+53000;     H32 = H32<=0;
 8000b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b90:	4a3b      	ldr	r2, [pc, #236]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8000b92:	fb02 f103 	mul.w	r1, r2, r3
 8000b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8000ba8:	3308      	adds	r3, #8
 8000baa:	677b      	str	r3, [r7, #116]	; 0x74
 8000bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bfd4      	ite	le
 8000bb2:	2301      	movle	r3, #1
 8000bb4:	2300      	movgt	r3, #0
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	677b      	str	r3, [r7, #116]	; 0x74
					int H33 = -948*dx0+318*dx1+740900;    H33 = H33<=0;
 8000bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bbe:	4a33      	ldr	r2, [pc, #204]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8000bc0:	fb02 f203 	mul.w	r2, r2, r3
 8000bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000bc8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000bcc:	fb01 f303 	mul.w	r3, r1, r3
 8000bd0:	4413      	add	r3, r2
 8000bd2:	f503 2334 	add.w	r3, r3, #737280	; 0xb4000
 8000bd6:	f603 6324 	addw	r3, r3, #3620	; 0xe24
 8000bda:	673b      	str	r3, [r7, #112]	; 0x70
 8000bdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bfd4      	ite	le
 8000be2:	2301      	movle	r3, #1
 8000be4:	2300      	movgt	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	673b      	str	r3, [r7, #112]	; 0x70
					int H34 = 1000*dx0-150000;           H34 = H34<=0;
 8000bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf2:	fb02 f303 	mul.w	r3, r2, r3
 8000bf6:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 8000bfa:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bfd4      	ite	le
 8000c06:	2301      	movle	r3, #1
 8000c08:	2300      	movgt	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
					if(H31 && H32 && H33 && H34){
 8000c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d03f      	beq.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 8000c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d03c      	beq.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 8000c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d039      	beq.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 8000c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d036      	beq.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x5fc>
						u = -6528*dx0; u += 66*dx1; u += 1000000;
 8000c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c2a:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000c2c:	fb02 f303 	mul.w	r3, r2, r3
 8000c30:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000c38:	4613      	mov	r3, r2
 8000c3a:	015b      	lsls	r3, r3, #5
 8000c3c:	4413      	add	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 8000c54:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8000c5a:	6013      	str	r3, [r2, #0]
						HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1.5/3.3*4095);
 8000c5c:	f240 7345 	movw	r3, #1861	; 0x745
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8000c66:	f002 fb4f 	bl	8003308 <HAL_DAC_SetValue>
 8000c6a:	e164      	b.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x89e>
 8000c6c:	fffffe92 	.word	0xfffffe92
 8000c70:	200000a0 	.word	0x200000a0
 8000c74:	2000022c 	.word	0x2000022c
 8000c78:	200000a4 	.word	0x200000a4
 8000c7c:	200000b8 	.word	0x200000b8
 8000c80:	fffffc18 	.word	0xfffffc18
 8000c84:	ffb3b4c0 	.word	0xffb3b4c0
 8000c88:	000a19f0 	.word	0x000a19f0
 8000c8c:	fffffc4c 	.word	0xfffffc4c
 8000c90:	ffffe680 	.word	0xffffe680
						int H21 = -1000*dx0-50000;          H21 = H21<=0;
 8000c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c98:	4a94      	ldr	r2, [pc, #592]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x854>)
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000ca2:	3b50      	subs	r3, #80	; 0x50
 8000ca4:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bfd4      	ite	le
 8000cac:	2301      	movle	r3, #1
 8000cae:	2300      	movgt	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	66bb      	str	r3, [r7, #104]	; 0x68
						int H22 = 489*dx0+872*dx1-1533900;  H22 = H22<=0;
 8000cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cb8:	f240 12e9 	movw	r2, #489	; 0x1e9
 8000cbc:	fb02 f203 	mul.w	r2, r2, r3
 8000cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000cc4:	f44f 715a 	mov.w	r1, #872	; 0x368
 8000cc8:	fb01 f303 	mul.w	r3, r1, r3
 8000ccc:	4413      	add	r3, r2
 8000cce:	f5a3 13bb 	sub.w	r3, r3, #1531904	; 0x176000
 8000cd2:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 8000cd6:	667b      	str	r3, [r7, #100]	; 0x64
 8000cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bfd4      	ite	le
 8000cde:	2301      	movle	r3, #1
 8000ce0:	2300      	movgt	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	667b      	str	r3, [r7, #100]	; 0x64
						int H23 = 1000*dx0-10*dx1-300;      H23 = H23<=0;
 8000ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cee:	fb02 f203 	mul.w	r2, r2, r3
 8000cf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000cf6:	f06f 0109 	mvn.w	r1, #9
 8000cfa:	fb01 f303 	mul.w	r3, r1, r3
 8000cfe:	4413      	add	r3, r2
 8000d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000d04:	663b      	str	r3, [r7, #96]	; 0x60
 8000d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	bfd4      	ite	le
 8000d0c:	2301      	movle	r3, #1
 8000d0e:	2300      	movgt	r3, #0
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	663b      	str	r3, [r7, #96]	; 0x60
						int H24 = 948*dx0-318*dx1+247000;   H24 = H24<=0;
 8000d14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d18:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 8000d1c:	fb02 f203 	mul.w	r2, r2, r3
 8000d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d24:	4972      	ldr	r1, [pc, #456]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8000d26:	fb01 f303 	mul.w	r3, r1, r3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	f503 3371 	add.w	r3, r3, #246784	; 0x3c400
 8000d30:	33d8      	adds	r3, #216	; 0xd8
 8000d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	bfd4      	ite	le
 8000d3a:	2301      	movle	r3, #1
 8000d3c:	2300      	movgt	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	65fb      	str	r3, [r7, #92]	; 0x5c
						if(H21 && H22 && H23 && H24){
 8000d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d02b      	beq.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x708>
 8000d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d028      	beq.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x708>
 8000d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d025      	beq.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x708>
 8000d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d022      	beq.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x708>
							u = -6527*dx0; u += 66*dx1;  u -= 335700;
 8000d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d5e:	4a65      	ldr	r2, [pc, #404]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8000d60:	fb02 f303 	mul.w	r3, r2, r3
 8000d64:	4a64      	ldr	r2, [pc, #400]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	015b      	lsls	r3, r3, #5
 8000d70:	4413      	add	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b60      	ldr	r3, [pc, #384]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a5e      	ldr	r2, [pc, #376]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b5d      	ldr	r3, [pc, #372]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f5a3 23a3 	sub.w	r3, r3, #333824	; 0x51800
 8000d88:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 8000d8c:	4a5a      	ldr	r2, [pc, #360]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8000d8e:	6013      	str	r3, [r2, #0]
							HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1/3.3*4095);
 8000d90:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	4858      	ldr	r0, [pc, #352]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x864>)
 8000d9a:	f002 fab5 	bl	8003308 <HAL_DAC_SetValue>
 8000d9e:	e0ca      	b.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x89e>
							int H41 = 921*dx0+390*dx1-698900;             H41 = H41<=0;
 8000da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000da4:	f240 3299 	movw	r2, #921	; 0x399
 8000da8:	fb02 f203 	mul.w	r2, r2, r3
 8000dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000db0:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8000db4:	fb01 f303 	mul.w	r3, r1, r3
 8000db8:	4413      	add	r3, r2
 8000dba:	f5a3 232a 	sub.w	r3, r3, #696320	; 0xaa000
 8000dbe:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8000dc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bfd4      	ite	le
 8000dca:	2301      	movle	r3, #1
 8000dcc:	2300      	movgt	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	65bb      	str	r3, [r7, #88]	; 0x58
							int H42 = 973*dx0+229*dx1-447200;             H42 = H42<=0;
 8000dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dd6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8000dda:	fb02 f203 	mul.w	r2, r2, r3
 8000dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000de2:	21e5      	movs	r1, #229	; 0xe5
 8000de4:	fb01 f303 	mul.w	r3, r1, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	f5a3 23da 	sub.w	r3, r3, #446464	; 0x6d000
 8000dee:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000df2:	657b      	str	r3, [r7, #84]	; 0x54
 8000df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bfd4      	ite	le
 8000dfa:	2301      	movle	r3, #1
 8000dfc:	2300      	movgt	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	657b      	str	r3, [r7, #84]	; 0x54
							int H43 = 988*dx0+157*dx1-354000;             H43 = H43<=0;
 8000e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e06:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 8000e0a:	fb02 f203 	mul.w	r2, r2, r3
 8000e0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e12:	219d      	movs	r1, #157	; 0x9d
 8000e14:	fb01 f303 	mul.w	r3, r1, r3
 8000e18:	4413      	add	r3, r2
 8000e1a:	f5a3 23ac 	sub.w	r3, r3, #352256	; 0x56000
 8000e1e:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8000e22:	653b      	str	r3, [r7, #80]	; 0x50
 8000e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bfd4      	ite	le
 8000e2a:	2301      	movle	r3, #1
 8000e2c:	2300      	movgt	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	653b      	str	r3, [r7, #80]	; 0x50
							int H44 = -1000*dx0+10*dx1+300;               H43 = H43<=0;
 8000e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e36:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x854>)
 8000e38:	fb02 f103 	mul.w	r1, r2, r3
 8000e3c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	440b      	add	r3, r1
 8000e4a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bfd4      	ite	le
 8000e56:	2301      	movle	r3, #1
 8000e58:	2300      	movgt	r3, #0
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	653b      	str	r3, [r7, #80]	; 0x50
							int H45 = -998*dx0-70*dx1+64300;              H45 = H45<=0;
 8000e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e62:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8000e64:	fb02 f203 	mul.w	r2, r2, r3
 8000e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e6c:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8000e70:	fb01 f303 	mul.w	r3, r1, r3
 8000e74:	4413      	add	r3, r2
 8000e76:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8000e7a:	332c      	adds	r3, #44	; 0x2c
 8000e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bfd4      	ite	le
 8000e84:	2301      	movle	r3, #1
 8000e86:	2300      	movgt	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	64bb      	str	r3, [r7, #72]	; 0x48
							int H46 = 1000*dx0-150000;                    H46 = H46<=0;
 8000e8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e94:	fb02 f303 	mul.w	r3, r2, r3
 8000e98:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 8000e9c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bfd4      	ite	le
 8000ea8:	2301      	movle	r3, #1
 8000eaa:	2300      	movgt	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	647b      	str	r3, [r7, #68]	; 0x44
							if(H41 && H42 && H43 && H44 && H45 && H46){
 8000eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d028      	beq.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x870>
 8000eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d025      	beq.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x870>
 8000ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d022      	beq.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x870>
 8000ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d01f      	beq.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x870>
 8000ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d01c      	beq.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x870>
 8000ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d019      	beq.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x870>
								u = -338000;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8000ed8:	601a      	str	r2, [r3, #0]
								HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2/3.3*4095);
 8000eda:	f640 13b1 	movw	r3, #2481	; 0x9b1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x864>)
 8000ee4:	f002 fa10 	bl	8003308 <HAL_DAC_SetValue>
 8000ee8:	e025      	b.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x89e>
 8000eea:	bf00      	nop
 8000eec:	fffffc18 	.word	0xfffffc18
 8000ef0:	fffffec2 	.word	0xfffffec2
 8000ef4:	ffffe681 	.word	0xffffe681
 8000ef8:	200000a0 	.word	0x200000a0
 8000efc:	200000b8 	.word	0x200000b8
 8000f00:	fffffc1a 	.word	0xfffffc1a
 8000f04:	fffad7b0 	.word	0xfffad7b0
								u = -4854*dx0; u += 53*dx1;
 8000f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x91c>)
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	4a29      	ldr	r2, [pc, #164]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000f1a:	2235      	movs	r2, #53	; 0x35
 8000f1c:	fb02 f203 	mul.w	r2, r2, r3
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a24      	ldr	r2, [pc, #144]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8000f28:	6013      	str	r3, [r2, #0]
								HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4822      	ldr	r0, [pc, #136]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x924>)
 8000f32:	f002 f9e9 	bl	8003308 <HAL_DAC_SetValue>
			int input = u*1599/1000000; input += 500;
 8000f36:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f240 623f 	movw	r2, #1599	; 0x63f
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	4a1f      	ldr	r2, [pc, #124]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 8000f44:	fb82 1203 	smull	r1, r2, r2, r3
 8000f48:	1492      	asrs	r2, r2, #18
 8000f4a:	17db      	asrs	r3, r3, #31
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f56:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			if(input < 0) input = 0;
 8000f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	da02      	bge.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0x8d4>
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			if(input > 1599) input = 1599;
 8000f6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000f74:	db03      	blt.n	8000f7e <HAL_TIM_PeriodElapsedCallback+0x8e6>
 8000f76:	f240 633f 	movw	r3, #1599	; 0x63f
 8000f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			htim2.Instance->CCR2 = input;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000f86:	639a      	str	r2, [r3, #56]	; 0x38
			u /= 1000;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8000f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f92:	1192      	asrs	r2, r2, #6
 8000f94:	17db      	asrs	r3, r3, #31
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8000f9a:	6013      	str	r3, [r2, #0]
			u += us;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f240 1257 	movw	r2, #343	; 0x157
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8000fa8:	6013      	str	r3, [r2, #0]
}
 8000faa:	bf00      	nop
 8000fac:	37c0      	adds	r7, #192	; 0xc0
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	ffffed0a 	.word	0xffffed0a
 8000fb8:	200000a0 	.word	0x200000a0
 8000fbc:	200000b8 	.word	0x200000b8
 8000fc0:	431bde83 	.word	0x431bde83
 8000fc4:	20000234 	.word	0x20000234
 8000fc8:	10624dd3 	.word	0x10624dd3

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f000 fe6d 	bl	8001cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f881 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 fb23 	bl	8001624 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fde:	f000 fafb 	bl	80015d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fe2:	f000 fac9 	bl	8001578 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fe6:	f000 f901 	bl	80011ec <MX_ADC1_Init>
  MX_ADC2_Init();
 8000fea:	f000 f979 	bl	80012e0 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000fee:	f000 f9dd 	bl	80013ac <MX_DAC1_Init>
  MX_TIM2_Init();
 8000ff2:	f000 fa19 	bl	8001428 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ff6:	f000 fa71 	bl	80014dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	482a      	ldr	r0, [pc, #168]	; (80010a8 <main+0xdc>)
 8000ffe:	f002 f936 	bl	800326e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001002:	2110      	movs	r1, #16
 8001004:	4828      	ldr	r0, [pc, #160]	; (80010a8 <main+0xdc>)
 8001006:	f002 f932 	bl	800326e <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf0, SIZE);
 800100a:	2207      	movs	r2, #7
 800100c:	4927      	ldr	r1, [pc, #156]	; (80010ac <main+0xe0>)
 800100e:	4828      	ldr	r0, [pc, #160]	; (80010b0 <main+0xe4>)
 8001010:	f001 fa04 	bl	800241c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf1, SIZE);
 8001014:	2207      	movs	r2, #7
 8001016:	4927      	ldr	r1, [pc, #156]	; (80010b4 <main+0xe8>)
 8001018:	4827      	ldr	r0, [pc, #156]	; (80010b8 <main+0xec>)
 800101a:	f001 f9ff 	bl	800241c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 800101e:	4827      	ldr	r0, [pc, #156]	; (80010bc <main+0xf0>)
 8001020:	f004 f994 	bl	800534c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001024:	2104      	movs	r1, #4
 8001026:	4826      	ldr	r0, [pc, #152]	; (80010c0 <main+0xf4>)
 8001028:	f004 f9e6 	bl	80053f8 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <main+0xf4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	639a      	str	r2, [r3, #56]	; 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char msg[20];
  while (1)
  {
	  sprintf(msg, "x0 = %d ",y[0]);
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <main+0xf8>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4923      	ldr	r1, [pc, #140]	; (80010c8 <main+0xfc>)
 800103c:	4618      	mov	r0, r3
 800103e:	f006 f80b 	bl	8007058 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f8c3 	bl	80001d0 <strlen>
 800104a:	4603      	mov	r3, r0
 800104c:	b29a      	uxth	r2, r3
 800104e:	1d39      	adds	r1, r7, #4
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	481d      	ldr	r0, [pc, #116]	; (80010cc <main+0x100>)
 8001056:	f005 fa65 	bl	8006524 <HAL_UART_Transmit>
	  sprintf(msg, "x1 = %d ",y[1]);
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <main+0xf8>)
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	491b      	ldr	r1, [pc, #108]	; (80010d0 <main+0x104>)
 8001062:	4618      	mov	r0, r3
 8001064:	f005 fff8 	bl	8007058 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f8b0 	bl	80001d0 <strlen>
 8001070:	4603      	mov	r3, r0
 8001072:	b29a      	uxth	r2, r3
 8001074:	1d39      	adds	r1, r7, #4
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	4814      	ldr	r0, [pc, #80]	; (80010cc <main+0x100>)
 800107c:	f005 fa52 	bl	8006524 <HAL_UART_Transmit>
	  sprintf(msg, "u = %d\r\n",integral);
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <main+0x108>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4914      	ldr	r1, [pc, #80]	; (80010d8 <main+0x10c>)
 8001088:	4618      	mov	r0, r3
 800108a:	f005 ffe5 	bl	8007058 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f89d 	bl	80001d0 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	b29a      	uxth	r2, r3
 800109a:	1d39      	adds	r1, r7, #4
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <main+0x100>)
 80010a2:	f005 fa3f 	bl	8006524 <HAL_UART_Transmit>
	  sprintf(msg, "x0 = %d ",y[0]);
 80010a6:	e7c5      	b.n	8001034 <main+0x68>
 80010a8:	200000b8 	.word	0x200000b8
 80010ac:	2000033c 	.word	0x2000033c
 80010b0:	200000cc 	.word	0x200000cc
 80010b4:	20000170 	.word	0x20000170
 80010b8:	20000180 	.word	0x20000180
 80010bc:	20000130 	.word	0x20000130
 80010c0:	20000234 	.word	0x20000234
 80010c4:	2000022c 	.word	0x2000022c
 80010c8:	0800787c 	.word	0x0800787c
 80010cc:	20000274 	.word	0x20000274
 80010d0:	08007888 	.word	0x08007888
 80010d4:	200000a4 	.word	0x200000a4
 80010d8:	08007894 	.word	0x08007894

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0b8      	sub	sp, #224	; 0xe0
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e6:	2244      	movs	r2, #68	; 0x44
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 ffac 	bl	8007048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2288      	movs	r2, #136	; 0x88
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f005 ff9e 	bl	8007048 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110c:	2302      	movs	r3, #2
 800110e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001116:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111a:	2310      	movs	r3, #16
 800111c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001132:	230a      	movs	r3, #10
 8001134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001138:	2307      	movs	r3, #7
 800113a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fe36 	bl	8003dc0 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800115a:	f000 facd 	bl	80016f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2303      	movs	r3, #3
 8001166:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800117c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001180:	2104      	movs	r1, #4
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fa02 	bl	800458c <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800118e:	f000 fab3 	bl	80016f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8001192:	f244 0302 	movw	r3, #16386	; 0x4002
 8001196:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800119c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011a0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011a2:	2302      	movs	r3, #2
 80011a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011aa:	2308      	movs	r3, #8
 80011ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011ae:	2307      	movs	r3, #7
 80011b0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011be:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fbe6 	bl	8004994 <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80011ce:	f000 fa93 	bl	80016f8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011d6:	f002 fd9d 	bl	8003d14 <HAL_PWREx_ControlVoltageScaling>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80011e0:	f000 fa8a 	bl	80016f8 <Error_Handler>
  }
}
 80011e4:	bf00      	nop
 80011e6:	37e0      	adds	r7, #224	; 0xe0
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001210:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <MX_ADC1_Init+0xec>)
 8001212:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001214:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <MX_ADC1_Init+0xe8>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001220:	4b2c      	ldr	r3, [pc, #176]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001226:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <MX_ADC1_Init+0xe8>)
 800122e:	2204      	movs	r2, #4
 8001230:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001234:	2200      	movs	r2, #0
 8001236:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <MX_ADC1_Init+0xe8>)
 800123a:	2201      	movs	r2, #1
 800123c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800123e:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001240:	2201      	movs	r2, #1
 8001242:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_ADC1_Init+0xe8>)
 800124e:	2201      	movs	r2, #1
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001254:	2200      	movs	r2, #0
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_ADC1_Init+0xe8>)
 800125a:	2200      	movs	r2, #0
 800125c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800125e:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001268:	2200      	movs	r2, #0
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_ADC1_Init+0xe8>)
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001274:	4817      	ldr	r0, [pc, #92]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001276:	f000 ff7d 	bl	8002174 <HAL_ADC_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001280:	f000 fa3a 	bl	80016f8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	4811      	ldr	r0, [pc, #68]	; (80012d4 <MX_ADC1_Init+0xe8>)
 8001290:	f001 fe0e 	bl	8002eb0 <HAL_ADCEx_MultiModeConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800129a:	f000 fa2d 	bl	80016f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_ADC1_Init+0xf0>)
 80012a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a2:	2306      	movs	r3, #6
 80012a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80012a6:	2305      	movs	r3, #5
 80012a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012aa:	237f      	movs	r3, #127	; 0x7f
 80012ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012ae:	2304      	movs	r3, #4
 80012b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <MX_ADC1_Init+0xe8>)
 80012bc:	f001 f980 	bl	80025c0 <HAL_ADC_ConfigChannel>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80012c6:	f000 fa17 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000180 	.word	0x20000180
 80012d8:	50040000 	.word	0x50040000
 80012dc:	14f00020 	.word	0x14f00020

080012e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012e6:	463b      	mov	r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MX_ADC2_Init+0xc0>)
 80012f8:	4a2a      	ldr	r2, [pc, #168]	; (80013a4 <MX_ADC2_Init+0xc4>)
 80012fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_ADC2_Init+0xc0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <MX_ADC2_Init+0xc0>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001308:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <MX_ADC2_Init+0xc0>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800130e:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <MX_ADC2_Init+0xc0>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_ADC2_Init+0xc0>)
 8001316:	2204      	movs	r2, #4
 8001318:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_ADC2_Init+0xc0>)
 800131c:	2200      	movs	r2, #0
 800131e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_ADC2_Init+0xc0>)
 8001322:	2201      	movs	r2, #1
 8001324:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_ADC2_Init+0xc0>)
 8001328:	2201      	movs	r2, #1
 800132a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_ADC2_Init+0xc0>)
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_ADC2_Init+0xc0>)
 8001336:	2201      	movs	r2, #1
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_ADC2_Init+0xc0>)
 800133c:	2200      	movs	r2, #0
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_ADC2_Init+0xc0>)
 8001342:	2200      	movs	r2, #0
 8001344:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_ADC2_Init+0xc0>)
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_ADC2_Init+0xc0>)
 8001350:	2200      	movs	r2, #0
 8001352:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_ADC2_Init+0xc0>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800135c:	4810      	ldr	r0, [pc, #64]	; (80013a0 <MX_ADC2_Init+0xc0>)
 800135e:	f000 ff09 	bl	8002174 <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8001368:	f000 f9c6 	bl	80016f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_ADC2_Init+0xc8>)
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001370:	2306      	movs	r3, #6
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001374:	2305      	movs	r3, #5
 8001376:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001378:	237f      	movs	r3, #127	; 0x7f
 800137a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800137c:	2304      	movs	r3, #4
 800137e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001384:	463b      	mov	r3, r7
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_ADC2_Init+0xc0>)
 800138a:	f001 f919 	bl	80025c0 <HAL_ADC_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001394:	f000 f9b0 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200000cc 	.word	0x200000cc
 80013a4:	50040100 	.word	0x50040100
 80013a8:	19200040 	.word	0x19200040

080013ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2224      	movs	r2, #36	; 0x24
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f005 fe45 	bl	8007048 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_DAC1_Init+0x74>)
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <MX_DAC1_Init+0x78>)
 80013c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013c4:	4816      	ldr	r0, [pc, #88]	; (8001420 <MX_DAC1_Init+0x74>)
 80013c6:	f001 ff30 	bl	800322a <HAL_DAC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013d0:	f000 f992 	bl	80016f8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	480c      	ldr	r0, [pc, #48]	; (8001420 <MX_DAC1_Init+0x74>)
 80013f0:	f001 ffaf 	bl	8003352 <HAL_DAC_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80013fa:	f000 f97d 	bl	80016f8 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2210      	movs	r2, #16
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_DAC1_Init+0x74>)
 800140a:	f001 ffa2 	bl	8003352 <HAL_DAC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001414:	f000 f970 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200000b8 	.word	0x200000b8
 8001424:	40007400 	.word	0x40007400

08001428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	615a      	str	r2, [r3, #20]
 800144a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_TIM2_Init+0xb0>)
 800144e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <MX_TIM2_Init+0xb0>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_TIM2_Init+0xb0>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_TIM2_Init+0xb0>)
 8001462:	f240 623f 	movw	r2, #1599	; 0x63f
 8001466:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_TIM2_Init+0xb0>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_TIM2_Init+0xb0>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001474:	4818      	ldr	r0, [pc, #96]	; (80014d8 <MX_TIM2_Init+0xb0>)
 8001476:	f003 ff93 	bl	80053a0 <HAL_TIM_PWM_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001480:	f000 f93a 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4811      	ldr	r0, [pc, #68]	; (80014d8 <MX_TIM2_Init+0xb0>)
 8001494:	f004 ff52 	bl	800633c <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800149e:	f000 f92b 	bl	80016f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a2:	2360      	movs	r3, #96	; 0x60
 80014a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	2204      	movs	r2, #4
 80014b6:	4619      	mov	r1, r3
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_TIM2_Init+0xb0>)
 80014ba:	f004 f915 	bl	80056e8 <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014c4:	f000 f918 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_TIM2_Init+0xb0>)
 80014ca:	f000 faa1 	bl	8001a10 <HAL_TIM_MspPostInit>

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000234 	.word	0x20000234

080014dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_TIM3_Init+0x94>)
 80014fc:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <MX_TIM3_Init+0x98>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_TIM3_Init+0x94>)
 8001502:	224f      	movs	r2, #79	; 0x4f
 8001504:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_TIM3_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_TIM3_Init+0x94>)
 800150e:	2263      	movs	r2, #99	; 0x63
 8001510:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_TIM3_Init+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_TIM3_Init+0x94>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <MX_TIM3_Init+0x94>)
 8001520:	f003 fee8 	bl	80052f4 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800152a:	f000 f8e5 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_TIM3_Init+0x94>)
 800153c:	f004 f9ec 	bl	8005918 <HAL_TIM_ConfigClockSource>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001546:	f000 f8d7 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <MX_TIM3_Init+0x94>)
 8001558:	f004 fef0 	bl	800633c <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001562:	f000 f8c9 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000130 	.word	0x20000130
 8001574:	40000400 	.word	0x40000400

08001578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <MX_USART2_UART_Init+0x5c>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001584:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015bc:	f004 ff64 	bl	8006488 <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015c6:	f000 f897 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000274 	.word	0x20000274
 80015d4:	40004400 	.word	0x40004400

080015d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_DMA_Init+0x48>)
 80015e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <MX_DMA_Init+0x48>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6493      	str	r3, [r2, #72]	; 0x48
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <MX_DMA_Init+0x48>)
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	200b      	movs	r0, #11
 80015fc:	f001 fddf 	bl	80031be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001600:	200b      	movs	r0, #11
 8001602:	f001 fdf8 	bl	80031f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	200c      	movs	r0, #12
 800160c:	f001 fdd7 	bl	80031be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001610:	200c      	movs	r0, #12
 8001612:	f001 fdf0 	bl	80031f6 <HAL_NVIC_EnableIRQ>

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <MX_GPIO_Init+0xc8>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a2b      	ldr	r2, [pc, #172]	; (80016ec <MX_GPIO_Init+0xc8>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <MX_GPIO_Init+0xc8>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <MX_GPIO_Init+0xc8>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	4a25      	ldr	r2, [pc, #148]	; (80016ec <MX_GPIO_Init+0xc8>)
 8001658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800165c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <MX_GPIO_Init+0xc8>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <MX_GPIO_Init+0xc8>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	4a1f      	ldr	r2, [pc, #124]	; (80016ec <MX_GPIO_Init+0xc8>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MX_GPIO_Init+0xc8>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_GPIO_Init+0xc8>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	4a19      	ldr	r2, [pc, #100]	; (80016ec <MX_GPIO_Init+0xc8>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_GPIO_Init+0xc8>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f002 fb10 	bl	8003cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_GPIO_Init+0xcc>)
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_GPIO_Init+0xd0>)
 80016be:	f002 f95b 	bl	8003978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016de:	f002 f94b 	bl	8003978 <HAL_GPIO_Init>

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000
 80016f0:	10210000 	.word	0x10210000
 80016f4:	48000800 	.word	0x48000800

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_MspInit+0x44>)
 8001710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001712:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_MspInit+0x44>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6613      	str	r3, [r2, #96]	; 0x60
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_MspInit+0x44>)
 800171c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_MspInit+0x44>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_MspInit+0x44>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6593      	str	r3, [r2, #88]	; 0x58
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_MspInit+0x44>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000

08001750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a5f      	ldr	r2, [pc, #380]	; (80018ec <HAL_ADC_MspInit+0x19c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d159      	bne.n	8001826 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001772:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <HAL_ADC_MspInit+0x1a0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a5d      	ldr	r2, [pc, #372]	; (80018f0 <HAL_ADC_MspInit+0x1a0>)
 800177a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800177c:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <HAL_ADC_MspInit+0x1a0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d10b      	bne.n	800179c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001784:	4b5b      	ldr	r3, [pc, #364]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	4a5a      	ldr	r2, [pc, #360]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 800178a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800178e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001790:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	4a54      	ldr	r2, [pc, #336]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a8:	4b52      	ldr	r3, [pc, #328]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017b4:	2301      	movs	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017b8:	230b      	movs	r3, #11
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ca:	f002 f8d5 	bl	8003978 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80017ce:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 80017d0:	4a4a      	ldr	r2, [pc, #296]	; (80018fc <HAL_ADC_MspInit+0x1ac>)
 80017d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80017d4:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e0:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017e6:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ec:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 80017ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017f4:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 80017f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 80017fe:	2220      	movs	r2, #32
 8001800:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001802:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001808:	483b      	ldr	r0, [pc, #236]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 800180a:	f001 febd 	bl	8003588 <HAL_DMA_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001814:	f7ff ff70 	bl	80016f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a37      	ldr	r2, [pc, #220]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 800181c:	64da      	str	r2, [r3, #76]	; 0x4c
 800181e:	4a36      	ldr	r2, [pc, #216]	; (80018f8 <HAL_ADC_MspInit+0x1a8>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001824:	e05d      	b.n	80018e2 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a35      	ldr	r2, [pc, #212]	; (8001900 <HAL_ADC_MspInit+0x1b0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d158      	bne.n	80018e2 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001830:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_ADC_MspInit+0x1a0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	4a2e      	ldr	r2, [pc, #184]	; (80018f0 <HAL_ADC_MspInit+0x1a0>)
 8001838:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_ADC_MspInit+0x1a0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d10b      	bne.n	800185a <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001842:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 8001848:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001866:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <HAL_ADC_MspInit+0x1a4>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001872:	2302      	movs	r3, #2
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001876:	230b      	movs	r3, #11
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f002 f876 	bl	8003978 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 800188e:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <HAL_ADC_MspInit+0x1b8>)
 8001890:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 80018a6:	2280      	movs	r2, #128	; 0x80
 80018a8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 80018ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 80018b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 80018bc:	2220      	movs	r2, #32
 80018be:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80018c6:	480f      	ldr	r0, [pc, #60]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 80018c8:	f001 fe5e 	bl	8003588 <HAL_DMA_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_ADC_MspInit+0x186>
      Error_Handler();
 80018d2:	f7ff ff11 	bl	80016f8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 80018da:	64da      	str	r2, [r3, #76]	; 0x4c
 80018dc:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_ADC_MspInit+0x1b4>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80018e2:	bf00      	nop
 80018e4:	3730      	adds	r7, #48	; 0x30
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	50040000 	.word	0x50040000
 80018f0:	200000a8 	.word	0x200000a8
 80018f4:	40021000 	.word	0x40021000
 80018f8:	200001e4 	.word	0x200001e4
 80018fc:	40020008 	.word	0x40020008
 8001900:	50040100 	.word	0x50040100
 8001904:	200002f4 	.word	0x200002f4
 8001908:	4002001c 	.word	0x4002001c

0800190c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a15      	ldr	r2, [pc, #84]	; (8001980 <HAL_DAC_MspInit+0x74>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d124      	bne.n	8001978 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_DAC_MspInit+0x78>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	4a14      	ldr	r2, [pc, #80]	; (8001984 <HAL_DAC_MspInit+0x78>)
 8001934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001938:	6593      	str	r3, [r2, #88]	; 0x58
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_DAC_MspInit+0x78>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_DAC_MspInit+0x78>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_DAC_MspInit+0x78>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_DAC_MspInit+0x78>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800195e:	2330      	movs	r3, #48	; 0x30
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001962:	2303      	movs	r3, #3
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f002 f800 	bl	8003978 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40007400 	.word	0x40007400
 8001984:	40021000 	.word	0x40021000

08001988 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001998:	d10b      	bne.n	80019b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_TIM_PWM_MspInit+0x38>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_TIM_PWM_MspInit+0x38>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_TIM_PWM_MspInit+0x38>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <HAL_TIM_Base_MspInit+0x44>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d113      	bne.n	80019fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_TIM_Base_MspInit+0x48>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_TIM_Base_MspInit+0x48>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6593      	str	r3, [r2, #88]	; 0x58
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_TIM_Base_MspInit+0x48>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	201d      	movs	r0, #29
 80019f4:	f001 fbe3 	bl	80031be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019f8:	201d      	movs	r0, #29
 80019fa:	f001 fbfc 	bl	80031f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a30:	d11b      	bne.n	8001a6a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_TIM_MspPostInit+0x64>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <HAL_TIM_MspPostInit+0x64>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <HAL_TIM_MspPostInit+0x64>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4619      	mov	r1, r3
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <HAL_TIM_MspPostInit+0x68>)
 8001a66:	f001 ff87 	bl	8003978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	48000400 	.word	0x48000400

08001a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_UART_MspInit+0x7c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d128      	bne.n	8001af0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a16      	ldr	r2, [pc, #88]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a10      	ldr	r2, [pc, #64]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_UART_MspInit+0x80>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ace:	230c      	movs	r3, #12
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ada:	2303      	movs	r3, #3
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ade:	2307      	movs	r3, #7
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aec:	f001 ff44 	bl	8003978 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af0:	bf00      	nop
 8001af2:	3728      	adds	r7, #40	; 0x28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40004400 	.word	0x40004400
 8001afc:	40021000 	.word	0x40021000

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler+0x4>

08001b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler+0x4>

08001b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <UsageFault_Handler+0x4>

08001b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b54:	f000 f906 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <DMA1_Channel1_IRQHandler+0x10>)
 8001b62:	f001 fe29 	bl	80037b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200001e4 	.word	0x200001e4

08001b70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <DMA1_Channel2_IRQHandler+0x10>)
 8001b76:	f001 fe1f 	bl	80037b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200002f4 	.word	0x200002f4

08001b84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIM3_IRQHandler+0x10>)
 8001b8a:	f003 fc8d 	bl	80054a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000130 	.word	0x20000130

08001b98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <_sbrk+0x50>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <_sbrk+0x16>
		heap_end = &end;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <_sbrk+0x50>)
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <_sbrk+0x54>)
 8001bac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <_sbrk+0x50>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <_sbrk+0x50>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	466a      	mov	r2, sp
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d907      	bls.n	8001bd2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001bc2:	f005 fa17 	bl	8006ff4 <__errno>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	230c      	movs	r3, #12
 8001bca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd0:	e006      	b.n	8001be0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <_sbrk+0x50>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <_sbrk+0x50>)
 8001bdc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200000ac 	.word	0x200000ac
 8001bec:	20000358 	.word	0x20000358

08001bf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <SystemInit+0x64>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	4a16      	ldr	r2, [pc, #88]	; (8001c54 <SystemInit+0x64>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <SystemInit+0x68>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <SystemInit+0x68>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <SystemInit+0x68>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <SystemInit+0x68>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a0f      	ldr	r2, [pc, #60]	; (8001c58 <SystemInit+0x68>)
 8001c1c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c20:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <SystemInit+0x68>)
 8001c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <SystemInit+0x68>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <SystemInit+0x68>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <SystemInit+0x68>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SystemInit+0x64>)
 8001c42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c46:	609a      	str	r2, [r3, #8]
#endif
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	40021000 	.word	0x40021000

08001c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c94 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c62:	e003      	b.n	8001c6c <LoopCopyDataInit>

08001c64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c6a:	3104      	adds	r1, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c74:	d3f6      	bcc.n	8001c64 <CopyDataInit>
	ldr	r2, =_sbss
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c78:	e002      	b.n	8001c80 <LoopFillZerobss>

08001c7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c7c:	f842 3b04 	str.w	r3, [r2], #4

08001c80 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <LoopForever+0x16>)
	cmp	r2, r3
 8001c82:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c84:	d3f9      	bcc.n	8001c7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c86:	f7ff ffb3 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f005 f9b9 	bl	8007000 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c8e:	f7ff f99d 	bl	8000fcc <main>

08001c92 <LoopForever>:

LoopForever:
    b LoopForever
 8001c92:	e7fe      	b.n	8001c92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c94:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001c98:	0800792c 	.word	0x0800792c
	ldr	r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ca0:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001ca4:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001ca8:	20000354 	.word	0x20000354

08001cac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC1_2_IRQHandler>
	...

08001cb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_Init+0x3c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <HAL_Init+0x3c>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc6:	2003      	movs	r0, #3
 8001cc8:	f001 fa6e 	bl	80031a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f000 f80f 	bl	8001cf0 <HAL_InitTick>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	e001      	b.n	8001ce2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cde:	f7ff fd13 	bl	8001708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40022000 	.word	0x40022000

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_InitTick+0x68>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d022      	beq.n	8001d4a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_InitTick+0x6c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_InitTick+0x68>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fa7a 	bl	8003212 <HAL_SYSTICK_Config>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10f      	bne.n	8001d44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	d809      	bhi.n	8001d3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d32:	f001 fa44 	bl	80031be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_InitTick+0x70>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e007      	b.n	8001d4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	e004      	b.n	8001d4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e001      	b.n	8001d4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_IncTick+0x1c>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_IncTick+0x20>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a03      	ldr	r2, [pc, #12]	; (8001d80 <HAL_IncTick+0x1c>)
 8001d74:	6013      	str	r3, [r2, #0]
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	2000034c 	.word	0x2000034c
 8001d84:	20000008 	.word	0x20000008

08001d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_GetTick+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	2000034c 	.word	0x2000034c

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff ffee 	bl	8001d88 <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d004      	beq.n	8001dc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_Delay+0x40>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc4:	bf00      	nop
 8001dc6:	f7ff ffdf 	bl	8001d88 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d8f7      	bhi.n	8001dc6 <HAL_Delay+0x26>
  {
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008

08001de4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e4c:	b490      	push	{r4, r7}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3360      	adds	r3, #96	; 0x60
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e68:	6822      	ldr	r2, [r4, #0]
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <LL_ADC_SetOffset+0x40>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e7e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc90      	pop	{r4, r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	03fff000 	.word	0x03fff000

08001e90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e90:	b490      	push	{r4, r7}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3360      	adds	r3, #96	; 0x60
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc90      	pop	{r4, r7}
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001eb8:	b490      	push	{r4, r7}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3360      	adds	r3, #96	; 0x60
 8001ec8:	461a      	mov	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc90      	pop	{r4, r7}
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f0e:	b490      	push	{r4, r7}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3330      	adds	r3, #48	; 0x30
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	4413      	add	r3, r2
 8001f2c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f2e:	6822      	ldr	r2, [r4, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	211f      	movs	r1, #31
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	401a      	ands	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	0e9b      	lsrs	r3, r3, #26
 8001f44:	f003 011f 	and.w	r1, r3, #31
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc90      	pop	{r4, r7}
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f60:	b490      	push	{r4, r7}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3314      	adds	r3, #20
 8001f70:	461a      	mov	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	0e5b      	lsrs	r3, r3, #25
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	4413      	add	r3, r2
 8001f7e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f80:	6822      	ldr	r2, [r4, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	0d1b      	lsrs	r3, r3, #20
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	2107      	movs	r1, #7
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	401a      	ands	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	0d1b      	lsrs	r3, r3, #20
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc90      	pop	{r4, r7}
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	401a      	ands	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0318 	and.w	r3, r3, #24
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fd4:	40d9      	lsrs	r1, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	400b      	ands	r3, r1
 8001fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	0007ffff 	.word	0x0007ffff

08001ff8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 031f 	and.w	r3, r3, #31
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6093      	str	r3, [r2, #8]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800204c:	d101      	bne.n	8002052 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002074:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800209c:	d101      	bne.n	80020a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <LL_ADC_IsEnabled+0x18>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_ADC_IsEnabled+0x1a>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800210e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002112:	f043 0204 	orr.w	r2, r3, #4
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b04      	cmp	r3, #4
 8002138:	d101      	bne.n	800213e <LL_ADC_REG_IsConversionOngoing+0x18>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d101      	bne.n	8002164 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e134      	b.n	80023f8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff fad7 	bl	8001750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff3f 	bl	8002038 <LL_ADC_IsDeepPowerDownEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff25 	bl	8002014 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff5a 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d113      	bne.n	8002202 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff3e 	bl	8002060 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021e4:	4b86      	ldr	r3, [pc, #536]	; (8002400 <HAL_ADC_Init+0x28c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	099b      	lsrs	r3, r3, #6
 80021ea:	4a86      	ldr	r2, [pc, #536]	; (8002404 <HAL_ADC_Init+0x290>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021f4:	e002      	b.n	80021fc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f9      	bne.n	80021f6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff3e 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10d      	bne.n	800222e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	f043 0210 	orr.w	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff77 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 8002238:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 80cf 	bne.w	80023e6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 80cb 	bne.w	80023e6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002258:	f043 0202 	orr.w	r2, r3, #2
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff37 	bl	80020d8 <LL_ADC_IsEnabled>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d115      	bne.n	800229c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002270:	4865      	ldr	r0, [pc, #404]	; (8002408 <HAL_ADC_Init+0x294>)
 8002272:	f7ff ff31 	bl	80020d8 <LL_ADC_IsEnabled>
 8002276:	4604      	mov	r4, r0
 8002278:	4864      	ldr	r0, [pc, #400]	; (800240c <HAL_ADC_Init+0x298>)
 800227a:	f7ff ff2d 	bl	80020d8 <LL_ADC_IsEnabled>
 800227e:	4603      	mov	r3, r0
 8002280:	431c      	orrs	r4, r3
 8002282:	4863      	ldr	r0, [pc, #396]	; (8002410 <HAL_ADC_Init+0x29c>)
 8002284:	f7ff ff28 	bl	80020d8 <LL_ADC_IsEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	4323      	orrs	r3, r4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4619      	mov	r1, r3
 8002296:	485f      	ldr	r0, [pc, #380]	; (8002414 <HAL_ADC_Init+0x2a0>)
 8002298:	f7ff fda4 	bl	8001de4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7e5b      	ldrb	r3, [r3, #25]
 80022a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d106      	bne.n	80022d8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	3b01      	subs	r3, #1
 80022d0:	045b      	lsls	r3, r3, #17
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_ADC_Init+0x2a4>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	430b      	orrs	r3, r1
 8002306:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff0a 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 8002312:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff17 	bl	800214c <LL_ADC_INJ_IsConversionOngoing>
 800231e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d13d      	bne.n	80023a2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d13a      	bne.n	80023a2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002330:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002338:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002348:	f023 0302 	bic.w	r3, r3, #2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	69b9      	ldr	r1, [r7, #24]
 8002352:	430b      	orrs	r3, r1
 8002354:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800235c:	2b01      	cmp	r3, #1
 800235e:	d118      	bne.n	8002392 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800236a:	f023 0304 	bic.w	r3, r3, #4
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800237c:	4311      	orrs	r1, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002382:	430a      	orrs	r2, r1
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	611a      	str	r2, [r3, #16]
 8002390:	e007      	b.n	80023a2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10c      	bne.n	80023c4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	f023 010f 	bic.w	r1, r3, #15
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	1e5a      	subs	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
 80023c2:	e007      	b.n	80023d4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 020f 	bic.w	r2, r2, #15
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d8:	f023 0303 	bic.w	r3, r3, #3
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
 80023e4:	e007      	b.n	80023f6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f043 0210 	orr.w	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3724      	adds	r7, #36	; 0x24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd90      	pop	{r4, r7, pc}
 8002400:	20000000 	.word	0x20000000
 8002404:	053e2d63 	.word	0x053e2d63
 8002408:	50040000 	.word	0x50040000
 800240c:	50040100 	.word	0x50040100
 8002410:	50040200 	.word	0x50040200
 8002414:	50040300 	.word	0x50040300
 8002418:	fff0c007 	.word	0xfff0c007

0800241c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002428:	4850      	ldr	r0, [pc, #320]	; (800256c <HAL_ADC_Start_DMA+0x150>)
 800242a:	f7ff fde5 	bl	8001ff8 <LL_ADC_GetMultimode>
 800242e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fe76 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 808e 	bne.w	800255e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_ADC_Start_DMA+0x34>
 800244c:	2302      	movs	r3, #2
 800244e:	e089      	b.n	8002564 <HAL_ADC_Start_DMA+0x148>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b05      	cmp	r3, #5
 8002462:	d002      	beq.n	800246a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b09      	cmp	r3, #9
 8002468:	d172      	bne.n	8002550 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fc0c 	bl	8002c88 <ADC_Enable>
 8002470:	4603      	mov	r3, r0
 8002472:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d165      	bne.n	8002546 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002482:	f023 0301 	bic.w	r3, r3, #1
 8002486:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a37      	ldr	r2, [pc, #220]	; (8002570 <HAL_ADC_Start_DMA+0x154>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d002      	beq.n	800249e <HAL_ADC_Start_DMA+0x82>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	e000      	b.n	80024a0 <HAL_ADC_Start_DMA+0x84>
 800249e:	4b35      	ldr	r3, [pc, #212]	; (8002574 <HAL_ADC_Start_DMA+0x158>)
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d002      	beq.n	80024ae <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	f023 0206 	bic.w	r2, r3, #6
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	659a      	str	r2, [r3, #88]	; 0x58
 80024d2:	e002      	b.n	80024da <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	4a26      	ldr	r2, [pc, #152]	; (8002578 <HAL_ADC_Start_DMA+0x15c>)
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	4a25      	ldr	r2, [pc, #148]	; (800257c <HAL_ADC_Start_DMA+0x160>)
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	4a24      	ldr	r2, [pc, #144]	; (8002580 <HAL_ADC_Start_DMA+0x164>)
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	221c      	movs	r2, #28
 80024f8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0210 	orr.w	r2, r2, #16
 8002510:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3340      	adds	r3, #64	; 0x40
 800252c:	4619      	mov	r1, r3
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f001 f8e1 	bl	80036f8 <HAL_DMA_Start_IT>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fddd 	bl	80020fe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002544:	e00d      	b.n	8002562 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800254e:	e008      	b.n	8002562 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800255c:	e001      	b.n	8002562 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800255e:	2302      	movs	r3, #2
 8002560:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002562:	7dfb      	ldrb	r3, [r7, #23]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	50040300 	.word	0x50040300
 8002570:	50040100 	.word	0x50040100
 8002574:	50040000 	.word	0x50040000
 8002578:	08002d3d 	.word	0x08002d3d
 800257c:	08002e15 	.word	0x08002e15
 8002580:	08002e31 	.word	0x08002e31

08002584 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b0a6      	sub	sp, #152	; 0x98
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x22>
 80025de:	2302      	movs	r3, #2
 80025e0:	e348      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x6b4>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fd99 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 8329 	bne.w	8002c4e <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b05      	cmp	r3, #5
 8002602:	d824      	bhi.n	800264e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	3b02      	subs	r3, #2
 800260a:	2b03      	cmp	r3, #3
 800260c:	d81b      	bhi.n	8002646 <HAL_ADC_ConfigChannel+0x86>
 800260e:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <HAL_ADC_ConfigChannel+0x54>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	08002625 	.word	0x08002625
 8002618:	0800262d 	.word	0x0800262d
 800261c:	08002635 	.word	0x08002635
 8002620:	0800263d 	.word	0x0800263d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	220c      	movs	r2, #12
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	e011      	b.n	8002650 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2212      	movs	r2, #18
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	e00d      	b.n	8002650 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2218      	movs	r2, #24
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	e009      	b.n	8002650 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	e004      	b.n	8002650 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2206      	movs	r2, #6
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	e000      	b.n	8002650 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800264e:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	f7ff fc56 	bl	8001f0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fd5d 	bl	8002126 <LL_ADC_REG_IsConversionOngoing>
 800266c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fd69 	bl	800214c <LL_ADC_INJ_IsConversionOngoing>
 800267a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800267e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 8148 	bne.w	8002918 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 8143 	bne.w	8002918 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	461a      	mov	r2, r3
 80026a0:	f7ff fc5e 	bl	8001f60 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	08db      	lsrs	r3, r3, #3
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d00a      	beq.n	80026dc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6919      	ldr	r1, [r3, #16]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026d6:	f7ff fbb9 	bl	8001e4c <LL_ADC_SetOffset>
 80026da:	e11d      	b.n	8002918 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fbd4 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x148>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fbc9 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	0e9b      	lsrs	r3, r3, #26
 8002702:	f003 021f 	and.w	r2, r3, #31
 8002706:	e012      	b.n	800272e <HAL_ADC_ConfigChannel+0x16e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fbbe 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002724:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x186>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	e00a      	b.n	800275c <HAL_ADC_ConfigChannel+0x19c>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fba5 	bl	8001eb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2101      	movs	r1, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fb8b 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <HAL_ADC_ConfigChannel+0x1da>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fb80 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	e010      	b.n	80027bc <HAL_ADC_ConfigChannel+0x1fc>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2101      	movs	r1, #1
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fb75 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x214>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	e00a      	b.n	80027ea <HAL_ADC_ConfigChannel+0x22a>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80027e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d106      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2200      	movs	r2, #0
 80027f4:	2101      	movs	r1, #1
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fb5e 	bl	8001eb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2102      	movs	r1, #2
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fb44 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x268>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2102      	movs	r1, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fb39 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	0e9b      	lsrs	r3, r3, #26
 8002822:	f003 021f 	and.w	r2, r3, #31
 8002826:	e010      	b.n	800284a <HAL_ADC_ConfigChannel+0x28a>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2102      	movs	r1, #2
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fb2e 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x2a2>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0e9b      	lsrs	r3, r3, #26
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	e00a      	b.n	8002878 <HAL_ADC_ConfigChannel+0x2b8>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	429a      	cmp	r2, r3
 800287a:	d106      	bne.n	800288a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2200      	movs	r2, #0
 8002882:	2102      	movs	r1, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fb17 	bl	8001eb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2103      	movs	r1, #3
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fafd 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x2f6>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2103      	movs	r1, #3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff faf2 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	0e9b      	lsrs	r3, r3, #26
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	e010      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x318>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2103      	movs	r1, #3
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fae7 	bl	8001e90 <LL_ADC_GetOffsetChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x330>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	0e9b      	lsrs	r3, r3, #26
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	e00a      	b.n	8002906 <HAL_ADC_ConfigChannel+0x346>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80028fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	429a      	cmp	r2, r3
 8002908:	d106      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	2103      	movs	r1, #3
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fad0 	bl	8001eb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fbdb 	bl	80020d8 <LL_ADC_IsEnabled>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	f040 810c 	bne.w	8002b42 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6819      	ldr	r1, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	461a      	mov	r2, r3
 8002938:	f7ff fb3a 	bl	8001fb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4aad      	ldr	r2, [pc, #692]	; (8002bf8 <HAL_ADC_ConfigChannel+0x638>)
 8002942:	4293      	cmp	r3, r2
 8002944:	f040 80fd 	bne.w	8002b42 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10b      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x3b0>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0e9b      	lsrs	r3, r3, #26
 800295e:	3301      	adds	r3, #1
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2b09      	cmp	r3, #9
 8002966:	bf94      	ite	ls
 8002968:	2301      	movls	r3, #1
 800296a:	2300      	movhi	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	e012      	b.n	8002996 <HAL_ADC_ConfigChannel+0x3d6>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800297e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	2b09      	cmp	r3, #9
 800298e:	bf94      	ite	ls
 8002990:	2301      	movls	r3, #1
 8002992:	2300      	movhi	r3, #0
 8002994:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002996:	2b00      	cmp	r3, #0
 8002998:	d064      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x3f6>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0e9b      	lsrs	r3, r3, #26
 80029ac:	3301      	adds	r3, #1
 80029ae:	069b      	lsls	r3, r3, #26
 80029b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029b4:	e00e      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x414>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	069b      	lsls	r3, r3, #26
 80029d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x434>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	3301      	adds	r3, #1
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	2101      	movs	r1, #1
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	e010      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x456>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	ea42 0103 	orr.w	r1, r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10a      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x47c>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	0e9b      	lsrs	r3, r3, #26
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f003 021f 	and.w	r2, r3, #31
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	051b      	lsls	r3, r3, #20
 8002a3a:	e011      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x4a0>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a60:	430b      	orrs	r3, r1
 8002a62:	e069      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d107      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x4c0>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	3301      	adds	r3, #1
 8002a78:	069b      	lsls	r3, r3, #26
 8002a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7e:	e00e      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x4de>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	61fb      	str	r3, [r7, #28]
  return result;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	069b      	lsls	r3, r3, #26
 8002a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x4fe>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0e9b      	lsrs	r3, r3, #26
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	e010      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x520>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	617b      	str	r3, [r7, #20]
  return result;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	ea42 0103 	orr.w	r1, r2, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10d      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x54c>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0e9b      	lsrs	r3, r3, #26
 8002af6:	3301      	adds	r3, #1
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	3b1e      	subs	r3, #30
 8002b04:	051b      	lsls	r3, r3, #20
 8002b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	e014      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x576>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	60fb      	str	r3, [r7, #12]
  return result;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b1e      	subs	r3, #30
 8002b30:	051b      	lsls	r3, r3, #20
 8002b32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b36:	430b      	orrs	r3, r1
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	6892      	ldr	r2, [r2, #8]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7ff fa0f 	bl	8001f60 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_ADC_ConfigChannel+0x63c>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 808c 	beq.w	8002c68 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b50:	482b      	ldr	r0, [pc, #172]	; (8002c00 <HAL_ADC_ConfigChannel+0x640>)
 8002b52:	f7ff f96d 	bl	8001e30 <LL_ADC_GetCommonPathInternalCh>
 8002b56:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a29      	ldr	r2, [pc, #164]	; (8002c04 <HAL_ADC_ConfigChannel+0x644>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d12b      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x5fc>
 8002b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d125      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <HAL_ADC_ConfigChannel+0x648>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x5c4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <HAL_ADC_ConfigChannel+0x64c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d16e      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	481c      	ldr	r0, [pc, #112]	; (8002c00 <HAL_ADC_ConfigChannel+0x640>)
 8002b90:	f7ff f93b 	bl	8001e0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b94:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_ADC_ConfigChannel+0x650>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <HAL_ADC_ConfigChannel+0x654>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	099a      	lsrs	r2, r3, #6
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bac:	e002      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bba:	e052      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a15      	ldr	r2, [pc, #84]	; (8002c18 <HAL_ADC_ConfigChannel+0x658>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d12a      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x65c>
 8002bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d124      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <HAL_ADC_ConfigChannel+0x648>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d004      	beq.n	8002be6 <HAL_ADC_ConfigChannel+0x626>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_ADC_ConfigChannel+0x64c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d13f      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4803      	ldr	r0, [pc, #12]	; (8002c00 <HAL_ADC_ConfigChannel+0x640>)
 8002bf2:	f7ff f90a 	bl	8001e0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bf6:	e036      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x6a6>
 8002bf8:	407f0000 	.word	0x407f0000
 8002bfc:	80080000 	.word	0x80080000
 8002c00:	50040300 	.word	0x50040300
 8002c04:	c7520000 	.word	0xc7520000
 8002c08:	50040000 	.word	0x50040000
 8002c0c:	50040200 	.word	0x50040200
 8002c10:	20000000 	.word	0x20000000
 8002c14:	053e2d63 	.word	0x053e2d63
 8002c18:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a16      	ldr	r2, [pc, #88]	; (8002c7c <HAL_ADC_ConfigChannel+0x6bc>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d120      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11a      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <HAL_ADC_ConfigChannel+0x6c0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d115      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c44:	4619      	mov	r1, r3
 8002c46:	480f      	ldr	r0, [pc, #60]	; (8002c84 <HAL_ADC_ConfigChannel+0x6c4>)
 8002c48:	f7ff f8df 	bl	8001e0a <LL_ADC_SetCommonPathInternalCh>
 8002c4c:	e00c      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f043 0220 	orr.w	r2, r3, #32
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002c60:	e002      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c62:	bf00      	nop
 8002c64:	e000      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c66:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c70:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3798      	adds	r7, #152	; 0x98
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	80000001 	.word	0x80000001
 8002c80:	50040000 	.word	0x50040000
 8002c84:	50040300 	.word	0x50040300

08002c88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fa1f 	bl	80020d8 <LL_ADC_IsEnabled>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d146      	bne.n	8002d2e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <ADC_Enable+0xb0>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f043 0210 	orr.w	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f043 0201 	orr.w	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e032      	b.n	8002d30 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff f9ee 	bl	80020b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cd4:	f7ff f858 	bl	8001d88 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cda:	e021      	b.n	8002d20 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff f9f9 	bl	80020d8 <LL_ADC_IsEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d104      	bne.n	8002cf6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff f9dd 	bl	80020b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cf6:	f7ff f847 	bl	8001d88 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d90d      	bls.n	8002d20 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f043 0210 	orr.w	r2, r3, #16
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e007      	b.n	8002d30 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d1d6      	bne.n	8002cdc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	8000003f 	.word	0x8000003f

08002d3c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d14b      	bne.n	8002dee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d021      	beq.n	8002db4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f8b7 	bl	8001ee8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d032      	beq.n	8002de6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d12b      	bne.n	8002de6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d11f      	bne.n	8002de6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
 8002db2:	e018      	b.n	8002de6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d111      	bne.n	8002de6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d105      	bne.n	8002de6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff fbcc 	bl	8002584 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002dec:	e00e      	b.n	8002e0c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7ff fbd6 	bl	80025ac <HAL_ADC_ErrorCallback>
}
 8002e00:	e004      	b.n	8002e0c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff fbb8 	bl	8002598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f043 0204 	orr.w	r2, r3, #4
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff fba8 	bl	80025ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <LL_ADC_IsEnabled>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <LL_ADC_IsEnabled+0x18>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <LL_ADC_IsEnabled+0x1a>
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_ADC_REG_IsConversionOngoing>:
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d101      	bne.n	8002ea2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b09f      	sub	sp, #124	; 0x7c
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e08f      	b.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a47      	ldr	r2, [pc, #284]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d102      	bne.n	8002ee6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002ee0:	4b46      	ldr	r3, [pc, #280]	; (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	e001      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e072      	b.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ffbd 	bl	8002e8a <LL_ADC_REG_IsConversionOngoing>
 8002f10:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ffb7 	bl	8002e8a <LL_ADC_REG_IsConversionOngoing>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d154      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d151      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f28:	4b35      	ldr	r3, [pc, #212]	; (8003000 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f2a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d02c      	beq.n	8002f8e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f46:	035b      	lsls	r3, r3, #13
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f50:	4829      	ldr	r0, [pc, #164]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002f52:	f7ff ff87 	bl	8002e64 <LL_ADC_IsEnabled>
 8002f56:	4604      	mov	r4, r0
 8002f58:	4828      	ldr	r0, [pc, #160]	; (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002f5a:	f7ff ff83 	bl	8002e64 <LL_ADC_IsEnabled>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	431c      	orrs	r4, r3
 8002f62:	4828      	ldr	r0, [pc, #160]	; (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f64:	f7ff ff7e 	bl	8002e64 <LL_ADC_IsEnabled>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4323      	orrs	r3, r4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d137      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f78:	f023 030f 	bic.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	6811      	ldr	r1, [r2, #0]
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	6892      	ldr	r2, [r2, #8]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	431a      	orrs	r2, r3
 8002f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f8c:	e028      	b.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f98:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f9a:	4817      	ldr	r0, [pc, #92]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002f9c:	f7ff ff62 	bl	8002e64 <LL_ADC_IsEnabled>
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	4816      	ldr	r0, [pc, #88]	; (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002fa4:	f7ff ff5e 	bl	8002e64 <LL_ADC_IsEnabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	431c      	orrs	r4, r3
 8002fac:	4815      	ldr	r0, [pc, #84]	; (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fae:	f7ff ff59 	bl	8002e64 <LL_ADC_IsEnabled>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4323      	orrs	r3, r4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d112      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fc2:	f023 030f 	bic.w	r3, r3, #15
 8002fc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fc8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fca:	e009      	b.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fde:	e000      	b.n	8002fe2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	377c      	adds	r7, #124	; 0x7c
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	50040000 	.word	0x50040000
 8002ffc:	50040100 	.word	0x50040100
 8003000:	50040300 	.word	0x50040300
 8003004:	50040200 	.word	0x50040200

08003008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <__NVIC_SetPriorityGrouping+0x44>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003024:	4013      	ands	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303a:	4a04      	ldr	r2, [pc, #16]	; (800304c <__NVIC_SetPriorityGrouping+0x44>)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	60d3      	str	r3, [r2, #12]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <__NVIC_GetPriorityGrouping+0x18>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	0a1b      	lsrs	r3, r3, #8
 800305a:	f003 0307 	and.w	r3, r3, #7
}
 800305e:	4618      	mov	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	2b00      	cmp	r3, #0
 800307c:	db0b      	blt.n	8003096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	f003 021f 	and.w	r2, r3, #31
 8003084:	4907      	ldr	r1, [pc, #28]	; (80030a4 <__NVIC_EnableIRQ+0x38>)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	2001      	movs	r0, #1
 800308e:	fa00 f202 	lsl.w	r2, r0, r2
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	e000e100 	.word	0xe000e100

080030a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	6039      	str	r1, [r7, #0]
 80030b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	db0a      	blt.n	80030d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	490c      	ldr	r1, [pc, #48]	; (80030f4 <__NVIC_SetPriority+0x4c>)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	0112      	lsls	r2, r2, #4
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	440b      	add	r3, r1
 80030cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d0:	e00a      	b.n	80030e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4908      	ldr	r1, [pc, #32]	; (80030f8 <__NVIC_SetPriority+0x50>)
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	3b04      	subs	r3, #4
 80030e0:	0112      	lsls	r2, r2, #4
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	440b      	add	r3, r1
 80030e6:	761a      	strb	r2, [r3, #24]
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000e100 	.word	0xe000e100
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b089      	sub	sp, #36	; 0x24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f1c3 0307 	rsb	r3, r3, #7
 8003116:	2b04      	cmp	r3, #4
 8003118:	bf28      	it	cs
 800311a:	2304      	movcs	r3, #4
 800311c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3304      	adds	r3, #4
 8003122:	2b06      	cmp	r3, #6
 8003124:	d902      	bls.n	800312c <NVIC_EncodePriority+0x30>
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3b03      	subs	r3, #3
 800312a:	e000      	b.n	800312e <NVIC_EncodePriority+0x32>
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003130:	f04f 32ff 	mov.w	r2, #4294967295
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	401a      	ands	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003144:	f04f 31ff 	mov.w	r1, #4294967295
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	43d9      	mvns	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	4313      	orrs	r3, r2
         );
}
 8003156:	4618      	mov	r0, r3
 8003158:	3724      	adds	r7, #36	; 0x24
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3b01      	subs	r3, #1
 8003170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003174:	d301      	bcc.n	800317a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003176:	2301      	movs	r3, #1
 8003178:	e00f      	b.n	800319a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800317a:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <SysTick_Config+0x40>)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3b01      	subs	r3, #1
 8003180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003182:	210f      	movs	r1, #15
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f7ff ff8e 	bl	80030a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <SysTick_Config+0x40>)
 800318e:	2200      	movs	r2, #0
 8003190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003192:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <SysTick_Config+0x40>)
 8003194:	2207      	movs	r2, #7
 8003196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	e000e010 	.word	0xe000e010

080031a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff ff29 	bl	8003008 <__NVIC_SetPriorityGrouping>
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031d0:	f7ff ff3e 	bl	8003050 <__NVIC_GetPriorityGrouping>
 80031d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	6978      	ldr	r0, [r7, #20]
 80031dc:	f7ff ff8e 	bl	80030fc <NVIC_EncodePriority>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff5d 	bl	80030a8 <__NVIC_SetPriority>
}
 80031ee:	bf00      	nop
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff31 	bl	800306c <__NVIC_EnableIRQ>
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ffa2 	bl	8003164 <SysTick_Config>
 8003220:	4603      	mov	r3, r0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e014      	b.n	8003266 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	791b      	ldrb	r3, [r3, #4]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7fe fb5d 	bl	800190c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	795b      	ldrb	r3, [r3, #5]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_DAC_Start+0x16>
 8003280:	2302      	movs	r3, #2
 8003282:	e03b      	b.n	80032fc <HAL_DAC_Start+0x8e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2201      	movs	r2, #1
 800329e:	409a      	lsls	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10f      	bne.n	80032ce <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d118      	bne.n	80032ee <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	e00f      	b.n	80032ee <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032dc:	d107      	bne.n	80032ee <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0202 	orr.w	r2, r2, #2
 80032ec:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d105      	bne.n	8003332 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4413      	add	r3, r2
 800332c:	3308      	adds	r3, #8
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e004      	b.n	800333c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	3314      	adds	r3, #20
 800333a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	461a      	mov	r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b088      	sub	sp, #32
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	795b      	ldrb	r3, [r3, #5]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_DAC_ConfigChannel+0x1c>
 800336a:	2302      	movs	r3, #2
 800336c:	e107      	b.n	800357e <HAL_DAC_ConfigChannel+0x22c>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2202      	movs	r2, #2
 8003378:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d174      	bne.n	800346c <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d137      	bne.n	80033f8 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003388:	f7fe fcfe 	bl	8001d88 <HAL_GetTick>
 800338c:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800338e:	e011      	b.n	80033b4 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003390:	f7fe fcfa 	bl	8001d88 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d90a      	bls.n	80033b4 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f043 0208 	orr.w	r2, r3, #8
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2203      	movs	r2, #3
 80033ae:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e0e4      	b.n	800357e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e6      	bne.n	8003390 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80033c2:	2001      	movs	r0, #1
 80033c4:	f7fe fcec 	bl	8001da0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	6992      	ldr	r2, [r2, #24]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
 80033d2:	e01e      	b.n	8003412 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80033d4:	f7fe fcd8 	bl	8001d88 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d90a      	bls.n	80033f8 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f043 0208 	orr.w	r2, r3, #8
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2203      	movs	r2, #3
 80033f2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0c2      	b.n	800357e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	2b00      	cmp	r3, #0
 8003400:	dbe8      	blt.n	80033d4 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003402:	2001      	movs	r0, #1
 8003404:	f7fe fccc 	bl	8001da0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	6992      	ldr	r2, [r2, #24]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	ea02 0103 	and.w	r1, r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	21ff      	movs	r1, #255	; 0xff
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	ea02 0103 	and.w	r1, r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	409a      	lsls	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d11d      	bne.n	80034b0 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	221f      	movs	r2, #31
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2207      	movs	r2, #7
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43da      	mvns	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	400a      	ands	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	22c0      	movs	r2, #192	; 0xc0
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	400a      	ands	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e098      	b.n	80036cc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	4b4d      	ldr	r3, [pc, #308]	; (80036d8 <HAL_DMA_Init+0x150>)
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d80f      	bhi.n	80035c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <HAL_DMA_Init+0x154>)
 80035ae:	4413      	add	r3, r2
 80035b0:	4a4b      	ldr	r2, [pc, #300]	; (80036e0 <HAL_DMA_Init+0x158>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	009a      	lsls	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a48      	ldr	r2, [pc, #288]	; (80036e4 <HAL_DMA_Init+0x15c>)
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
 80035c4:	e00e      	b.n	80035e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b46      	ldr	r3, [pc, #280]	; (80036e8 <HAL_DMA_Init+0x160>)
 80035ce:	4413      	add	r3, r2
 80035d0:	4a43      	ldr	r2, [pc, #268]	; (80036e0 <HAL_DMA_Init+0x158>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	009a      	lsls	r2, r3, #2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a42      	ldr	r2, [pc, #264]	; (80036ec <HAL_DMA_Init+0x164>)
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800363e:	d039      	beq.n	80036b4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <HAL_DMA_Init+0x15c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d11a      	bne.n	8003680 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800364a:	4b29      	ldr	r3, [pc, #164]	; (80036f0 <HAL_DMA_Init+0x168>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f003 031c 	and.w	r3, r3, #28
 8003656:	210f      	movs	r1, #15
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	4924      	ldr	r1, [pc, #144]	; (80036f0 <HAL_DMA_Init+0x168>)
 8003660:	4013      	ands	r3, r2
 8003662:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003664:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <HAL_DMA_Init+0x168>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f003 031c 	and.w	r3, r3, #28
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	491d      	ldr	r1, [pc, #116]	; (80036f0 <HAL_DMA_Init+0x168>)
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
 800367e:	e019      	b.n	80036b4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003680:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <HAL_DMA_Init+0x16c>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	f003 031c 	and.w	r3, r3, #28
 800368c:	210f      	movs	r1, #15
 800368e:	fa01 f303 	lsl.w	r3, r1, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	4917      	ldr	r1, [pc, #92]	; (80036f4 <HAL_DMA_Init+0x16c>)
 8003696:	4013      	ands	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800369a:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <HAL_DMA_Init+0x16c>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f003 031c 	and.w	r3, r3, #28
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	4911      	ldr	r1, [pc, #68]	; (80036f4 <HAL_DMA_Init+0x16c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40020407 	.word	0x40020407
 80036dc:	bffdfff8 	.word	0xbffdfff8
 80036e0:	cccccccd 	.word	0xcccccccd
 80036e4:	40020000 	.word	0x40020000
 80036e8:	bffdfbf8 	.word	0xbffdfbf8
 80036ec:	40020400 	.word	0x40020400
 80036f0:	400200a8 	.word	0x400200a8
 80036f4:	400204a8 	.word	0x400204a8

080036f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_DMA_Start_IT+0x20>
 8003714:	2302      	movs	r3, #2
 8003716:	e04b      	b.n	80037b0 <HAL_DMA_Start_IT+0xb8>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d13a      	bne.n	80037a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f8e0 	bl	8003916 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 020e 	orr.w	r2, r2, #14
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e00f      	b.n	8003790 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0204 	bic.w	r2, r2, #4
 800377e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 020a 	orr.w	r2, r2, #10
 800378e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	e005      	b.n	80037ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037aa:	2302      	movs	r3, #2
 80037ac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	f003 031c 	and.w	r3, r3, #28
 80037d8:	2204      	movs	r2, #4
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d026      	beq.n	8003832 <HAL_DMA_IRQHandler+0x7a>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d021      	beq.n	8003832 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d107      	bne.n	800380c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0204 	bic.w	r2, r2, #4
 800380a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	f003 021c 	and.w	r2, r3, #28
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	2104      	movs	r1, #4
 800381a:	fa01 f202 	lsl.w	r2, r1, r2
 800381e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	2b00      	cmp	r3, #0
 8003826:	d071      	beq.n	800390c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003830:	e06c      	b.n	800390c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f003 031c 	and.w	r3, r3, #28
 800383a:	2202      	movs	r2, #2
 800383c:	409a      	lsls	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d02e      	beq.n	80038a4 <HAL_DMA_IRQHandler+0xec>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d029      	beq.n	80038a4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 020a 	bic.w	r2, r2, #10
 800386c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f003 021c 	and.w	r2, r3, #28
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2102      	movs	r1, #2
 8003884:	fa01 f202 	lsl.w	r2, r1, r2
 8003888:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d038      	beq.n	800390c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038a2:	e033      	b.n	800390c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	f003 031c 	and.w	r3, r3, #28
 80038ac:	2208      	movs	r2, #8
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d02a      	beq.n	800390e <HAL_DMA_IRQHandler+0x156>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d025      	beq.n	800390e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 020e 	bic.w	r2, r2, #14
 80038d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f003 021c 	and.w	r2, r3, #28
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2101      	movs	r1, #1
 80038e0:	fa01 f202 	lsl.w	r2, r1, r2
 80038e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003900:	2b00      	cmp	r3, #0
 8003902:	d004      	beq.n	800390e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800390c:	bf00      	nop
 800390e:	bf00      	nop
}
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003916:	b480      	push	{r7}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f003 021c 	and.w	r2, r3, #28
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	2101      	movs	r1, #1
 8003932:	fa01 f202 	lsl.w	r2, r1, r2
 8003936:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b10      	cmp	r3, #16
 8003946:	d108      	bne.n	800395a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003958:	e007      	b.n	800396a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	60da      	str	r2, [r3, #12]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003986:	e17f      	b.n	8003c88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2101      	movs	r1, #1
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8171 	beq.w	8003c82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d00b      	beq.n	80039c0 <HAL_GPIO_Init+0x48>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d007      	beq.n	80039c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039b4:	2b11      	cmp	r3, #17
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b12      	cmp	r3, #18
 80039be:	d130      	bne.n	8003a22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f6:	2201      	movs	r2, #1
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0201 	and.w	r2, r3, #1
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d118      	bne.n	8003a60 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a34:	2201      	movs	r2, #1
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	08db      	lsrs	r3, r3, #3
 8003a4a:	f003 0201 	and.w	r2, r3, #1
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x128>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b12      	cmp	r3, #18
 8003a9e:	d123      	bne.n	8003ae8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	08da      	lsrs	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3208      	adds	r2, #8
 8003aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	220f      	movs	r2, #15
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	08da      	lsrs	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3208      	adds	r2, #8
 8003ae2:	6939      	ldr	r1, [r7, #16]
 8003ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2203      	movs	r2, #3
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0203 	and.w	r2, r3, #3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80ac 	beq.w	8003c82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2a:	4b5e      	ldr	r3, [pc, #376]	; (8003ca4 <HAL_GPIO_Init+0x32c>)
 8003b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2e:	4a5d      	ldr	r2, [pc, #372]	; (8003ca4 <HAL_GPIO_Init+0x32c>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6613      	str	r3, [r2, #96]	; 0x60
 8003b36:	4b5b      	ldr	r3, [pc, #364]	; (8003ca4 <HAL_GPIO_Init+0x32c>)
 8003b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b42:	4a59      	ldr	r2, [pc, #356]	; (8003ca8 <HAL_GPIO_Init+0x330>)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	089b      	lsrs	r3, r3, #2
 8003b48:	3302      	adds	r3, #2
 8003b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	220f      	movs	r2, #15
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4013      	ands	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b6c:	d025      	beq.n	8003bba <HAL_GPIO_Init+0x242>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4e      	ldr	r2, [pc, #312]	; (8003cac <HAL_GPIO_Init+0x334>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01f      	beq.n	8003bb6 <HAL_GPIO_Init+0x23e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4d      	ldr	r2, [pc, #308]	; (8003cb0 <HAL_GPIO_Init+0x338>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d019      	beq.n	8003bb2 <HAL_GPIO_Init+0x23a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4c      	ldr	r2, [pc, #304]	; (8003cb4 <HAL_GPIO_Init+0x33c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <HAL_GPIO_Init+0x236>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4b      	ldr	r2, [pc, #300]	; (8003cb8 <HAL_GPIO_Init+0x340>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00d      	beq.n	8003baa <HAL_GPIO_Init+0x232>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a4a      	ldr	r2, [pc, #296]	; (8003cbc <HAL_GPIO_Init+0x344>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d007      	beq.n	8003ba6 <HAL_GPIO_Init+0x22e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a49      	ldr	r2, [pc, #292]	; (8003cc0 <HAL_GPIO_Init+0x348>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d101      	bne.n	8003ba2 <HAL_GPIO_Init+0x22a>
 8003b9e:	2306      	movs	r3, #6
 8003ba0:	e00c      	b.n	8003bbc <HAL_GPIO_Init+0x244>
 8003ba2:	2307      	movs	r3, #7
 8003ba4:	e00a      	b.n	8003bbc <HAL_GPIO_Init+0x244>
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	e008      	b.n	8003bbc <HAL_GPIO_Init+0x244>
 8003baa:	2304      	movs	r3, #4
 8003bac:	e006      	b.n	8003bbc <HAL_GPIO_Init+0x244>
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e004      	b.n	8003bbc <HAL_GPIO_Init+0x244>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_Init+0x244>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_GPIO_Init+0x244>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	f002 0203 	and.w	r2, r2, #3
 8003bc2:	0092      	lsls	r2, r2, #2
 8003bc4:	4093      	lsls	r3, r2
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bcc:	4936      	ldr	r1, [pc, #216]	; (8003ca8 <HAL_GPIO_Init+0x330>)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bda:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <HAL_GPIO_Init+0x34c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bfe:	4a31      	ldr	r2, [pc, #196]	; (8003cc4 <HAL_GPIO_Init+0x34c>)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c04:	4b2f      	ldr	r3, [pc, #188]	; (8003cc4 <HAL_GPIO_Init+0x34c>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_GPIO_Init+0x34c>)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c2e:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_GPIO_Init+0x34c>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c52:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <HAL_GPIO_Init+0x34c>)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_GPIO_Init+0x34c>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c7c:	4a11      	ldr	r2, [pc, #68]	; (8003cc4 <HAL_GPIO_Init+0x34c>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	3301      	adds	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f47f ae78 	bne.w	8003988 <HAL_GPIO_Init+0x10>
  }
}
 8003c98:	bf00      	nop
 8003c9a:	371c      	adds	r7, #28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	48000400 	.word	0x48000400
 8003cb0:	48000800 	.word	0x48000800
 8003cb4:	48000c00 	.word	0x48000c00
 8003cb8:	48001000 	.word	0x48001000
 8003cbc:	48001400 	.word	0x48001400
 8003cc0:	48001800 	.word	0x48001800
 8003cc4:	40010400 	.word	0x40010400

08003cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	807b      	strh	r3, [r7, #2]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd8:	787b      	ldrb	r3, [r7, #1]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40007000 	.word	0x40007000

08003d14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d22:	d130      	bne.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d24:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d30:	d038      	beq.n	8003da4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d3a:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2232      	movs	r2, #50	; 0x32
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	0c9b      	lsrs	r3, r3, #18
 8003d54:	3301      	adds	r3, #1
 8003d56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d58:	e002      	b.n	8003d60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6c:	d102      	bne.n	8003d74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f2      	bne.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d80:	d110      	bne.n	8003da4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e00f      	b.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d92:	d007      	beq.n	8003da4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d9c:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003da2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40007000 	.word	0x40007000
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	431bde83 	.word	0x431bde83

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e3d4      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd2:	4ba1      	ldr	r3, [pc, #644]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ddc:	4b9e      	ldr	r3, [pc, #632]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80e4 	beq.w	8003fbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <HAL_RCC_OscConfig+0x4a>
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	f040 808b 	bne.w	8003f18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	f040 8087 	bne.w	8003f18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e0a:	4b93      	ldr	r3, [pc, #588]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_RCC_OscConfig+0x62>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e3ac      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1a      	ldr	r2, [r3, #32]
 8003e26:	4b8c      	ldr	r3, [pc, #560]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <HAL_RCC_OscConfig+0x7c>
 8003e32:	4b89      	ldr	r3, [pc, #548]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e3a:	e005      	b.n	8003e48 <HAL_RCC_OscConfig+0x88>
 8003e3c:	4b86      	ldr	r3, [pc, #536]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d223      	bcs.n	8003e94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fd3f 	bl	80048d4 <RCC_SetFlashLatencyFromMSIRange>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e38d      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e60:	4b7d      	ldr	r3, [pc, #500]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a7c      	ldr	r2, [pc, #496]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e66:	f043 0308 	orr.w	r3, r3, #8
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b7a      	ldr	r3, [pc, #488]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	4977      	ldr	r1, [pc, #476]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e7e:	4b76      	ldr	r3, [pc, #472]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	4972      	ldr	r1, [pc, #456]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
 8003e92:	e025      	b.n	8003ee0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e94:	4b70      	ldr	r3, [pc, #448]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a6f      	ldr	r2, [pc, #444]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003e9a:	f043 0308 	orr.w	r3, r3, #8
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b6d      	ldr	r3, [pc, #436]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	496a      	ldr	r1, [pc, #424]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eb2:	4b69      	ldr	r3, [pc, #420]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	4965      	ldr	r1, [pc, #404]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fcff 	bl	80048d4 <RCC_SetFlashLatencyFromMSIRange>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e34d      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ee0:	f000 fc36 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8003ee4:	4601      	mov	r1, r0
 8003ee6:	4b5c      	ldr	r3, [pc, #368]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	4a5a      	ldr	r2, [pc, #360]	; (800405c <HAL_RCC_OscConfig+0x29c>)
 8003ef2:	5cd3      	ldrb	r3, [r2, r3]
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8003efc:	4a58      	ldr	r2, [pc, #352]	; (8004060 <HAL_RCC_OscConfig+0x2a0>)
 8003efe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f00:	4b58      	ldr	r3, [pc, #352]	; (8004064 <HAL_RCC_OscConfig+0x2a4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fd fef3 	bl	8001cf0 <HAL_InitTick>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d052      	beq.n	8003fba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	e331      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d032      	beq.n	8003f86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f20:	4b4d      	ldr	r3, [pc, #308]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a4c      	ldr	r2, [pc, #304]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f2c:	f7fd ff2c 	bl	8001d88 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f34:	f7fd ff28 	bl	8001d88 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e31a      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f46:	4b44      	ldr	r3, [pc, #272]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f52:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a40      	ldr	r2, [pc, #256]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f58:	f043 0308 	orr.w	r3, r3, #8
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	493b      	ldr	r1, [pc, #236]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f70:	4b39      	ldr	r3, [pc, #228]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	4936      	ldr	r1, [pc, #216]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	e01a      	b.n	8003fbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a33      	ldr	r2, [pc, #204]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f92:	f7fd fef9 	bl	8001d88 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f9a:	f7fd fef5 	bl	8001d88 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e2e7      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x1da>
 8003fb8:	e000      	b.n	8003fbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d074      	beq.n	80040b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_OscConfig+0x21a>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d10e      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fda:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d064      	beq.n	80040b0 <HAL_RCC_OscConfig+0x2f0>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d160      	bne.n	80040b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e2c4      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffa:	d106      	bne.n	800400a <HAL_RCC_OscConfig+0x24a>
 8003ffc:	4b16      	ldr	r3, [pc, #88]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a15      	ldr	r2, [pc, #84]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	e01d      	b.n	8004046 <HAL_RCC_OscConfig+0x286>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004012:	d10c      	bne.n	800402e <HAL_RCC_OscConfig+0x26e>
 8004014:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0f      	ldr	r2, [pc, #60]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 800401a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a0c      	ldr	r2, [pc, #48]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e00b      	b.n	8004046 <HAL_RCC_OscConfig+0x286>
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a06      	ldr	r2, [pc, #24]	; (8004058 <HAL_RCC_OscConfig+0x298>)
 8004040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004044:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01c      	beq.n	8004088 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fd fe9b 	bl	8001d88 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004054:	e011      	b.n	800407a <HAL_RCC_OscConfig+0x2ba>
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	080078a0 	.word	0x080078a0
 8004060:	20000000 	.word	0x20000000
 8004064:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7fd fe8e 	bl	8001d88 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e280      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800407a:	4baf      	ldr	r3, [pc, #700]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCC_OscConfig+0x2a8>
 8004086:	e014      	b.n	80040b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fd fe7e 	bl	8001d88 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004090:	f7fd fe7a 	bl	8001d88 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e26c      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040a2:	4ba5      	ldr	r3, [pc, #660]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x2d0>
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d060      	beq.n	8004180 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_OscConfig+0x310>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b0c      	cmp	r3, #12
 80040c8:	d119      	bne.n	80040fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d116      	bne.n	80040fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d0:	4b99      	ldr	r3, [pc, #612]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_OscConfig+0x328>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e249      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b93      	ldr	r3, [pc, #588]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	4990      	ldr	r1, [pc, #576]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040fc:	e040      	b.n	8004180 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d023      	beq.n	800414e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004106:	4b8c      	ldr	r3, [pc, #560]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a8b      	ldr	r2, [pc, #556]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800410c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7fd fe39 	bl	8001d88 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800411a:	f7fd fe35 	bl	8001d88 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e227      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800412c:	4b82      	ldr	r3, [pc, #520]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004138:	4b7f      	ldr	r3, [pc, #508]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	497c      	ldr	r1, [pc, #496]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
 800414c:	e018      	b.n	8004180 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800414e:	4b7a      	ldr	r3, [pc, #488]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a79      	ldr	r2, [pc, #484]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fd fe15 	bl	8001d88 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004162:	f7fd fe11 	bl	8001d88 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e203      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004174:	4b70      	ldr	r3, [pc, #448]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d03c      	beq.n	8004206 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01c      	beq.n	80041ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004194:	4b68      	ldr	r3, [pc, #416]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419a:	4a67      	ldr	r2, [pc, #412]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a4:	f7fd fdf0 	bl	8001d88 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ac:	f7fd fdec 	bl	8001d88 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e1de      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041be:	4b5e      	ldr	r3, [pc, #376]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80041c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ef      	beq.n	80041ac <HAL_RCC_OscConfig+0x3ec>
 80041cc:	e01b      	b.n	8004206 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ce:	4b5a      	ldr	r3, [pc, #360]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80041d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d4:	4a58      	ldr	r2, [pc, #352]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fd fdd3 	bl	8001d88 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e6:	f7fd fdcf 	bl	8001d88 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e1c1      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f8:	4b4f      	ldr	r3, [pc, #316]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1ef      	bne.n	80041e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80a6 	beq.w	8004360 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004214:	2300      	movs	r3, #0
 8004216:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004218:	4b47      	ldr	r3, [pc, #284]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10d      	bne.n	8004240 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004224:	4b44      	ldr	r3, [pc, #272]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004228:	4a43      	ldr	r2, [pc, #268]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800422a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422e:	6593      	str	r3, [r2, #88]	; 0x58
 8004230:	4b41      	ldr	r3, [pc, #260]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800423c:	2301      	movs	r3, #1
 800423e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004240:	4b3e      	ldr	r3, [pc, #248]	; (800433c <HAL_RCC_OscConfig+0x57c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d118      	bne.n	800427e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800424c:	4b3b      	ldr	r3, [pc, #236]	; (800433c <HAL_RCC_OscConfig+0x57c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3a      	ldr	r2, [pc, #232]	; (800433c <HAL_RCC_OscConfig+0x57c>)
 8004252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004256:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004258:	f7fd fd96 	bl	8001d88 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004260:	f7fd fd92 	bl	8001d88 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e184      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004272:	4b32      	ldr	r3, [pc, #200]	; (800433c <HAL_RCC_OscConfig+0x57c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d108      	bne.n	8004298 <HAL_RCC_OscConfig+0x4d8>
 8004286:	4b2c      	ldr	r3, [pc, #176]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	4a2a      	ldr	r2, [pc, #168]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004296:	e024      	b.n	80042e2 <HAL_RCC_OscConfig+0x522>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b05      	cmp	r3, #5
 800429e:	d110      	bne.n	80042c2 <HAL_RCC_OscConfig+0x502>
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	4a24      	ldr	r2, [pc, #144]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	4a20      	ldr	r2, [pc, #128]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c0:	e00f      	b.n	80042e2 <HAL_RCC_OscConfig+0x522>
 80042c2:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c8:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d2:	4b19      	ldr	r3, [pc, #100]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	4a17      	ldr	r2, [pc, #92]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fd fd4d 	bl	8001d88 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fd fd49 	bl	8001d88 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e139      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004308:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <HAL_RCC_OscConfig+0x578>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ed      	beq.n	80042f2 <HAL_RCC_OscConfig+0x532>
 8004316:	e01a      	b.n	800434e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fd fd36 	bl	8001d88 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800431e:	e00f      	b.n	8004340 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fd fd32 	bl	8001d88 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d906      	bls.n	8004340 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e122      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004340:	4b90      	ldr	r3, [pc, #576]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e8      	bne.n	8004320 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800434e:	7ffb      	ldrb	r3, [r7, #31]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d105      	bne.n	8004360 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004354:	4b8b      	ldr	r3, [pc, #556]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	4a8a      	ldr	r2, [pc, #552]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 800435a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8108 	beq.w	800457a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	2b02      	cmp	r3, #2
 8004370:	f040 80d0 	bne.w	8004514 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004374:	4b83      	ldr	r3, [pc, #524]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 0203 	and.w	r2, r3, #3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	429a      	cmp	r2, r3
 8004386:	d130      	bne.n	80043ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	3b01      	subs	r3, #1
 8004394:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d127      	bne.n	80043ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d11f      	bne.n	80043ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043b4:	2a07      	cmp	r2, #7
 80043b6:	bf14      	ite	ne
 80043b8:	2201      	movne	r2, #1
 80043ba:	2200      	moveq	r2, #0
 80043bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043be:	4293      	cmp	r3, r2
 80043c0:	d113      	bne.n	80043ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043cc:	085b      	lsrs	r3, r3, #1
 80043ce:	3b01      	subs	r3, #1
 80043d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d109      	bne.n	80043ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	3b01      	subs	r3, #1
 80043e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d06e      	beq.n	80044c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	d069      	beq.n	80044c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043f0:	4b64      	ldr	r3, [pc, #400]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d105      	bne.n	8004408 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043fc:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0b7      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800440c:	4b5d      	ldr	r3, [pc, #372]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a5c      	ldr	r2, [pc, #368]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004416:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004418:	f7fd fcb6 	bl	8001d88 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004420:	f7fd fcb2 	bl	8001d88 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e0a4      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004432:	4b54      	ldr	r3, [pc, #336]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800443e:	4b51      	ldr	r3, [pc, #324]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	4b51      	ldr	r3, [pc, #324]	; (8004588 <HAL_RCC_OscConfig+0x7c8>)
 8004444:	4013      	ands	r3, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800444e:	3a01      	subs	r2, #1
 8004450:	0112      	lsls	r2, r2, #4
 8004452:	4311      	orrs	r1, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004458:	0212      	lsls	r2, r2, #8
 800445a:	4311      	orrs	r1, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004460:	0852      	lsrs	r2, r2, #1
 8004462:	3a01      	subs	r2, #1
 8004464:	0552      	lsls	r2, r2, #21
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800446c:	0852      	lsrs	r2, r2, #1
 800446e:	3a01      	subs	r2, #1
 8004470:	0652      	lsls	r2, r2, #25
 8004472:	4311      	orrs	r1, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004478:	0912      	lsrs	r2, r2, #4
 800447a:	0452      	lsls	r2, r2, #17
 800447c:	430a      	orrs	r2, r1
 800447e:	4941      	ldr	r1, [pc, #260]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004480:	4313      	orrs	r3, r2
 8004482:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004484:	4b3f      	ldr	r3, [pc, #252]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a3e      	ldr	r2, [pc, #248]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 800448a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004490:	4b3c      	ldr	r3, [pc, #240]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a3b      	ldr	r2, [pc, #236]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800449c:	f7fd fc74 	bl	8001d88 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a4:	f7fd fc70 	bl	8001d88 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e062      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b6:	4b33      	ldr	r3, [pc, #204]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044c2:	e05a      	b.n	800457a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e059      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c8:	4b2e      	ldr	r3, [pc, #184]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d152      	bne.n	800457a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044d4:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044e0:	4b28      	ldr	r3, [pc, #160]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a27      	ldr	r2, [pc, #156]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 80044e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044ec:	f7fd fc4c 	bl	8001d88 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd fc48 	bl	8001d88 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e03a      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004506:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x734>
 8004512:	e032      	b.n	800457a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b0c      	cmp	r3, #12
 8004518:	d02d      	beq.n	8004576 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451a:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a19      	ldr	r2, [pc, #100]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004524:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4a13      	ldr	r2, [pc, #76]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004538:	f023 0303 	bic.w	r3, r3, #3
 800453c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800453e:	4b11      	ldr	r3, [pc, #68]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 8004544:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454e:	f7fd fc1b 	bl	8001d88 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004556:	f7fd fc17 	bl	8001d88 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e009      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_RCC_OscConfig+0x7c4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f0      	bne.n	8004556 <HAL_RCC_OscConfig+0x796>
 8004574:	e001      	b.n	800457a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	f99d808c 	.word	0xf99d808c

0800458c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0c8      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a0:	4b66      	ldr	r3, [pc, #408]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d910      	bls.n	80045d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b63      	ldr	r3, [pc, #396]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0207 	bic.w	r2, r3, #7
 80045b6:	4961      	ldr	r1, [pc, #388]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b5f      	ldr	r3, [pc, #380]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0b0      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d04c      	beq.n	8004676 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e4:	4b56      	ldr	r3, [pc, #344]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d121      	bne.n	8004634 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e09e      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d107      	bne.n	800460c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045fc:	4b50      	ldr	r3, [pc, #320]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d115      	bne.n	8004634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e092      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d107      	bne.n	8004624 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004614:	4b4a      	ldr	r3, [pc, #296]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d109      	bne.n	8004634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e086      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004624:	4b46      	ldr	r3, [pc, #280]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e07e      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004634:	4b42      	ldr	r3, [pc, #264]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f023 0203 	bic.w	r2, r3, #3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	493f      	ldr	r1, [pc, #252]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004646:	f7fd fb9f 	bl	8001d88 <HAL_GetTick>
 800464a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464c:	e00a      	b.n	8004664 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464e:	f7fd fb9b 	bl	8001d88 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e066      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004664:	4b36      	ldr	r3, [pc, #216]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 020c 	and.w	r2, r3, #12
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	429a      	cmp	r2, r3
 8004674:	d1eb      	bne.n	800464e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004682:	4b2f      	ldr	r3, [pc, #188]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	492c      	ldr	r1, [pc, #176]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004694:	4b29      	ldr	r3, [pc, #164]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d210      	bcs.n	80046c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a2:	4b26      	ldr	r3, [pc, #152]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 0207 	bic.w	r2, r3, #7
 80046aa:	4924      	ldr	r1, [pc, #144]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <HAL_RCC_ClockConfig+0x1b0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e036      	b.n	8004732 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d0:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4918      	ldr	r1, [pc, #96]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4910      	ldr	r1, [pc, #64]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004702:	f000 f825 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8004706:	4601      	mov	r1, r0
 8004708:	4b0d      	ldr	r3, [pc, #52]	; (8004740 <HAL_RCC_ClockConfig+0x1b4>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <HAL_RCC_ClockConfig+0x1b8>)
 8004714:	5cd3      	ldrb	r3, [r2, r3]
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	fa21 f303 	lsr.w	r3, r1, r3
 800471e:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd fae2 	bl	8001cf0 <HAL_InitTick>
 800472c:	4603      	mov	r3, r0
 800472e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004730:	7afb      	ldrb	r3, [r7, #11]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40022000 	.word	0x40022000
 8004740:	40021000 	.word	0x40021000
 8004744:	080078a0 	.word	0x080078a0
 8004748:	20000000 	.word	0x20000000
 800474c:	20000004 	.word	0x20000004

08004750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004750:	b480      	push	{r7}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800475e:	4b3d      	ldr	r3, [pc, #244]	; (8004854 <HAL_RCC_GetSysClockFreq+0x104>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004768:	4b3a      	ldr	r3, [pc, #232]	; (8004854 <HAL_RCC_GetSysClockFreq+0x104>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0303 	and.w	r3, r3, #3
 8004770:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_GetSysClockFreq+0x34>
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d121      	bne.n	80047c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d11e      	bne.n	80047c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004784:	4b33      	ldr	r3, [pc, #204]	; (8004854 <HAL_RCC_GetSysClockFreq+0x104>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004790:	4b30      	ldr	r3, [pc, #192]	; (8004854 <HAL_RCC_GetSysClockFreq+0x104>)
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	e005      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047a0:	4b2c      	ldr	r3, [pc, #176]	; (8004854 <HAL_RCC_GetSysClockFreq+0x104>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047ac:	4a2a      	ldr	r2, [pc, #168]	; (8004858 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10d      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d102      	bne.n	80047ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047c8:	4b24      	ldr	r3, [pc, #144]	; (800485c <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e004      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047d4:	4b22      	ldr	r3, [pc, #136]	; (8004860 <HAL_RCC_GetSysClockFreq+0x110>)
 80047d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d133      	bne.n	8004846 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047de:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_RCC_GetSysClockFreq+0x104>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d002      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_GetSysClockFreq+0xaa>
 80047f2:	e005      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <HAL_RCC_GetSysClockFreq+0x10c>)
 80047f6:	617b      	str	r3, [r7, #20]
      break;
 80047f8:	e005      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047fa:	4b19      	ldr	r3, [pc, #100]	; (8004860 <HAL_RCC_GetSysClockFreq+0x110>)
 80047fc:	617b      	str	r3, [r7, #20]
      break;
 80047fe:	e002      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	617b      	str	r3, [r7, #20]
      break;
 8004804:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004806:	4b13      	ldr	r3, [pc, #76]	; (8004854 <HAL_RCC_GetSysClockFreq+0x104>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	3301      	adds	r3, #1
 8004812:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <HAL_RCC_GetSysClockFreq+0x104>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	fb02 f203 	mul.w	r2, r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCC_GetSysClockFreq+0x104>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	0e5b      	lsrs	r3, r3, #25
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	3301      	adds	r3, #1
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004846:	69bb      	ldr	r3, [r7, #24]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3724      	adds	r7, #36	; 0x24
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	40021000 	.word	0x40021000
 8004858:	080078b8 	.word	0x080078b8
 800485c:	00f42400 	.word	0x00f42400
 8004860:	007a1200 	.word	0x007a1200

08004864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <HAL_RCC_GetHCLKFreq+0x14>)
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	20000000 	.word	0x20000000

0800487c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004880:	f7ff fff0 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 8004884:	4601      	mov	r1, r0
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004892:	5cd3      	ldrb	r3, [r2, r3]
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000
 80048a4:	080078b0 	.word	0x080078b0

080048a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048ac:	f7ff ffda 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 80048b0:	4601      	mov	r1, r0
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	0adb      	lsrs	r3, r3, #11
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	4a04      	ldr	r2, [pc, #16]	; (80048d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048be:	5cd3      	ldrb	r3, [r2, r3]
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000
 80048d0:	080078b0 	.word	0x080078b0

080048d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048e0:	4b2a      	ldr	r3, [pc, #168]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048ec:	f7ff fa04 	bl	8003cf8 <HAL_PWREx_GetVoltageRange>
 80048f0:	6178      	str	r0, [r7, #20]
 80048f2:	e014      	b.n	800491e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048f4:	4b25      	ldr	r3, [pc, #148]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	4a24      	ldr	r2, [pc, #144]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004900:	4b22      	ldr	r3, [pc, #136]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800490c:	f7ff f9f4 	bl	8003cf8 <HAL_PWREx_GetVoltageRange>
 8004910:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004912:	4b1e      	ldr	r3, [pc, #120]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004916:	4a1d      	ldr	r2, [pc, #116]	; (800498c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800491c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004924:	d10b      	bne.n	800493e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b80      	cmp	r3, #128	; 0x80
 800492a:	d919      	bls.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2ba0      	cmp	r3, #160	; 0xa0
 8004930:	d902      	bls.n	8004938 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004932:	2302      	movs	r3, #2
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	e013      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004938:	2301      	movs	r3, #1
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	e010      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b80      	cmp	r3, #128	; 0x80
 8004942:	d902      	bls.n	800494a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004944:	2303      	movs	r3, #3
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	e00a      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b80      	cmp	r3, #128	; 0x80
 800494e:	d102      	bne.n	8004956 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004950:	2302      	movs	r3, #2
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	e004      	b.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b70      	cmp	r3, #112	; 0x70
 800495a:	d101      	bne.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800495c:	2301      	movs	r3, #1
 800495e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f023 0207 	bic.w	r2, r3, #7
 8004968:	4909      	ldr	r1, [pc, #36]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004970:	4b07      	ldr	r3, [pc, #28]	; (8004990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d001      	beq.n	8004982 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40021000 	.word	0x40021000
 8004990:	40022000 	.word	0x40022000

08004994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800499c:	2300      	movs	r3, #0
 800499e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049a0:	2300      	movs	r3, #0
 80049a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d03f      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b8:	d01c      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80049ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049be:	d802      	bhi.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00e      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80049c4:	e01f      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80049c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049ca:	d003      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80049cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049d0:	d01c      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80049d2:	e018      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049d4:	4b85      	ldr	r3, [pc, #532]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a84      	ldr	r2, [pc, #528]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049e0:	e015      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3304      	adds	r3, #4
 80049e6:	2100      	movs	r1, #0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fab9 	bl	8004f60 <RCCEx_PLLSAI1_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f2:	e00c      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3320      	adds	r3, #32
 80049f8:	2100      	movs	r1, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fba0 	bl	8005140 <RCCEx_PLLSAI2_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a04:	e003      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	74fb      	strb	r3, [r7, #19]
      break;
 8004a0a:	e000      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a14:	4b75      	ldr	r3, [pc, #468]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a22:	4972      	ldr	r1, [pc, #456]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a2a:	e001      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d03f      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a44:	d01c      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a4a:	d802      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00e      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004a50:	e01f      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a56:	d003      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004a58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a5c:	d01c      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004a5e:	e018      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a60:	4b62      	ldr	r3, [pc, #392]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	4a61      	ldr	r2, [pc, #388]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a6c:	e015      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3304      	adds	r3, #4
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fa73 	bl	8004f60 <RCCEx_PLLSAI1_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a7e:	e00c      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3320      	adds	r3, #32
 8004a84:	2100      	movs	r1, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fb5a 	bl	8005140 <RCCEx_PLLSAI2_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a90:	e003      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	74fb      	strb	r3, [r7, #19]
      break;
 8004a96:	e000      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a9a:	7cfb      	ldrb	r3, [r7, #19]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aa0:	4b52      	ldr	r3, [pc, #328]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aae:	494f      	ldr	r1, [pc, #316]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ab6:	e001      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80a0 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ace:	4b47      	ldr	r3, [pc, #284]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00d      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae4:	4b41      	ldr	r3, [pc, #260]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	4a40      	ldr	r2, [pc, #256]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aee:	6593      	str	r3, [r2, #88]	; 0x58
 8004af0:	4b3e      	ldr	r3, [pc, #248]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004afc:	2301      	movs	r3, #1
 8004afe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b00:	4b3b      	ldr	r3, [pc, #236]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a3a      	ldr	r2, [pc, #232]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b0c:	f7fd f93c 	bl	8001d88 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b12:	e009      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b14:	f7fd f938 	bl	8001d88 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d902      	bls.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	74fb      	strb	r3, [r7, #19]
        break;
 8004b26:	e005      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b28:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ef      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004b34:	7cfb      	ldrb	r3, [r7, #19]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d15c      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b3a:	4b2c      	ldr	r3, [pc, #176]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01f      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d019      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b58:	4b24      	ldr	r3, [pc, #144]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b64:	4b21      	ldr	r3, [pc, #132]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	4a20      	ldr	r2, [pc, #128]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b74:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b84:	4a19      	ldr	r2, [pc, #100]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b96:	f7fd f8f7 	bl	8001d88 <HAL_GetTick>
 8004b9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9c:	e00b      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9e:	f7fd f8f3 	bl	8001d88 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d902      	bls.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	74fb      	strb	r3, [r7, #19]
            break;
 8004bb4:	e006      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0ec      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004bc4:	7cfb      	ldrb	r3, [r7, #19]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10c      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bda:	4904      	ldr	r1, [pc, #16]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004be2:	e009      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004be4:	7cfb      	ldrb	r3, [r7, #19]
 8004be6:	74bb      	strb	r3, [r7, #18]
 8004be8:	e006      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf8:	7c7b      	ldrb	r3, [r7, #17]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d105      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfe:	4b9e      	ldr	r3, [pc, #632]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	4a9d      	ldr	r2, [pc, #628]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c16:	4b98      	ldr	r3, [pc, #608]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f023 0203 	bic.w	r2, r3, #3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	4994      	ldr	r1, [pc, #592]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c38:	4b8f      	ldr	r3, [pc, #572]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	f023 020c 	bic.w	r2, r3, #12
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c46:	498c      	ldr	r1, [pc, #560]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c5a:	4b87      	ldr	r3, [pc, #540]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	4983      	ldr	r1, [pc, #524]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c7c:	4b7e      	ldr	r3, [pc, #504]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	497b      	ldr	r1, [pc, #492]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c9e:	4b76      	ldr	r3, [pc, #472]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cac:	4972      	ldr	r1, [pc, #456]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cc0:	4b6d      	ldr	r3, [pc, #436]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cce:	496a      	ldr	r1, [pc, #424]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ce2:	4b65      	ldr	r3, [pc, #404]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf0:	4961      	ldr	r1, [pc, #388]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d04:	4b5c      	ldr	r3, [pc, #368]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d12:	4959      	ldr	r1, [pc, #356]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d26:	4b54      	ldr	r3, [pc, #336]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	4950      	ldr	r1, [pc, #320]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d48:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d56:	4948      	ldr	r1, [pc, #288]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d6a:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	493f      	ldr	r1, [pc, #252]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d028      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d8c:	4b3a      	ldr	r3, [pc, #232]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9a:	4937      	ldr	r1, [pc, #220]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004daa:	d106      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dac:	4b32      	ldr	r3, [pc, #200]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4a31      	ldr	r2, [pc, #196]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004db6:	60d3      	str	r3, [r2, #12]
 8004db8:	e011      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dc2:	d10c      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	2101      	movs	r1, #1
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f8c8 	bl	8004f60 <RCCEx_PLLSAI1_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004dda:	7cfb      	ldrb	r3, [r7, #19]
 8004ddc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d028      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dea:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	491f      	ldr	r1, [pc, #124]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e08:	d106      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e0a:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	4a1a      	ldr	r2, [pc, #104]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e14:	60d3      	str	r3, [r2, #12]
 8004e16:	e011      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3304      	adds	r3, #4
 8004e26:	2101      	movs	r1, #1
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 f899 	bl	8004f60 <RCCEx_PLLSAI1_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e32:	7cfb      	ldrb	r3, [r7, #19]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d02b      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e56:	4908      	ldr	r1, [pc, #32]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e66:	d109      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4a02      	ldr	r2, [pc, #8]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e72:	60d3      	str	r3, [r2, #12]
 8004e74:	e014      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 f867 	bl	8004f60 <RCCEx_PLLSAI1_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e96:	7cfb      	ldrb	r3, [r7, #19]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004e9c:	7cfb      	ldrb	r3, [r7, #19]
 8004e9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d02f      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eac:	4b2b      	ldr	r3, [pc, #172]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eba:	4928      	ldr	r1, [pc, #160]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eca:	d10d      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f844 	bl	8004f60 <RCCEx_PLLSAI1_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d014      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	74bb      	strb	r3, [r7, #18]
 8004ee6:	e011      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3320      	adds	r3, #32
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f921 	bl	8005140 <RCCEx_PLLSAI2_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f02:	7cfb      	ldrb	r3, [r7, #19]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f26:	490d      	ldr	r1, [pc, #52]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00b      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f4a:	4904      	ldr	r1, [pc, #16]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f52:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40021000 	.word	0x40021000

08004f60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f6e:	4b73      	ldr	r3, [pc, #460]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f7a:	4b70      	ldr	r3, [pc, #448]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0203 	and.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d10d      	bne.n	8004fa6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
       ||
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f92:	4b6a      	ldr	r3, [pc, #424]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
       ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d044      	beq.n	8005030 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	e041      	b.n	8005030 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d00c      	beq.n	8004fce <RCCEx_PLLSAI1_Config+0x6e>
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d013      	beq.n	8004fe0 <RCCEx_PLLSAI1_Config+0x80>
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d120      	bne.n	8004ffe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fbc:	4b5f      	ldr	r3, [pc, #380]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d11d      	bne.n	8005004 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fcc:	e01a      	b.n	8005004 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fce:	4b5b      	ldr	r3, [pc, #364]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d116      	bne.n	8005008 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fde:	e013      	b.n	8005008 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fe0:	4b56      	ldr	r3, [pc, #344]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10f      	bne.n	800500c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fec:	4b53      	ldr	r3, [pc, #332]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d109      	bne.n	800500c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ffc:	e006      	b.n	800500c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
      break;
 8005002:	e004      	b.n	800500e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005004:	bf00      	nop
 8005006:	e002      	b.n	800500e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005008:	bf00      	nop
 800500a:	e000      	b.n	800500e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800500c:	bf00      	nop
    }

    if(status == HAL_OK)
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10d      	bne.n	8005030 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005014:	4b49      	ldr	r3, [pc, #292]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	3b01      	subs	r3, #1
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	430b      	orrs	r3, r1
 800502a:	4944      	ldr	r1, [pc, #272]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 800502c:	4313      	orrs	r3, r2
 800502e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d17d      	bne.n	8005132 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005036:	4b41      	ldr	r3, [pc, #260]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a40      	ldr	r2, [pc, #256]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 800503c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005042:	f7fc fea1 	bl	8001d88 <HAL_GetTick>
 8005046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005048:	e009      	b.n	800505e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800504a:	f7fc fe9d 	bl	8001d88 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d902      	bls.n	800505e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	73fb      	strb	r3, [r7, #15]
        break;
 800505c:	e005      	b.n	800506a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800505e:	4b37      	ldr	r3, [pc, #220]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ef      	bne.n	800504a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d160      	bne.n	8005132 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d111      	bne.n	800509a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005076:	4b31      	ldr	r3, [pc, #196]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800507e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6892      	ldr	r2, [r2, #8]
 8005086:	0211      	lsls	r1, r2, #8
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	68d2      	ldr	r2, [r2, #12]
 800508c:	0912      	lsrs	r2, r2, #4
 800508e:	0452      	lsls	r2, r2, #17
 8005090:	430a      	orrs	r2, r1
 8005092:	492a      	ldr	r1, [pc, #168]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005094:	4313      	orrs	r3, r2
 8005096:	610b      	str	r3, [r1, #16]
 8005098:	e027      	b.n	80050ea <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d112      	bne.n	80050c6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050a0:	4b26      	ldr	r3, [pc, #152]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6892      	ldr	r2, [r2, #8]
 80050b0:	0211      	lsls	r1, r2, #8
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6912      	ldr	r2, [r2, #16]
 80050b6:	0852      	lsrs	r2, r2, #1
 80050b8:	3a01      	subs	r2, #1
 80050ba:	0552      	lsls	r2, r2, #21
 80050bc:	430a      	orrs	r2, r1
 80050be:	491f      	ldr	r1, [pc, #124]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	610b      	str	r3, [r1, #16]
 80050c4:	e011      	b.n	80050ea <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050c6:	4b1d      	ldr	r3, [pc, #116]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6892      	ldr	r2, [r2, #8]
 80050d6:	0211      	lsls	r1, r2, #8
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6952      	ldr	r2, [r2, #20]
 80050dc:	0852      	lsrs	r2, r2, #1
 80050de:	3a01      	subs	r2, #1
 80050e0:	0652      	lsls	r2, r2, #25
 80050e2:	430a      	orrs	r2, r1
 80050e4:	4915      	ldr	r1, [pc, #84]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050ea:	4b14      	ldr	r3, [pc, #80]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 80050f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f6:	f7fc fe47 	bl	8001d88 <HAL_GetTick>
 80050fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050fc:	e009      	b.n	8005112 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050fe:	f7fc fe43 	bl	8001d88 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d902      	bls.n	8005112 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	73fb      	strb	r3, [r7, #15]
          break;
 8005110:	e005      	b.n	800511e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005112:	4b0a      	ldr	r3, [pc, #40]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0ef      	beq.n	80050fe <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	4903      	ldr	r1, [pc, #12]	; (800513c <RCCEx_PLLSAI1_Config+0x1dc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005132:	7bfb      	ldrb	r3, [r7, #15]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000

08005140 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800514e:	4b68      	ldr	r3, [pc, #416]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d018      	beq.n	800518c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800515a:	4b65      	ldr	r3, [pc, #404]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0203 	and.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d10d      	bne.n	8005186 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
       ||
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005172:	4b5f      	ldr	r3, [pc, #380]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
       ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d044      	beq.n	8005210 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	73fb      	strb	r3, [r7, #15]
 800518a:	e041      	b.n	8005210 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d00c      	beq.n	80051ae <RCCEx_PLLSAI2_Config+0x6e>
 8005194:	2b03      	cmp	r3, #3
 8005196:	d013      	beq.n	80051c0 <RCCEx_PLLSAI2_Config+0x80>
 8005198:	2b01      	cmp	r3, #1
 800519a:	d120      	bne.n	80051de <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800519c:	4b54      	ldr	r3, [pc, #336]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11d      	bne.n	80051e4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051ac:	e01a      	b.n	80051e4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051ae:	4b50      	ldr	r3, [pc, #320]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d116      	bne.n	80051e8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051be:	e013      	b.n	80051e8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051c0:	4b4b      	ldr	r3, [pc, #300]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10f      	bne.n	80051ec <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051cc:	4b48      	ldr	r3, [pc, #288]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051dc:	e006      	b.n	80051ec <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
      break;
 80051e2:	e004      	b.n	80051ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051e4:	bf00      	nop
 80051e6:	e002      	b.n	80051ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051e8:	bf00      	nop
 80051ea:	e000      	b.n	80051ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10d      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051f4:	4b3e      	ldr	r3, [pc, #248]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	3b01      	subs	r3, #1
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	430b      	orrs	r3, r1
 800520a:	4939      	ldr	r1, [pc, #228]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800520c:	4313      	orrs	r3, r2
 800520e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d167      	bne.n	80052e6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005216:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a35      	ldr	r2, [pc, #212]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800521c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005222:	f7fc fdb1 	bl	8001d88 <HAL_GetTick>
 8005226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005228:	e009      	b.n	800523e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800522a:	f7fc fdad 	bl	8001d88 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d902      	bls.n	800523e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	73fb      	strb	r3, [r7, #15]
        break;
 800523c:	e005      	b.n	800524a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800523e:	4b2c      	ldr	r3, [pc, #176]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1ef      	bne.n	800522a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d14a      	bne.n	80052e6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d111      	bne.n	800527a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005256:	4b26      	ldr	r3, [pc, #152]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800525e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6892      	ldr	r2, [r2, #8]
 8005266:	0211      	lsls	r1, r2, #8
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68d2      	ldr	r2, [r2, #12]
 800526c:	0912      	lsrs	r2, r2, #4
 800526e:	0452      	lsls	r2, r2, #17
 8005270:	430a      	orrs	r2, r1
 8005272:	491f      	ldr	r1, [pc, #124]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005274:	4313      	orrs	r3, r2
 8005276:	614b      	str	r3, [r1, #20]
 8005278:	e011      	b.n	800529e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005282:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6892      	ldr	r2, [r2, #8]
 800528a:	0211      	lsls	r1, r2, #8
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6912      	ldr	r2, [r2, #16]
 8005290:	0852      	lsrs	r2, r2, #1
 8005292:	3a01      	subs	r2, #1
 8005294:	0652      	lsls	r2, r2, #25
 8005296:	430a      	orrs	r2, r1
 8005298:	4915      	ldr	r1, [pc, #84]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800529a:	4313      	orrs	r3, r2
 800529c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800529e:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052aa:	f7fc fd6d 	bl	8001d88 <HAL_GetTick>
 80052ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052b0:	e009      	b.n	80052c6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052b2:	f7fc fd69 	bl	8001d88 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d902      	bls.n	80052c6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	73fb      	strb	r3, [r7, #15]
          break;
 80052c4:	e005      	b.n	80052d2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0ef      	beq.n	80052b2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	4903      	ldr	r1, [pc, #12]	; (80052f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000

080052f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e01d      	b.n	8005342 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fc fb52 	bl	80019c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	4610      	mov	r0, r2
 8005334:	f000 fbd2 	bl	8005adc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <HAL_TIM_Base_Start_IT+0x50>)
 800536c:	4013      	ands	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b06      	cmp	r3, #6
 8005374:	d00b      	beq.n	800538e <HAL_TIM_Base_Start_IT+0x42>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800537c:	d007      	beq.n	800538e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0201 	orr.w	r2, r2, #1
 800538c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	00010007 	.word	0x00010007

080053a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e01d      	b.n	80053ee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fc fade 	bl	8001988 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3304      	adds	r3, #4
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f000 fb7c 	bl	8005adc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2201      	movs	r2, #1
 8005408:	6839      	ldr	r1, [r7, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 ff70 	bl	80062f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1e      	ldr	r2, [pc, #120]	; (8005490 <HAL_TIM_PWM_Start+0x98>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_TIM_PWM_Start+0x4a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <HAL_TIM_PWM_Start+0x9c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00e      	beq.n	8005442 <HAL_TIM_PWM_Start+0x4a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1b      	ldr	r2, [pc, #108]	; (8005498 <HAL_TIM_PWM_Start+0xa0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d009      	beq.n	8005442 <HAL_TIM_PWM_Start+0x4a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1a      	ldr	r2, [pc, #104]	; (800549c <HAL_TIM_PWM_Start+0xa4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d004      	beq.n	8005442 <HAL_TIM_PWM_Start+0x4a>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <HAL_TIM_PWM_Start+0xa8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d101      	bne.n	8005446 <HAL_TIM_PWM_Start+0x4e>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <HAL_TIM_PWM_Start+0x50>
 8005446:	2300      	movs	r3, #0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800545a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <HAL_TIM_PWM_Start+0xac>)
 8005464:	4013      	ands	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b06      	cmp	r3, #6
 800546c:	d00b      	beq.n	8005486 <HAL_TIM_PWM_Start+0x8e>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005474:	d007      	beq.n	8005486 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0201 	orr.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40013400 	.word	0x40013400
 8005498:	40014000 	.word	0x40014000
 800549c:	40014400 	.word	0x40014400
 80054a0:	40014800 	.word	0x40014800
 80054a4:	00010007 	.word	0x00010007

080054a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d122      	bne.n	8005504 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d11b      	bne.n	8005504 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0202 	mvn.w	r2, #2
 80054d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fad7 	bl	8005a9e <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fac9 	bl	8005a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fada 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b04      	cmp	r3, #4
 8005510:	d122      	bne.n	8005558 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b04      	cmp	r3, #4
 800551e:	d11b      	bne.n	8005558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0204 	mvn.w	r2, #4
 8005528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2202      	movs	r2, #2
 800552e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 faad 	bl	8005a9e <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa9f 	bl	8005a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fab0 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b08      	cmp	r3, #8
 8005564:	d122      	bne.n	80055ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b08      	cmp	r3, #8
 8005572:	d11b      	bne.n	80055ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0208 	mvn.w	r2, #8
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2204      	movs	r2, #4
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fa83 	bl	8005a9e <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa75 	bl	8005a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fa86 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d122      	bne.n	8005600 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d11b      	bne.n	8005600 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0210 	mvn.w	r2, #16
 80055d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2208      	movs	r2, #8
 80055d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa59 	bl	8005a9e <HAL_TIM_IC_CaptureCallback>
 80055ec:	e005      	b.n	80055fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa4b 	bl	8005a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fa5c 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b01      	cmp	r3, #1
 800560c:	d10e      	bne.n	800562c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d107      	bne.n	800562c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0201 	mvn.w	r2, #1
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fb f836 	bl	8000698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005636:	2b80      	cmp	r3, #128	; 0x80
 8005638:	d10e      	bne.n	8005658 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005644:	2b80      	cmp	r3, #128	; 0x80
 8005646:	d107      	bne.n	8005658 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 ff04 	bl	8006460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005666:	d10e      	bne.n	8005686 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b80      	cmp	r3, #128	; 0x80
 8005674:	d107      	bne.n	8005686 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800567e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fef7 	bl	8006474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	d10e      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d107      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fa0a 	bl	8005ac6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d10e      	bne.n	80056de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d107      	bne.n	80056de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f06f 0220 	mvn.w	r2, #32
 80056d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 feb7 	bl	800644c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80056fe:	2302      	movs	r3, #2
 8005700:	e105      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b14      	cmp	r3, #20
 8005716:	f200 80f0 	bhi.w	80058fa <HAL_TIM_PWM_ConfigChannel+0x212>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005775 	.word	0x08005775
 8005724:	080058fb 	.word	0x080058fb
 8005728:	080058fb 	.word	0x080058fb
 800572c:	080058fb 	.word	0x080058fb
 8005730:	080057b5 	.word	0x080057b5
 8005734:	080058fb 	.word	0x080058fb
 8005738:	080058fb 	.word	0x080058fb
 800573c:	080058fb 	.word	0x080058fb
 8005740:	080057f7 	.word	0x080057f7
 8005744:	080058fb 	.word	0x080058fb
 8005748:	080058fb 	.word	0x080058fb
 800574c:	080058fb 	.word	0x080058fb
 8005750:	08005837 	.word	0x08005837
 8005754:	080058fb 	.word	0x080058fb
 8005758:	080058fb 	.word	0x080058fb
 800575c:	080058fb 	.word	0x080058fb
 8005760:	08005879 	.word	0x08005879
 8005764:	080058fb 	.word	0x080058fb
 8005768:	080058fb 	.word	0x080058fb
 800576c:	080058fb 	.word	0x080058fb
 8005770:	080058b9 	.word	0x080058b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fa48 	bl	8005c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0208 	orr.w	r2, r2, #8
 800578e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0204 	bic.w	r2, r2, #4
 800579e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6999      	ldr	r1, [r3, #24]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	619a      	str	r2, [r3, #24]
      break;
 80057b2:	e0a3      	b.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fab8 	bl	8005d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6999      	ldr	r1, [r3, #24]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	021a      	lsls	r2, r3, #8
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	619a      	str	r2, [r3, #24]
      break;
 80057f4:	e082      	b.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fb21 	bl	8005e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0208 	orr.w	r2, r2, #8
 8005810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0204 	bic.w	r2, r2, #4
 8005820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69d9      	ldr	r1, [r3, #28]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	61da      	str	r2, [r3, #28]
      break;
 8005834:	e062      	b.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fb89 	bl	8005f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69d9      	ldr	r1, [r3, #28]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	021a      	lsls	r2, r3, #8
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	61da      	str	r2, [r3, #28]
      break;
 8005876:	e041      	b.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68b9      	ldr	r1, [r7, #8]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fbd2 	bl	8006028 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0208 	orr.w	r2, r2, #8
 8005892:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0204 	bic.w	r2, r2, #4
 80058a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058b6:	e021      	b.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fc16 	bl	80060f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	021a      	lsls	r2, r3, #8
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058f8:	e000      	b.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80058fa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop

08005918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_TIM_ConfigClockSource+0x18>
 800592c:	2302      	movs	r3, #2
 800592e:	e0a8      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x16a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005952:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800595a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d067      	beq.n	8005a3c <HAL_TIM_ConfigClockSource+0x124>
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d80b      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x70>
 8005970:	2b10      	cmp	r3, #16
 8005972:	d073      	beq.n	8005a5c <HAL_TIM_ConfigClockSource+0x144>
 8005974:	2b10      	cmp	r3, #16
 8005976:	d802      	bhi.n	800597e <HAL_TIM_ConfigClockSource+0x66>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d06f      	beq.n	8005a5c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800597c:	e078      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800597e:	2b20      	cmp	r3, #32
 8005980:	d06c      	beq.n	8005a5c <HAL_TIM_ConfigClockSource+0x144>
 8005982:	2b30      	cmp	r3, #48	; 0x30
 8005984:	d06a      	beq.n	8005a5c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005986:	e073      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005988:	2b70      	cmp	r3, #112	; 0x70
 800598a:	d00d      	beq.n	80059a8 <HAL_TIM_ConfigClockSource+0x90>
 800598c:	2b70      	cmp	r3, #112	; 0x70
 800598e:	d804      	bhi.n	800599a <HAL_TIM_ConfigClockSource+0x82>
 8005990:	2b50      	cmp	r3, #80	; 0x50
 8005992:	d033      	beq.n	80059fc <HAL_TIM_ConfigClockSource+0xe4>
 8005994:	2b60      	cmp	r3, #96	; 0x60
 8005996:	d041      	beq.n	8005a1c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005998:	e06a      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	d066      	beq.n	8005a6e <HAL_TIM_ConfigClockSource+0x156>
 80059a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a4:	d017      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80059a6:	e063      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	6899      	ldr	r1, [r3, #8]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f000 fc7a 	bl	80062b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	609a      	str	r2, [r3, #8]
      break;
 80059d4:	e04c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6899      	ldr	r1, [r3, #8]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f000 fc63 	bl	80062b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f8:	609a      	str	r2, [r3, #8]
      break;
 80059fa:	e039      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	6859      	ldr	r1, [r3, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f000 fbd7 	bl	80061bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2150      	movs	r1, #80	; 0x50
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fc30 	bl	800627a <TIM_ITRx_SetConfig>
      break;
 8005a1a:	e029      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	6859      	ldr	r1, [r3, #4]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f000 fbf6 	bl	800621a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2160      	movs	r1, #96	; 0x60
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fc20 	bl	800627a <TIM_ITRx_SetConfig>
      break;
 8005a3a:	e019      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6859      	ldr	r1, [r3, #4]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f000 fbb7 	bl	80061bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2140      	movs	r1, #64	; 0x40
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fc10 	bl	800627a <TIM_ITRx_SetConfig>
      break;
 8005a5a:	e009      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f000 fc07 	bl	800627a <TIM_ITRx_SetConfig>
      break;
 8005a6c:	e000      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a40      	ldr	r2, [pc, #256]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afa:	d00f      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a3d      	ldr	r2, [pc, #244]	; (8005bf4 <TIM_Base_SetConfig+0x118>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00b      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a3c      	ldr	r2, [pc, #240]	; (8005bf8 <TIM_Base_SetConfig+0x11c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d007      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a3b      	ldr	r2, [pc, #236]	; (8005bfc <TIM_Base_SetConfig+0x120>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a3a      	ldr	r2, [pc, #232]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d108      	bne.n	8005b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2f      	ldr	r2, [pc, #188]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01f      	beq.n	8005b76 <TIM_Base_SetConfig+0x9a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d01b      	beq.n	8005b76 <TIM_Base_SetConfig+0x9a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2c      	ldr	r2, [pc, #176]	; (8005bf4 <TIM_Base_SetConfig+0x118>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d017      	beq.n	8005b76 <TIM_Base_SetConfig+0x9a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <TIM_Base_SetConfig+0x11c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <TIM_Base_SetConfig+0x9a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2a      	ldr	r2, [pc, #168]	; (8005bfc <TIM_Base_SetConfig+0x120>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00f      	beq.n	8005b76 <TIM_Base_SetConfig+0x9a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00b      	beq.n	8005b76 <TIM_Base_SetConfig+0x9a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a28      	ldr	r2, [pc, #160]	; (8005c04 <TIM_Base_SetConfig+0x128>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d007      	beq.n	8005b76 <TIM_Base_SetConfig+0x9a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a27      	ldr	r2, [pc, #156]	; (8005c08 <TIM_Base_SetConfig+0x12c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d003      	beq.n	8005b76 <TIM_Base_SetConfig+0x9a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a26      	ldr	r2, [pc, #152]	; (8005c0c <TIM_Base_SetConfig+0x130>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d108      	bne.n	8005b88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a10      	ldr	r2, [pc, #64]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_Base_SetConfig+0xf8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a12      	ldr	r2, [pc, #72]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <TIM_Base_SetConfig+0xf8>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a11      	ldr	r2, [pc, #68]	; (8005c04 <TIM_Base_SetConfig+0x128>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_Base_SetConfig+0xf8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a10      	ldr	r2, [pc, #64]	; (8005c08 <TIM_Base_SetConfig+0x12c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0xf8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a0f      	ldr	r2, [pc, #60]	; (8005c0c <TIM_Base_SetConfig+0x130>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d103      	bne.n	8005bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	615a      	str	r2, [r3, #20]
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40013400 	.word	0x40013400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40014400 	.word	0x40014400
 8005c0c:	40014800 	.word	0x40014800

08005c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f023 0201 	bic.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0303 	bic.w	r3, r3, #3
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f023 0302 	bic.w	r3, r3, #2
 8005c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a2c      	ldr	r2, [pc, #176]	; (8005d1c <TIM_OC1_SetConfig+0x10c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d00f      	beq.n	8005c90 <TIM_OC1_SetConfig+0x80>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a2b      	ldr	r2, [pc, #172]	; (8005d20 <TIM_OC1_SetConfig+0x110>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00b      	beq.n	8005c90 <TIM_OC1_SetConfig+0x80>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a2a      	ldr	r2, [pc, #168]	; (8005d24 <TIM_OC1_SetConfig+0x114>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_OC1_SetConfig+0x80>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a29      	ldr	r2, [pc, #164]	; (8005d28 <TIM_OC1_SetConfig+0x118>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC1_SetConfig+0x80>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a28      	ldr	r2, [pc, #160]	; (8005d2c <TIM_OC1_SetConfig+0x11c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d10c      	bne.n	8005caa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 0308 	bic.w	r3, r3, #8
 8005c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f023 0304 	bic.w	r3, r3, #4
 8005ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a1b      	ldr	r2, [pc, #108]	; (8005d1c <TIM_OC1_SetConfig+0x10c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00f      	beq.n	8005cd2 <TIM_OC1_SetConfig+0xc2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <TIM_OC1_SetConfig+0x110>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00b      	beq.n	8005cd2 <TIM_OC1_SetConfig+0xc2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <TIM_OC1_SetConfig+0x114>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d007      	beq.n	8005cd2 <TIM_OC1_SetConfig+0xc2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a18      	ldr	r2, [pc, #96]	; (8005d28 <TIM_OC1_SetConfig+0x118>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_OC1_SetConfig+0xc2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a17      	ldr	r2, [pc, #92]	; (8005d2c <TIM_OC1_SetConfig+0x11c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d111      	bne.n	8005cf6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	621a      	str	r2, [r3, #32]
}
 8005d10:	bf00      	nop
 8005d12:	371c      	adds	r7, #28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	40012c00 	.word	0x40012c00
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400
 8005d2c:	40014800 	.word	0x40014800

08005d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f023 0210 	bic.w	r2, r3, #16
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f023 0320 	bic.w	r3, r3, #32
 8005d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a28      	ldr	r2, [pc, #160]	; (8005e30 <TIM_OC2_SetConfig+0x100>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_OC2_SetConfig+0x6c>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a27      	ldr	r2, [pc, #156]	; (8005e34 <TIM_OC2_SetConfig+0x104>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d10d      	bne.n	8005db8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a1d      	ldr	r2, [pc, #116]	; (8005e30 <TIM_OC2_SetConfig+0x100>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00f      	beq.n	8005de0 <TIM_OC2_SetConfig+0xb0>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a1c      	ldr	r2, [pc, #112]	; (8005e34 <TIM_OC2_SetConfig+0x104>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00b      	beq.n	8005de0 <TIM_OC2_SetConfig+0xb0>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a1b      	ldr	r2, [pc, #108]	; (8005e38 <TIM_OC2_SetConfig+0x108>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d007      	beq.n	8005de0 <TIM_OC2_SetConfig+0xb0>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a1a      	ldr	r2, [pc, #104]	; (8005e3c <TIM_OC2_SetConfig+0x10c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_OC2_SetConfig+0xb0>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a19      	ldr	r2, [pc, #100]	; (8005e40 <TIM_OC2_SetConfig+0x110>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d113      	bne.n	8005e08 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005de6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	621a      	str	r2, [r3, #32]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	021b      	lsls	r3, r3, #8
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a27      	ldr	r2, [pc, #156]	; (8005f40 <TIM_OC3_SetConfig+0xfc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_OC3_SetConfig+0x6a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a26      	ldr	r2, [pc, #152]	; (8005f44 <TIM_OC3_SetConfig+0x100>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10d      	bne.n	8005eca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <TIM_OC3_SetConfig+0xfc>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00f      	beq.n	8005ef2 <TIM_OC3_SetConfig+0xae>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <TIM_OC3_SetConfig+0x100>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00b      	beq.n	8005ef2 <TIM_OC3_SetConfig+0xae>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a1a      	ldr	r2, [pc, #104]	; (8005f48 <TIM_OC3_SetConfig+0x104>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d007      	beq.n	8005ef2 <TIM_OC3_SetConfig+0xae>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a19      	ldr	r2, [pc, #100]	; (8005f4c <TIM_OC3_SetConfig+0x108>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_OC3_SetConfig+0xae>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a18      	ldr	r2, [pc, #96]	; (8005f50 <TIM_OC3_SetConfig+0x10c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d113      	bne.n	8005f1a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	621a      	str	r2, [r3, #32]
}
 8005f34:	bf00      	nop
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	40012c00 	.word	0x40012c00
 8005f44:	40013400 	.word	0x40013400
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40014400 	.word	0x40014400
 8005f50:	40014800 	.word	0x40014800

08005f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	031b      	lsls	r3, r3, #12
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a18      	ldr	r2, [pc, #96]	; (8006014 <TIM_OC4_SetConfig+0xc0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00f      	beq.n	8005fd8 <TIM_OC4_SetConfig+0x84>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a17      	ldr	r2, [pc, #92]	; (8006018 <TIM_OC4_SetConfig+0xc4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00b      	beq.n	8005fd8 <TIM_OC4_SetConfig+0x84>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a16      	ldr	r2, [pc, #88]	; (800601c <TIM_OC4_SetConfig+0xc8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d007      	beq.n	8005fd8 <TIM_OC4_SetConfig+0x84>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a15      	ldr	r2, [pc, #84]	; (8006020 <TIM_OC4_SetConfig+0xcc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_OC4_SetConfig+0x84>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a14      	ldr	r2, [pc, #80]	; (8006024 <TIM_OC4_SetConfig+0xd0>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d109      	bne.n	8005fec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	019b      	lsls	r3, r3, #6
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40012c00 	.word	0x40012c00
 8006018:	40013400 	.word	0x40013400
 800601c:	40014000 	.word	0x40014000
 8006020:	40014400 	.word	0x40014400
 8006024:	40014800 	.word	0x40014800

08006028 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800606c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	041b      	lsls	r3, r3, #16
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a17      	ldr	r2, [pc, #92]	; (80060dc <TIM_OC5_SetConfig+0xb4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00f      	beq.n	80060a2 <TIM_OC5_SetConfig+0x7a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a16      	ldr	r2, [pc, #88]	; (80060e0 <TIM_OC5_SetConfig+0xb8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_OC5_SetConfig+0x7a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a15      	ldr	r2, [pc, #84]	; (80060e4 <TIM_OC5_SetConfig+0xbc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_OC5_SetConfig+0x7a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a14      	ldr	r2, [pc, #80]	; (80060e8 <TIM_OC5_SetConfig+0xc0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_OC5_SetConfig+0x7a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a13      	ldr	r2, [pc, #76]	; (80060ec <TIM_OC5_SetConfig+0xc4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d109      	bne.n	80060b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	621a      	str	r2, [r3, #32]
}
 80060d0:	bf00      	nop
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40013400 	.word	0x40013400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800

080060f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800611e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	051b      	lsls	r3, r3, #20
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a18      	ldr	r2, [pc, #96]	; (80061a8 <TIM_OC6_SetConfig+0xb8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00f      	beq.n	800616c <TIM_OC6_SetConfig+0x7c>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a17      	ldr	r2, [pc, #92]	; (80061ac <TIM_OC6_SetConfig+0xbc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00b      	beq.n	800616c <TIM_OC6_SetConfig+0x7c>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a16      	ldr	r2, [pc, #88]	; (80061b0 <TIM_OC6_SetConfig+0xc0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d007      	beq.n	800616c <TIM_OC6_SetConfig+0x7c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <TIM_OC6_SetConfig+0xc4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_OC6_SetConfig+0x7c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <TIM_OC6_SetConfig+0xc8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d109      	bne.n	8006180 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006172:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	029b      	lsls	r3, r3, #10
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40013400 	.word	0x40013400
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400
 80061b8:	40014800 	.word	0x40014800

080061bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f023 0201 	bic.w	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f023 030a 	bic.w	r3, r3, #10
 80061f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800621a:	b480      	push	{r7}
 800621c:	b087      	sub	sp, #28
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	f023 0210 	bic.w	r2, r3, #16
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	031b      	lsls	r3, r3, #12
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006256:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	f043 0307 	orr.w	r3, r3, #7
 800629c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	609a      	str	r2, [r3, #8]
}
 80062a4:	bf00      	nop
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	021a      	lsls	r2, r3, #8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	609a      	str	r2, [r3, #8]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2201      	movs	r2, #1
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1a      	ldr	r2, [r3, #32]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	43db      	mvns	r3, r3
 8006312:	401a      	ands	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1a      	ldr	r2, [r3, #32]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	fa01 f303 	lsl.w	r3, r1, r3
 8006328:	431a      	orrs	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
}
 800632e:	bf00      	nop
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
	...

0800633c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006350:	2302      	movs	r3, #2
 8006352:	e068      	b.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a2e      	ldr	r2, [pc, #184]	; (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2d      	ldr	r2, [pc, #180]	; (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d108      	bne.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800638e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a1e      	ldr	r2, [pc, #120]	; (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01d      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c6:	d018      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1b      	ldr	r2, [pc, #108]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d013      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1a      	ldr	r2, [pc, #104]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00e      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a18      	ldr	r2, [pc, #96]	; (8006444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d009      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a13      	ldr	r2, [pc, #76]	; (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d004      	beq.n	80063fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a14      	ldr	r2, [pc, #80]	; (8006448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d10c      	bne.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	4313      	orrs	r3, r2
 800640a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40012c00 	.word	0x40012c00
 8006438:	40013400 	.word	0x40013400
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40014000 	.word	0x40014000

0800644c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e040      	b.n	800651c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fb fae6 	bl	8001a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2224      	movs	r2, #36	; 0x24
 80064b4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0201 	bic.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8c0 	bl	800664c <UART_SetConfig>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e022      	b.n	800651c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fc26 	bl	8006d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fcad 	bl	8006e74 <UART_CheckIdleState>
 800651a:	4603      	mov	r3, r0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08a      	sub	sp, #40	; 0x28
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006538:	2b20      	cmp	r3, #32
 800653a:	f040 8081 	bne.w	8006640 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <HAL_UART_Transmit+0x26>
 8006544:	88fb      	ldrh	r3, [r7, #6]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e079      	b.n	8006642 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_UART_Transmit+0x38>
 8006558:	2302      	movs	r3, #2
 800655a:	e072      	b.n	8006642 <HAL_UART_Transmit+0x11e>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2221      	movs	r2, #33	; 0x21
 800656e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006570:	f7fb fc0a 	bl	8001d88 <HAL_GetTick>
 8006574:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	88fa      	ldrh	r2, [r7, #6]
 800657a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	88fa      	ldrh	r2, [r7, #6]
 8006582:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658e:	d108      	bne.n	80065a2 <HAL_UART_Transmit+0x7e>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d104      	bne.n	80065a2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006598:	2300      	movs	r3, #0
 800659a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	e003      	b.n	80065aa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80065b2:	e02d      	b.n	8006610 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2200      	movs	r2, #0
 80065bc:	2180      	movs	r1, #128	; 0x80
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 fc9d 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e039      	b.n	8006642 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10b      	bne.n	80065ec <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	881a      	ldrh	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065e0:	b292      	uxth	r2, r2
 80065e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	3302      	adds	r3, #2
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	e008      	b.n	80065fe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	781a      	ldrb	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	b292      	uxth	r2, r2
 80065f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	3301      	adds	r3, #1
 80065fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006604:	b29b      	uxth	r3, r3
 8006606:	3b01      	subs	r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1cb      	bne.n	80065b4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2200      	movs	r2, #0
 8006624:	2140      	movs	r1, #64	; 0x40
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fc69 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e005      	b.n	8006642 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	e000      	b.n	8006642 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006640:	2302      	movs	r3, #2
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800664c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006650:	b08a      	sub	sp, #40	; 0x28
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006656:	2300      	movs	r3, #0
 8006658:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	4313      	orrs	r3, r2
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	4bb8      	ldr	r3, [pc, #736]	; (8006964 <UART_SetConfig+0x318>)
 8006682:	4013      	ands	r3, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6812      	ldr	r2, [r2, #0]
 8006688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800668a:	430b      	orrs	r3, r1
 800668c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4aae      	ldr	r2, [pc, #696]	; (8006968 <UART_SetConfig+0x31c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d004      	beq.n	80066be <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ba:	4313      	orrs	r3, r2
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ce:	430a      	orrs	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4aa5      	ldr	r2, [pc, #660]	; (800696c <UART_SetConfig+0x320>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d126      	bne.n	800672a <UART_SetConfig+0xde>
 80066dc:	4ba4      	ldr	r3, [pc, #656]	; (8006970 <UART_SetConfig+0x324>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d81a      	bhi.n	8006720 <UART_SetConfig+0xd4>
 80066ea:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <UART_SetConfig+0xa4>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006701 	.word	0x08006701
 80066f4:	08006711 	.word	0x08006711
 80066f8:	08006709 	.word	0x08006709
 80066fc:	08006719 	.word	0x08006719
 8006700:	2301      	movs	r3, #1
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006706:	e105      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006708:	2302      	movs	r3, #2
 800670a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670e:	e101      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006716:	e0fd      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671e:	e0f9      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006726:	bf00      	nop
 8006728:	e0f4      	b.n	8006914 <UART_SetConfig+0x2c8>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a91      	ldr	r2, [pc, #580]	; (8006974 <UART_SetConfig+0x328>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d138      	bne.n	80067a6 <UART_SetConfig+0x15a>
 8006734:	4b8e      	ldr	r3, [pc, #568]	; (8006970 <UART_SetConfig+0x324>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673a:	f003 030c 	and.w	r3, r3, #12
 800673e:	2b0c      	cmp	r3, #12
 8006740:	d82c      	bhi.n	800679c <UART_SetConfig+0x150>
 8006742:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <UART_SetConfig+0xfc>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	0800677d 	.word	0x0800677d
 800674c:	0800679d 	.word	0x0800679d
 8006750:	0800679d 	.word	0x0800679d
 8006754:	0800679d 	.word	0x0800679d
 8006758:	0800678d 	.word	0x0800678d
 800675c:	0800679d 	.word	0x0800679d
 8006760:	0800679d 	.word	0x0800679d
 8006764:	0800679d 	.word	0x0800679d
 8006768:	08006785 	.word	0x08006785
 800676c:	0800679d 	.word	0x0800679d
 8006770:	0800679d 	.word	0x0800679d
 8006774:	0800679d 	.word	0x0800679d
 8006778:	08006795 	.word	0x08006795
 800677c:	2300      	movs	r3, #0
 800677e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006782:	e0c7      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006784:	2302      	movs	r3, #2
 8006786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678a:	e0c3      	b.n	8006914 <UART_SetConfig+0x2c8>
 800678c:	2304      	movs	r3, #4
 800678e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006792:	e0bf      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006794:	2308      	movs	r3, #8
 8006796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679a:	e0bb      	b.n	8006914 <UART_SetConfig+0x2c8>
 800679c:	2310      	movs	r3, #16
 800679e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a2:	bf00      	nop
 80067a4:	e0b6      	b.n	8006914 <UART_SetConfig+0x2c8>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a73      	ldr	r2, [pc, #460]	; (8006978 <UART_SetConfig+0x32c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d125      	bne.n	80067fc <UART_SetConfig+0x1b0>
 80067b0:	4b6f      	ldr	r3, [pc, #444]	; (8006970 <UART_SetConfig+0x324>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067ba:	2b10      	cmp	r3, #16
 80067bc:	d011      	beq.n	80067e2 <UART_SetConfig+0x196>
 80067be:	2b10      	cmp	r3, #16
 80067c0:	d802      	bhi.n	80067c8 <UART_SetConfig+0x17c>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <UART_SetConfig+0x186>
 80067c6:	e014      	b.n	80067f2 <UART_SetConfig+0x1a6>
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d006      	beq.n	80067da <UART_SetConfig+0x18e>
 80067cc:	2b30      	cmp	r3, #48	; 0x30
 80067ce:	d00c      	beq.n	80067ea <UART_SetConfig+0x19e>
 80067d0:	e00f      	b.n	80067f2 <UART_SetConfig+0x1a6>
 80067d2:	2300      	movs	r3, #0
 80067d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d8:	e09c      	b.n	8006914 <UART_SetConfig+0x2c8>
 80067da:	2302      	movs	r3, #2
 80067dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e0:	e098      	b.n	8006914 <UART_SetConfig+0x2c8>
 80067e2:	2304      	movs	r3, #4
 80067e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e8:	e094      	b.n	8006914 <UART_SetConfig+0x2c8>
 80067ea:	2308      	movs	r3, #8
 80067ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f0:	e090      	b.n	8006914 <UART_SetConfig+0x2c8>
 80067f2:	2310      	movs	r3, #16
 80067f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f8:	bf00      	nop
 80067fa:	e08b      	b.n	8006914 <UART_SetConfig+0x2c8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a5e      	ldr	r2, [pc, #376]	; (800697c <UART_SetConfig+0x330>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d125      	bne.n	8006852 <UART_SetConfig+0x206>
 8006806:	4b5a      	ldr	r3, [pc, #360]	; (8006970 <UART_SetConfig+0x324>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006810:	2b40      	cmp	r3, #64	; 0x40
 8006812:	d011      	beq.n	8006838 <UART_SetConfig+0x1ec>
 8006814:	2b40      	cmp	r3, #64	; 0x40
 8006816:	d802      	bhi.n	800681e <UART_SetConfig+0x1d2>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <UART_SetConfig+0x1dc>
 800681c:	e014      	b.n	8006848 <UART_SetConfig+0x1fc>
 800681e:	2b80      	cmp	r3, #128	; 0x80
 8006820:	d006      	beq.n	8006830 <UART_SetConfig+0x1e4>
 8006822:	2bc0      	cmp	r3, #192	; 0xc0
 8006824:	d00c      	beq.n	8006840 <UART_SetConfig+0x1f4>
 8006826:	e00f      	b.n	8006848 <UART_SetConfig+0x1fc>
 8006828:	2300      	movs	r3, #0
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800682e:	e071      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006830:	2302      	movs	r3, #2
 8006832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006836:	e06d      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006838:	2304      	movs	r3, #4
 800683a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683e:	e069      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006840:	2308      	movs	r3, #8
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006846:	e065      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006848:	2310      	movs	r3, #16
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684e:	bf00      	nop
 8006850:	e060      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a4a      	ldr	r2, [pc, #296]	; (8006980 <UART_SetConfig+0x334>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d129      	bne.n	80068b0 <UART_SetConfig+0x264>
 800685c:	4b44      	ldr	r3, [pc, #272]	; (8006970 <UART_SetConfig+0x324>)
 800685e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686a:	d014      	beq.n	8006896 <UART_SetConfig+0x24a>
 800686c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006870:	d802      	bhi.n	8006878 <UART_SetConfig+0x22c>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d007      	beq.n	8006886 <UART_SetConfig+0x23a>
 8006876:	e016      	b.n	80068a6 <UART_SetConfig+0x25a>
 8006878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687c:	d007      	beq.n	800688e <UART_SetConfig+0x242>
 800687e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006882:	d00c      	beq.n	800689e <UART_SetConfig+0x252>
 8006884:	e00f      	b.n	80068a6 <UART_SetConfig+0x25a>
 8006886:	2300      	movs	r3, #0
 8006888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800688c:	e042      	b.n	8006914 <UART_SetConfig+0x2c8>
 800688e:	2302      	movs	r3, #2
 8006890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006894:	e03e      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006896:	2304      	movs	r3, #4
 8006898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800689c:	e03a      	b.n	8006914 <UART_SetConfig+0x2c8>
 800689e:	2308      	movs	r3, #8
 80068a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a4:	e036      	b.n	8006914 <UART_SetConfig+0x2c8>
 80068a6:	2310      	movs	r3, #16
 80068a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ac:	bf00      	nop
 80068ae:	e031      	b.n	8006914 <UART_SetConfig+0x2c8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a2c      	ldr	r2, [pc, #176]	; (8006968 <UART_SetConfig+0x31c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d129      	bne.n	800690e <UART_SetConfig+0x2c2>
 80068ba:	4b2d      	ldr	r3, [pc, #180]	; (8006970 <UART_SetConfig+0x324>)
 80068bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c8:	d014      	beq.n	80068f4 <UART_SetConfig+0x2a8>
 80068ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ce:	d802      	bhi.n	80068d6 <UART_SetConfig+0x28a>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d007      	beq.n	80068e4 <UART_SetConfig+0x298>
 80068d4:	e016      	b.n	8006904 <UART_SetConfig+0x2b8>
 80068d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068da:	d007      	beq.n	80068ec <UART_SetConfig+0x2a0>
 80068dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068e0:	d00c      	beq.n	80068fc <UART_SetConfig+0x2b0>
 80068e2:	e00f      	b.n	8006904 <UART_SetConfig+0x2b8>
 80068e4:	2300      	movs	r3, #0
 80068e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ea:	e013      	b.n	8006914 <UART_SetConfig+0x2c8>
 80068ec:	2302      	movs	r3, #2
 80068ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f2:	e00f      	b.n	8006914 <UART_SetConfig+0x2c8>
 80068f4:	2304      	movs	r3, #4
 80068f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fa:	e00b      	b.n	8006914 <UART_SetConfig+0x2c8>
 80068fc:	2308      	movs	r3, #8
 80068fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006902:	e007      	b.n	8006914 <UART_SetConfig+0x2c8>
 8006904:	2310      	movs	r3, #16
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690a:	bf00      	nop
 800690c:	e002      	b.n	8006914 <UART_SetConfig+0x2c8>
 800690e:	2310      	movs	r3, #16
 8006910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a13      	ldr	r2, [pc, #76]	; (8006968 <UART_SetConfig+0x31c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	f040 80fe 	bne.w	8006b1c <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006924:	2b08      	cmp	r3, #8
 8006926:	d837      	bhi.n	8006998 <UART_SetConfig+0x34c>
 8006928:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <UART_SetConfig+0x2e4>)
 800692a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692e:	bf00      	nop
 8006930:	08006955 	.word	0x08006955
 8006934:	08006999 	.word	0x08006999
 8006938:	0800695d 	.word	0x0800695d
 800693c:	08006999 	.word	0x08006999
 8006940:	08006989 	.word	0x08006989
 8006944:	08006999 	.word	0x08006999
 8006948:	08006999 	.word	0x08006999
 800694c:	08006999 	.word	0x08006999
 8006950:	08006991 	.word	0x08006991
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006954:	f7fd ff92 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8006958:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800695a:	e020      	b.n	800699e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800695c:	4b09      	ldr	r3, [pc, #36]	; (8006984 <UART_SetConfig+0x338>)
 800695e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006960:	e01d      	b.n	800699e <UART_SetConfig+0x352>
 8006962:	bf00      	nop
 8006964:	efff69f3 	.word	0xefff69f3
 8006968:	40008000 	.word	0x40008000
 800696c:	40013800 	.word	0x40013800
 8006970:	40021000 	.word	0x40021000
 8006974:	40004400 	.word	0x40004400
 8006978:	40004800 	.word	0x40004800
 800697c:	40004c00 	.word	0x40004c00
 8006980:	40005000 	.word	0x40005000
 8006984:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006988:	f7fd fee2 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 800698c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800698e:	e006      	b.n	800699e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006994:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006996:	e002      	b.n	800699e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	76fb      	strb	r3, [r7, #27]
        break;
 800699c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 81b9 	beq.w	8006d18 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	4413      	add	r3, r2
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d305      	bcc.n	80069c2 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d902      	bls.n	80069c8 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	76fb      	strb	r3, [r7, #27]
 80069c6:	e1a7      	b.n	8006d18 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80069c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	f200 8092 	bhi.w	8006af6 <UART_SetConfig+0x4aa>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <UART_SetConfig+0x38c>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	080069fd 	.word	0x080069fd
 80069dc:	08006af7 	.word	0x08006af7
 80069e0:	08006a4b 	.word	0x08006a4b
 80069e4:	08006af7 	.word	0x08006af7
 80069e8:	08006a7f 	.word	0x08006a7f
 80069ec:	08006af7 	.word	0x08006af7
 80069f0:	08006af7 	.word	0x08006af7
 80069f4:	08006af7 	.word	0x08006af7
 80069f8:	08006acd 	.word	0x08006acd
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80069fc:	f7fd ff3e 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8006a00:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4619      	mov	r1, r3
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	f04f 0400 	mov.w	r4, #0
 8006a12:	0214      	lsls	r4, r2, #8
 8006a14:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006a18:	020b      	lsls	r3, r1, #8
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6852      	ldr	r2, [r2, #4]
 8006a1e:	0852      	lsrs	r2, r2, #1
 8006a20:	4611      	mov	r1, r2
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	eb13 0b01 	adds.w	fp, r3, r1
 8006a2a:	eb44 0c02 	adc.w	ip, r4, r2
 8006a2e:	4658      	mov	r0, fp
 8006a30:	4661      	mov	r1, ip
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f04f 0400 	mov.w	r4, #0
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	f7f9 fc1f 	bl	8000280 <__aeabi_uldivmod>
 8006a42:	4603      	mov	r3, r0
 8006a44:	460c      	mov	r4, r1
 8006a46:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a48:	e058      	b.n	8006afc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	f04f 0400 	mov.w	r4, #0
 8006a54:	49ae      	ldr	r1, [pc, #696]	; (8006d10 <UART_SetConfig+0x6c4>)
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	eb13 0b01 	adds.w	fp, r3, r1
 8006a5e:	eb44 0c02 	adc.w	ip, r4, r2
 8006a62:	4658      	mov	r0, fp
 8006a64:	4661      	mov	r1, ip
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f04f 0400 	mov.w	r4, #0
 8006a6e:	461a      	mov	r2, r3
 8006a70:	4623      	mov	r3, r4
 8006a72:	f7f9 fc05 	bl	8000280 <__aeabi_uldivmod>
 8006a76:	4603      	mov	r3, r0
 8006a78:	460c      	mov	r4, r1
 8006a7a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a7c:	e03e      	b.n	8006afc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006a7e:	f7fd fe67 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8006a82:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	4619      	mov	r1, r3
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	f04f 0400 	mov.w	r4, #0
 8006a94:	0214      	lsls	r4, r2, #8
 8006a96:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006a9a:	020b      	lsls	r3, r1, #8
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6852      	ldr	r2, [r2, #4]
 8006aa0:	0852      	lsrs	r2, r2, #1
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	eb13 0b01 	adds.w	fp, r3, r1
 8006aac:	eb44 0c02 	adc.w	ip, r4, r2
 8006ab0:	4658      	mov	r0, fp
 8006ab2:	4661      	mov	r1, ip
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f04f 0400 	mov.w	r4, #0
 8006abc:	461a      	mov	r2, r3
 8006abe:	4623      	mov	r3, r4
 8006ac0:	f7f9 fbde 	bl	8000280 <__aeabi_uldivmod>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006aca:	e017      	b.n	8006afc <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	f04f 0400 	mov.w	r4, #0
 8006ad6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006ada:	f144 0100 	adc.w	r1, r4, #0
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f04f 0400 	mov.w	r4, #0
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4623      	mov	r3, r4
 8006aea:	f7f9 fbc9 	bl	8000280 <__aeabi_uldivmod>
 8006aee:	4603      	mov	r3, r0
 8006af0:	460c      	mov	r4, r1
 8006af2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006af4:	e002      	b.n	8006afc <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	76fb      	strb	r3, [r7, #27]
            break;
 8006afa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b02:	d308      	bcc.n	8006b16 <UART_SetConfig+0x4ca>
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b0a:	d204      	bcs.n	8006b16 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	60da      	str	r2, [r3, #12]
 8006b14:	e100      	b.n	8006d18 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	76fb      	strb	r3, [r7, #27]
 8006b1a:	e0fd      	b.n	8006d18 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b24:	f040 8084 	bne.w	8006c30 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d85f      	bhi.n	8006bf0 <UART_SetConfig+0x5a4>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x4ec>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b5d 	.word	0x08006b5d
 8006b3c:	08006b7d 	.word	0x08006b7d
 8006b40:	08006b9d 	.word	0x08006b9d
 8006b44:	08006bf1 	.word	0x08006bf1
 8006b48:	08006bb9 	.word	0x08006bb9
 8006b4c:	08006bf1 	.word	0x08006bf1
 8006b50:	08006bf1 	.word	0x08006bf1
 8006b54:	08006bf1 	.word	0x08006bf1
 8006b58:	08006bd9 	.word	0x08006bd9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b5c:	f7fd fe8e 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8006b60:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	005a      	lsls	r2, r3, #1
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	085b      	lsrs	r3, r3, #1
 8006b6c:	441a      	add	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b7a:	e03c      	b.n	8006bf6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b7c:	f7fd fe94 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 8006b80:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	005a      	lsls	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	441a      	add	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b9a:	e02c      	b.n	8006bf6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	085b      	lsrs	r3, r3, #1
 8006ba2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006ba6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6852      	ldr	r2, [r2, #4]
 8006bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bb6:	e01e      	b.n	8006bf6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bb8:	f7fd fdca 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8006bbc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	005a      	lsls	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	441a      	add	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bd6:	e00e      	b.n	8006bf6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bee:	e002      	b.n	8006bf6 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	76fb      	strb	r3, [r7, #27]
        break;
 8006bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	2b0f      	cmp	r3, #15
 8006bfa:	d916      	bls.n	8006c2a <UART_SetConfig+0x5de>
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c02:	d212      	bcs.n	8006c2a <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f023 030f 	bic.w	r3, r3, #15
 8006c0c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	89fb      	ldrh	r3, [r7, #14]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	89fa      	ldrh	r2, [r7, #14]
 8006c26:	60da      	str	r2, [r3, #12]
 8006c28:	e076      	b.n	8006d18 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	76fb      	strb	r3, [r7, #27]
 8006c2e:	e073      	b.n	8006d18 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d85c      	bhi.n	8006cf2 <UART_SetConfig+0x6a6>
 8006c38:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <UART_SetConfig+0x5f4>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c65 	.word	0x08006c65
 8006c44:	08006c83 	.word	0x08006c83
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006cf3 	.word	0x08006cf3
 8006c50:	08006cbd 	.word	0x08006cbd
 8006c54:	08006cf3 	.word	0x08006cf3
 8006c58:	08006cf3 	.word	0x08006cf3
 8006c5c:	08006cf3 	.word	0x08006cf3
 8006c60:	08006cdb 	.word	0x08006cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c64:	f7fd fe0a 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8006c68:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	085a      	lsrs	r2, r3, #1
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	441a      	add	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c80:	e03a      	b.n	8006cf8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c82:	f7fd fe11 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 8006c86:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	085a      	lsrs	r2, r3, #1
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	441a      	add	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c9e:	e02b      	b.n	8006cf8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006caa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6852      	ldr	r2, [r2, #4]
 8006cb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cba:	e01d      	b.n	8006cf8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cbc:	f7fd fd48 	bl	8004750 <HAL_RCC_GetSysClockFreq>
 8006cc0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	085a      	lsrs	r2, r3, #1
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	441a      	add	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cd8:	e00e      	b.n	8006cf8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	085b      	lsrs	r3, r3, #1
 8006ce0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cf0:	e002      	b.n	8006cf8 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	76fb      	strb	r3, [r7, #27]
        break;
 8006cf6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	2b0f      	cmp	r3, #15
 8006cfc:	d90a      	bls.n	8006d14 <UART_SetConfig+0x6c8>
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d04:	d206      	bcs.n	8006d14 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	60da      	str	r2, [r3, #12]
 8006d0e:	e003      	b.n	8006d18 <UART_SetConfig+0x6cc>
 8006d10:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006d24:	7efb      	ldrb	r3, [r7, #27]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3728      	adds	r7, #40	; 0x28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01a      	beq.n	8006e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e2e:	d10a      	bne.n	8006e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	605a      	str	r2, [r3, #4]
  }
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006e82:	f7fa ff81 	bl	8001d88 <HAL_GetTick>
 8006e86:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	d10e      	bne.n	8006eb4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f82a 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e020      	b.n	8006ef6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d10e      	bne.n	8006ee0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f814 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e00a      	b.n	8006ef6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0e:	e05d      	b.n	8006fcc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d059      	beq.n	8006fcc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f18:	f7fa ff36 	bl	8001d88 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d302      	bcc.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x30>
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d11b      	bne.n	8006f66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f3c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0201 	bic.w	r2, r2, #1
 8006f4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e042      	b.n	8006fec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d02b      	beq.n	8006fcc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f82:	d123      	bne.n	8006fcc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f8c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f9c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0201 	bic.w	r2, r2, #1
 8006fac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e00f      	b.n	8006fec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69da      	ldr	r2, [r3, #28]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	bf0c      	ite	eq
 8006fdc:	2301      	moveq	r3, #1
 8006fde:	2300      	movne	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d092      	beq.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <__errno>:
 8006ff4:	4b01      	ldr	r3, [pc, #4]	; (8006ffc <__errno+0x8>)
 8006ff6:	6818      	ldr	r0, [r3, #0]
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	2000000c 	.word	0x2000000c

08007000 <__libc_init_array>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	4e0d      	ldr	r6, [pc, #52]	; (8007038 <__libc_init_array+0x38>)
 8007004:	4c0d      	ldr	r4, [pc, #52]	; (800703c <__libc_init_array+0x3c>)
 8007006:	1ba4      	subs	r4, r4, r6
 8007008:	10a4      	asrs	r4, r4, #2
 800700a:	2500      	movs	r5, #0
 800700c:	42a5      	cmp	r5, r4
 800700e:	d109      	bne.n	8007024 <__libc_init_array+0x24>
 8007010:	4e0b      	ldr	r6, [pc, #44]	; (8007040 <__libc_init_array+0x40>)
 8007012:	4c0c      	ldr	r4, [pc, #48]	; (8007044 <__libc_init_array+0x44>)
 8007014:	f000 fc26 	bl	8007864 <_init>
 8007018:	1ba4      	subs	r4, r4, r6
 800701a:	10a4      	asrs	r4, r4, #2
 800701c:	2500      	movs	r5, #0
 800701e:	42a5      	cmp	r5, r4
 8007020:	d105      	bne.n	800702e <__libc_init_array+0x2e>
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007028:	4798      	blx	r3
 800702a:	3501      	adds	r5, #1
 800702c:	e7ee      	b.n	800700c <__libc_init_array+0xc>
 800702e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007032:	4798      	blx	r3
 8007034:	3501      	adds	r5, #1
 8007036:	e7f2      	b.n	800701e <__libc_init_array+0x1e>
 8007038:	08007924 	.word	0x08007924
 800703c:	08007924 	.word	0x08007924
 8007040:	08007924 	.word	0x08007924
 8007044:	08007928 	.word	0x08007928

08007048 <memset>:
 8007048:	4402      	add	r2, r0
 800704a:	4603      	mov	r3, r0
 800704c:	4293      	cmp	r3, r2
 800704e:	d100      	bne.n	8007052 <memset+0xa>
 8007050:	4770      	bx	lr
 8007052:	f803 1b01 	strb.w	r1, [r3], #1
 8007056:	e7f9      	b.n	800704c <memset+0x4>

08007058 <siprintf>:
 8007058:	b40e      	push	{r1, r2, r3}
 800705a:	b500      	push	{lr}
 800705c:	b09c      	sub	sp, #112	; 0x70
 800705e:	ab1d      	add	r3, sp, #116	; 0x74
 8007060:	9002      	str	r0, [sp, #8]
 8007062:	9006      	str	r0, [sp, #24]
 8007064:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007068:	4809      	ldr	r0, [pc, #36]	; (8007090 <siprintf+0x38>)
 800706a:	9107      	str	r1, [sp, #28]
 800706c:	9104      	str	r1, [sp, #16]
 800706e:	4909      	ldr	r1, [pc, #36]	; (8007094 <siprintf+0x3c>)
 8007070:	f853 2b04 	ldr.w	r2, [r3], #4
 8007074:	9105      	str	r1, [sp, #20]
 8007076:	6800      	ldr	r0, [r0, #0]
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	a902      	add	r1, sp, #8
 800707c:	f000 f866 	bl	800714c <_svfiprintf_r>
 8007080:	9b02      	ldr	r3, [sp, #8]
 8007082:	2200      	movs	r2, #0
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	b01c      	add	sp, #112	; 0x70
 8007088:	f85d eb04 	ldr.w	lr, [sp], #4
 800708c:	b003      	add	sp, #12
 800708e:	4770      	bx	lr
 8007090:	2000000c 	.word	0x2000000c
 8007094:	ffff0208 	.word	0xffff0208

08007098 <__ssputs_r>:
 8007098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800709c:	688e      	ldr	r6, [r1, #8]
 800709e:	429e      	cmp	r6, r3
 80070a0:	4682      	mov	sl, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	4690      	mov	r8, r2
 80070a6:	4699      	mov	r9, r3
 80070a8:	d837      	bhi.n	800711a <__ssputs_r+0x82>
 80070aa:	898a      	ldrh	r2, [r1, #12]
 80070ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070b0:	d031      	beq.n	8007116 <__ssputs_r+0x7e>
 80070b2:	6825      	ldr	r5, [r4, #0]
 80070b4:	6909      	ldr	r1, [r1, #16]
 80070b6:	1a6f      	subs	r7, r5, r1
 80070b8:	6965      	ldr	r5, [r4, #20]
 80070ba:	2302      	movs	r3, #2
 80070bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80070c4:	f109 0301 	add.w	r3, r9, #1
 80070c8:	443b      	add	r3, r7
 80070ca:	429d      	cmp	r5, r3
 80070cc:	bf38      	it	cc
 80070ce:	461d      	movcc	r5, r3
 80070d0:	0553      	lsls	r3, r2, #21
 80070d2:	d530      	bpl.n	8007136 <__ssputs_r+0x9e>
 80070d4:	4629      	mov	r1, r5
 80070d6:	f000 fb2b 	bl	8007730 <_malloc_r>
 80070da:	4606      	mov	r6, r0
 80070dc:	b950      	cbnz	r0, 80070f4 <__ssputs_r+0x5c>
 80070de:	230c      	movs	r3, #12
 80070e0:	f8ca 3000 	str.w	r3, [sl]
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f4:	463a      	mov	r2, r7
 80070f6:	6921      	ldr	r1, [r4, #16]
 80070f8:	f000 faa8 	bl	800764c <memcpy>
 80070fc:	89a3      	ldrh	r3, [r4, #12]
 80070fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007106:	81a3      	strh	r3, [r4, #12]
 8007108:	6126      	str	r6, [r4, #16]
 800710a:	6165      	str	r5, [r4, #20]
 800710c:	443e      	add	r6, r7
 800710e:	1bed      	subs	r5, r5, r7
 8007110:	6026      	str	r6, [r4, #0]
 8007112:	60a5      	str	r5, [r4, #8]
 8007114:	464e      	mov	r6, r9
 8007116:	454e      	cmp	r6, r9
 8007118:	d900      	bls.n	800711c <__ssputs_r+0x84>
 800711a:	464e      	mov	r6, r9
 800711c:	4632      	mov	r2, r6
 800711e:	4641      	mov	r1, r8
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	f000 fa9e 	bl	8007662 <memmove>
 8007126:	68a3      	ldr	r3, [r4, #8]
 8007128:	1b9b      	subs	r3, r3, r6
 800712a:	60a3      	str	r3, [r4, #8]
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	441e      	add	r6, r3
 8007130:	6026      	str	r6, [r4, #0]
 8007132:	2000      	movs	r0, #0
 8007134:	e7dc      	b.n	80070f0 <__ssputs_r+0x58>
 8007136:	462a      	mov	r2, r5
 8007138:	f000 fb54 	bl	80077e4 <_realloc_r>
 800713c:	4606      	mov	r6, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	d1e2      	bne.n	8007108 <__ssputs_r+0x70>
 8007142:	6921      	ldr	r1, [r4, #16]
 8007144:	4650      	mov	r0, sl
 8007146:	f000 faa5 	bl	8007694 <_free_r>
 800714a:	e7c8      	b.n	80070de <__ssputs_r+0x46>

0800714c <_svfiprintf_r>:
 800714c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007150:	461d      	mov	r5, r3
 8007152:	898b      	ldrh	r3, [r1, #12]
 8007154:	061f      	lsls	r7, r3, #24
 8007156:	b09d      	sub	sp, #116	; 0x74
 8007158:	4680      	mov	r8, r0
 800715a:	460c      	mov	r4, r1
 800715c:	4616      	mov	r6, r2
 800715e:	d50f      	bpl.n	8007180 <_svfiprintf_r+0x34>
 8007160:	690b      	ldr	r3, [r1, #16]
 8007162:	b96b      	cbnz	r3, 8007180 <_svfiprintf_r+0x34>
 8007164:	2140      	movs	r1, #64	; 0x40
 8007166:	f000 fae3 	bl	8007730 <_malloc_r>
 800716a:	6020      	str	r0, [r4, #0]
 800716c:	6120      	str	r0, [r4, #16]
 800716e:	b928      	cbnz	r0, 800717c <_svfiprintf_r+0x30>
 8007170:	230c      	movs	r3, #12
 8007172:	f8c8 3000 	str.w	r3, [r8]
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	e0c8      	b.n	800730e <_svfiprintf_r+0x1c2>
 800717c:	2340      	movs	r3, #64	; 0x40
 800717e:	6163      	str	r3, [r4, #20]
 8007180:	2300      	movs	r3, #0
 8007182:	9309      	str	r3, [sp, #36]	; 0x24
 8007184:	2320      	movs	r3, #32
 8007186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800718a:	2330      	movs	r3, #48	; 0x30
 800718c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007190:	9503      	str	r5, [sp, #12]
 8007192:	f04f 0b01 	mov.w	fp, #1
 8007196:	4637      	mov	r7, r6
 8007198:	463d      	mov	r5, r7
 800719a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800719e:	b10b      	cbz	r3, 80071a4 <_svfiprintf_r+0x58>
 80071a0:	2b25      	cmp	r3, #37	; 0x25
 80071a2:	d13e      	bne.n	8007222 <_svfiprintf_r+0xd6>
 80071a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80071a8:	d00b      	beq.n	80071c2 <_svfiprintf_r+0x76>
 80071aa:	4653      	mov	r3, sl
 80071ac:	4632      	mov	r2, r6
 80071ae:	4621      	mov	r1, r4
 80071b0:	4640      	mov	r0, r8
 80071b2:	f7ff ff71 	bl	8007098 <__ssputs_r>
 80071b6:	3001      	adds	r0, #1
 80071b8:	f000 80a4 	beq.w	8007304 <_svfiprintf_r+0x1b8>
 80071bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071be:	4453      	add	r3, sl
 80071c0:	9309      	str	r3, [sp, #36]	; 0x24
 80071c2:	783b      	ldrb	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 809d 	beq.w	8007304 <_svfiprintf_r+0x1b8>
 80071ca:	2300      	movs	r3, #0
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071d4:	9304      	str	r3, [sp, #16]
 80071d6:	9307      	str	r3, [sp, #28]
 80071d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071dc:	931a      	str	r3, [sp, #104]	; 0x68
 80071de:	462f      	mov	r7, r5
 80071e0:	2205      	movs	r2, #5
 80071e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80071e6:	4850      	ldr	r0, [pc, #320]	; (8007328 <_svfiprintf_r+0x1dc>)
 80071e8:	f7f8 fffa 	bl	80001e0 <memchr>
 80071ec:	9b04      	ldr	r3, [sp, #16]
 80071ee:	b9d0      	cbnz	r0, 8007226 <_svfiprintf_r+0xda>
 80071f0:	06d9      	lsls	r1, r3, #27
 80071f2:	bf44      	itt	mi
 80071f4:	2220      	movmi	r2, #32
 80071f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071fa:	071a      	lsls	r2, r3, #28
 80071fc:	bf44      	itt	mi
 80071fe:	222b      	movmi	r2, #43	; 0x2b
 8007200:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007204:	782a      	ldrb	r2, [r5, #0]
 8007206:	2a2a      	cmp	r2, #42	; 0x2a
 8007208:	d015      	beq.n	8007236 <_svfiprintf_r+0xea>
 800720a:	9a07      	ldr	r2, [sp, #28]
 800720c:	462f      	mov	r7, r5
 800720e:	2000      	movs	r0, #0
 8007210:	250a      	movs	r5, #10
 8007212:	4639      	mov	r1, r7
 8007214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007218:	3b30      	subs	r3, #48	; 0x30
 800721a:	2b09      	cmp	r3, #9
 800721c:	d94d      	bls.n	80072ba <_svfiprintf_r+0x16e>
 800721e:	b1b8      	cbz	r0, 8007250 <_svfiprintf_r+0x104>
 8007220:	e00f      	b.n	8007242 <_svfiprintf_r+0xf6>
 8007222:	462f      	mov	r7, r5
 8007224:	e7b8      	b.n	8007198 <_svfiprintf_r+0x4c>
 8007226:	4a40      	ldr	r2, [pc, #256]	; (8007328 <_svfiprintf_r+0x1dc>)
 8007228:	1a80      	subs	r0, r0, r2
 800722a:	fa0b f000 	lsl.w	r0, fp, r0
 800722e:	4318      	orrs	r0, r3
 8007230:	9004      	str	r0, [sp, #16]
 8007232:	463d      	mov	r5, r7
 8007234:	e7d3      	b.n	80071de <_svfiprintf_r+0x92>
 8007236:	9a03      	ldr	r2, [sp, #12]
 8007238:	1d11      	adds	r1, r2, #4
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	9103      	str	r1, [sp, #12]
 800723e:	2a00      	cmp	r2, #0
 8007240:	db01      	blt.n	8007246 <_svfiprintf_r+0xfa>
 8007242:	9207      	str	r2, [sp, #28]
 8007244:	e004      	b.n	8007250 <_svfiprintf_r+0x104>
 8007246:	4252      	negs	r2, r2
 8007248:	f043 0302 	orr.w	r3, r3, #2
 800724c:	9207      	str	r2, [sp, #28]
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	783b      	ldrb	r3, [r7, #0]
 8007252:	2b2e      	cmp	r3, #46	; 0x2e
 8007254:	d10c      	bne.n	8007270 <_svfiprintf_r+0x124>
 8007256:	787b      	ldrb	r3, [r7, #1]
 8007258:	2b2a      	cmp	r3, #42	; 0x2a
 800725a:	d133      	bne.n	80072c4 <_svfiprintf_r+0x178>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	1d1a      	adds	r2, r3, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	9203      	str	r2, [sp, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	bfb8      	it	lt
 8007268:	f04f 33ff 	movlt.w	r3, #4294967295
 800726c:	3702      	adds	r7, #2
 800726e:	9305      	str	r3, [sp, #20]
 8007270:	4d2e      	ldr	r5, [pc, #184]	; (800732c <_svfiprintf_r+0x1e0>)
 8007272:	7839      	ldrb	r1, [r7, #0]
 8007274:	2203      	movs	r2, #3
 8007276:	4628      	mov	r0, r5
 8007278:	f7f8 ffb2 	bl	80001e0 <memchr>
 800727c:	b138      	cbz	r0, 800728e <_svfiprintf_r+0x142>
 800727e:	2340      	movs	r3, #64	; 0x40
 8007280:	1b40      	subs	r0, r0, r5
 8007282:	fa03 f000 	lsl.w	r0, r3, r0
 8007286:	9b04      	ldr	r3, [sp, #16]
 8007288:	4303      	orrs	r3, r0
 800728a:	3701      	adds	r7, #1
 800728c:	9304      	str	r3, [sp, #16]
 800728e:	7839      	ldrb	r1, [r7, #0]
 8007290:	4827      	ldr	r0, [pc, #156]	; (8007330 <_svfiprintf_r+0x1e4>)
 8007292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007296:	2206      	movs	r2, #6
 8007298:	1c7e      	adds	r6, r7, #1
 800729a:	f7f8 ffa1 	bl	80001e0 <memchr>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d038      	beq.n	8007314 <_svfiprintf_r+0x1c8>
 80072a2:	4b24      	ldr	r3, [pc, #144]	; (8007334 <_svfiprintf_r+0x1e8>)
 80072a4:	bb13      	cbnz	r3, 80072ec <_svfiprintf_r+0x1a0>
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	3307      	adds	r3, #7
 80072aa:	f023 0307 	bic.w	r3, r3, #7
 80072ae:	3308      	adds	r3, #8
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b4:	444b      	add	r3, r9
 80072b6:	9309      	str	r3, [sp, #36]	; 0x24
 80072b8:	e76d      	b.n	8007196 <_svfiprintf_r+0x4a>
 80072ba:	fb05 3202 	mla	r2, r5, r2, r3
 80072be:	2001      	movs	r0, #1
 80072c0:	460f      	mov	r7, r1
 80072c2:	e7a6      	b.n	8007212 <_svfiprintf_r+0xc6>
 80072c4:	2300      	movs	r3, #0
 80072c6:	3701      	adds	r7, #1
 80072c8:	9305      	str	r3, [sp, #20]
 80072ca:	4619      	mov	r1, r3
 80072cc:	250a      	movs	r5, #10
 80072ce:	4638      	mov	r0, r7
 80072d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072d4:	3a30      	subs	r2, #48	; 0x30
 80072d6:	2a09      	cmp	r2, #9
 80072d8:	d903      	bls.n	80072e2 <_svfiprintf_r+0x196>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0c8      	beq.n	8007270 <_svfiprintf_r+0x124>
 80072de:	9105      	str	r1, [sp, #20]
 80072e0:	e7c6      	b.n	8007270 <_svfiprintf_r+0x124>
 80072e2:	fb05 2101 	mla	r1, r5, r1, r2
 80072e6:	2301      	movs	r3, #1
 80072e8:	4607      	mov	r7, r0
 80072ea:	e7f0      	b.n	80072ce <_svfiprintf_r+0x182>
 80072ec:	ab03      	add	r3, sp, #12
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	4622      	mov	r2, r4
 80072f2:	4b11      	ldr	r3, [pc, #68]	; (8007338 <_svfiprintf_r+0x1ec>)
 80072f4:	a904      	add	r1, sp, #16
 80072f6:	4640      	mov	r0, r8
 80072f8:	f3af 8000 	nop.w
 80072fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007300:	4681      	mov	r9, r0
 8007302:	d1d6      	bne.n	80072b2 <_svfiprintf_r+0x166>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	065b      	lsls	r3, r3, #25
 8007308:	f53f af35 	bmi.w	8007176 <_svfiprintf_r+0x2a>
 800730c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800730e:	b01d      	add	sp, #116	; 0x74
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007314:	ab03      	add	r3, sp, #12
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4622      	mov	r2, r4
 800731a:	4b07      	ldr	r3, [pc, #28]	; (8007338 <_svfiprintf_r+0x1ec>)
 800731c:	a904      	add	r1, sp, #16
 800731e:	4640      	mov	r0, r8
 8007320:	f000 f882 	bl	8007428 <_printf_i>
 8007324:	e7ea      	b.n	80072fc <_svfiprintf_r+0x1b0>
 8007326:	bf00      	nop
 8007328:	080078e8 	.word	0x080078e8
 800732c:	080078ee 	.word	0x080078ee
 8007330:	080078f2 	.word	0x080078f2
 8007334:	00000000 	.word	0x00000000
 8007338:	08007099 	.word	0x08007099

0800733c <_printf_common>:
 800733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	4691      	mov	r9, r2
 8007342:	461f      	mov	r7, r3
 8007344:	688a      	ldr	r2, [r1, #8]
 8007346:	690b      	ldr	r3, [r1, #16]
 8007348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800734c:	4293      	cmp	r3, r2
 800734e:	bfb8      	it	lt
 8007350:	4613      	movlt	r3, r2
 8007352:	f8c9 3000 	str.w	r3, [r9]
 8007356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	b112      	cbz	r2, 8007366 <_printf_common+0x2a>
 8007360:	3301      	adds	r3, #1
 8007362:	f8c9 3000 	str.w	r3, [r9]
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	0699      	lsls	r1, r3, #26
 800736a:	bf42      	ittt	mi
 800736c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007370:	3302      	addmi	r3, #2
 8007372:	f8c9 3000 	strmi.w	r3, [r9]
 8007376:	6825      	ldr	r5, [r4, #0]
 8007378:	f015 0506 	ands.w	r5, r5, #6
 800737c:	d107      	bne.n	800738e <_printf_common+0x52>
 800737e:	f104 0a19 	add.w	sl, r4, #25
 8007382:	68e3      	ldr	r3, [r4, #12]
 8007384:	f8d9 2000 	ldr.w	r2, [r9]
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	42ab      	cmp	r3, r5
 800738c:	dc28      	bgt.n	80073e0 <_printf_common+0xa4>
 800738e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007392:	6822      	ldr	r2, [r4, #0]
 8007394:	3300      	adds	r3, #0
 8007396:	bf18      	it	ne
 8007398:	2301      	movne	r3, #1
 800739a:	0692      	lsls	r2, r2, #26
 800739c:	d42d      	bmi.n	80073fa <_printf_common+0xbe>
 800739e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073a2:	4639      	mov	r1, r7
 80073a4:	4630      	mov	r0, r6
 80073a6:	47c0      	blx	r8
 80073a8:	3001      	adds	r0, #1
 80073aa:	d020      	beq.n	80073ee <_printf_common+0xb2>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	68e5      	ldr	r5, [r4, #12]
 80073b0:	f8d9 2000 	ldr.w	r2, [r9]
 80073b4:	f003 0306 	and.w	r3, r3, #6
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	bf08      	it	eq
 80073bc:	1aad      	subeq	r5, r5, r2
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	bf0c      	ite	eq
 80073c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073c8:	2500      	movne	r5, #0
 80073ca:	4293      	cmp	r3, r2
 80073cc:	bfc4      	itt	gt
 80073ce:	1a9b      	subgt	r3, r3, r2
 80073d0:	18ed      	addgt	r5, r5, r3
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	341a      	adds	r4, #26
 80073d8:	454d      	cmp	r5, r9
 80073da:	d11a      	bne.n	8007412 <_printf_common+0xd6>
 80073dc:	2000      	movs	r0, #0
 80073de:	e008      	b.n	80073f2 <_printf_common+0xb6>
 80073e0:	2301      	movs	r3, #1
 80073e2:	4652      	mov	r2, sl
 80073e4:	4639      	mov	r1, r7
 80073e6:	4630      	mov	r0, r6
 80073e8:	47c0      	blx	r8
 80073ea:	3001      	adds	r0, #1
 80073ec:	d103      	bne.n	80073f6 <_printf_common+0xba>
 80073ee:	f04f 30ff 	mov.w	r0, #4294967295
 80073f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f6:	3501      	adds	r5, #1
 80073f8:	e7c3      	b.n	8007382 <_printf_common+0x46>
 80073fa:	18e1      	adds	r1, r4, r3
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	2030      	movs	r0, #48	; 0x30
 8007400:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007404:	4422      	add	r2, r4
 8007406:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800740a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800740e:	3302      	adds	r3, #2
 8007410:	e7c5      	b.n	800739e <_printf_common+0x62>
 8007412:	2301      	movs	r3, #1
 8007414:	4622      	mov	r2, r4
 8007416:	4639      	mov	r1, r7
 8007418:	4630      	mov	r0, r6
 800741a:	47c0      	blx	r8
 800741c:	3001      	adds	r0, #1
 800741e:	d0e6      	beq.n	80073ee <_printf_common+0xb2>
 8007420:	f109 0901 	add.w	r9, r9, #1
 8007424:	e7d8      	b.n	80073d8 <_printf_common+0x9c>
	...

08007428 <_printf_i>:
 8007428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800742c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007430:	460c      	mov	r4, r1
 8007432:	7e09      	ldrb	r1, [r1, #24]
 8007434:	b085      	sub	sp, #20
 8007436:	296e      	cmp	r1, #110	; 0x6e
 8007438:	4617      	mov	r7, r2
 800743a:	4606      	mov	r6, r0
 800743c:	4698      	mov	r8, r3
 800743e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007440:	f000 80b3 	beq.w	80075aa <_printf_i+0x182>
 8007444:	d822      	bhi.n	800748c <_printf_i+0x64>
 8007446:	2963      	cmp	r1, #99	; 0x63
 8007448:	d036      	beq.n	80074b8 <_printf_i+0x90>
 800744a:	d80a      	bhi.n	8007462 <_printf_i+0x3a>
 800744c:	2900      	cmp	r1, #0
 800744e:	f000 80b9 	beq.w	80075c4 <_printf_i+0x19c>
 8007452:	2958      	cmp	r1, #88	; 0x58
 8007454:	f000 8083 	beq.w	800755e <_printf_i+0x136>
 8007458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800745c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007460:	e032      	b.n	80074c8 <_printf_i+0xa0>
 8007462:	2964      	cmp	r1, #100	; 0x64
 8007464:	d001      	beq.n	800746a <_printf_i+0x42>
 8007466:	2969      	cmp	r1, #105	; 0x69
 8007468:	d1f6      	bne.n	8007458 <_printf_i+0x30>
 800746a:	6820      	ldr	r0, [r4, #0]
 800746c:	6813      	ldr	r3, [r2, #0]
 800746e:	0605      	lsls	r5, r0, #24
 8007470:	f103 0104 	add.w	r1, r3, #4
 8007474:	d52a      	bpl.n	80074cc <_printf_i+0xa4>
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6011      	str	r1, [r2, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	da03      	bge.n	8007486 <_printf_i+0x5e>
 800747e:	222d      	movs	r2, #45	; 0x2d
 8007480:	425b      	negs	r3, r3
 8007482:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007486:	486f      	ldr	r0, [pc, #444]	; (8007644 <_printf_i+0x21c>)
 8007488:	220a      	movs	r2, #10
 800748a:	e039      	b.n	8007500 <_printf_i+0xd8>
 800748c:	2973      	cmp	r1, #115	; 0x73
 800748e:	f000 809d 	beq.w	80075cc <_printf_i+0x1a4>
 8007492:	d808      	bhi.n	80074a6 <_printf_i+0x7e>
 8007494:	296f      	cmp	r1, #111	; 0x6f
 8007496:	d020      	beq.n	80074da <_printf_i+0xb2>
 8007498:	2970      	cmp	r1, #112	; 0x70
 800749a:	d1dd      	bne.n	8007458 <_printf_i+0x30>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	f043 0320 	orr.w	r3, r3, #32
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	e003      	b.n	80074ae <_printf_i+0x86>
 80074a6:	2975      	cmp	r1, #117	; 0x75
 80074a8:	d017      	beq.n	80074da <_printf_i+0xb2>
 80074aa:	2978      	cmp	r1, #120	; 0x78
 80074ac:	d1d4      	bne.n	8007458 <_printf_i+0x30>
 80074ae:	2378      	movs	r3, #120	; 0x78
 80074b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074b4:	4864      	ldr	r0, [pc, #400]	; (8007648 <_printf_i+0x220>)
 80074b6:	e055      	b.n	8007564 <_printf_i+0x13c>
 80074b8:	6813      	ldr	r3, [r2, #0]
 80074ba:	1d19      	adds	r1, r3, #4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6011      	str	r1, [r2, #0]
 80074c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074c8:	2301      	movs	r3, #1
 80074ca:	e08c      	b.n	80075e6 <_printf_i+0x1be>
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6011      	str	r1, [r2, #0]
 80074d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074d4:	bf18      	it	ne
 80074d6:	b21b      	sxthne	r3, r3
 80074d8:	e7cf      	b.n	800747a <_printf_i+0x52>
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	6825      	ldr	r5, [r4, #0]
 80074de:	1d18      	adds	r0, r3, #4
 80074e0:	6010      	str	r0, [r2, #0]
 80074e2:	0628      	lsls	r0, r5, #24
 80074e4:	d501      	bpl.n	80074ea <_printf_i+0xc2>
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	e002      	b.n	80074f0 <_printf_i+0xc8>
 80074ea:	0668      	lsls	r0, r5, #25
 80074ec:	d5fb      	bpl.n	80074e6 <_printf_i+0xbe>
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	4854      	ldr	r0, [pc, #336]	; (8007644 <_printf_i+0x21c>)
 80074f2:	296f      	cmp	r1, #111	; 0x6f
 80074f4:	bf14      	ite	ne
 80074f6:	220a      	movne	r2, #10
 80074f8:	2208      	moveq	r2, #8
 80074fa:	2100      	movs	r1, #0
 80074fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007500:	6865      	ldr	r5, [r4, #4]
 8007502:	60a5      	str	r5, [r4, #8]
 8007504:	2d00      	cmp	r5, #0
 8007506:	f2c0 8095 	blt.w	8007634 <_printf_i+0x20c>
 800750a:	6821      	ldr	r1, [r4, #0]
 800750c:	f021 0104 	bic.w	r1, r1, #4
 8007510:	6021      	str	r1, [r4, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d13d      	bne.n	8007592 <_printf_i+0x16a>
 8007516:	2d00      	cmp	r5, #0
 8007518:	f040 808e 	bne.w	8007638 <_printf_i+0x210>
 800751c:	4665      	mov	r5, ip
 800751e:	2a08      	cmp	r2, #8
 8007520:	d10b      	bne.n	800753a <_printf_i+0x112>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	07db      	lsls	r3, r3, #31
 8007526:	d508      	bpl.n	800753a <_printf_i+0x112>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	6862      	ldr	r2, [r4, #4]
 800752c:	429a      	cmp	r2, r3
 800752e:	bfde      	ittt	le
 8007530:	2330      	movle	r3, #48	; 0x30
 8007532:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007536:	f105 35ff 	addle.w	r5, r5, #4294967295
 800753a:	ebac 0305 	sub.w	r3, ip, r5
 800753e:	6123      	str	r3, [r4, #16]
 8007540:	f8cd 8000 	str.w	r8, [sp]
 8007544:	463b      	mov	r3, r7
 8007546:	aa03      	add	r2, sp, #12
 8007548:	4621      	mov	r1, r4
 800754a:	4630      	mov	r0, r6
 800754c:	f7ff fef6 	bl	800733c <_printf_common>
 8007550:	3001      	adds	r0, #1
 8007552:	d14d      	bne.n	80075f0 <_printf_i+0x1c8>
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	b005      	add	sp, #20
 800755a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800755e:	4839      	ldr	r0, [pc, #228]	; (8007644 <_printf_i+0x21c>)
 8007560:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007564:	6813      	ldr	r3, [r2, #0]
 8007566:	6821      	ldr	r1, [r4, #0]
 8007568:	1d1d      	adds	r5, r3, #4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6015      	str	r5, [r2, #0]
 800756e:	060a      	lsls	r2, r1, #24
 8007570:	d50b      	bpl.n	800758a <_printf_i+0x162>
 8007572:	07ca      	lsls	r2, r1, #31
 8007574:	bf44      	itt	mi
 8007576:	f041 0120 	orrmi.w	r1, r1, #32
 800757a:	6021      	strmi	r1, [r4, #0]
 800757c:	b91b      	cbnz	r3, 8007586 <_printf_i+0x15e>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	f022 0220 	bic.w	r2, r2, #32
 8007584:	6022      	str	r2, [r4, #0]
 8007586:	2210      	movs	r2, #16
 8007588:	e7b7      	b.n	80074fa <_printf_i+0xd2>
 800758a:	064d      	lsls	r5, r1, #25
 800758c:	bf48      	it	mi
 800758e:	b29b      	uxthmi	r3, r3
 8007590:	e7ef      	b.n	8007572 <_printf_i+0x14a>
 8007592:	4665      	mov	r5, ip
 8007594:	fbb3 f1f2 	udiv	r1, r3, r2
 8007598:	fb02 3311 	mls	r3, r2, r1, r3
 800759c:	5cc3      	ldrb	r3, [r0, r3]
 800759e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80075a2:	460b      	mov	r3, r1
 80075a4:	2900      	cmp	r1, #0
 80075a6:	d1f5      	bne.n	8007594 <_printf_i+0x16c>
 80075a8:	e7b9      	b.n	800751e <_printf_i+0xf6>
 80075aa:	6813      	ldr	r3, [r2, #0]
 80075ac:	6825      	ldr	r5, [r4, #0]
 80075ae:	6961      	ldr	r1, [r4, #20]
 80075b0:	1d18      	adds	r0, r3, #4
 80075b2:	6010      	str	r0, [r2, #0]
 80075b4:	0628      	lsls	r0, r5, #24
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	d501      	bpl.n	80075be <_printf_i+0x196>
 80075ba:	6019      	str	r1, [r3, #0]
 80075bc:	e002      	b.n	80075c4 <_printf_i+0x19c>
 80075be:	066a      	lsls	r2, r5, #25
 80075c0:	d5fb      	bpl.n	80075ba <_printf_i+0x192>
 80075c2:	8019      	strh	r1, [r3, #0]
 80075c4:	2300      	movs	r3, #0
 80075c6:	6123      	str	r3, [r4, #16]
 80075c8:	4665      	mov	r5, ip
 80075ca:	e7b9      	b.n	8007540 <_printf_i+0x118>
 80075cc:	6813      	ldr	r3, [r2, #0]
 80075ce:	1d19      	adds	r1, r3, #4
 80075d0:	6011      	str	r1, [r2, #0]
 80075d2:	681d      	ldr	r5, [r3, #0]
 80075d4:	6862      	ldr	r2, [r4, #4]
 80075d6:	2100      	movs	r1, #0
 80075d8:	4628      	mov	r0, r5
 80075da:	f7f8 fe01 	bl	80001e0 <memchr>
 80075de:	b108      	cbz	r0, 80075e4 <_printf_i+0x1bc>
 80075e0:	1b40      	subs	r0, r0, r5
 80075e2:	6060      	str	r0, [r4, #4]
 80075e4:	6863      	ldr	r3, [r4, #4]
 80075e6:	6123      	str	r3, [r4, #16]
 80075e8:	2300      	movs	r3, #0
 80075ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ee:	e7a7      	b.n	8007540 <_printf_i+0x118>
 80075f0:	6923      	ldr	r3, [r4, #16]
 80075f2:	462a      	mov	r2, r5
 80075f4:	4639      	mov	r1, r7
 80075f6:	4630      	mov	r0, r6
 80075f8:	47c0      	blx	r8
 80075fa:	3001      	adds	r0, #1
 80075fc:	d0aa      	beq.n	8007554 <_printf_i+0x12c>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	079b      	lsls	r3, r3, #30
 8007602:	d413      	bmi.n	800762c <_printf_i+0x204>
 8007604:	68e0      	ldr	r0, [r4, #12]
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	4298      	cmp	r0, r3
 800760a:	bfb8      	it	lt
 800760c:	4618      	movlt	r0, r3
 800760e:	e7a3      	b.n	8007558 <_printf_i+0x130>
 8007610:	2301      	movs	r3, #1
 8007612:	464a      	mov	r2, r9
 8007614:	4639      	mov	r1, r7
 8007616:	4630      	mov	r0, r6
 8007618:	47c0      	blx	r8
 800761a:	3001      	adds	r0, #1
 800761c:	d09a      	beq.n	8007554 <_printf_i+0x12c>
 800761e:	3501      	adds	r5, #1
 8007620:	68e3      	ldr	r3, [r4, #12]
 8007622:	9a03      	ldr	r2, [sp, #12]
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	42ab      	cmp	r3, r5
 8007628:	dcf2      	bgt.n	8007610 <_printf_i+0x1e8>
 800762a:	e7eb      	b.n	8007604 <_printf_i+0x1dc>
 800762c:	2500      	movs	r5, #0
 800762e:	f104 0919 	add.w	r9, r4, #25
 8007632:	e7f5      	b.n	8007620 <_printf_i+0x1f8>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1ac      	bne.n	8007592 <_printf_i+0x16a>
 8007638:	7803      	ldrb	r3, [r0, #0]
 800763a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800763e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007642:	e76c      	b.n	800751e <_printf_i+0xf6>
 8007644:	080078f9 	.word	0x080078f9
 8007648:	0800790a 	.word	0x0800790a

0800764c <memcpy>:
 800764c:	b510      	push	{r4, lr}
 800764e:	1e43      	subs	r3, r0, #1
 8007650:	440a      	add	r2, r1
 8007652:	4291      	cmp	r1, r2
 8007654:	d100      	bne.n	8007658 <memcpy+0xc>
 8007656:	bd10      	pop	{r4, pc}
 8007658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800765c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007660:	e7f7      	b.n	8007652 <memcpy+0x6>

08007662 <memmove>:
 8007662:	4288      	cmp	r0, r1
 8007664:	b510      	push	{r4, lr}
 8007666:	eb01 0302 	add.w	r3, r1, r2
 800766a:	d807      	bhi.n	800767c <memmove+0x1a>
 800766c:	1e42      	subs	r2, r0, #1
 800766e:	4299      	cmp	r1, r3
 8007670:	d00a      	beq.n	8007688 <memmove+0x26>
 8007672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007676:	f802 4f01 	strb.w	r4, [r2, #1]!
 800767a:	e7f8      	b.n	800766e <memmove+0xc>
 800767c:	4283      	cmp	r3, r0
 800767e:	d9f5      	bls.n	800766c <memmove+0xa>
 8007680:	1881      	adds	r1, r0, r2
 8007682:	1ad2      	subs	r2, r2, r3
 8007684:	42d3      	cmn	r3, r2
 8007686:	d100      	bne.n	800768a <memmove+0x28>
 8007688:	bd10      	pop	{r4, pc}
 800768a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800768e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007692:	e7f7      	b.n	8007684 <memmove+0x22>

08007694 <_free_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4605      	mov	r5, r0
 8007698:	2900      	cmp	r1, #0
 800769a:	d045      	beq.n	8007728 <_free_r+0x94>
 800769c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076a0:	1f0c      	subs	r4, r1, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bfb8      	it	lt
 80076a6:	18e4      	addlt	r4, r4, r3
 80076a8:	f000 f8d2 	bl	8007850 <__malloc_lock>
 80076ac:	4a1f      	ldr	r2, [pc, #124]	; (800772c <_free_r+0x98>)
 80076ae:	6813      	ldr	r3, [r2, #0]
 80076b0:	4610      	mov	r0, r2
 80076b2:	b933      	cbnz	r3, 80076c2 <_free_r+0x2e>
 80076b4:	6063      	str	r3, [r4, #4]
 80076b6:	6014      	str	r4, [r2, #0]
 80076b8:	4628      	mov	r0, r5
 80076ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076be:	f000 b8c8 	b.w	8007852 <__malloc_unlock>
 80076c2:	42a3      	cmp	r3, r4
 80076c4:	d90c      	bls.n	80076e0 <_free_r+0x4c>
 80076c6:	6821      	ldr	r1, [r4, #0]
 80076c8:	1862      	adds	r2, r4, r1
 80076ca:	4293      	cmp	r3, r2
 80076cc:	bf04      	itt	eq
 80076ce:	681a      	ldreq	r2, [r3, #0]
 80076d0:	685b      	ldreq	r3, [r3, #4]
 80076d2:	6063      	str	r3, [r4, #4]
 80076d4:	bf04      	itt	eq
 80076d6:	1852      	addeq	r2, r2, r1
 80076d8:	6022      	streq	r2, [r4, #0]
 80076da:	6004      	str	r4, [r0, #0]
 80076dc:	e7ec      	b.n	80076b8 <_free_r+0x24>
 80076de:	4613      	mov	r3, r2
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	b10a      	cbz	r2, 80076e8 <_free_r+0x54>
 80076e4:	42a2      	cmp	r2, r4
 80076e6:	d9fa      	bls.n	80076de <_free_r+0x4a>
 80076e8:	6819      	ldr	r1, [r3, #0]
 80076ea:	1858      	adds	r0, r3, r1
 80076ec:	42a0      	cmp	r0, r4
 80076ee:	d10b      	bne.n	8007708 <_free_r+0x74>
 80076f0:	6820      	ldr	r0, [r4, #0]
 80076f2:	4401      	add	r1, r0
 80076f4:	1858      	adds	r0, r3, r1
 80076f6:	4282      	cmp	r2, r0
 80076f8:	6019      	str	r1, [r3, #0]
 80076fa:	d1dd      	bne.n	80076b8 <_free_r+0x24>
 80076fc:	6810      	ldr	r0, [r2, #0]
 80076fe:	6852      	ldr	r2, [r2, #4]
 8007700:	605a      	str	r2, [r3, #4]
 8007702:	4401      	add	r1, r0
 8007704:	6019      	str	r1, [r3, #0]
 8007706:	e7d7      	b.n	80076b8 <_free_r+0x24>
 8007708:	d902      	bls.n	8007710 <_free_r+0x7c>
 800770a:	230c      	movs	r3, #12
 800770c:	602b      	str	r3, [r5, #0]
 800770e:	e7d3      	b.n	80076b8 <_free_r+0x24>
 8007710:	6820      	ldr	r0, [r4, #0]
 8007712:	1821      	adds	r1, r4, r0
 8007714:	428a      	cmp	r2, r1
 8007716:	bf04      	itt	eq
 8007718:	6811      	ldreq	r1, [r2, #0]
 800771a:	6852      	ldreq	r2, [r2, #4]
 800771c:	6062      	str	r2, [r4, #4]
 800771e:	bf04      	itt	eq
 8007720:	1809      	addeq	r1, r1, r0
 8007722:	6021      	streq	r1, [r4, #0]
 8007724:	605c      	str	r4, [r3, #4]
 8007726:	e7c7      	b.n	80076b8 <_free_r+0x24>
 8007728:	bd38      	pop	{r3, r4, r5, pc}
 800772a:	bf00      	nop
 800772c:	200000b0 	.word	0x200000b0

08007730 <_malloc_r>:
 8007730:	b570      	push	{r4, r5, r6, lr}
 8007732:	1ccd      	adds	r5, r1, #3
 8007734:	f025 0503 	bic.w	r5, r5, #3
 8007738:	3508      	adds	r5, #8
 800773a:	2d0c      	cmp	r5, #12
 800773c:	bf38      	it	cc
 800773e:	250c      	movcc	r5, #12
 8007740:	2d00      	cmp	r5, #0
 8007742:	4606      	mov	r6, r0
 8007744:	db01      	blt.n	800774a <_malloc_r+0x1a>
 8007746:	42a9      	cmp	r1, r5
 8007748:	d903      	bls.n	8007752 <_malloc_r+0x22>
 800774a:	230c      	movs	r3, #12
 800774c:	6033      	str	r3, [r6, #0]
 800774e:	2000      	movs	r0, #0
 8007750:	bd70      	pop	{r4, r5, r6, pc}
 8007752:	f000 f87d 	bl	8007850 <__malloc_lock>
 8007756:	4a21      	ldr	r2, [pc, #132]	; (80077dc <_malloc_r+0xac>)
 8007758:	6814      	ldr	r4, [r2, #0]
 800775a:	4621      	mov	r1, r4
 800775c:	b991      	cbnz	r1, 8007784 <_malloc_r+0x54>
 800775e:	4c20      	ldr	r4, [pc, #128]	; (80077e0 <_malloc_r+0xb0>)
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	b91b      	cbnz	r3, 800776c <_malloc_r+0x3c>
 8007764:	4630      	mov	r0, r6
 8007766:	f000 f863 	bl	8007830 <_sbrk_r>
 800776a:	6020      	str	r0, [r4, #0]
 800776c:	4629      	mov	r1, r5
 800776e:	4630      	mov	r0, r6
 8007770:	f000 f85e 	bl	8007830 <_sbrk_r>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d124      	bne.n	80077c2 <_malloc_r+0x92>
 8007778:	230c      	movs	r3, #12
 800777a:	6033      	str	r3, [r6, #0]
 800777c:	4630      	mov	r0, r6
 800777e:	f000 f868 	bl	8007852 <__malloc_unlock>
 8007782:	e7e4      	b.n	800774e <_malloc_r+0x1e>
 8007784:	680b      	ldr	r3, [r1, #0]
 8007786:	1b5b      	subs	r3, r3, r5
 8007788:	d418      	bmi.n	80077bc <_malloc_r+0x8c>
 800778a:	2b0b      	cmp	r3, #11
 800778c:	d90f      	bls.n	80077ae <_malloc_r+0x7e>
 800778e:	600b      	str	r3, [r1, #0]
 8007790:	50cd      	str	r5, [r1, r3]
 8007792:	18cc      	adds	r4, r1, r3
 8007794:	4630      	mov	r0, r6
 8007796:	f000 f85c 	bl	8007852 <__malloc_unlock>
 800779a:	f104 000b 	add.w	r0, r4, #11
 800779e:	1d23      	adds	r3, r4, #4
 80077a0:	f020 0007 	bic.w	r0, r0, #7
 80077a4:	1ac3      	subs	r3, r0, r3
 80077a6:	d0d3      	beq.n	8007750 <_malloc_r+0x20>
 80077a8:	425a      	negs	r2, r3
 80077aa:	50e2      	str	r2, [r4, r3]
 80077ac:	e7d0      	b.n	8007750 <_malloc_r+0x20>
 80077ae:	428c      	cmp	r4, r1
 80077b0:	684b      	ldr	r3, [r1, #4]
 80077b2:	bf16      	itet	ne
 80077b4:	6063      	strne	r3, [r4, #4]
 80077b6:	6013      	streq	r3, [r2, #0]
 80077b8:	460c      	movne	r4, r1
 80077ba:	e7eb      	b.n	8007794 <_malloc_r+0x64>
 80077bc:	460c      	mov	r4, r1
 80077be:	6849      	ldr	r1, [r1, #4]
 80077c0:	e7cc      	b.n	800775c <_malloc_r+0x2c>
 80077c2:	1cc4      	adds	r4, r0, #3
 80077c4:	f024 0403 	bic.w	r4, r4, #3
 80077c8:	42a0      	cmp	r0, r4
 80077ca:	d005      	beq.n	80077d8 <_malloc_r+0xa8>
 80077cc:	1a21      	subs	r1, r4, r0
 80077ce:	4630      	mov	r0, r6
 80077d0:	f000 f82e 	bl	8007830 <_sbrk_r>
 80077d4:	3001      	adds	r0, #1
 80077d6:	d0cf      	beq.n	8007778 <_malloc_r+0x48>
 80077d8:	6025      	str	r5, [r4, #0]
 80077da:	e7db      	b.n	8007794 <_malloc_r+0x64>
 80077dc:	200000b0 	.word	0x200000b0
 80077e0:	200000b4 	.word	0x200000b4

080077e4 <_realloc_r>:
 80077e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e6:	4607      	mov	r7, r0
 80077e8:	4614      	mov	r4, r2
 80077ea:	460e      	mov	r6, r1
 80077ec:	b921      	cbnz	r1, 80077f8 <_realloc_r+0x14>
 80077ee:	4611      	mov	r1, r2
 80077f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077f4:	f7ff bf9c 	b.w	8007730 <_malloc_r>
 80077f8:	b922      	cbnz	r2, 8007804 <_realloc_r+0x20>
 80077fa:	f7ff ff4b 	bl	8007694 <_free_r>
 80077fe:	4625      	mov	r5, r4
 8007800:	4628      	mov	r0, r5
 8007802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007804:	f000 f826 	bl	8007854 <_malloc_usable_size_r>
 8007808:	42a0      	cmp	r0, r4
 800780a:	d20f      	bcs.n	800782c <_realloc_r+0x48>
 800780c:	4621      	mov	r1, r4
 800780e:	4638      	mov	r0, r7
 8007810:	f7ff ff8e 	bl	8007730 <_malloc_r>
 8007814:	4605      	mov	r5, r0
 8007816:	2800      	cmp	r0, #0
 8007818:	d0f2      	beq.n	8007800 <_realloc_r+0x1c>
 800781a:	4631      	mov	r1, r6
 800781c:	4622      	mov	r2, r4
 800781e:	f7ff ff15 	bl	800764c <memcpy>
 8007822:	4631      	mov	r1, r6
 8007824:	4638      	mov	r0, r7
 8007826:	f7ff ff35 	bl	8007694 <_free_r>
 800782a:	e7e9      	b.n	8007800 <_realloc_r+0x1c>
 800782c:	4635      	mov	r5, r6
 800782e:	e7e7      	b.n	8007800 <_realloc_r+0x1c>

08007830 <_sbrk_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4c06      	ldr	r4, [pc, #24]	; (800784c <_sbrk_r+0x1c>)
 8007834:	2300      	movs	r3, #0
 8007836:	4605      	mov	r5, r0
 8007838:	4608      	mov	r0, r1
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	f7fa f9ac 	bl	8001b98 <_sbrk>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_sbrk_r+0x1a>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	b103      	cbz	r3, 800784a <_sbrk_r+0x1a>
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	20000350 	.word	0x20000350

08007850 <__malloc_lock>:
 8007850:	4770      	bx	lr

08007852 <__malloc_unlock>:
 8007852:	4770      	bx	lr

08007854 <_malloc_usable_size_r>:
 8007854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007858:	1f18      	subs	r0, r3, #4
 800785a:	2b00      	cmp	r3, #0
 800785c:	bfbc      	itt	lt
 800785e:	580b      	ldrlt	r3, [r1, r0]
 8007860:	18c0      	addlt	r0, r0, r3
 8007862:	4770      	bx	lr

08007864 <_init>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr

08007870 <_fini>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr
