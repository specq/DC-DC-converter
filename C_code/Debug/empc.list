
empc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007f0c  08007f0c  00017f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f94  08007f94  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007f94  08007f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f9c  08007f9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa0  08007fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000070  08008014  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08008014  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014442  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024fa  00000000  00000000  000344e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  000369e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001240  00000000  00000000  00037d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000295b1  00000000  00000000  00038f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e521  00000000  00000000  00062539  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107ca4  00000000  00000000  00070a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001786fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000579c  00000000  00000000  0017877c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ef4 	.word	0x08007ef4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007ef4 	.word	0x08007ef4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <swap>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void swap(int* a, int* b)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	int t = *a;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	60fb      	str	r3, [r7, #12]
    *a = *b;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	601a      	str	r2, [r3, #0]
    *b = t;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	601a      	str	r2, [r3, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <partition>:

int partition (int arr[], int low, int high)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b088      	sub	sp, #32
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int pivot = arr[high];    // pivot
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4413      	add	r3, r2
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	617b      	str	r3, [r7, #20]
	int i = (low - 1);  // Index of smaller element
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]

    for (int j = low; j <= high- 1; j++)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	e018      	b.n	8000dec <partition+0x56>
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dd0d      	ble.n	8000de6 <partition+0x50>
        {
            i++;    // increment index of smaller element
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	18d0      	adds	r0, r2, r3
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	4619      	mov	r1, r3
 8000de2:	f7ff ffc3 	bl	8000d6c <swap>
    for (int j = low; j <= high- 1; j++)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	3301      	adds	r3, #1
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	dde1      	ble.n	8000dba <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	18d0      	adds	r0, r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f7ff ffaf 	bl	8000d6c <swap>
    return (i + 1);
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <quickSort>:

void quickSort(int arr[], int low, int high)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
    if (low < high)
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	da13      	bge.n	8000e56 <quickSort+0x3c>
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
    	int pi = partition(arr, low, high);
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f7ff ffaf 	bl	8000d96 <partition>
 8000e38:	6178      	str	r0, [r7, #20]

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f7ff ffe9 	bl	8000e1a <quickSort>
        quickSort(arr, pi + 1, high);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	68f8      	ldr	r0, [r7, #12]
 8000e52:	f7ff ffe2 	bl	8000e1a <quickSort>
    }
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <get_median>:

int get_median(int *values){
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	int n = sizeof(values)/sizeof(values[0]);
 8000e66:	2301      	movs	r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
    quickSort(values, 0, n-1);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffd1 	bl	8000e1a <quickSort>
    return values[SIZE/2];
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0000      	movs	r0, r0
	...

08000e88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b0ad      	sub	sp, #180	; 0xb4
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f003 fa5d 	bl	8004358 <HAL_GPIO_WritePin>
	if (htim->Instance == htim3.Instance)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4bab      	ldr	r3, [pc, #684]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	f040 83d4 	bne.w	8001654 <HAL_TIM_PeriodElapsedCallback+0x7cc>
    {
		if(iter < 10000){
 8000eac:	4ba9      	ldr	r3, [pc, #676]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d806      	bhi.n	8000ec6 <HAL_TIM_PeriodElapsedCallback+0x3e>
			iter++;
 8000eb8:	4ba6      	ldr	r3, [pc, #664]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4ba4      	ldr	r3, [pc, #656]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000ec2:	801a      	strh	r2, [r3, #0]
 8000ec4:	e3c6      	b.n	8001654 <HAL_TIM_PeriodElapsedCallback+0x7cc>
		}
		else{
			int value0[SIZE];
			int value1[SIZE];
			for(uint8_t i = 0; i<SIZE; i++){
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8000ecc:	e01e      	b.n	8000f0c <HAL_TIM_PeriodElapsedCallback+0x84>
				value0[i] = (int)adc_buf0[i];
 8000ece:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000ed2:	4aa1      	ldr	r2, [pc, #644]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000ed4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ed8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f843 2c8c 	str.w	r2, [r3, #-140]
				value1[i] = (int)adc_buf1[i];
 8000ee8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000eec:	4a9b      	ldr	r2, [pc, #620]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000eee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ef2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000efc:	440b      	add	r3, r1
 8000efe:	f843 2ca8 	str.w	r2, [r3, #-168]
			for(uint8_t i = 0; i<SIZE; i++){
 8000f02:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000f06:	3301      	adds	r3, #1
 8000f08:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8000f0c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000f10:	2b06      	cmp	r3, #6
 8000f12:	d9dc      	bls.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x46>
			}
			x[0] = get_median(value0);
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffa0 	bl	8000e5e <get_median>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	4b8f      	ldr	r3, [pc, #572]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000f22:	601a      	str	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, x[0]);
 8000f24:	4b8e      	ldr	r3, [pc, #568]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	488d      	ldr	r0, [pc, #564]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000f2e:	f002 fd33 	bl	8003998 <HAL_DAC_SetValue>
			x[0] *= 0.1075;
 8000f32:	4b8b      	ldr	r3, [pc, #556]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff faf4 	bl	8000524 <__aeabi_i2d>
 8000f3c:	a380      	add	r3, pc, #512	; (adr r3, 8001140 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	f7ff fb59 	bl	80005f8 <__aeabi_dmul>
 8000f46:	4603      	mov	r3, r0
 8000f48:	460c      	mov	r4, r1
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	f7ff fd65 	bl	8000a1c <__aeabi_d2iz>
 8000f52:	4602      	mov	r2, r0
 8000f54:	4b82      	ldr	r3, [pc, #520]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000f56:	601a      	str	r2, [r3, #0]
			x[1] = get_median(value1);   x[1] *= 2.869;
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff7e 	bl	8000e5e <get_median>
 8000f62:	4602      	mov	r2, r0
 8000f64:	4b7e      	ldr	r3, [pc, #504]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	4b7d      	ldr	r3, [pc, #500]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fad9 	bl	8000524 <__aeabi_i2d>
 8000f72:	a375      	add	r3, pc, #468	; (adr r3, 8001148 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f7ff fb3e 	bl	80005f8 <__aeabi_dmul>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	4618      	mov	r0, r3
 8000f82:	4621      	mov	r1, r4
 8000f84:	f7ff fd4a 	bl	8000a1c <__aeabi_d2iz>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	4b75      	ldr	r3, [pc, #468]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000f8c:	605a      	str	r2, [r3, #4]

			int dx0 = x[0] - xs0;
 8000f8e:	4b74      	ldr	r3, [pc, #464]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2232      	movs	r2, #50	; 0x32
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			int dx1 = x[1] - xs1;
 8000f9a:	4b71      	ldr	r3, [pc, #452]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

			int u;

			//Region 1
			int H11 = -1000*dx0-49999;              H11 = H11<=0;
 8000fa8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fac:	4a6e      	ldr	r2, [pc, #440]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000fae:	fb02 f303 	mul.w	r3, r2, r3
 8000fb2:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000fb6:	3b4f      	subs	r3, #79	; 0x4f
 8000fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bfd4      	ite	le
 8000fc4:	2301      	movle	r3, #1
 8000fc6:	2300      	movgt	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			int H12 = -948*dx0+317*dx1-246980;      H12 = H12<=0;
 8000fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000fd2:	4a66      	ldr	r2, [pc, #408]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000fd4:	fb02 f203 	mul.w	r2, r2, r3
 8000fd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000fdc:	f240 113d 	movw	r1, #317	; 0x13d
 8000fe0:	fb01 f303 	mul.w	r3, r1, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	f5a3 3371 	sub.w	r3, r3, #246784	; 0x3c400
 8000fea:	3bc4      	subs	r3, #196	; 0xc4
 8000fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bfd4      	ite	le
 8000ff8:	2301      	movle	r3, #1
 8000ffa:	2300      	movgt	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			int H13 = 948*dx0-317*dx1-740942;       H13 = H13<=0;
 8001002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001006:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 800100a:	fb02 f203 	mul.w	r2, r2, r3
 800100e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001012:	f46f 719e 	mvn.w	r1, #316	; 0x13c
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	4413      	add	r3, r2
 800101c:	f5a3 2334 	sub.w	r3, r3, #737280	; 0xb4000
 8001020:	f6a3 634e 	subw	r3, r3, #3662	; 0xe4e
 8001024:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001028:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800102c:	2b00      	cmp	r3, #0
 800102e:	bfd4      	ite	le
 8001030:	2301      	movle	r3, #1
 8001032:	2300      	movgt	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			int H14 = 997*dx0+69*dx1-64337;         H14 = H14<=0;
 800103a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800103e:	f240 32e5 	movw	r2, #997	; 0x3e5
 8001042:	fb02 f103 	mul.w	r1, r2, r3
 8001046:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800104a:	4613      	mov	r3, r2
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	440b      	add	r3, r1
 8001056:	f5a3 437b 	sub.w	r3, r3, #64256	; 0xfb00
 800105a:	3b51      	subs	r3, #81	; 0x51
 800105c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001064:	2b00      	cmp	r3, #0
 8001066:	bfd4      	ite	le
 8001068:	2301      	movle	r3, #1
 800106a:	2300      	movgt	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			int H15 = -997*dx0-69*dx1-126088;       H15 = H15<=0;
 8001072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001076:	f46f 7279 	mvn.w	r2, #996	; 0x3e4
 800107a:	fb02 f203 	mul.w	r2, r2, r3
 800107e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001082:	f06f 0144 	mvn.w	r1, #68	; 0x44
 8001086:	fb01 f303 	mul.w	r3, r1, r3
 800108a:	4413      	add	r3, r2
 800108c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8001090:	3b88      	subs	r3, #136	; 0x88
 8001092:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001096:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800109a:	2b00      	cmp	r3, #0
 800109c:	bfd4      	ite	le
 800109e:	2301      	movle	r3, #1
 80010a0:	2300      	movgt	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			int H16 = 1000*dx0-150000;             H16 = H16<=0;
 80010a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010b0:	fb02 f303 	mul.w	r3, r2, r3
 80010b4:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 80010b8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80010bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80010c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bfd4      	ite	le
 80010c8:	2301      	movle	r3, #1
 80010ca:	2300      	movgt	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			if(H11 && H12 && H13 && H14 && H15 && H16){
 80010d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d050      	beq.n	800117c <HAL_TIM_PeriodElapsedCallback+0x2f4>
 80010da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d04c      	beq.n	800117c <HAL_TIM_PeriodElapsedCallback+0x2f4>
 80010e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d048      	beq.n	800117c <HAL_TIM_PeriodElapsedCallback+0x2f4>
 80010ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d044      	beq.n	800117c <HAL_TIM_PeriodElapsedCallback+0x2f4>
 80010f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d040      	beq.n	800117c <HAL_TIM_PeriodElapsedCallback+0x2f4>
 80010fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d03c      	beq.n	800117c <HAL_TIM_PeriodElapsedCallback+0x2f4>
				u = -5237*dx0-366*dx1;
 8001102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001106:	4a1a      	ldr	r2, [pc, #104]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001108:	fb02 f203 	mul.w	r2, r2, r3
 800110c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001110:	4918      	ldr	r1, [pc, #96]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001112:	fb01 f303 	mul.w	r3, r1, r3
 8001116:	4413      	add	r3, r2
 8001118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				u /= 1000;
 800111c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001120:	4a15      	ldr	r2, [pc, #84]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001122:	fb82 1203 	smull	r1, r2, r2, r3
 8001126:	1192      	asrs	r2, r2, #6
 8001128:	17db      	asrs	r3, r3, #31
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0.5/3.3*4095);
 8001130:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800113a:	f002 fc2d 	bl	8003998 <HAL_DAC_SetValue>
 800113e:	e265      	b.n	800160c <HAL_TIM_PeriodElapsedCallback+0x784>
 8001140:	b851eb85 	.word	0xb851eb85
 8001144:	3fbb851e 	.word	0x3fbb851e
 8001148:	45a1cac1 	.word	0x45a1cac1
 800114c:	4006f3b6 	.word	0x4006f3b6
 8001150:	20000120 	.word	0x20000120
 8001154:	2000008c 	.word	0x2000008c
 8001158:	20000324 	.word	0x20000324
 800115c:	20000160 	.word	0x20000160
 8001160:	200000a0 	.word	0x200000a0
 8001164:	200000a8 	.word	0x200000a8
 8001168:	fffffc18 	.word	0xfffffc18
 800116c:	fffffc4c 	.word	0xfffffc4c
 8001170:	ffffeb8b 	.word	0xffffeb8b
 8001174:	fffffe92 	.word	0xfffffe92
 8001178:	10624dd3 	.word	0x10624dd3
			}
			else{
				// Region 5
				int H51 = 998*dx0+70*dx1+126100;  H51 = H51<=0;
 800117c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001180:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001184:	fb02 f203 	mul.w	r2, r2, r3
 8001188:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800118c:	2146      	movs	r1, #70	; 0x46
 800118e:	fb01 f303 	mul.w	r3, r1, r3
 8001192:	4413      	add	r3, r2
 8001194:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8001198:	3394      	adds	r3, #148	; 0x94
 800119a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800119e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bfd4      	ite	le
 80011a6:	2301      	movle	r3, #1
 80011a8:	2300      	movgt	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				int H52 = -1000*dx0-50000;       H52 = H52<=0;
 80011b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011b4:	4aac      	ldr	r2, [pc, #688]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 80011be:	3b50      	subs	r3, #80	; 0x50
 80011c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80011c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bfd4      	ite	le
 80011cc:	2301      	movle	r3, #1
 80011ce:	2300      	movgt	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				int H53 = -1000*dx1-5000000;     H53 = H53<=0;
 80011d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011da:	4aa3      	ldr	r2, [pc, #652]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80011dc:	fb02 f203 	mul.w	r2, r2, r3
 80011e0:	4ba2      	ldr	r3, [pc, #648]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80011e2:	4413      	add	r3, r2
 80011e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80011e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bfd4      	ite	le
 80011ec:	2301      	movle	r3, #1
 80011ee:	2300      	movgt	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	67fb      	str	r3, [r7, #124]	; 0x7c
				int H54 = 1000*dx0-10*dx1-53000;  H54 = H54<=0;
 80011f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011fc:	fb02 f203 	mul.w	r2, r2, r3
 8001200:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001204:	f06f 0109 	mvn.w	r1, #9
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	4413      	add	r3, r2
 800120e:	f5a3 434f 	sub.w	r3, r3, #52992	; 0xcf00
 8001212:	3b08      	subs	r3, #8
 8001214:	67bb      	str	r3, [r7, #120]	; 0x78
 8001216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001218:	2b00      	cmp	r3, #0
 800121a:	bfd4      	ite	le
 800121c:	2301      	movle	r3, #1
 800121e:	2300      	movgt	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	67bb      	str	r3, [r7, #120]	; 0x78
				if(H51 && H52 && H53 && H54){
 8001224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001228:	2b00      	cmp	r3, #0
 800122a:	d015      	beq.n	8001258 <HAL_TIM_PeriodElapsedCallback+0x3d0>
 800122c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001230:	2b00      	cmp	r3, #0
 8001232:	d011      	beq.n	8001258 <HAL_TIM_PeriodElapsedCallback+0x3d0>
 8001234:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00e      	beq.n	8001258 <HAL_TIM_PeriodElapsedCallback+0x3d0>
 800123a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00b      	beq.n	8001258 <HAL_TIM_PeriodElapsedCallback+0x3d0>
					u = 662;
 8001240:	f240 2396 	movw	r3, #662	; 0x296
 8001244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2.5/3.3*4095);
 8001248:	f640 431e 	movw	r3, #3102	; 0xc1e
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	4887      	ldr	r0, [pc, #540]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001252:	f002 fba1 	bl	8003998 <HAL_DAC_SetValue>
 8001256:	e1d9      	b.n	800160c <HAL_TIM_PeriodElapsedCallback+0x784>
				}
				else{
					// Region 3
					int H31 = -1000*dx1-5000000;         H31 = H31<=0;
 8001258:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800125c:	4a82      	ldr	r2, [pc, #520]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800125e:	fb02 f203 	mul.w	r2, r2, r3
 8001262:	4b82      	ldr	r3, [pc, #520]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001264:	4413      	add	r3, r2
 8001266:	677b      	str	r3, [r7, #116]	; 0x74
 8001268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800126a:	2b00      	cmp	r3, #0
 800126c:	bfd4      	ite	le
 800126e:	2301      	movle	r3, #1
 8001270:	2300      	movgt	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	677b      	str	r3, [r7, #116]	; 0x74
					int H32 = -1000*dx0+10*dx1+53000;     H32 = H32<=0;
 8001276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800127a:	4a7b      	ldr	r2, [pc, #492]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800127c:	fb02 f103 	mul.w	r1, r2, r3
 8001280:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	440b      	add	r3, r1
 800128e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8001292:	3308      	adds	r3, #8
 8001294:	673b      	str	r3, [r7, #112]	; 0x70
 8001296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001298:	2b00      	cmp	r3, #0
 800129a:	bfd4      	ite	le
 800129c:	2301      	movle	r3, #1
 800129e:	2300      	movgt	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	673b      	str	r3, [r7, #112]	; 0x70
					int H33 = -948*dx0+318*dx1+740900;    H33 = H33<=0;
 80012a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012a8:	4a72      	ldr	r2, [pc, #456]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80012aa:	fb02 f203 	mul.w	r2, r2, r3
 80012ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012b2:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	f503 2334 	add.w	r3, r3, #737280	; 0xb4000
 80012c0:	f603 6324 	addw	r3, r3, #3620	; 0xe24
 80012c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80012c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bfd4      	ite	le
 80012cc:	2301      	movle	r3, #1
 80012ce:	2300      	movgt	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	66fb      	str	r3, [r7, #108]	; 0x6c
					int H34 = 1000*dx0-150000;           H34 = H34<=0;
 80012d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 80012e4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80012e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80012ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bfd4      	ite	le
 80012f0:	2301      	movle	r3, #1
 80012f2:	2300      	movgt	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	66bb      	str	r3, [r7, #104]	; 0x68
					if(H31 && H32 && H33 && H34){
 80012f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d02c      	beq.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x4d0>
 80012fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001300:	2b00      	cmp	r3, #0
 8001302:	d029      	beq.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x4d0>
 8001304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001306:	2b00      	cmp	r3, #0
 8001308:	d026      	beq.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x4d0>
 800130a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800130c:	2b00      	cmp	r3, #0
 800130e:	d023      	beq.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x4d0>
						u = -6528*dx0+66*dx1+1000000; u /= 1000;
 8001310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001314:	4a58      	ldr	r2, [pc, #352]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001316:	fb02 f103 	mul.w	r1, r2, r3
 800131a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800131e:	4613      	mov	r3, r2
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	440b      	add	r3, r1
 8001328:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 800132c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8001330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001338:	4a50      	ldr	r2, [pc, #320]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800133a:	fb82 1203 	smull	r1, r2, r2, r3
 800133e:	1192      	asrs	r2, r2, #6
 8001340:	17db      	asrs	r3, r3, #31
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
						HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1.5/3.3*4095);
 8001348:	f240 7345 	movw	r3, #1861	; 0x745
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	4847      	ldr	r0, [pc, #284]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001352:	f002 fb21 	bl	8003998 <HAL_DAC_SetValue>
 8001356:	e159      	b.n	800160c <HAL_TIM_PeriodElapsedCallback+0x784>
					}
					else{
						// Region 2
						int H21 = -1000*dx0-50000;         H21 = H21<=0;
 8001358:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800135c:	4a42      	ldr	r2, [pc, #264]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8001366:	3b50      	subs	r3, #80	; 0x50
 8001368:	667b      	str	r3, [r7, #100]	; 0x64
 800136a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800136c:	2b00      	cmp	r3, #0
 800136e:	bfd4      	ite	le
 8001370:	2301      	movle	r3, #1
 8001372:	2300      	movgt	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	667b      	str	r3, [r7, #100]	; 0x64
						int H22 = 489*dx0+872*dx1-1533900;  H22 = H22<=0;
 8001378:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800137c:	f240 12e9 	movw	r2, #489	; 0x1e9
 8001380:	fb02 f203 	mul.w	r2, r2, r3
 8001384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001388:	f44f 715a 	mov.w	r1, #872	; 0x368
 800138c:	fb01 f303 	mul.w	r3, r1, r3
 8001390:	4413      	add	r3, r2
 8001392:	f5a3 13bb 	sub.w	r3, r3, #1531904	; 0x176000
 8001396:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 800139a:	663b      	str	r3, [r7, #96]	; 0x60
 800139c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bfd4      	ite	le
 80013a2:	2301      	movle	r3, #1
 80013a4:	2300      	movgt	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	663b      	str	r3, [r7, #96]	; 0x60
						int H23 = 1000*dx0-10*dx1-300;      H23 = H23<=0;
 80013aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013b2:	fb02 f203 	mul.w	r2, r2, r3
 80013b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80013ba:	f06f 0109 	mvn.w	r1, #9
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bfd4      	ite	le
 80013d0:	2301      	movle	r3, #1
 80013d2:	2300      	movgt	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	65fb      	str	r3, [r7, #92]	; 0x5c
						int H24 = 948*dx0-318*dx1+247000;   H24 = H24<=0;
 80013d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013dc:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 80013e0:	fb02 f203 	mul.w	r2, r2, r3
 80013e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80013e8:	4925      	ldr	r1, [pc, #148]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	f503 3371 	add.w	r3, r3, #246784	; 0x3c400
 80013f4:	33d8      	adds	r3, #216	; 0xd8
 80013f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80013f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	bfd4      	ite	le
 80013fe:	2301      	movle	r3, #1
 8001400:	2300      	movgt	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	65bb      	str	r3, [r7, #88]	; 0x58
						if(H21 && H22 && H23 && H24){
 8001406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001408:	2b00      	cmp	r3, #0
 800140a:	d03d      	beq.n	8001488 <HAL_TIM_PeriodElapsedCallback+0x600>
 800140c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800140e:	2b00      	cmp	r3, #0
 8001410:	d03a      	beq.n	8001488 <HAL_TIM_PeriodElapsedCallback+0x600>
 8001412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d037      	beq.n	8001488 <HAL_TIM_PeriodElapsedCallback+0x600>
 8001418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800141a:	2b00      	cmp	r3, #0
 800141c:	d034      	beq.n	8001488 <HAL_TIM_PeriodElapsedCallback+0x600>
							u = -6527*dx0+66*dx1-335700;  u /= 1000;
 800141e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001422:	4a18      	ldr	r2, [pc, #96]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001424:	fb02 f103 	mul.w	r1, r2, r3
 8001428:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800142c:	4613      	mov	r3, r2
 800142e:	015b      	lsls	r3, r3, #5
 8001430:	4413      	add	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	440b      	add	r3, r1
 8001436:	f5a3 23a3 	sub.w	r3, r3, #333824	; 0x51800
 800143a:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 800143e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001446:	4a0d      	ldr	r2, [pc, #52]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001448:	fb82 1203 	smull	r1, r2, r2, r3
 800144c:	1192      	asrs	r2, r2, #6
 800144e:	17db      	asrs	r3, r3, #31
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
							HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1/3.3*4095);
 8001456:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001460:	f002 fa9a 	bl	8003998 <HAL_DAC_SetValue>
 8001464:	e0d2      	b.n	800160c <HAL_TIM_PeriodElapsedCallback+0x784>
 8001466:	bf00      	nop
 8001468:	fffffc18 	.word	0xfffffc18
 800146c:	ffb3b4c0 	.word	0xffb3b4c0
 8001470:	200000a8 	.word	0x200000a8
 8001474:	fffffc4c 	.word	0xfffffc4c
 8001478:	ffffe680 	.word	0xffffe680
 800147c:	10624dd3 	.word	0x10624dd3
 8001480:	fffffec2 	.word	0xfffffec2
 8001484:	ffffe681 	.word	0xffffe681
						}
						else{
							// Region 4
							int H41 = 921*dx0+390*dx1-698900;             H41 = H41<=0;
 8001488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800148c:	f240 3299 	movw	r2, #921	; 0x399
 8001490:	fb02 f203 	mul.w	r2, r2, r3
 8001494:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001498:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	f5a3 232a 	sub.w	r3, r3, #696320	; 0xaa000
 80014a6:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 80014aa:	657b      	str	r3, [r7, #84]	; 0x54
 80014ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bfd4      	ite	le
 80014b2:	2301      	movle	r3, #1
 80014b4:	2300      	movgt	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	657b      	str	r3, [r7, #84]	; 0x54
							int H42 = 973*dx0+229*dx1-447200;             H42 = H42<=0;
 80014ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014be:	f240 32cd 	movw	r2, #973	; 0x3cd
 80014c2:	fb02 f203 	mul.w	r2, r2, r3
 80014c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014ca:	21e5      	movs	r1, #229	; 0xe5
 80014cc:	fb01 f303 	mul.w	r3, r1, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	f5a3 23da 	sub.w	r3, r3, #446464	; 0x6d000
 80014d6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80014da:	653b      	str	r3, [r7, #80]	; 0x50
 80014dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bfd4      	ite	le
 80014e2:	2301      	movle	r3, #1
 80014e4:	2300      	movgt	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	653b      	str	r3, [r7, #80]	; 0x50
							int H43 = 988*dx0+157*dx1-354000;             H43 = H43<=0;
 80014ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014ee:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 80014f2:	fb02 f203 	mul.w	r2, r2, r3
 80014f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014fa:	219d      	movs	r1, #157	; 0x9d
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	4413      	add	r3, r2
 8001502:	f5a3 23ac 	sub.w	r3, r3, #352256	; 0x56000
 8001506:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 800150a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800150c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800150e:	2b00      	cmp	r3, #0
 8001510:	bfd4      	ite	le
 8001512:	2301      	movle	r3, #1
 8001514:	2300      	movgt	r3, #0
 8001516:	b2db      	uxtb	r3, r3
 8001518:	64fb      	str	r3, [r7, #76]	; 0x4c
							int H44 = -1000*dx0+10*dx1+300;               H43 = H43<=0;
 800151a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800151e:	4a53      	ldr	r2, [pc, #332]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8001520:	fb02 f103 	mul.w	r1, r2, r3
 8001524:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	440b      	add	r3, r1
 8001532:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001536:	64bb      	str	r3, [r7, #72]	; 0x48
 8001538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800153a:	2b00      	cmp	r3, #0
 800153c:	bfd4      	ite	le
 800153e:	2301      	movle	r3, #1
 8001540:	2300      	movgt	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
							int H45 = -998*dx0-70*dx1+64300;              H45 = H45<=0;
 8001546:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800154a:	4a49      	ldr	r2, [pc, #292]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 800154c:	fb02 f203 	mul.w	r2, r2, r3
 8001550:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001554:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8001562:	332c      	adds	r3, #44	; 0x2c
 8001564:	647b      	str	r3, [r7, #68]	; 0x44
 8001566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001568:	2b00      	cmp	r3, #0
 800156a:	bfd4      	ite	le
 800156c:	2301      	movle	r3, #1
 800156e:	2300      	movgt	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	647b      	str	r3, [r7, #68]	; 0x44
							int H46 = 1000*dx0-150000;                   H46 = H46<=0;
 8001574:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 8001584:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001588:	643b      	str	r3, [r7, #64]	; 0x40
 800158a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800158c:	2b00      	cmp	r3, #0
 800158e:	bfd4      	ite	le
 8001590:	2301      	movle	r3, #1
 8001592:	2300      	movgt	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	643b      	str	r3, [r7, #64]	; 0x40
							if(H41 && H42 && H43 && H44 && H45 && H46){
 8001598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159a:	2b00      	cmp	r3, #0
 800159c:	d019      	beq.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x74a>
 800159e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d016      	beq.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x74a>
 80015a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d013      	beq.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x74a>
 80015aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d010      	beq.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x74a>
 80015b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00d      	beq.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x74a>
 80015b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00a      	beq.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x74a>
								u = -338;
 80015bc:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 80015be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
								HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2/3.3*4095);
 80015c2:	f640 13b1 	movw	r3, #2481	; 0x9b1
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	482b      	ldr	r0, [pc, #172]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 80015cc:	f002 f9e4 	bl	8003998 <HAL_DAC_SetValue>
 80015d0:	e01c      	b.n	800160c <HAL_TIM_PeriodElapsedCallback+0x784>
							}
							else{
								// No region found => slow LQR
								u = -4854*dx0+53*dx1; u /= 1000;
 80015d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015d6:	4a29      	ldr	r2, [pc, #164]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 80015d8:	fb02 f203 	mul.w	r2, r2, r3
 80015dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015e0:	2135      	movs	r1, #53	; 0x35
 80015e2:	fb01 f303 	mul.w	r3, r1, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015f0:	4a23      	ldr	r2, [pc, #140]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 80015f2:	fb82 1203 	smull	r1, r2, r2, r3
 80015f6:	1192      	asrs	r2, r2, #6
 80015f8:	17db      	asrs	r3, r3, #31
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
								HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001600:	2300      	movs	r3, #0
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	481c      	ldr	r0, [pc, #112]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8001608:	f002 f9c6 	bl	8003998 <HAL_DAC_SetValue>
							}
						}
					}
				}
			}
			u += us;
 800160c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8001610:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001614:	4413      	add	r3, r2
 8001616:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			if(u>1000) u=1000;
 800161a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800161e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001622:	dd03      	ble.n	800162c <HAL_TIM_PeriodElapsedCallback+0x7a4>
 8001624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			if(u<0) u=0;
 800162c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001630:	2b00      	cmp	r3, #0
 8001632:	da02      	bge.n	800163a <HAL_TIM_PeriodElapsedCallback+0x7b2>
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			htim2.Instance->CCR2 = u*htim2.Init.Period/1000;
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001642:	fb02 f203 	mul.w	r2, r2, r3
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	490d      	ldr	r1, [pc, #52]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 800164c:	fba1 1202 	umull	r1, r2, r1, r2
 8001650:	0992      	lsrs	r2, r2, #6
 8001652:	639a      	str	r2, [r3, #56]	; 0x38
			//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, u*4095/3300);
		}
	}
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f002 fe7b 	bl	8004358 <HAL_GPIO_WritePin>
}
 8001662:	bf00      	nop
 8001664:	37b4      	adds	r7, #180	; 0xb4
 8001666:	46bd      	mov	sp, r7
 8001668:	bd90      	pop	{r4, r7, pc}
 800166a:	bf00      	nop
 800166c:	fffffc18 	.word	0xfffffc18
 8001670:	fffffc1a 	.word	0xfffffc1a
 8001674:	fffffeae 	.word	0xfffffeae
 8001678:	200000a8 	.word	0x200000a8
 800167c:	ffffed0a 	.word	0xffffed0a
 8001680:	10624dd3 	.word	0x10624dd3
 8001684:	2000021c 	.word	0x2000021c

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168e:	f000 fe57 	bl	8002340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001692:	f000 f86b 	bl	800176c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001696:	f000 fb0d 	bl	8001cb4 <MX_GPIO_Init>
  MX_DMA_Init();
 800169a:	f000 fae5 	bl	8001c68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800169e:	f000 fab3 	bl	8001c08 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80016a2:	f000 f8eb 	bl	800187c <MX_ADC1_Init>
  MX_ADC2_Init();
 80016a6:	f000 f963 	bl	8001970 <MX_ADC2_Init>
  MX_DAC1_Init();
 80016aa:	f000 f9c7 	bl	8001a3c <MX_DAC1_Init>
  MX_TIM2_Init();
 80016ae:	f000 fa03 	bl	8001ab8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016b2:	f000 fa5b 	bl	8001b6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80016b6:	2100      	movs	r1, #0
 80016b8:	4821      	ldr	r0, [pc, #132]	; (8001740 <main+0xb8>)
 80016ba:	f002 f920 	bl	80038fe <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80016be:	2110      	movs	r1, #16
 80016c0:	481f      	ldr	r0, [pc, #124]	; (8001740 <main+0xb8>)
 80016c2:	f002 f91c 	bl	80038fe <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf0, SIZE);
 80016c6:	2207      	movs	r2, #7
 80016c8:	491e      	ldr	r1, [pc, #120]	; (8001744 <main+0xbc>)
 80016ca:	481f      	ldr	r0, [pc, #124]	; (8001748 <main+0xc0>)
 80016cc:	f001 f9ee 	bl	8002aac <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf1, SIZE);
 80016d0:	2207      	movs	r2, #7
 80016d2:	491e      	ldr	r1, [pc, #120]	; (800174c <main+0xc4>)
 80016d4:	481e      	ldr	r0, [pc, #120]	; (8001750 <main+0xc8>)
 80016d6:	f001 f9e9 	bl	8002aac <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 80016da:	481e      	ldr	r0, [pc, #120]	; (8001754 <main+0xcc>)
 80016dc:	f004 f97e 	bl	80059dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80016e0:	2104      	movs	r1, #4
 80016e2:	481d      	ldr	r0, [pc, #116]	; (8001758 <main+0xd0>)
 80016e4:	f004 f9d0 	bl	8005a88 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <main+0xd0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2200      	movs	r2, #0
 80016ee:	639a      	str	r2, [r3, #56]	; 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char msg[10];
  while (1)
  {
	  sprintf(msg, "%d ",x[0]);
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <main+0xd4>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	491a      	ldr	r1, [pc, #104]	; (8001760 <main+0xd8>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f005 fff5 	bl	80076e8 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fd65 	bl	80001d0 <strlen>
 8001706:	4603      	mov	r3, r0
 8001708:	b29a      	uxth	r2, r3
 800170a:	1d39      	adds	r1, r7, #4
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	4814      	ldr	r0, [pc, #80]	; (8001764 <main+0xdc>)
 8001712:	f005 fa4f 	bl	8006bb4 <HAL_UART_Transmit>
	  sprintf(msg, "%d\r\n",x[1]);
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <main+0xd4>)
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4912      	ldr	r1, [pc, #72]	; (8001768 <main+0xe0>)
 800171e:	4618      	mov	r0, r3
 8001720:	f005 ffe2 	bl	80076e8 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fd52 	bl	80001d0 <strlen>
 800172c:	4603      	mov	r3, r0
 800172e:	b29a      	uxth	r2, r3
 8001730:	1d39      	adds	r1, r7, #4
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <main+0xdc>)
 8001738:	f005 fa3c 	bl	8006bb4 <HAL_UART_Transmit>
	  sprintf(msg, "%d ",x[0]);
 800173c:	e7d8      	b.n	80016f0 <main+0x68>
 800173e:	bf00      	nop
 8001740:	200000a8 	.word	0x200000a8
 8001744:	20000324 	.word	0x20000324
 8001748:	200000bc 	.word	0x200000bc
 800174c:	20000160 	.word	0x20000160
 8001750:	20000170 	.word	0x20000170
 8001754:	20000120 	.word	0x20000120
 8001758:	2000021c 	.word	0x2000021c
 800175c:	200000a0 	.word	0x200000a0
 8001760:	08007f0c 	.word	0x08007f0c
 8001764:	2000025c 	.word	0x2000025c
 8001768:	08007f10 	.word	0x08007f10

0800176c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0b8      	sub	sp, #224	; 0xe0
 8001770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001772:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001776:	2244      	movs	r2, #68	; 0x44
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f005 ffac 	bl	80076d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001780:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001790:	463b      	mov	r3, r7
 8001792:	2288      	movs	r2, #136	; 0x88
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f005 ff9e 	bl	80076d8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179c:	2302      	movs	r3, #2
 800179e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017aa:	2310      	movs	r3, #16
 80017ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b6:	2302      	movs	r3, #2
 80017b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80017c2:	230a      	movs	r3, #10
 80017c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017c8:	2307      	movs	r3, #7
 80017ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017ce:	2302      	movs	r3, #2
 80017d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 fe36 	bl	8004450 <HAL_RCC_OscConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017ea:	f000 facd 	bl	8001d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ee:	230f      	movs	r3, #15
 80017f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f4:	2303      	movs	r3, #3
 80017f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800180c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001810:	2104      	movs	r1, #4
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fa02 	bl	8004c1c <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800181e:	f000 fab3 	bl	8001d88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8001822:	f244 0302 	movw	r3, #16386	; 0x4002
 8001826:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001828:	2300      	movs	r3, #0
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800182c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001830:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001832:	2302      	movs	r3, #2
 8001834:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001836:	2301      	movs	r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800183a:	2308      	movs	r3, #8
 800183c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800183e:	2307      	movs	r3, #7
 8001840:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001842:	2302      	movs	r3, #2
 8001844:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001846:	2302      	movs	r3, #2
 8001848:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800184a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800184e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fbe6 	bl	8005024 <HAL_RCCEx_PeriphCLKConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800185e:	f000 fa93 	bl	8001d88 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001862:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001866:	f002 fd9d 	bl	80043a4 <HAL_PWREx_ControlVoltageScaling>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001870:	f000 fa8a 	bl	8001d88 <Error_Handler>
  }
}
 8001874:	bf00      	nop
 8001876:	37e0      	adds	r7, #224	; 0xe0
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800189e:	4b31      	ldr	r3, [pc, #196]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018a0:	4a31      	ldr	r2, [pc, #196]	; (8001968 <MX_ADC1_Init+0xec>)
 80018a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018aa:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018b0:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018be:	2204      	movs	r2, #4
 80018c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018c2:	4b28      	ldr	r3, [pc, #160]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018de:	2201      	movs	r2, #1
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_ADC1_Init+0xe8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001904:	4817      	ldr	r0, [pc, #92]	; (8001964 <MX_ADC1_Init+0xe8>)
 8001906:	f000 ff7d 	bl	8002804 <HAL_ADC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001910:	f000 fa3a 	bl	8001d88 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4811      	ldr	r0, [pc, #68]	; (8001964 <MX_ADC1_Init+0xe8>)
 8001920:	f001 fe0e 	bl	8003540 <HAL_ADCEx_MultiModeConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800192a:	f000 fa2d 	bl	8001d88 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_ADC1_Init+0xf0>)
 8001930:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001932:	2306      	movs	r3, #6
 8001934:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001936:	2305      	movs	r3, #5
 8001938:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800193a:	237f      	movs	r3, #127	; 0x7f
 800193c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800193e:	2304      	movs	r3, #4
 8001940:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	4619      	mov	r1, r3
 800194a:	4806      	ldr	r0, [pc, #24]	; (8001964 <MX_ADC1_Init+0xe8>)
 800194c:	f001 f980 	bl	8002c50 <HAL_ADC_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001956:	f000 fa17 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	; 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000170 	.word	0x20000170
 8001968:	50040000 	.word	0x50040000
 800196c:	14f00020 	.word	0x14f00020

08001970 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001976:	463b      	mov	r3, r7
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
 8001984:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <MX_ADC2_Init+0xc0>)
 8001988:	4a2a      	ldr	r2, [pc, #168]	; (8001a34 <MX_ADC2_Init+0xc4>)
 800198a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <MX_ADC2_Init+0xc0>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <MX_ADC2_Init+0xc0>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <MX_ADC2_Init+0xc0>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019a6:	2204      	movs	r2, #4
 80019a8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80019bc:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80019ec:	4810      	ldr	r0, [pc, #64]	; (8001a30 <MX_ADC2_Init+0xc0>)
 80019ee:	f000 ff09 	bl	8002804 <HAL_ADC_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80019f8:	f000 f9c6 	bl	8001d88 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_ADC2_Init+0xc8>)
 80019fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a00:	2306      	movs	r3, #6
 8001a02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001a04:	2305      	movs	r3, #5
 8001a06:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a08:	237f      	movs	r3, #127	; 0x7f
 8001a0a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a14:	463b      	mov	r3, r7
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_ADC2_Init+0xc0>)
 8001a1a:	f001 f919 	bl	8002c50 <HAL_ADC_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001a24:	f000 f9b0 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200000bc 	.word	0x200000bc
 8001a34:	50040100 	.word	0x50040100
 8001a38:	19200040 	.word	0x19200040

08001a3c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2224      	movs	r2, #36	; 0x24
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f005 fe45 	bl	80076d8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_DAC1_Init+0x74>)
 8001a50:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <MX_DAC1_Init+0x78>)
 8001a52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001a54:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <MX_DAC1_Init+0x74>)
 8001a56:	f001 ff30 	bl	80038ba <HAL_DAC_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001a60:	f000 f992 	bl	8001d88 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <MX_DAC1_Init+0x74>)
 8001a80:	f001 ffaf 	bl	80039e2 <HAL_DAC_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001a8a:	f000 f97d 	bl	8001d88 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2210      	movs	r2, #16
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_DAC1_Init+0x74>)
 8001a9a:	f001 ffa2 	bl	80039e2 <HAL_DAC_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001aa4:	f000 f970 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3728      	adds	r7, #40	; 0x28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200000a8 	.word	0x200000a8
 8001ab4:	40007400 	.word	0x40007400

08001ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aca:	463b      	mov	r3, r7
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
 8001ad8:	615a      	str	r2, [r3, #20]
 8001ada:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <MX_TIM2_Init+0xb0>)
 8001ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <MX_TIM2_Init+0xb0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <MX_TIM2_Init+0xb0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <MX_TIM2_Init+0xb0>)
 8001af2:	f240 623f 	movw	r2, #1599	; 0x63f
 8001af6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MX_TIM2_Init+0xb0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_TIM2_Init+0xb0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b04:	4818      	ldr	r0, [pc, #96]	; (8001b68 <MX_TIM2_Init+0xb0>)
 8001b06:	f003 ff93 	bl	8005a30 <HAL_TIM_PWM_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001b10:	f000 f93a 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4811      	ldr	r0, [pc, #68]	; (8001b68 <MX_TIM2_Init+0xb0>)
 8001b24:	f004 ff52 	bl	80069cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001b2e:	f000 f92b 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b32:	2360      	movs	r3, #96	; 0x60
 8001b34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	2204      	movs	r2, #4
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <MX_TIM2_Init+0xb0>)
 8001b4a:	f004 f915 	bl	8005d78 <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001b54:	f000 f918 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <MX_TIM2_Init+0xb0>)
 8001b5a:	f000 faa1 	bl	80020a0 <HAL_TIM_MspPostInit>

}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000021c 	.word	0x2000021c

08001b6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <MX_TIM3_Init+0x98>)
 8001b8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001b92:	224f      	movs	r2, #79	; 0x4f
 8001b94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001b9e:	2263      	movs	r2, #99	; 0x63
 8001ba0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bae:	4814      	ldr	r0, [pc, #80]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001bb0:	f003 fee8 	bl	8005984 <HAL_TIM_Base_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001bba:	f000 f8e5 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001bcc:	f004 f9ec 	bl	8005fa8 <HAL_TIM_ConfigClockSource>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001bd6:	f000 f8d7 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	4619      	mov	r1, r3
 8001be6:	4806      	ldr	r0, [pc, #24]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001be8:	f004 fef0 	bl	80069cc <HAL_TIMEx_MasterConfigSynchronization>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001bf2:	f000 f8c9 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	3720      	adds	r7, #32
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000120 	.word	0x20000120
 8001c04:	40000400 	.word	0x40000400

08001c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c0e:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <MX_USART2_UART_Init+0x5c>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c4c:	f004 ff64 	bl	8006b18 <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c56:	f000 f897 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000025c 	.word	0x2000025c
 8001c64:	40004400 	.word	0x40004400

08001c68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_DMA_Init+0x48>)
 8001c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <MX_DMA_Init+0x48>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6493      	str	r3, [r2, #72]	; 0x48
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <MX_DMA_Init+0x48>)
 8001c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	200b      	movs	r0, #11
 8001c8c:	f001 fddf 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c90:	200b      	movs	r0, #11
 8001c92:	f001 fdf8 	bl	8003886 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	200c      	movs	r0, #12
 8001c9c:	f001 fdd7 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ca0:	200c      	movs	r0, #12
 8001ca2:	f001 fdf0 	bl	8003886 <HAL_NVIC_EnableIRQ>

}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce6:	4a25      	ldr	r2, [pc, #148]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <MX_GPIO_Init+0xc8>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f002 fb10 	bl	8004358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <MX_GPIO_Init+0xcc>)
 8001d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <MX_GPIO_Init+0xd0>)
 8001d4e:	f002 f95b 	bl	8004008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6e:	f002 f94b 	bl	8004008 <HAL_GPIO_Init>

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	10210000 	.word	0x10210000
 8001d84:	48000800 	.word	0x48000800

08001d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_MspInit+0x44>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_MspInit+0x44>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6613      	str	r3, [r2, #96]	; 0x60
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_MspInit+0x44>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_MspInit+0x44>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_MspInit+0x44>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_MspInit+0x44>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	; 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a5f      	ldr	r2, [pc, #380]	; (8001f7c <HAL_ADC_MspInit+0x19c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d159      	bne.n	8001eb6 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001e02:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <HAL_ADC_MspInit+0x1a0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	4a5d      	ldr	r2, [pc, #372]	; (8001f80 <HAL_ADC_MspInit+0x1a0>)
 8001e0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001e0c:	4b5c      	ldr	r3, [pc, #368]	; (8001f80 <HAL_ADC_MspInit+0x1a0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10b      	bne.n	8001e2c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001e14:	4b5b      	ldr	r3, [pc, #364]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e18:	4a5a      	ldr	r2, [pc, #360]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001e1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e20:	4b58      	ldr	r3, [pc, #352]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e30:	4a54      	ldr	r2, [pc, #336]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e38:	4b52      	ldr	r3, [pc, #328]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e44:	2301      	movs	r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e48:	230b      	movs	r3, #11
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e5a:	f002 f8d5 	bl	8004008 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001e60:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <HAL_ADC_MspInit+0x1ac>)
 8001e62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001e64:	4b48      	ldr	r3, [pc, #288]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e7c:	4b42      	ldr	r3, [pc, #264]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e82:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e84:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e8c:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001e8e:	2220      	movs	r2, #32
 8001e90:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e92:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e98:	483b      	ldr	r0, [pc, #236]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001e9a:	f001 febd 	bl	8003c18 <HAL_DMA_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001ea4:	f7ff ff70 	bl	8001d88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a37      	ldr	r2, [pc, #220]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001eac:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eae:	4a36      	ldr	r2, [pc, #216]	; (8001f88 <HAL_ADC_MspInit+0x1a8>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001eb4:	e05d      	b.n	8001f72 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a35      	ldr	r2, [pc, #212]	; (8001f90 <HAL_ADC_MspInit+0x1b0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d158      	bne.n	8001f72 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <HAL_ADC_MspInit+0x1a0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	4a2e      	ldr	r2, [pc, #184]	; (8001f80 <HAL_ADC_MspInit+0x1a0>)
 8001ec8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001eca:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_ADC_MspInit+0x1a0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d10b      	bne.n	8001eea <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_ADC_MspInit+0x1a4>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f06:	230b      	movs	r3, #11
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	4619      	mov	r1, r3
 8001f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f18:	f002 f876 	bl	8004008 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <HAL_ADC_MspInit+0x1b8>)
 8001f20:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f28:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f2e:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f40:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f48:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001f56:	480f      	ldr	r0, [pc, #60]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f58:	f001 fe5e 	bl	8003c18 <HAL_DMA_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8001f62:	f7ff ff11 	bl	8001d88 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f6c:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_ADC_MspInit+0x1b4>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001f72:	bf00      	nop
 8001f74:	3730      	adds	r7, #48	; 0x30
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	50040000 	.word	0x50040000
 8001f80:	20000090 	.word	0x20000090
 8001f84:	40021000 	.word	0x40021000
 8001f88:	200001d4 	.word	0x200001d4
 8001f8c:	40020008 	.word	0x40020008
 8001f90:	50040100 	.word	0x50040100
 8001f94:	200002dc 	.word	0x200002dc
 8001f98:	4002001c 	.word	0x4002001c

08001f9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a15      	ldr	r2, [pc, #84]	; (8002010 <HAL_DAC_MspInit+0x74>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d124      	bne.n	8002008 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_DAC_MspInit+0x78>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <HAL_DAC_MspInit+0x78>)
 8001fc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_DAC_MspInit+0x78>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_DAC_MspInit+0x78>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_DAC_MspInit+0x78>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_DAC_MspInit+0x78>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fee:	2330      	movs	r3, #48	; 0x30
 8001ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002004:	f002 f800 	bl	8004008 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002008:	bf00      	nop
 800200a:	3728      	adds	r7, #40	; 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40007400 	.word	0x40007400
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d10b      	bne.n	8002042 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_TIM_PWM_MspInit+0x38>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_TIM_PWM_MspInit+0x38>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6593      	str	r3, [r2, #88]	; 0x58
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_TIM_PWM_MspInit+0x38>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <HAL_TIM_Base_MspInit+0x44>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d113      	bne.n	800208e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_TIM_Base_MspInit+0x48>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	4a0c      	ldr	r2, [pc, #48]	; (800209c <HAL_TIM_Base_MspInit+0x48>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	6593      	str	r3, [r2, #88]	; 0x58
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_TIM_Base_MspInit+0x48>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	201d      	movs	r0, #29
 8002084:	f001 fbe3 	bl	800384e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002088:	201d      	movs	r0, #29
 800208a:	f001 fbfc 	bl	8003886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40000400 	.word	0x40000400
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c0:	d11b      	bne.n	80020fa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_TIM_MspPostInit+0x64>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <HAL_TIM_MspPostInit+0x64>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_TIM_MspPostInit+0x64>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020da:	2308      	movs	r3, #8
 80020dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020ea:	2301      	movs	r3, #1
 80020ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	4619      	mov	r1, r3
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <HAL_TIM_MspPostInit+0x68>)
 80020f6:	f001 ff87 	bl	8004008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	48000400 	.word	0x48000400

0800210c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_UART_MspInit+0x7c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d128      	bne.n	8002180 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_UART_MspInit+0x80>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_UART_MspInit+0x80>)
 8002134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002138:	6593      	str	r3, [r2, #88]	; 0x58
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_UART_MspInit+0x80>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_UART_MspInit+0x80>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <HAL_UART_MspInit+0x80>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_UART_MspInit+0x80>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800215e:	230c      	movs	r3, #12
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800216e:	2307      	movs	r3, #7
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217c:	f001 ff44 	bl	8004008 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002180:	bf00      	nop
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40004400 	.word	0x40004400
 800218c:	40021000 	.word	0x40021000

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <HardFault_Handler+0x4>

080021a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <MemManage_Handler+0x4>

080021aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e4:	f000 f906 	bl	80023f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <DMA1_Channel1_IRQHandler+0x10>)
 80021f2:	f001 fe29 	bl	8003e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200001d4 	.word	0x200001d4

08002200 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <DMA1_Channel2_IRQHandler+0x10>)
 8002206:	f001 fe1f 	bl	8003e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200002dc 	.word	0x200002dc

08002214 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM3_IRQHandler+0x10>)
 800221a:	f003 fc8d 	bl	8005b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000120 	.word	0x20000120

08002228 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <_sbrk+0x50>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <_sbrk+0x16>
		heap_end = &end;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <_sbrk+0x50>)
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <_sbrk+0x54>)
 800223c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <_sbrk+0x50>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <_sbrk+0x50>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	466a      	mov	r2, sp
 800224e:	4293      	cmp	r3, r2
 8002250:	d907      	bls.n	8002262 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002252:	f005 fa17 	bl	8007684 <__errno>
 8002256:	4602      	mov	r2, r0
 8002258:	230c      	movs	r3, #12
 800225a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
 8002260:	e006      	b.n	8002270 <_sbrk+0x48>
	}

	heap_end += incr;
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <_sbrk+0x50>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	4a03      	ldr	r2, [pc, #12]	; (8002278 <_sbrk+0x50>)
 800226c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000094 	.word	0x20000094
 800227c:	20000340 	.word	0x20000340

08002280 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002284:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <SystemInit+0x64>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	4a16      	ldr	r2, [pc, #88]	; (80022e4 <SystemInit+0x64>)
 800228c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <SystemInit+0x68>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <SystemInit+0x68>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <SystemInit+0x68>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <SystemInit+0x68>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <SystemInit+0x68>)
 80022ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <SystemInit+0x68>)
 80022b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022be:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <SystemInit+0x68>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <SystemInit+0x68>)
 80022c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <SystemInit+0x68>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <SystemInit+0x64>)
 80022d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022d6:	609a      	str	r2, [r3, #8]
#endif
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00
 80022e8:	40021000 	.word	0x40021000

080022ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002324 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022f2:	e003      	b.n	80022fc <LoopCopyDataInit>

080022f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022fa:	3104      	adds	r1, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022fc:	480b      	ldr	r0, [pc, #44]	; (800232c <LoopForever+0xa>)
	ldr	r3, =_edata
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002300:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002302:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002304:	d3f6      	bcc.n	80022f4 <CopyDataInit>
	ldr	r2, =_sbss
 8002306:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002308:	e002      	b.n	8002310 <LoopFillZerobss>

0800230a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800230a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800230c:	f842 3b04 	str.w	r3, [r2], #4

08002310 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <LoopForever+0x16>)
	cmp	r2, r3
 8002312:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002314:	d3f9      	bcc.n	800230a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002316:	f7ff ffb3 	bl	8002280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800231a:	f005 f9b9 	bl	8007690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800231e:	f7ff f9b3 	bl	8001688 <main>

08002322 <LoopForever>:

LoopForever:
    b LoopForever
 8002322:	e7fe      	b.n	8002322 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002324:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002328:	08007fa4 	.word	0x08007fa4
	ldr	r0, =_sdata
 800232c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002330:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002334:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002338:	2000033c 	.word	0x2000033c

0800233c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800233c:	e7fe      	b.n	800233c <ADC1_2_IRQHandler>
	...

08002340 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800234a:	4b0c      	ldr	r3, [pc, #48]	; (800237c <HAL_Init+0x3c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_Init+0x3c>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002356:	2003      	movs	r0, #3
 8002358:	f001 fa6e 	bl	8003838 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800235c:	2000      	movs	r0, #0
 800235e:	f000 f80f 	bl	8002380 <HAL_InitTick>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	71fb      	strb	r3, [r7, #7]
 800236c:	e001      	b.n	8002372 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800236e:	f7ff fd13 	bl	8001d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002372:	79fb      	ldrb	r3, [r7, #7]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40022000 	.word	0x40022000

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_InitTick+0x68>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d022      	beq.n	80023da <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002394:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_InitTick+0x6c>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_InitTick+0x68>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	f001 fa7a 	bl	80038a2 <HAL_SYSTICK_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10f      	bne.n	80023d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b0f      	cmp	r3, #15
 80023b8:	d809      	bhi.n	80023ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ba:	2200      	movs	r2, #0
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	f04f 30ff 	mov.w	r0, #4294967295
 80023c2:	f001 fa44 	bl	800384e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_InitTick+0x70>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	e007      	b.n	80023de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	e004      	b.n	80023de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e001      	b.n	80023de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023de:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000008 	.word	0x20000008
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000004 	.word	0x20000004

080023f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_IncTick+0x1c>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_IncTick+0x20>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4413      	add	r3, r2
 8002402:	4a03      	ldr	r2, [pc, #12]	; (8002410 <HAL_IncTick+0x1c>)
 8002404:	6013      	str	r3, [r2, #0]
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	20000334 	.word	0x20000334
 8002414:	20000008 	.word	0x20000008

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000334 	.word	0x20000334

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff ffee 	bl	8002418 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d004      	beq.n	8002454 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_Delay+0x40>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002454:	bf00      	nop
 8002456:	f7ff ffdf 	bl	8002418 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	429a      	cmp	r2, r3
 8002464:	d8f7      	bhi.n	8002456 <HAL_Delay+0x26>
  {
  }
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000008 	.word	0x20000008

08002474 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024dc:	b490      	push	{r4, r7}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3360      	adds	r3, #96	; 0x60
 80024ee:	461a      	mov	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80024f8:	6822      	ldr	r2, [r4, #0]
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <LL_ADC_SetOffset+0x40>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	4313      	orrs	r3, r2
 800250a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800250e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bc90      	pop	{r4, r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	03fff000 	.word	0x03fff000

08002520 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002520:	b490      	push	{r4, r7}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3360      	adds	r3, #96	; 0x60
 800252e:	461a      	mov	r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bc90      	pop	{r4, r7}
 8002546:	4770      	bx	lr

08002548 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002548:	b490      	push	{r4, r7}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	3360      	adds	r3, #96	; 0x60
 8002558:	461a      	mov	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4313      	orrs	r3, r2
 800256c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bc90      	pop	{r4, r7}
 8002576:	4770      	bx	lr

08002578 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800259e:	b490      	push	{r4, r7}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3330      	adds	r3, #48	; 0x30
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	4413      	add	r3, r2
 80025bc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	211f      	movs	r1, #31
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	401a      	ands	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	0e9b      	lsrs	r3, r3, #26
 80025d4:	f003 011f 	and.w	r1, r3, #31
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	4313      	orrs	r3, r2
 80025e4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc90      	pop	{r4, r7}
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025f0:	b490      	push	{r4, r7}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3314      	adds	r3, #20
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	0e5b      	lsrs	r3, r3, #25
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	4413      	add	r3, r2
 800260e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002610:	6822      	ldr	r2, [r4, #0]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	0d1b      	lsrs	r3, r3, #20
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	2107      	movs	r1, #7
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	401a      	ands	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	0d1b      	lsrs	r3, r3, #20
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	4313      	orrs	r3, r2
 8002634:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bc90      	pop	{r4, r7}
 800263e:	4770      	bx	lr

08002640 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002658:	43db      	mvns	r3, r3
 800265a:	401a      	ands	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0318 	and.w	r3, r3, #24
 8002662:	4908      	ldr	r1, [pc, #32]	; (8002684 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002664:	40d9      	lsrs	r1, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	400b      	ands	r3, r1
 800266a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266e:	431a      	orrs	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	0007ffff 	.word	0x0007ffff

08002688 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 031f 	and.w	r3, r3, #31
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6093      	str	r3, [r2, #8]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026dc:	d101      	bne.n	80026e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002704:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800272c:	d101      	bne.n	8002732 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002750:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <LL_ADC_IsEnabled+0x18>
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <LL_ADC_IsEnabled+0x1a>
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800279e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027a2:	f043 0204 	orr.w	r2, r3, #4
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d101      	bne.n	80027ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d101      	bne.n	80027f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e134      	b.n	8002a88 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff fad7 	bl	8001de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff3f 	bl	80026c8 <LL_ADC_IsDeepPowerDownEnabled>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff25 	bl	80026a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff5a 	bl	8002718 <LL_ADC_IsInternalRegulatorEnabled>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d113      	bne.n	8002892 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff3e 	bl	80026f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002874:	4b86      	ldr	r3, [pc, #536]	; (8002a90 <HAL_ADC_Init+0x28c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	4a86      	ldr	r2, [pc, #536]	; (8002a94 <HAL_ADC_Init+0x290>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002884:	e002      	b.n	800288c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3b01      	subs	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff3e 	bl	8002718 <LL_ADC_IsInternalRegulatorEnabled>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f043 0210 	orr.w	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff77 	bl	80027b6 <LL_ADC_REG_IsConversionOngoing>
 80028c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 80cf 	bne.w	8002a76 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 80cb 	bne.w	8002a76 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028e8:	f043 0202 	orr.w	r2, r3, #2
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff37 	bl	8002768 <LL_ADC_IsEnabled>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d115      	bne.n	800292c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002900:	4865      	ldr	r0, [pc, #404]	; (8002a98 <HAL_ADC_Init+0x294>)
 8002902:	f7ff ff31 	bl	8002768 <LL_ADC_IsEnabled>
 8002906:	4604      	mov	r4, r0
 8002908:	4864      	ldr	r0, [pc, #400]	; (8002a9c <HAL_ADC_Init+0x298>)
 800290a:	f7ff ff2d 	bl	8002768 <LL_ADC_IsEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	431c      	orrs	r4, r3
 8002912:	4863      	ldr	r0, [pc, #396]	; (8002aa0 <HAL_ADC_Init+0x29c>)
 8002914:	f7ff ff28 	bl	8002768 <LL_ADC_IsEnabled>
 8002918:	4603      	mov	r3, r0
 800291a:	4323      	orrs	r3, r4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4619      	mov	r1, r3
 8002926:	485f      	ldr	r0, [pc, #380]	; (8002aa4 <HAL_ADC_Init+0x2a0>)
 8002928:	f7ff fda4 	bl	8002474 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7e5b      	ldrb	r3, [r3, #25]
 8002930:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002936:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800293c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002942:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d106      	bne.n	8002968 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	3b01      	subs	r3, #1
 8002960:	045b      	lsls	r3, r3, #17
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_ADC_Init+0x2a4>)
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	69b9      	ldr	r1, [r7, #24]
 8002994:	430b      	orrs	r3, r1
 8002996:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff0a 	bl	80027b6 <LL_ADC_REG_IsConversionOngoing>
 80029a2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff17 	bl	80027dc <LL_ADC_INJ_IsConversionOngoing>
 80029ae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d13d      	bne.n	8002a32 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d13a      	bne.n	8002a32 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029c0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029c8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d8:	f023 0302 	bic.w	r3, r3, #2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	69b9      	ldr	r1, [r7, #24]
 80029e2:	430b      	orrs	r3, r1
 80029e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d118      	bne.n	8002a22 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029fa:	f023 0304 	bic.w	r3, r3, #4
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a0c:	4311      	orrs	r1, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a12:	430a      	orrs	r2, r1
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	611a      	str	r2, [r3, #16]
 8002a20:	e007      	b.n	8002a32 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0201 	bic.w	r2, r2, #1
 8002a30:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d10c      	bne.n	8002a54 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	f023 010f 	bic.w	r1, r3, #15
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	1e5a      	subs	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30
 8002a52:	e007      	b.n	8002a64 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 020f 	bic.w	r2, r2, #15
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	f023 0303 	bic.w	r3, r3, #3
 8002a6c:	f043 0201 	orr.w	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54
 8002a74:	e007      	b.n	8002a86 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f043 0210 	orr.w	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a86:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3724      	adds	r7, #36	; 0x24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}
 8002a90:	20000000 	.word	0x20000000
 8002a94:	053e2d63 	.word	0x053e2d63
 8002a98:	50040000 	.word	0x50040000
 8002a9c:	50040100 	.word	0x50040100
 8002aa0:	50040200 	.word	0x50040200
 8002aa4:	50040300 	.word	0x50040300
 8002aa8:	fff0c007 	.word	0xfff0c007

08002aac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ab8:	4850      	ldr	r0, [pc, #320]	; (8002bfc <HAL_ADC_Start_DMA+0x150>)
 8002aba:	f7ff fde5 	bl	8002688 <LL_ADC_GetMultimode>
 8002abe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fe76 	bl	80027b6 <LL_ADC_REG_IsConversionOngoing>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f040 808e 	bne.w	8002bee <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_Start_DMA+0x34>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e089      	b.n	8002bf4 <HAL_ADC_Start_DMA+0x148>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d002      	beq.n	8002afa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b09      	cmp	r3, #9
 8002af8:	d172      	bne.n	8002be0 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fc0c 	bl	8003318 <ADC_Enable>
 8002b00:	4603      	mov	r3, r0
 8002b02:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d165      	bne.n	8002bd6 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a37      	ldr	r2, [pc, #220]	; (8002c00 <HAL_ADC_Start_DMA+0x154>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d002      	beq.n	8002b2e <HAL_ADC_Start_DMA+0x82>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	e000      	b.n	8002b30 <HAL_ADC_Start_DMA+0x84>
 8002b2e:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <HAL_ADC_Start_DMA+0x158>)
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d002      	beq.n	8002b3e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d006      	beq.n	8002b64 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	f023 0206 	bic.w	r2, r3, #6
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	659a      	str	r2, [r3, #88]	; 0x58
 8002b62:	e002      	b.n	8002b6a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <HAL_ADC_Start_DMA+0x15c>)
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <HAL_ADC_Start_DMA+0x160>)
 8002b78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7e:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <HAL_ADC_Start_DMA+0x164>)
 8002b80:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	221c      	movs	r2, #28
 8002b88:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0210 	orr.w	r2, r2, #16
 8002ba0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3340      	adds	r3, #64	; 0x40
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f001 f8e1 	bl	8003d88 <HAL_DMA_Start_IT>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fddd 	bl	800278e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002bd4:	e00d      	b.n	8002bf2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002bde:	e008      	b.n	8002bf2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002bec:	e001      	b.n	8002bf2 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	50040300 	.word	0x50040300
 8002c00:	50040100 	.word	0x50040100
 8002c04:	50040000 	.word	0x50040000
 8002c08:	080033cd 	.word	0x080033cd
 8002c0c:	080034a5 	.word	0x080034a5
 8002c10:	080034c1 	.word	0x080034c1

08002c14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b0a6      	sub	sp, #152	; 0x98
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x22>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e348      	b.n	8003304 <HAL_ADC_ConfigChannel+0x6b4>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fd99 	bl	80027b6 <LL_ADC_REG_IsConversionOngoing>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 8329 	bne.w	80032de <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d824      	bhi.n	8002cde <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	3b02      	subs	r3, #2
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d81b      	bhi.n	8002cd6 <HAL_ADC_ConfigChannel+0x86>
 8002c9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <HAL_ADC_ConfigChannel+0x54>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cbd 	.word	0x08002cbd
 8002cac:	08002cc5 	.word	0x08002cc5
 8002cb0:	08002ccd 	.word	0x08002ccd
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	220c      	movs	r2, #12
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	e011      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2212      	movs	r2, #18
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	e00d      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2218      	movs	r2, #24
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	e009      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	e004      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2206      	movs	r2, #6
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	e000      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002cde:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	f7ff fc56 	bl	800259e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fd5d 	bl	80027b6 <LL_ADC_REG_IsConversionOngoing>
 8002cfc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fd69 	bl	80027dc <LL_ADC_INJ_IsConversionOngoing>
 8002d0a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 8148 	bne.w	8002fa8 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 8143 	bne.w	8002fa8 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6819      	ldr	r1, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f7ff fc5e 	bl	80025f0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	08db      	lsrs	r3, r3, #3
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d00a      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6919      	ldr	r1, [r3, #16]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d66:	f7ff fbb9 	bl	80024dc <LL_ADC_SetOffset>
 8002d6a:	e11d      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fbd4 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x148>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fbc9 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	f003 021f 	and.w	r2, r3, #31
 8002d96:	e012      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x16e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fbbe 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002db4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d105      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x186>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	0e9b      	lsrs	r3, r3, #26
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	e00a      	b.n	8002dec <HAL_ADC_ConfigChannel+0x19c>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d106      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fba5 	bl	8002548 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fb8b 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x1da>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fb80 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002e20:	4603      	mov	r3, r0
 8002e22:	0e9b      	lsrs	r3, r3, #26
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	e010      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x1fc>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fb75 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002e36:	4603      	mov	r3, r0
 8002e38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x214>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	0e9b      	lsrs	r3, r3, #26
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	e00a      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x22a>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d106      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2200      	movs	r2, #0
 8002e84:	2101      	movs	r1, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fb5e 	bl	8002548 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2102      	movs	r1, #2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fb44 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x268>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fb39 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	f003 021f 	and.w	r2, r3, #31
 8002eb6:	e010      	b.n	8002eda <HAL_ADC_ConfigChannel+0x28a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fb2e 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x2a2>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0e9b      	lsrs	r3, r3, #26
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	e00a      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x2b8>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d106      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2102      	movs	r1, #2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fb17 	bl	8002548 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2103      	movs	r1, #3
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fafd 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x2f6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2103      	movs	r1, #3
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff faf2 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	e010      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x318>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2103      	movs	r1, #3
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fae7 	bl	8002520 <LL_ADC_GetOffsetChannel>
 8002f52:	4603      	mov	r3, r0
 8002f54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x330>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	0e9b      	lsrs	r3, r3, #26
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	e00a      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x346>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d106      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2103      	movs	r1, #3
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fad0 	bl	8002548 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fbdb 	bl	8002768 <LL_ADC_IsEnabled>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f040 810c 	bne.w	80031d2 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f7ff fb3a 	bl	8002640 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4aad      	ldr	r2, [pc, #692]	; (8003288 <HAL_ADC_ConfigChannel+0x638>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	f040 80fd 	bne.w	80031d2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x3b0>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	2b09      	cmp	r3, #9
 8002ff6:	bf94      	ite	ls
 8002ff8:	2301      	movls	r3, #1
 8002ffa:	2300      	movhi	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e012      	b.n	8003026 <HAL_ADC_ConfigChannel+0x3d6>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800300e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2b09      	cmp	r3, #9
 800301e:	bf94      	ite	ls
 8003020:	2301      	movls	r3, #1
 8003022:	2300      	movhi	r3, #0
 8003024:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003026:	2b00      	cmp	r3, #0
 8003028:	d064      	beq.n	80030f4 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003032:	2b00      	cmp	r3, #0
 8003034:	d107      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x3f6>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	0e9b      	lsrs	r3, r3, #26
 800303c:	3301      	adds	r3, #1
 800303e:	069b      	lsls	r3, r3, #26
 8003040:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003044:	e00e      	b.n	8003064 <HAL_ADC_ConfigChannel+0x414>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	3301      	adds	r3, #1
 800305e:	069b      	lsls	r3, r3, #26
 8003060:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x434>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	3301      	adds	r3, #1
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	e010      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x456>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	ea42 0103 	orr.w	r1, r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x47c>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	0e9b      	lsrs	r3, r3, #26
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 021f 	and.w	r2, r3, #31
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	051b      	lsls	r3, r3, #20
 80030ca:	e011      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x4a0>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f0:	430b      	orrs	r3, r1
 80030f2:	e069      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d107      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x4c0>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	3301      	adds	r3, #1
 8003108:	069b      	lsls	r3, r3, #26
 800310a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800310e:	e00e      	b.n	800312e <HAL_ADC_ConfigChannel+0x4de>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	61fb      	str	r3, [r7, #28]
  return result;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3301      	adds	r3, #1
 8003128:	069b      	lsls	r3, r3, #26
 800312a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_ADC_ConfigChannel+0x4fe>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	0e9b      	lsrs	r3, r3, #26
 8003140:	3301      	adds	r3, #1
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	2101      	movs	r1, #1
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	e010      	b.n	8003170 <HAL_ADC_ConfigChannel+0x520>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa93 f3a3 	rbit	r3, r3
 800315a:	617b      	str	r3, [r7, #20]
  return result;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3301      	adds	r3, #1
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	2101      	movs	r1, #1
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	ea42 0103 	orr.w	r1, r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10d      	bne.n	800319c <HAL_ADC_ConfigChannel+0x54c>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0e9b      	lsrs	r3, r3, #26
 8003186:	3301      	adds	r3, #1
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	3b1e      	subs	r3, #30
 8003194:	051b      	lsls	r3, r3, #20
 8003196:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800319a:	e014      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x576>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	60fb      	str	r3, [r7, #12]
  return result;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	f003 021f 	and.w	r2, r3, #31
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	3b1e      	subs	r3, #30
 80031c0:	051b      	lsls	r3, r3, #20
 80031c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031c6:	430b      	orrs	r3, r1
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	6892      	ldr	r2, [r2, #8]
 80031cc:	4619      	mov	r1, r3
 80031ce:	f7ff fa0f 	bl	80025f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b2d      	ldr	r3, [pc, #180]	; (800328c <HAL_ADC_ConfigChannel+0x63c>)
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 808c 	beq.w	80032f8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e0:	482b      	ldr	r0, [pc, #172]	; (8003290 <HAL_ADC_ConfigChannel+0x640>)
 80031e2:	f7ff f96d 	bl	80024c0 <LL_ADC_GetCommonPathInternalCh>
 80031e6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a29      	ldr	r2, [pc, #164]	; (8003294 <HAL_ADC_ConfigChannel+0x644>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d12b      	bne.n	800324c <HAL_ADC_ConfigChannel+0x5fc>
 80031f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d125      	bne.n	800324c <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a24      	ldr	r2, [pc, #144]	; (8003298 <HAL_ADC_ConfigChannel+0x648>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_ADC_ConfigChannel+0x5c4>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a23      	ldr	r2, [pc, #140]	; (800329c <HAL_ADC_ConfigChannel+0x64c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d16e      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800321c:	4619      	mov	r1, r3
 800321e:	481c      	ldr	r0, [pc, #112]	; (8003290 <HAL_ADC_ConfigChannel+0x640>)
 8003220:	f7ff f93b 	bl	800249a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003224:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <HAL_ADC_ConfigChannel+0x650>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <HAL_ADC_ConfigChannel+0x654>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	099a      	lsrs	r2, r3, #6
 8003232:	4613      	mov	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800323c:	e002      	b.n	8003244 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	3b01      	subs	r3, #1
 8003242:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f9      	bne.n	800323e <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800324a:	e052      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <HAL_ADC_ConfigChannel+0x658>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d12a      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x65c>
 8003256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800325a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d124      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <HAL_ADC_ConfigChannel+0x648>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x626>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0a      	ldr	r2, [pc, #40]	; (800329c <HAL_ADC_ConfigChannel+0x64c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d13f      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800327a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800327e:	4619      	mov	r1, r3
 8003280:	4803      	ldr	r0, [pc, #12]	; (8003290 <HAL_ADC_ConfigChannel+0x640>)
 8003282:	f7ff f90a 	bl	800249a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003286:	e036      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x6a6>
 8003288:	407f0000 	.word	0x407f0000
 800328c:	80080000 	.word	0x80080000
 8003290:	50040300 	.word	0x50040300
 8003294:	c7520000 	.word	0xc7520000
 8003298:	50040000 	.word	0x50040000
 800329c:	50040200 	.word	0x50040200
 80032a0:	20000000 	.word	0x20000000
 80032a4:	053e2d63 	.word	0x053e2d63
 80032a8:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a16      	ldr	r2, [pc, #88]	; (800330c <HAL_ADC_ConfigChannel+0x6bc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d120      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d11a      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a12      	ldr	r2, [pc, #72]	; (8003310 <HAL_ADC_ConfigChannel+0x6c0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d115      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032d4:	4619      	mov	r1, r3
 80032d6:	480f      	ldr	r0, [pc, #60]	; (8003314 <HAL_ADC_ConfigChannel+0x6c4>)
 80032d8:	f7ff f8df 	bl	800249a <LL_ADC_SetCommonPathInternalCh>
 80032dc:	e00c      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f043 0220 	orr.w	r2, r3, #32
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80032f0:	e002      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003300:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003304:	4618      	mov	r0, r3
 8003306:	3798      	adds	r7, #152	; 0x98
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	80000001 	.word	0x80000001
 8003310:	50040000 	.word	0x50040000
 8003314:	50040300 	.word	0x50040300

08003318 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fa1f 	bl	8002768 <LL_ADC_IsEnabled>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d146      	bne.n	80033be <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <ADC_Enable+0xb0>)
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	f043 0210 	orr.w	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	f043 0201 	orr.w	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e032      	b.n	80033c0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff f9ee 	bl	8002740 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003364:	f7ff f858 	bl	8002418 <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800336a:	e021      	b.n	80033b0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff f9f9 	bl	8002768 <LL_ADC_IsEnabled>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff f9dd 	bl	8002740 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003386:	f7ff f847 	bl	8002418 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d90d      	bls.n	80033b0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f043 0210 	orr.w	r2, r3, #16
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e007      	b.n	80033c0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d1d6      	bne.n	800336c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	8000003f 	.word	0x8000003f

080033cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d14b      	bne.n	800347e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d021      	beq.n	8003444 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff f8b7 	bl	8002578 <LL_ADC_REG_IsTriggerSourceSWStart>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d032      	beq.n	8003476 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d12b      	bne.n	8003476 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d11f      	bne.n	8003476 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	655a      	str	r2, [r3, #84]	; 0x54
 8003442:	e018      	b.n	8003476 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d111      	bne.n	8003476 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7ff fbcc 	bl	8002c14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800347c:	e00e      	b.n	800349c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff fbd6 	bl	8002c3c <HAL_ADC_ErrorCallback>
}
 8003490:	e004      	b.n	800349c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff fbb8 	bl	8002c28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7ff fba8 	bl	8002c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <LL_ADC_IsEnabled>:
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <LL_ADC_IsEnabled+0x18>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <LL_ADC_IsEnabled+0x1a>
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <LL_ADC_REG_IsConversionOngoing>:
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b04      	cmp	r3, #4
 800352c:	d101      	bne.n	8003532 <LL_ADC_REG_IsConversionOngoing+0x18>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b09f      	sub	sp, #124	; 0x7c
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800355a:	2302      	movs	r3, #2
 800355c:	e08f      	b.n	800367e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a47      	ldr	r2, [pc, #284]	; (8003688 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d102      	bne.n	8003576 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003570:	4b46      	ldr	r3, [pc, #280]	; (800368c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003572:	60bb      	str	r3, [r7, #8]
 8003574:	e001      	b.n	800357a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e072      	b.n	800367e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff ffbd 	bl	800351a <LL_ADC_REG_IsConversionOngoing>
 80035a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ffb7 	bl	800351a <LL_ADC_REG_IsConversionOngoing>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d154      	bne.n	800365c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d151      	bne.n	800365c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035b8:	4b35      	ldr	r3, [pc, #212]	; (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d02c      	beq.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035d6:	035b      	lsls	r3, r3, #13
 80035d8:	430b      	orrs	r3, r1
 80035da:	431a      	orrs	r2, r3
 80035dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035e0:	4829      	ldr	r0, [pc, #164]	; (8003688 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80035e2:	f7ff ff87 	bl	80034f4 <LL_ADC_IsEnabled>
 80035e6:	4604      	mov	r4, r0
 80035e8:	4828      	ldr	r0, [pc, #160]	; (800368c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80035ea:	f7ff ff83 	bl	80034f4 <LL_ADC_IsEnabled>
 80035ee:	4603      	mov	r3, r0
 80035f0:	431c      	orrs	r4, r3
 80035f2:	4828      	ldr	r0, [pc, #160]	; (8003694 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035f4:	f7ff ff7e 	bl	80034f4 <LL_ADC_IsEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4323      	orrs	r3, r4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d137      	bne.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003608:	f023 030f 	bic.w	r3, r3, #15
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	6811      	ldr	r1, [r2, #0]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	6892      	ldr	r2, [r2, #8]
 8003614:	430a      	orrs	r2, r1
 8003616:	431a      	orrs	r2, r3
 8003618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800361c:	e028      	b.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003628:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800362a:	4817      	ldr	r0, [pc, #92]	; (8003688 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800362c:	f7ff ff62 	bl	80034f4 <LL_ADC_IsEnabled>
 8003630:	4604      	mov	r4, r0
 8003632:	4816      	ldr	r0, [pc, #88]	; (800368c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003634:	f7ff ff5e 	bl	80034f4 <LL_ADC_IsEnabled>
 8003638:	4603      	mov	r3, r0
 800363a:	431c      	orrs	r4, r3
 800363c:	4815      	ldr	r0, [pc, #84]	; (8003694 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800363e:	f7ff ff59 	bl	80034f4 <LL_ADC_IsEnabled>
 8003642:	4603      	mov	r3, r0
 8003644:	4323      	orrs	r3, r4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d112      	bne.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800364a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003652:	f023 030f 	bic.w	r3, r3, #15
 8003656:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003658:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800365a:	e009      	b.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800366e:	e000      	b.n	8003672 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003670:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800367a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800367e:	4618      	mov	r0, r3
 8003680:	377c      	adds	r7, #124	; 0x7c
 8003682:	46bd      	mov	sp, r7
 8003684:	bd90      	pop	{r4, r7, pc}
 8003686:	bf00      	nop
 8003688:	50040000 	.word	0x50040000
 800368c:	50040100 	.word	0x50040100
 8003690:	50040300 	.word	0x50040300
 8003694:	50040200 	.word	0x50040200

08003698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <__NVIC_SetPriorityGrouping+0x44>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036b4:	4013      	ands	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ca:	4a04      	ldr	r2, [pc, #16]	; (80036dc <__NVIC_SetPriorityGrouping+0x44>)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	60d3      	str	r3, [r2, #12]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <__NVIC_GetPriorityGrouping+0x18>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	0a1b      	lsrs	r3, r3, #8
 80036ea:	f003 0307 	and.w	r3, r3, #7
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	2b00      	cmp	r3, #0
 800370c:	db0b      	blt.n	8003726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	f003 021f 	and.w	r2, r3, #31
 8003714:	4907      	ldr	r1, [pc, #28]	; (8003734 <__NVIC_EnableIRQ+0x38>)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2001      	movs	r0, #1
 800371e:	fa00 f202 	lsl.w	r2, r0, r2
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000e100 	.word	0xe000e100

08003738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	6039      	str	r1, [r7, #0]
 8003742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003748:	2b00      	cmp	r3, #0
 800374a:	db0a      	blt.n	8003762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	490c      	ldr	r1, [pc, #48]	; (8003784 <__NVIC_SetPriority+0x4c>)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	0112      	lsls	r2, r2, #4
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	440b      	add	r3, r1
 800375c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003760:	e00a      	b.n	8003778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4908      	ldr	r1, [pc, #32]	; (8003788 <__NVIC_SetPriority+0x50>)
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	3b04      	subs	r3, #4
 8003770:	0112      	lsls	r2, r2, #4
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	440b      	add	r3, r1
 8003776:	761a      	strb	r2, [r3, #24]
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000e100 	.word	0xe000e100
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	; 0x24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f1c3 0307 	rsb	r3, r3, #7
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	bf28      	it	cs
 80037aa:	2304      	movcs	r3, #4
 80037ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3304      	adds	r3, #4
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d902      	bls.n	80037bc <NVIC_EncodePriority+0x30>
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3b03      	subs	r3, #3
 80037ba:	e000      	b.n	80037be <NVIC_EncodePriority+0x32>
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c0:	f04f 32ff 	mov.w	r2, #4294967295
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43da      	mvns	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	401a      	ands	r2, r3
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d4:	f04f 31ff 	mov.w	r1, #4294967295
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	43d9      	mvns	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e4:	4313      	orrs	r3, r2
         );
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3724      	adds	r7, #36	; 0x24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003804:	d301      	bcc.n	800380a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003806:	2301      	movs	r3, #1
 8003808:	e00f      	b.n	800382a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800380a:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <SysTick_Config+0x40>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003812:	210f      	movs	r1, #15
 8003814:	f04f 30ff 	mov.w	r0, #4294967295
 8003818:	f7ff ff8e 	bl	8003738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <SysTick_Config+0x40>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <SysTick_Config+0x40>)
 8003824:	2207      	movs	r2, #7
 8003826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	e000e010 	.word	0xe000e010

08003838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff29 	bl	8003698 <__NVIC_SetPriorityGrouping>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003860:	f7ff ff3e 	bl	80036e0 <__NVIC_GetPriorityGrouping>
 8003864:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	6978      	ldr	r0, [r7, #20]
 800386c:	f7ff ff8e 	bl	800378c <NVIC_EncodePriority>
 8003870:	4602      	mov	r2, r0
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff5d 	bl	8003738 <__NVIC_SetPriority>
}
 800387e:	bf00      	nop
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	4603      	mov	r3, r0
 800388e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff31 	bl	80036fc <__NVIC_EnableIRQ>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff ffa2 	bl	80037f4 <SysTick_Config>
 80038b0:	4603      	mov	r3, r0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e014      	b.n	80038f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	791b      	ldrb	r3, [r3, #4]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d105      	bne.n	80038e2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7fe fb5d 	bl	8001f9c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	795b      	ldrb	r3, [r3, #5]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_DAC_Start+0x16>
 8003910:	2302      	movs	r3, #2
 8003912:	e03b      	b.n	800398c <HAL_DAC_Start+0x8e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6819      	ldr	r1, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2201      	movs	r2, #1
 800392e:	409a      	lsls	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003948:	2b04      	cmp	r3, #4
 800394a:	d118      	bne.n	800397e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	e00f      	b.n	800397e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003968:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800396c:	d107      	bne.n	800397e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0202 	orr.w	r2, r2, #2
 800397c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d105      	bne.n	80039c2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4413      	add	r3, r2
 80039bc:	3308      	adds	r3, #8
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e004      	b.n	80039cc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	3314      	adds	r3, #20
 80039ca:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	461a      	mov	r2, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b088      	sub	sp, #32
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	795b      	ldrb	r3, [r3, #5]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_DAC_ConfigChannel+0x1c>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e107      	b.n	8003c0e <HAL_DAC_ConfigChannel+0x22c>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2202      	movs	r2, #2
 8003a08:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d174      	bne.n	8003afc <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d137      	bne.n	8003a88 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003a18:	f7fe fcfe 	bl	8002418 <HAL_GetTick>
 8003a1c:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a1e:	e011      	b.n	8003a44 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a20:	f7fe fcfa 	bl	8002418 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d90a      	bls.n	8003a44 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f043 0208 	orr.w	r2, r3, #8
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0e4      	b.n	8003c0e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e6      	bne.n	8003a20 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003a52:	2001      	movs	r0, #1
 8003a54:	f7fe fcec 	bl	8002430 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	6992      	ldr	r2, [r2, #24]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
 8003a62:	e01e      	b.n	8003aa2 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a64:	f7fe fcd8 	bl	8002418 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d90a      	bls.n	8003a88 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f043 0208 	orr.w	r2, r3, #8
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2203      	movs	r2, #3
 8003a82:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e0c2      	b.n	8003c0e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	dbe8      	blt.n	8003a64 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003a92:	2001      	movs	r0, #1
 8003a94:	f7fe fccc 	bl	8002430 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	6992      	ldr	r2, [r2, #24]
 8003aa0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	ea02 0103 	and.w	r1, r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	21ff      	movs	r1, #255	; 0xff
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	ea02 0103 	and.w	r1, r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	6a1a      	ldr	r2, [r3, #32]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d11d      	bne.n	8003b40 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	221f      	movs	r2, #31
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2207      	movs	r2, #7
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6819      	ldr	r1, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43da      	mvns	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	400a      	ands	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6819      	ldr	r1, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	22c0      	movs	r2, #192	; 0xc0
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e098      	b.n	8003d5c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4b4d      	ldr	r3, [pc, #308]	; (8003d68 <HAL_DMA_Init+0x150>)
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d80f      	bhi.n	8003c56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4b4b      	ldr	r3, [pc, #300]	; (8003d6c <HAL_DMA_Init+0x154>)
 8003c3e:	4413      	add	r3, r2
 8003c40:	4a4b      	ldr	r2, [pc, #300]	; (8003d70 <HAL_DMA_Init+0x158>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	009a      	lsls	r2, r3, #2
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a48      	ldr	r2, [pc, #288]	; (8003d74 <HAL_DMA_Init+0x15c>)
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
 8003c54:	e00e      	b.n	8003c74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4b46      	ldr	r3, [pc, #280]	; (8003d78 <HAL_DMA_Init+0x160>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	4a43      	ldr	r2, [pc, #268]	; (8003d70 <HAL_DMA_Init+0x158>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	009a      	lsls	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a42      	ldr	r2, [pc, #264]	; (8003d7c <HAL_DMA_Init+0x164>)
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cce:	d039      	beq.n	8003d44 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <HAL_DMA_Init+0x15c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d11a      	bne.n	8003d10 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cda:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <HAL_DMA_Init+0x168>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f003 031c 	and.w	r3, r3, #28
 8003ce6:	210f      	movs	r1, #15
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	4924      	ldr	r1, [pc, #144]	; (8003d80 <HAL_DMA_Init+0x168>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_DMA_Init+0x168>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	f003 031c 	and.w	r3, r3, #28
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	491d      	ldr	r1, [pc, #116]	; (8003d80 <HAL_DMA_Init+0x168>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]
 8003d0e:	e019      	b.n	8003d44 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d10:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <HAL_DMA_Init+0x16c>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	f003 031c 	and.w	r3, r3, #28
 8003d1c:	210f      	movs	r1, #15
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	4917      	ldr	r1, [pc, #92]	; (8003d84 <HAL_DMA_Init+0x16c>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d2a:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <HAL_DMA_Init+0x16c>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f003 031c 	and.w	r3, r3, #28
 8003d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3e:	4911      	ldr	r1, [pc, #68]	; (8003d84 <HAL_DMA_Init+0x16c>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40020407 	.word	0x40020407
 8003d6c:	bffdfff8 	.word	0xbffdfff8
 8003d70:	cccccccd 	.word	0xcccccccd
 8003d74:	40020000 	.word	0x40020000
 8003d78:	bffdfbf8 	.word	0xbffdfbf8
 8003d7c:	40020400 	.word	0x40020400
 8003d80:	400200a8 	.word	0x400200a8
 8003d84:	400204a8 	.word	0x400204a8

08003d88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_DMA_Start_IT+0x20>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e04b      	b.n	8003e40 <HAL_DMA_Start_IT+0xb8>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d13a      	bne.n	8003e32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f8e0 	bl	8003fa6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 020e 	orr.w	r2, r2, #14
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e00f      	b.n	8003e20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0204 	bic.w	r2, r2, #4
 8003e0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 020a 	orr.w	r2, r2, #10
 8003e1e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e005      	b.n	8003e3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e64:	f003 031c 	and.w	r3, r3, #28
 8003e68:	2204      	movs	r2, #4
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d026      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x7a>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d021      	beq.n	8003ec2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d107      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0204 	bic.w	r2, r2, #4
 8003e9a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea0:	f003 021c 	and.w	r2, r3, #28
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003eae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d071      	beq.n	8003f9c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003ec0:	e06c      	b.n	8003f9c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	f003 031c 	and.w	r3, r3, #28
 8003eca:	2202      	movs	r2, #2
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d02e      	beq.n	8003f34 <HAL_DMA_IRQHandler+0xec>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d029      	beq.n	8003f34 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 020a 	bic.w	r2, r2, #10
 8003efc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	f003 021c 	and.w	r2, r3, #28
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2102      	movs	r1, #2
 8003f14:	fa01 f202 	lsl.w	r2, r1, r2
 8003f18:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d038      	beq.n	8003f9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f32:	e033      	b.n	8003f9c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	f003 031c 	and.w	r3, r3, #28
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d02a      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x156>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d025      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 020e 	bic.w	r2, r2, #14
 8003f60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	f003 021c 	and.w	r2, r3, #28
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2101      	movs	r1, #1
 8003f70:	fa01 f202 	lsl.w	r2, r1, r2
 8003f74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
}
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb8:	f003 021c 	and.w	r2, r3, #28
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d108      	bne.n	8003fea <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fe8:	e007      	b.n	8003ffa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	60da      	str	r2, [r3, #12]
}
 8003ffa:	bf00      	nop
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004016:	e17f      	b.n	8004318 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	2101      	movs	r1, #1
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	4013      	ands	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8171 	beq.w	8004312 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d00b      	beq.n	8004050 <HAL_GPIO_Init+0x48>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d007      	beq.n	8004050 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004044:	2b11      	cmp	r3, #17
 8004046:	d003      	beq.n	8004050 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b12      	cmp	r3, #18
 800404e:	d130      	bne.n	80040b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	2203      	movs	r2, #3
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004086:	2201      	movs	r2, #1
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	f003 0201 	and.w	r2, r3, #1
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d118      	bne.n	80040f0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80040c4:	2201      	movs	r2, #1
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4013      	ands	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	08db      	lsrs	r3, r3, #3
 80040da:	f003 0201 	and.w	r2, r3, #1
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	2203      	movs	r2, #3
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d003      	beq.n	8004130 <HAL_GPIO_Init+0x128>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b12      	cmp	r3, #18
 800412e:	d123      	bne.n	8004178 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	08da      	lsrs	r2, r3, #3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3208      	adds	r2, #8
 8004138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800413c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	220f      	movs	r2, #15
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4013      	ands	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	08da      	lsrs	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3208      	adds	r2, #8
 8004172:	6939      	ldr	r1, [r7, #16]
 8004174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	2203      	movs	r2, #3
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	43db      	mvns	r3, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f003 0203 	and.w	r2, r3, #3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80ac 	beq.w	8004312 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ba:	4b5e      	ldr	r3, [pc, #376]	; (8004334 <HAL_GPIO_Init+0x32c>)
 80041bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041be:	4a5d      	ldr	r2, [pc, #372]	; (8004334 <HAL_GPIO_Init+0x32c>)
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	6613      	str	r3, [r2, #96]	; 0x60
 80041c6:	4b5b      	ldr	r3, [pc, #364]	; (8004334 <HAL_GPIO_Init+0x32c>)
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041d2:	4a59      	ldr	r2, [pc, #356]	; (8004338 <HAL_GPIO_Init+0x330>)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	089b      	lsrs	r3, r3, #2
 80041d8:	3302      	adds	r3, #2
 80041da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	220f      	movs	r2, #15
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041fc:	d025      	beq.n	800424a <HAL_GPIO_Init+0x242>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a4e      	ldr	r2, [pc, #312]	; (800433c <HAL_GPIO_Init+0x334>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d01f      	beq.n	8004246 <HAL_GPIO_Init+0x23e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a4d      	ldr	r2, [pc, #308]	; (8004340 <HAL_GPIO_Init+0x338>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d019      	beq.n	8004242 <HAL_GPIO_Init+0x23a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a4c      	ldr	r2, [pc, #304]	; (8004344 <HAL_GPIO_Init+0x33c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <HAL_GPIO_Init+0x236>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a4b      	ldr	r2, [pc, #300]	; (8004348 <HAL_GPIO_Init+0x340>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00d      	beq.n	800423a <HAL_GPIO_Init+0x232>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a4a      	ldr	r2, [pc, #296]	; (800434c <HAL_GPIO_Init+0x344>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <HAL_GPIO_Init+0x22e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a49      	ldr	r2, [pc, #292]	; (8004350 <HAL_GPIO_Init+0x348>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d101      	bne.n	8004232 <HAL_GPIO_Init+0x22a>
 800422e:	2306      	movs	r3, #6
 8004230:	e00c      	b.n	800424c <HAL_GPIO_Init+0x244>
 8004232:	2307      	movs	r3, #7
 8004234:	e00a      	b.n	800424c <HAL_GPIO_Init+0x244>
 8004236:	2305      	movs	r3, #5
 8004238:	e008      	b.n	800424c <HAL_GPIO_Init+0x244>
 800423a:	2304      	movs	r3, #4
 800423c:	e006      	b.n	800424c <HAL_GPIO_Init+0x244>
 800423e:	2303      	movs	r3, #3
 8004240:	e004      	b.n	800424c <HAL_GPIO_Init+0x244>
 8004242:	2302      	movs	r3, #2
 8004244:	e002      	b.n	800424c <HAL_GPIO_Init+0x244>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <HAL_GPIO_Init+0x244>
 800424a:	2300      	movs	r3, #0
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	f002 0203 	and.w	r2, r2, #3
 8004252:	0092      	lsls	r2, r2, #2
 8004254:	4093      	lsls	r3, r2
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800425c:	4936      	ldr	r1, [pc, #216]	; (8004338 <HAL_GPIO_Init+0x330>)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	089b      	lsrs	r3, r3, #2
 8004262:	3302      	adds	r3, #2
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800426a:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <HAL_GPIO_Init+0x34c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	43db      	mvns	r3, r3
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4013      	ands	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800428e:	4a31      	ldr	r2, [pc, #196]	; (8004354 <HAL_GPIO_Init+0x34c>)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004294:	4b2f      	ldr	r3, [pc, #188]	; (8004354 <HAL_GPIO_Init+0x34c>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	43db      	mvns	r3, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042b8:	4a26      	ldr	r2, [pc, #152]	; (8004354 <HAL_GPIO_Init+0x34c>)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042be:	4b25      	ldr	r3, [pc, #148]	; (8004354 <HAL_GPIO_Init+0x34c>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	43db      	mvns	r3, r3
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042e2:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_GPIO_Init+0x34c>)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042e8:	4b1a      	ldr	r3, [pc, #104]	; (8004354 <HAL_GPIO_Init+0x34c>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800430c:	4a11      	ldr	r2, [pc, #68]	; (8004354 <HAL_GPIO_Init+0x34c>)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	3301      	adds	r3, #1
 8004316:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa22 f303 	lsr.w	r3, r2, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	f47f ae78 	bne.w	8004018 <HAL_GPIO_Init+0x10>
  }
}
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40021000 	.word	0x40021000
 8004338:	40010000 	.word	0x40010000
 800433c:	48000400 	.word	0x48000400
 8004340:	48000800 	.word	0x48000800
 8004344:	48000c00 	.word	0x48000c00
 8004348:	48001000 	.word	0x48001000
 800434c:	48001400 	.word	0x48001400
 8004350:	48001800 	.word	0x48001800
 8004354:	40010400 	.word	0x40010400

08004358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	807b      	strh	r3, [r7, #2]
 8004364:	4613      	mov	r3, r2
 8004366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004368:	787b      	ldrb	r3, [r7, #1]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800436e:	887a      	ldrh	r2, [r7, #2]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004374:	e002      	b.n	800437c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004376:	887a      	ldrh	r2, [r7, #2]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40007000 	.word	0x40007000

080043a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b2:	d130      	bne.n	8004416 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b4:	4b23      	ldr	r3, [pc, #140]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c0:	d038      	beq.n	8004434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043d2:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2232      	movs	r2, #50	; 0x32
 80043d8:	fb02 f303 	mul.w	r3, r2, r3
 80043dc:	4a1b      	ldr	r2, [pc, #108]	; (800444c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	0c9b      	lsrs	r3, r3, #18
 80043e4:	3301      	adds	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043e8:	e002      	b.n	80043f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f0:	4b14      	ldr	r3, [pc, #80]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043fc:	d102      	bne.n	8004404 <HAL_PWREx_ControlVoltageScaling+0x60>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f2      	bne.n	80043ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004410:	d110      	bne.n	8004434 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e00f      	b.n	8004436 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d007      	beq.n	8004434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004424:	4b07      	ldr	r3, [pc, #28]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800442c:	4a05      	ldr	r2, [pc, #20]	; (8004444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800442e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004432:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40007000 	.word	0x40007000
 8004448:	20000000 	.word	0x20000000
 800444c:	431bde83 	.word	0x431bde83

08004450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e3d4      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004462:	4ba1      	ldr	r3, [pc, #644]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800446c:	4b9e      	ldr	r3, [pc, #632]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 80e4 	beq.w	800464c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <HAL_RCC_OscConfig+0x4a>
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b0c      	cmp	r3, #12
 800448e:	f040 808b 	bne.w	80045a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b01      	cmp	r3, #1
 8004496:	f040 8087 	bne.w	80045a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800449a:	4b93      	ldr	r3, [pc, #588]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_RCC_OscConfig+0x62>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e3ac      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1a      	ldr	r2, [r3, #32]
 80044b6:	4b8c      	ldr	r3, [pc, #560]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d004      	beq.n	80044cc <HAL_RCC_OscConfig+0x7c>
 80044c2:	4b89      	ldr	r3, [pc, #548]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ca:	e005      	b.n	80044d8 <HAL_RCC_OscConfig+0x88>
 80044cc:	4b86      	ldr	r3, [pc, #536]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80044ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044d8:	4293      	cmp	r3, r2
 80044da:	d223      	bcs.n	8004524 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fd3f 	bl	8004f64 <RCC_SetFlashLatencyFromMSIRange>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e38d      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044f0:	4b7d      	ldr	r3, [pc, #500]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a7c      	ldr	r2, [pc, #496]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80044f6:	f043 0308 	orr.w	r3, r3, #8
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	4b7a      	ldr	r3, [pc, #488]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4977      	ldr	r1, [pc, #476]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800450e:	4b76      	ldr	r3, [pc, #472]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	4972      	ldr	r1, [pc, #456]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 800451e:	4313      	orrs	r3, r2
 8004520:	604b      	str	r3, [r1, #4]
 8004522:	e025      	b.n	8004570 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004524:	4b70      	ldr	r3, [pc, #448]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a6f      	ldr	r2, [pc, #444]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 800452a:	f043 0308 	orr.w	r3, r3, #8
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b6d      	ldr	r3, [pc, #436]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	496a      	ldr	r1, [pc, #424]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004542:	4b69      	ldr	r3, [pc, #420]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	4965      	ldr	r1, [pc, #404]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 fcff 	bl	8004f64 <RCC_SetFlashLatencyFromMSIRange>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e34d      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004570:	f000 fc36 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 8004574:	4601      	mov	r1, r0
 8004576:	4b5c      	ldr	r3, [pc, #368]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	091b      	lsrs	r3, r3, #4
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	4a5a      	ldr	r2, [pc, #360]	; (80046ec <HAL_RCC_OscConfig+0x29c>)
 8004582:	5cd3      	ldrb	r3, [r2, r3]
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	fa21 f303 	lsr.w	r3, r1, r3
 800458c:	4a58      	ldr	r2, [pc, #352]	; (80046f0 <HAL_RCC_OscConfig+0x2a0>)
 800458e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004590:	4b58      	ldr	r3, [pc, #352]	; (80046f4 <HAL_RCC_OscConfig+0x2a4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7fd fef3 	bl	8002380 <HAL_InitTick>
 800459a:	4603      	mov	r3, r0
 800459c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d052      	beq.n	800464a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	e331      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d032      	beq.n	8004616 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045b0:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a4c      	ldr	r2, [pc, #304]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045bc:	f7fd ff2c 	bl	8002418 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045c4:	f7fd ff28 	bl	8002418 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e31a      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d6:	4b44      	ldr	r3, [pc, #272]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e2:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a40      	ldr	r2, [pc, #256]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80045e8:	f043 0308 	orr.w	r3, r3, #8
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b3e      	ldr	r3, [pc, #248]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	493b      	ldr	r1, [pc, #236]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004600:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	4936      	ldr	r1, [pc, #216]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 8004610:	4313      	orrs	r3, r2
 8004612:	604b      	str	r3, [r1, #4]
 8004614:	e01a      	b.n	800464c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004616:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a33      	ldr	r2, [pc, #204]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004622:	f7fd fef9 	bl	8002418 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800462a:	f7fd fef5 	bl	8002418 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e2e7      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800463c:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x1da>
 8004648:	e000      	b.n	800464c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800464a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d074      	beq.n	8004742 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b08      	cmp	r3, #8
 800465c:	d005      	beq.n	800466a <HAL_RCC_OscConfig+0x21a>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d10e      	bne.n	8004682 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d10b      	bne.n	8004682 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466a:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d064      	beq.n	8004740 <HAL_RCC_OscConfig+0x2f0>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d160      	bne.n	8004740 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e2c4      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468a:	d106      	bne.n	800469a <HAL_RCC_OscConfig+0x24a>
 800468c:	4b16      	ldr	r3, [pc, #88]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a15      	ldr	r2, [pc, #84]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 8004692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	e01d      	b.n	80046d6 <HAL_RCC_OscConfig+0x286>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a2:	d10c      	bne.n	80046be <HAL_RCC_OscConfig+0x26e>
 80046a4:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a0f      	ldr	r2, [pc, #60]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80046aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80046b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	e00b      	b.n	80046d6 <HAL_RCC_OscConfig+0x286>
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a06      	ldr	r2, [pc, #24]	; (80046e8 <HAL_RCC_OscConfig+0x298>)
 80046d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01c      	beq.n	8004718 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fd fe9b 	bl	8002418 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e4:	e011      	b.n	800470a <HAL_RCC_OscConfig+0x2ba>
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	08007f18 	.word	0x08007f18
 80046f0:	20000000 	.word	0x20000000
 80046f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f8:	f7fd fe8e 	bl	8002418 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b64      	cmp	r3, #100	; 0x64
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e280      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800470a:	4baf      	ldr	r3, [pc, #700]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x2a8>
 8004716:	e014      	b.n	8004742 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fd fe7e 	bl	8002418 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004720:	f7fd fe7a 	bl	8002418 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	; 0x64
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e26c      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004732:	4ba5      	ldr	r3, [pc, #660]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x2d0>
 800473e:	e000      	b.n	8004742 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d060      	beq.n	8004810 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d005      	beq.n	8004760 <HAL_RCC_OscConfig+0x310>
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b0c      	cmp	r3, #12
 8004758:	d119      	bne.n	800478e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d116      	bne.n	800478e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004760:	4b99      	ldr	r3, [pc, #612]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_OscConfig+0x328>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e249      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004778:	4b93      	ldr	r3, [pc, #588]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	061b      	lsls	r3, r3, #24
 8004786:	4990      	ldr	r1, [pc, #576]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004788:	4313      	orrs	r3, r2
 800478a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800478c:	e040      	b.n	8004810 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d023      	beq.n	80047de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004796:	4b8c      	ldr	r3, [pc, #560]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a8b      	ldr	r2, [pc, #556]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 800479c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7fd fe39 	bl	8002418 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047aa:	f7fd fe35 	bl	8002418 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e227      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047bc:	4b82      	ldr	r3, [pc, #520]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b7f      	ldr	r3, [pc, #508]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	061b      	lsls	r3, r3, #24
 80047d6:	497c      	ldr	r1, [pc, #496]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	604b      	str	r3, [r1, #4]
 80047dc:	e018      	b.n	8004810 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047de:	4b7a      	ldr	r3, [pc, #488]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a79      	ldr	r2, [pc, #484]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 80047e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7fd fe15 	bl	8002418 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f2:	f7fd fe11 	bl	8002418 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e203      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004804:	4b70      	ldr	r3, [pc, #448]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d03c      	beq.n	8004896 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01c      	beq.n	800485e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004824:	4b68      	ldr	r3, [pc, #416]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482a:	4a67      	ldr	r2, [pc, #412]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004834:	f7fd fdf0 	bl	8002418 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483c:	f7fd fdec 	bl	8002418 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e1de      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800484e:	4b5e      	ldr	r3, [pc, #376]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ef      	beq.n	800483c <HAL_RCC_OscConfig+0x3ec>
 800485c:	e01b      	b.n	8004896 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800485e:	4b5a      	ldr	r3, [pc, #360]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004864:	4a58      	ldr	r2, [pc, #352]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486e:	f7fd fdd3 	bl	8002418 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004876:	f7fd fdcf 	bl	8002418 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e1c1      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004888:	4b4f      	ldr	r3, [pc, #316]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 800488a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ef      	bne.n	8004876 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80a6 	beq.w	80049f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a4:	2300      	movs	r3, #0
 80048a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048a8:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10d      	bne.n	80048d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b4:	4b44      	ldr	r3, [pc, #272]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 80048b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b8:	4a43      	ldr	r2, [pc, #268]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 80048ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048be:	6593      	str	r3, [r2, #88]	; 0x58
 80048c0:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c8:	60bb      	str	r3, [r7, #8]
 80048ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048cc:	2301      	movs	r3, #1
 80048ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048d0:	4b3e      	ldr	r3, [pc, #248]	; (80049cc <HAL_RCC_OscConfig+0x57c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d118      	bne.n	800490e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048dc:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <HAL_RCC_OscConfig+0x57c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a3a      	ldr	r2, [pc, #232]	; (80049cc <HAL_RCC_OscConfig+0x57c>)
 80048e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e8:	f7fd fd96 	bl	8002418 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f0:	f7fd fd92 	bl	8002418 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e184      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004902:	4b32      	ldr	r3, [pc, #200]	; (80049cc <HAL_RCC_OscConfig+0x57c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d108      	bne.n	8004928 <HAL_RCC_OscConfig+0x4d8>
 8004916:	4b2c      	ldr	r3, [pc, #176]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491c:	4a2a      	ldr	r2, [pc, #168]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004926:	e024      	b.n	8004972 <HAL_RCC_OscConfig+0x522>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b05      	cmp	r3, #5
 800492e:	d110      	bne.n	8004952 <HAL_RCC_OscConfig+0x502>
 8004930:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	4a24      	ldr	r2, [pc, #144]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004938:	f043 0304 	orr.w	r3, r3, #4
 800493c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004940:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	4a20      	ldr	r2, [pc, #128]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004950:	e00f      	b.n	8004972 <HAL_RCC_OscConfig+0x522>
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004958:	4a1b      	ldr	r2, [pc, #108]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004962:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 800496a:	f023 0304 	bic.w	r3, r3, #4
 800496e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fd fd4d 	bl	8002418 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004980:	e00a      	b.n	8004998 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fd fd49 	bl	8002418 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e139      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_OscConfig+0x578>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0ed      	beq.n	8004982 <HAL_RCC_OscConfig+0x532>
 80049a6:	e01a      	b.n	80049de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a8:	f7fd fd36 	bl	8002418 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049ae:	e00f      	b.n	80049d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b0:	f7fd fd32 	bl	8002418 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80049be:	4293      	cmp	r3, r2
 80049c0:	d906      	bls.n	80049d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e122      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049d0:	4b90      	ldr	r3, [pc, #576]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e8      	bne.n	80049b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049de:	7ffb      	ldrb	r3, [r7, #31]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d105      	bne.n	80049f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e4:	4b8b      	ldr	r3, [pc, #556]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	4a8a      	ldr	r2, [pc, #552]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 80049ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8108 	beq.w	8004c0a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	f040 80d0 	bne.w	8004ba4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a04:	4b83      	ldr	r3, [pc, #524]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f003 0203 	and.w	r2, r3, #3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d130      	bne.n	8004a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	3b01      	subs	r3, #1
 8004a24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d127      	bne.n	8004a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d11f      	bne.n	8004a7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a44:	2a07      	cmp	r2, #7
 8004a46:	bf14      	ite	ne
 8004a48:	2201      	movne	r2, #1
 8004a4a:	2200      	moveq	r2, #0
 8004a4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d113      	bne.n	8004a7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5c:	085b      	lsrs	r3, r3, #1
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d109      	bne.n	8004a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	3b01      	subs	r3, #1
 8004a74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d06e      	beq.n	8004b58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b0c      	cmp	r3, #12
 8004a7e:	d069      	beq.n	8004b54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a80:	4b64      	ldr	r3, [pc, #400]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a8c:	4b61      	ldr	r3, [pc, #388]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0b7      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a9c:	4b5d      	ldr	r3, [pc, #372]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a5c      	ldr	r2, [pc, #368]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004aa8:	f7fd fcb6 	bl	8002418 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fd fcb2 	bl	8002418 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e0a4      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac2:	4b54      	ldr	r3, [pc, #336]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ace:	4b51      	ldr	r3, [pc, #324]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	4b51      	ldr	r3, [pc, #324]	; (8004c18 <HAL_RCC_OscConfig+0x7c8>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ade:	3a01      	subs	r2, #1
 8004ae0:	0112      	lsls	r2, r2, #4
 8004ae2:	4311      	orrs	r1, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ae8:	0212      	lsls	r2, r2, #8
 8004aea:	4311      	orrs	r1, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004af0:	0852      	lsrs	r2, r2, #1
 8004af2:	3a01      	subs	r2, #1
 8004af4:	0552      	lsls	r2, r2, #21
 8004af6:	4311      	orrs	r1, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004afc:	0852      	lsrs	r2, r2, #1
 8004afe:	3a01      	subs	r2, #1
 8004b00:	0652      	lsls	r2, r2, #25
 8004b02:	4311      	orrs	r1, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b08:	0912      	lsrs	r2, r2, #4
 8004b0a:	0452      	lsls	r2, r2, #17
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	4941      	ldr	r1, [pc, #260]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b14:	4b3f      	ldr	r3, [pc, #252]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a3e      	ldr	r2, [pc, #248]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b20:	4b3c      	ldr	r3, [pc, #240]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a3b      	ldr	r2, [pc, #236]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b2c:	f7fd fc74 	bl	8002418 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b34:	f7fd fc70 	bl	8002418 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e062      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b46:	4b33      	ldr	r3, [pc, #204]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b52:	e05a      	b.n	8004c0a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e059      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b58:	4b2e      	ldr	r3, [pc, #184]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d152      	bne.n	8004c0a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b64:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2a      	ldr	r2, [pc, #168]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b70:	4b28      	ldr	r3, [pc, #160]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	4a27      	ldr	r2, [pc, #156]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b7c:	f7fd fc4c 	bl	8002418 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b84:	f7fd fc48 	bl	8002418 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e03a      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b96:	4b1f      	ldr	r3, [pc, #124]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0x734>
 8004ba2:	e032      	b.n	8004c0a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d02d      	beq.n	8004c06 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004baa:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bb4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004bb6:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d105      	bne.n	8004bce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004bc2:	4b14      	ldr	r3, [pc, #80]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	4a13      	ldr	r2, [pc, #76]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004bc8:	f023 0303 	bic.w	r3, r3, #3
 8004bcc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004bce:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	4a10      	ldr	r2, [pc, #64]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004bd4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bdc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bde:	f7fd fc1b 	bl	8002418 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be6:	f7fd fc17 	bl	8002418 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e009      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf8:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <HAL_RCC_OscConfig+0x7c4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f0      	bne.n	8004be6 <HAL_RCC_OscConfig+0x796>
 8004c04:	e001      	b.n	8004c0a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3720      	adds	r7, #32
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40021000 	.word	0x40021000
 8004c18:	f99d808c 	.word	0xf99d808c

08004c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0c8      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c30:	4b66      	ldr	r3, [pc, #408]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d910      	bls.n	8004c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b63      	ldr	r3, [pc, #396]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 0207 	bic.w	r2, r3, #7
 8004c46:	4961      	ldr	r1, [pc, #388]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b5f      	ldr	r3, [pc, #380]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0b0      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d04c      	beq.n	8004d06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c74:	4b56      	ldr	r3, [pc, #344]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d121      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e09e      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c8c:	4b50      	ldr	r3, [pc, #320]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d115      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e092      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ca4:	4b4a      	ldr	r3, [pc, #296]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e086      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb4:	4b46      	ldr	r3, [pc, #280]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e07e      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cc4:	4b42      	ldr	r3, [pc, #264]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f023 0203 	bic.w	r2, r3, #3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	493f      	ldr	r1, [pc, #252]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd6:	f7fd fb9f 	bl	8002418 <HAL_GetTick>
 8004cda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cde:	f7fd fb9b 	bl	8002418 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e066      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf4:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 020c 	and.w	r2, r3, #12
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d1eb      	bne.n	8004cde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d008      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d12:	4b2f      	ldr	r3, [pc, #188]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	492c      	ldr	r1, [pc, #176]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d24:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d210      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 0207 	bic.w	r2, r3, #7
 8004d3a:	4924      	ldr	r1, [pc, #144]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <HAL_RCC_ClockConfig+0x1b0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e036      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4918      	ldr	r1, [pc, #96]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4910      	ldr	r1, [pc, #64]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d92:	f000 f825 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 8004d96:	4601      	mov	r1, r0
 8004d98:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	4a0c      	ldr	r2, [pc, #48]	; (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004da4:	5cd3      	ldrb	r3, [r2, r3]
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	fa21 f303 	lsr.w	r3, r1, r3
 8004dae:	4a0a      	ldr	r2, [pc, #40]	; (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <HAL_RCC_ClockConfig+0x1c0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fd fae2 	bl	8002380 <HAL_InitTick>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8004dc0:	7afb      	ldrb	r3, [r7, #11]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40022000 	.word	0x40022000
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	08007f18 	.word	0x08007f18
 8004dd8:	20000000 	.word	0x20000000
 8004ddc:	20000004 	.word	0x20000004

08004de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	; 0x24
 8004de4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dee:	4b3d      	ldr	r3, [pc, #244]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
 8004df6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004df8:	4b3a      	ldr	r3, [pc, #232]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0x34>
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b0c      	cmp	r3, #12
 8004e0c:	d121      	bne.n	8004e52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d11e      	bne.n	8004e52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e14:	4b33      	ldr	r3, [pc, #204]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e20:	4b30      	ldr	r3, [pc, #192]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e26:	0a1b      	lsrs	r3, r3, #8
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	e005      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e30:	4b2c      	ldr	r3, [pc, #176]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10d      	bne.n	8004e68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d102      	bne.n	8004e5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e58:	4b24      	ldr	r3, [pc, #144]	; (8004eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	e004      	b.n	8004e68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d101      	bne.n	8004e68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e64:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b0c      	cmp	r3, #12
 8004e6c:	d133      	bne.n	8004ed6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0xa4>
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d003      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0xaa>
 8004e82:	e005      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e84:	4b19      	ldr	r3, [pc, #100]	; (8004eec <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e86:	617b      	str	r3, [r7, #20]
      break;
 8004e88:	e005      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e8c:	617b      	str	r3, [r7, #20]
      break;
 8004e8e:	e002      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	617b      	str	r3, [r7, #20]
      break;
 8004e94:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	fb02 f203 	mul.w	r2, r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ebc:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	0e5b      	lsrs	r3, r3, #25
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3724      	adds	r7, #36	; 0x24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	08007f30 	.word	0x08007f30
 8004eec:	00f42400 	.word	0x00f42400
 8004ef0:	007a1200 	.word	0x007a1200

08004ef4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef8:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004efa:	681b      	ldr	r3, [r3, #0]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000000 	.word	0x20000000

08004f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f10:	f7ff fff0 	bl	8004ef4 <HAL_RCC_GetHCLKFreq>
 8004f14:	4601      	mov	r1, r0
 8004f16:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40021000 	.word	0x40021000
 8004f34:	08007f28 	.word	0x08007f28

08004f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f3c:	f7ff ffda 	bl	8004ef4 <HAL_RCC_GetHCLKFreq>
 8004f40:	4601      	mov	r1, r0
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	0adb      	lsrs	r3, r3, #11
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f4e:	5cd3      	ldrb	r3, [r2, r3]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	08007f28 	.word	0x08007f28

08004f64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f70:	4b2a      	ldr	r3, [pc, #168]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f7c:	f7ff fa04 	bl	8004388 <HAL_PWREx_GetVoltageRange>
 8004f80:	6178      	str	r0, [r7, #20]
 8004f82:	e014      	b.n	8004fae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f84:	4b25      	ldr	r3, [pc, #148]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	4a24      	ldr	r2, [pc, #144]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f90:	4b22      	ldr	r3, [pc, #136]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f9c:	f7ff f9f4 	bl	8004388 <HAL_PWREx_GetVoltageRange>
 8004fa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fa2:	4b1e      	ldr	r3, [pc, #120]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	4a1d      	ldr	r2, [pc, #116]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb4:	d10b      	bne.n	8004fce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b80      	cmp	r3, #128	; 0x80
 8004fba:	d919      	bls.n	8004ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2ba0      	cmp	r3, #160	; 0xa0
 8004fc0:	d902      	bls.n	8004fc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	e013      	b.n	8004ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fc8:	2301      	movs	r3, #1
 8004fca:	613b      	str	r3, [r7, #16]
 8004fcc:	e010      	b.n	8004ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b80      	cmp	r3, #128	; 0x80
 8004fd2:	d902      	bls.n	8004fda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	e00a      	b.n	8004ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b80      	cmp	r3, #128	; 0x80
 8004fde:	d102      	bne.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	e004      	b.n	8004ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b70      	cmp	r3, #112	; 0x70
 8004fea:	d101      	bne.n	8004ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fec:	2301      	movs	r3, #1
 8004fee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f023 0207 	bic.w	r2, r3, #7
 8004ff8:	4909      	ldr	r1, [pc, #36]	; (8005020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	429a      	cmp	r2, r3
 800500c:	d001      	beq.n	8005012 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40021000 	.word	0x40021000
 8005020:	40022000 	.word	0x40022000

08005024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800502c:	2300      	movs	r3, #0
 800502e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005030:	2300      	movs	r3, #0
 8005032:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503c:	2b00      	cmp	r3, #0
 800503e:	d03f      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005048:	d01c      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800504a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800504e:	d802      	bhi.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00e      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005054:	e01f      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005056:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800505a:	d003      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800505c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005060:	d01c      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005062:	e018      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005064:	4b85      	ldr	r3, [pc, #532]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4a84      	ldr	r2, [pc, #528]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800506a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005070:	e015      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3304      	adds	r3, #4
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fab9 	bl	80055f0 <RCCEx_PLLSAI1_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005082:	e00c      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3320      	adds	r3, #32
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fba0 	bl	80057d0 <RCCEx_PLLSAI2_Config>
 8005090:	4603      	mov	r3, r0
 8005092:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005094:	e003      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	74fb      	strb	r3, [r7, #19]
      break;
 800509a:	e000      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800509c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800509e:	7cfb      	ldrb	r3, [r7, #19]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050a4:	4b75      	ldr	r3, [pc, #468]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b2:	4972      	ldr	r1, [pc, #456]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050ba:	e001      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d03f      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050d4:	d01c      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80050d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050da:	d802      	bhi.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xda>
 80050e0:	e01f      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80050e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050e6:	d003      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80050e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050ec:	d01c      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80050ee:	e018      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050f0:	4b62      	ldr	r3, [pc, #392]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4a61      	ldr	r2, [pc, #388]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050fc:	e015      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3304      	adds	r3, #4
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fa73 	bl	80055f0 <RCCEx_PLLSAI1_Config>
 800510a:	4603      	mov	r3, r0
 800510c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800510e:	e00c      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3320      	adds	r3, #32
 8005114:	2100      	movs	r1, #0
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fb5a 	bl	80057d0 <RCCEx_PLLSAI2_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005120:	e003      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	74fb      	strb	r3, [r7, #19]
      break;
 8005126:	e000      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800512a:	7cfb      	ldrb	r3, [r7, #19]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005130:	4b52      	ldr	r3, [pc, #328]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800513e:	494f      	ldr	r1, [pc, #316]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005146:	e001      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80a0 	beq.w	800529a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800515a:	2300      	movs	r3, #0
 800515c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800515e:	4b47      	ldr	r3, [pc, #284]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800516e:	2300      	movs	r3, #0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00d      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005174:	4b41      	ldr	r3, [pc, #260]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005178:	4a40      	ldr	r2, [pc, #256]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800517a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517e:	6593      	str	r3, [r2, #88]	; 0x58
 8005180:	4b3e      	ldr	r3, [pc, #248]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800518c:	2301      	movs	r3, #1
 800518e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005190:	4b3b      	ldr	r3, [pc, #236]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a3a      	ldr	r2, [pc, #232]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800519a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800519c:	f7fd f93c 	bl	8002418 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051a2:	e009      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a4:	f7fd f938 	bl	8002418 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d902      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	74fb      	strb	r3, [r7, #19]
        break;
 80051b6:	e005      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051b8:	4b31      	ldr	r3, [pc, #196]	; (8005280 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ef      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d15c      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051ca:	4b2c      	ldr	r3, [pc, #176]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d01f      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d019      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051e8:	4b24      	ldr	r3, [pc, #144]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051f4:	4b21      	ldr	r3, [pc, #132]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fa:	4a20      	ldr	r2, [pc, #128]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005204:	4b1d      	ldr	r3, [pc, #116]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	4a1c      	ldr	r2, [pc, #112]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800520c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005214:	4a19      	ldr	r2, [pc, #100]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d016      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7fd f8f7 	bl	8002418 <HAL_GetTick>
 800522a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800522c:	e00b      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522e:	f7fd f8f3 	bl	8002418 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f241 3288 	movw	r2, #5000	; 0x1388
 800523c:	4293      	cmp	r3, r2
 800523e:	d902      	bls.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	74fb      	strb	r3, [r7, #19]
            break;
 8005244:	e006      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005246:	4b0d      	ldr	r3, [pc, #52]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ec      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10c      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800525a:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526a:	4904      	ldr	r1, [pc, #16]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005272:	e009      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005274:	7cfb      	ldrb	r3, [r7, #19]
 8005276:	74bb      	strb	r3, [r7, #18]
 8005278:	e006      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800527a:	bf00      	nop
 800527c:	40021000 	.word	0x40021000
 8005280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005284:	7cfb      	ldrb	r3, [r7, #19]
 8005286:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005288:	7c7b      	ldrb	r3, [r7, #17]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d105      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800528e:	4b9e      	ldr	r3, [pc, #632]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	4a9d      	ldr	r2, [pc, #628]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005298:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052a6:	4b98      	ldr	r3, [pc, #608]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f023 0203 	bic.w	r2, r3, #3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	4994      	ldr	r1, [pc, #592]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052c8:	4b8f      	ldr	r3, [pc, #572]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f023 020c 	bic.w	r2, r3, #12
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	498c      	ldr	r1, [pc, #560]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052ea:	4b87      	ldr	r3, [pc, #540]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	4983      	ldr	r1, [pc, #524]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800530c:	4b7e      	ldr	r3, [pc, #504]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	497b      	ldr	r1, [pc, #492]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0310 	and.w	r3, r3, #16
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800532e:	4b76      	ldr	r3, [pc, #472]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533c:	4972      	ldr	r1, [pc, #456]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005350:	4b6d      	ldr	r3, [pc, #436]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535e:	496a      	ldr	r1, [pc, #424]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005372:	4b65      	ldr	r3, [pc, #404]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005378:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005380:	4961      	ldr	r1, [pc, #388]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005394:	4b5c      	ldr	r3, [pc, #368]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a2:	4959      	ldr	r1, [pc, #356]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053b6:	4b54      	ldr	r3, [pc, #336]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c4:	4950      	ldr	r1, [pc, #320]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053d8:	4b4b      	ldr	r3, [pc, #300]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	4948      	ldr	r1, [pc, #288]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053fa:	4b43      	ldr	r3, [pc, #268]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005408:	493f      	ldr	r1, [pc, #252]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d028      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800541c:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005422:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800542a:	4937      	ldr	r1, [pc, #220]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800543a:	d106      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800543c:	4b32      	ldr	r3, [pc, #200]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	4a31      	ldr	r2, [pc, #196]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005446:	60d3      	str	r3, [r2, #12]
 8005448:	e011      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005452:	d10c      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	2101      	movs	r1, #1
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f8c8 	bl	80055f0 <RCCEx_PLLSAI1_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800546a:	7cfb      	ldrb	r3, [r7, #19]
 800546c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d028      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800547a:	4b23      	ldr	r3, [pc, #140]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005480:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005488:	491f      	ldr	r1, [pc, #124]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005498:	d106      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800549a:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	4a1a      	ldr	r2, [pc, #104]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a4:	60d3      	str	r3, [r2, #12]
 80054a6:	e011      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054b0:	d10c      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2101      	movs	r1, #1
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 f899 	bl	80055f0 <RCCEx_PLLSAI1_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054c2:	7cfb      	ldrb	r3, [r7, #19]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80054c8:	7cfb      	ldrb	r3, [r7, #19]
 80054ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d02b      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e6:	4908      	ldr	r1, [pc, #32]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f6:	d109      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f8:	4b03      	ldr	r3, [pc, #12]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4a02      	ldr	r2, [pc, #8]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005502:	60d3      	str	r3, [r2, #12]
 8005504:	e014      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005506:	bf00      	nop
 8005508:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005514:	d10c      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3304      	adds	r3, #4
 800551a:	2101      	movs	r1, #1
 800551c:	4618      	mov	r0, r3
 800551e:	f000 f867 	bl	80055f0 <RCCEx_PLLSAI1_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005526:	7cfb      	ldrb	r3, [r7, #19]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800552c:	7cfb      	ldrb	r3, [r7, #19]
 800552e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d02f      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800553c:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005542:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800554a:	4928      	ldr	r1, [pc, #160]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800555a:	d10d      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	2102      	movs	r1, #2
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f844 	bl	80055f0 <RCCEx_PLLSAI1_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800556c:	7cfb      	ldrb	r3, [r7, #19]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d014      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005572:	7cfb      	ldrb	r3, [r7, #19]
 8005574:	74bb      	strb	r3, [r7, #18]
 8005576:	e011      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800557c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005580:	d10c      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3320      	adds	r3, #32
 8005586:	2102      	movs	r1, #2
 8005588:	4618      	mov	r0, r3
 800558a:	f000 f921 	bl	80057d0 <RCCEx_PLLSAI2_Config>
 800558e:	4603      	mov	r3, r0
 8005590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005592:	7cfb      	ldrb	r3, [r7, #19]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055a8:	4b10      	ldr	r3, [pc, #64]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b6:	490d      	ldr	r1, [pc, #52]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055ca:	4b08      	ldr	r3, [pc, #32]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055da:	4904      	ldr	r1, [pc, #16]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40021000 	.word	0x40021000

080055f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055fe:	4b73      	ldr	r3, [pc, #460]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d018      	beq.n	800563c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800560a:	4b70      	ldr	r3, [pc, #448]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f003 0203 	and.w	r2, r3, #3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d10d      	bne.n	8005636 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
       ||
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005622:	4b6a      	ldr	r3, [pc, #424]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	091b      	lsrs	r3, r3, #4
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
       ||
 8005632:	429a      	cmp	r2, r3
 8005634:	d044      	beq.n	80056c0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
 800563a:	e041      	b.n	80056c0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d00c      	beq.n	800565e <RCCEx_PLLSAI1_Config+0x6e>
 8005644:	2b03      	cmp	r3, #3
 8005646:	d013      	beq.n	8005670 <RCCEx_PLLSAI1_Config+0x80>
 8005648:	2b01      	cmp	r3, #1
 800564a:	d120      	bne.n	800568e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800564c:	4b5f      	ldr	r3, [pc, #380]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11d      	bne.n	8005694 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800565c:	e01a      	b.n	8005694 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800565e:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005666:	2b00      	cmp	r3, #0
 8005668:	d116      	bne.n	8005698 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800566e:	e013      	b.n	8005698 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005670:	4b56      	ldr	r3, [pc, #344]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10f      	bne.n	800569c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800567c:	4b53      	ldr	r3, [pc, #332]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800568c:	e006      	b.n	800569c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	73fb      	strb	r3, [r7, #15]
      break;
 8005692:	e004      	b.n	800569e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005694:	bf00      	nop
 8005696:	e002      	b.n	800569e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005698:	bf00      	nop
 800569a:	e000      	b.n	800569e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800569c:	bf00      	nop
    }

    if(status == HAL_OK)
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10d      	bne.n	80056c0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056a4:	4b49      	ldr	r3, [pc, #292]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	430b      	orrs	r3, r1
 80056ba:	4944      	ldr	r1, [pc, #272]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d17d      	bne.n	80057c2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056c6:	4b41      	ldr	r3, [pc, #260]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a40      	ldr	r2, [pc, #256]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d2:	f7fc fea1 	bl	8002418 <HAL_GetTick>
 80056d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056d8:	e009      	b.n	80056ee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056da:	f7fc fe9d 	bl	8002418 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d902      	bls.n	80056ee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	73fb      	strb	r3, [r7, #15]
        break;
 80056ec:	e005      	b.n	80056fa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056ee:	4b37      	ldr	r3, [pc, #220]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ef      	bne.n	80056da <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d160      	bne.n	80057c2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d111      	bne.n	800572a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005706:	4b31      	ldr	r3, [pc, #196]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800570e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6892      	ldr	r2, [r2, #8]
 8005716:	0211      	lsls	r1, r2, #8
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	68d2      	ldr	r2, [r2, #12]
 800571c:	0912      	lsrs	r2, r2, #4
 800571e:	0452      	lsls	r2, r2, #17
 8005720:	430a      	orrs	r2, r1
 8005722:	492a      	ldr	r1, [pc, #168]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005724:	4313      	orrs	r3, r2
 8005726:	610b      	str	r3, [r1, #16]
 8005728:	e027      	b.n	800577a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d112      	bne.n	8005756 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005730:	4b26      	ldr	r3, [pc, #152]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005738:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6892      	ldr	r2, [r2, #8]
 8005740:	0211      	lsls	r1, r2, #8
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6912      	ldr	r2, [r2, #16]
 8005746:	0852      	lsrs	r2, r2, #1
 8005748:	3a01      	subs	r2, #1
 800574a:	0552      	lsls	r2, r2, #21
 800574c:	430a      	orrs	r2, r1
 800574e:	491f      	ldr	r1, [pc, #124]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005750:	4313      	orrs	r3, r2
 8005752:	610b      	str	r3, [r1, #16]
 8005754:	e011      	b.n	800577a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005756:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800575e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6892      	ldr	r2, [r2, #8]
 8005766:	0211      	lsls	r1, r2, #8
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6952      	ldr	r2, [r2, #20]
 800576c:	0852      	lsrs	r2, r2, #1
 800576e:	3a01      	subs	r2, #1
 8005770:	0652      	lsls	r2, r2, #25
 8005772:	430a      	orrs	r2, r1
 8005774:	4915      	ldr	r1, [pc, #84]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005776:	4313      	orrs	r3, r2
 8005778:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800577a:	4b14      	ldr	r3, [pc, #80]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a13      	ldr	r2, [pc, #76]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005784:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005786:	f7fc fe47 	bl	8002418 <HAL_GetTick>
 800578a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800578c:	e009      	b.n	80057a2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800578e:	f7fc fe43 	bl	8002418 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d902      	bls.n	80057a2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	73fb      	strb	r3, [r7, #15]
          break;
 80057a0:	e005      	b.n	80057ae <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0ef      	beq.n	800578e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d106      	bne.n	80057c2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	4903      	ldr	r1, [pc, #12]	; (80057cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40021000 	.word	0x40021000

080057d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057de:	4b68      	ldr	r3, [pc, #416]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d018      	beq.n	800581c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057ea:	4b65      	ldr	r3, [pc, #404]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f003 0203 	and.w	r2, r3, #3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d10d      	bne.n	8005816 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
       ||
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005802:	4b5f      	ldr	r3, [pc, #380]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	091b      	lsrs	r3, r3, #4
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
       ||
 8005812:	429a      	cmp	r2, r3
 8005814:	d044      	beq.n	80058a0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
 800581a:	e041      	b.n	80058a0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d00c      	beq.n	800583e <RCCEx_PLLSAI2_Config+0x6e>
 8005824:	2b03      	cmp	r3, #3
 8005826:	d013      	beq.n	8005850 <RCCEx_PLLSAI2_Config+0x80>
 8005828:	2b01      	cmp	r3, #1
 800582a:	d120      	bne.n	800586e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800582c:	4b54      	ldr	r3, [pc, #336]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d11d      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800583c:	e01a      	b.n	8005874 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800583e:	4b50      	ldr	r3, [pc, #320]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005846:	2b00      	cmp	r3, #0
 8005848:	d116      	bne.n	8005878 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800584e:	e013      	b.n	8005878 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005850:	4b4b      	ldr	r3, [pc, #300]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10f      	bne.n	800587c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800585c:	4b48      	ldr	r3, [pc, #288]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800586c:	e006      	b.n	800587c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
      break;
 8005872:	e004      	b.n	800587e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005874:	bf00      	nop
 8005876:	e002      	b.n	800587e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005878:	bf00      	nop
 800587a:	e000      	b.n	800587e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800587c:	bf00      	nop
    }

    if(status == HAL_OK)
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10d      	bne.n	80058a0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005884:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6819      	ldr	r1, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	3b01      	subs	r3, #1
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	430b      	orrs	r3, r1
 800589a:	4939      	ldr	r1, [pc, #228]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800589c:	4313      	orrs	r3, r2
 800589e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d167      	bne.n	8005976 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058a6:	4b36      	ldr	r3, [pc, #216]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a35      	ldr	r2, [pc, #212]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b2:	f7fc fdb1 	bl	8002418 <HAL_GetTick>
 80058b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058b8:	e009      	b.n	80058ce <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058ba:	f7fc fdad 	bl	8002418 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d902      	bls.n	80058ce <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	73fb      	strb	r3, [r7, #15]
        break;
 80058cc:	e005      	b.n	80058da <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058ce:	4b2c      	ldr	r3, [pc, #176]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1ef      	bne.n	80058ba <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d14a      	bne.n	8005976 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d111      	bne.n	800590a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058e6:	4b26      	ldr	r3, [pc, #152]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6892      	ldr	r2, [r2, #8]
 80058f6:	0211      	lsls	r1, r2, #8
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68d2      	ldr	r2, [r2, #12]
 80058fc:	0912      	lsrs	r2, r2, #4
 80058fe:	0452      	lsls	r2, r2, #17
 8005900:	430a      	orrs	r2, r1
 8005902:	491f      	ldr	r1, [pc, #124]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005904:	4313      	orrs	r3, r2
 8005906:	614b      	str	r3, [r1, #20]
 8005908:	e011      	b.n	800592e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800590a:	4b1d      	ldr	r3, [pc, #116]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005912:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6892      	ldr	r2, [r2, #8]
 800591a:	0211      	lsls	r1, r2, #8
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6912      	ldr	r2, [r2, #16]
 8005920:	0852      	lsrs	r2, r2, #1
 8005922:	3a01      	subs	r2, #1
 8005924:	0652      	lsls	r2, r2, #25
 8005926:	430a      	orrs	r2, r1
 8005928:	4915      	ldr	r1, [pc, #84]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800592a:	4313      	orrs	r3, r2
 800592c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005938:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593a:	f7fc fd6d 	bl	8002418 <HAL_GetTick>
 800593e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005940:	e009      	b.n	8005956 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005942:	f7fc fd69 	bl	8002418 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d902      	bls.n	8005956 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	73fb      	strb	r3, [r7, #15]
          break;
 8005954:	e005      	b.n	8005962 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0ef      	beq.n	8005942 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d106      	bne.n	8005976 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	4903      	ldr	r1, [pc, #12]	; (8005980 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005972:	4313      	orrs	r3, r2
 8005974:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005976:	7bfb      	ldrb	r3, [r7, #15]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40021000 	.word	0x40021000

08005984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e01d      	b.n	80059d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fc fb52 	bl	8002054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3304      	adds	r3, #4
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f000 fbd2 	bl	800616c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <HAL_TIM_Base_Start_IT+0x50>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d00b      	beq.n	8005a1e <HAL_TIM_Base_Start_IT+0x42>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a0c:	d007      	beq.n	8005a1e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	00010007 	.word	0x00010007

08005a30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e01d      	b.n	8005a7e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fc fade 	bl	8002018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f000 fb7c 	bl	800616c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2201      	movs	r2, #1
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 ff70 	bl	8006980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1e      	ldr	r2, [pc, #120]	; (8005b20 <HAL_TIM_PWM_Start+0x98>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x4a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <HAL_TIM_PWM_Start+0x9c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x4a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1b      	ldr	r2, [pc, #108]	; (8005b28 <HAL_TIM_PWM_Start+0xa0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x4a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <HAL_TIM_PWM_Start+0xa4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x4a>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <HAL_TIM_PWM_Start+0xa8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d101      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0x4e>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <HAL_TIM_PWM_Start+0x50>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <HAL_TIM_PWM_Start+0xac>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b06      	cmp	r3, #6
 8005afc:	d00b      	beq.n	8005b16 <HAL_TIM_PWM_Start+0x8e>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b04:	d007      	beq.n	8005b16 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0201 	orr.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	40013400 	.word	0x40013400
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	40014400 	.word	0x40014400
 8005b30:	40014800 	.word	0x40014800
 8005b34:	00010007 	.word	0x00010007

08005b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0202 	mvn.w	r2, #2
 8005b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fad7 	bl	800612e <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fac9 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fada 	bl	8006142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d122      	bne.n	8005be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d11b      	bne.n	8005be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0204 	mvn.w	r2, #4
 8005bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 faad 	bl	800612e <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fa9f 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fab0 	bl	8006142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d122      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d11b      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0208 	mvn.w	r2, #8
 8005c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2204      	movs	r2, #4
 8005c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fa83 	bl	800612e <HAL_TIM_IC_CaptureCallback>
 8005c28:	e005      	b.n	8005c36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa75 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fa86 	bl	8006142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d122      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b10      	cmp	r3, #16
 8005c56:	d11b      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0210 	mvn.w	r2, #16
 8005c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2208      	movs	r2, #8
 8005c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa59 	bl	800612e <HAL_TIM_IC_CaptureCallback>
 8005c7c:	e005      	b.n	8005c8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fa4b 	bl	800611a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fa5c 	bl	8006142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d10e      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d107      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0201 	mvn.w	r2, #1
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fb f8e6 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc6:	2b80      	cmp	r3, #128	; 0x80
 8005cc8:	d10e      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd4:	2b80      	cmp	r3, #128	; 0x80
 8005cd6:	d107      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 ff04 	bl	8006af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cf6:	d10e      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b80      	cmp	r3, #128	; 0x80
 8005d04:	d107      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fef7 	bl	8006b04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d20:	2b40      	cmp	r3, #64	; 0x40
 8005d22:	d10e      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d107      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fa0a 	bl	8006156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d10e      	bne.n	8005d6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d107      	bne.n	8005d6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f06f 0220 	mvn.w	r2, #32
 8005d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 feb7 	bl	8006adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d6e:	bf00      	nop
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e105      	b.n	8005f9e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b14      	cmp	r3, #20
 8005da6:	f200 80f0 	bhi.w	8005f8a <HAL_TIM_PWM_ConfigChannel+0x212>
 8005daa:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005f8b 	.word	0x08005f8b
 8005db8:	08005f8b 	.word	0x08005f8b
 8005dbc:	08005f8b 	.word	0x08005f8b
 8005dc0:	08005e45 	.word	0x08005e45
 8005dc4:	08005f8b 	.word	0x08005f8b
 8005dc8:	08005f8b 	.word	0x08005f8b
 8005dcc:	08005f8b 	.word	0x08005f8b
 8005dd0:	08005e87 	.word	0x08005e87
 8005dd4:	08005f8b 	.word	0x08005f8b
 8005dd8:	08005f8b 	.word	0x08005f8b
 8005ddc:	08005f8b 	.word	0x08005f8b
 8005de0:	08005ec7 	.word	0x08005ec7
 8005de4:	08005f8b 	.word	0x08005f8b
 8005de8:	08005f8b 	.word	0x08005f8b
 8005dec:	08005f8b 	.word	0x08005f8b
 8005df0:	08005f09 	.word	0x08005f09
 8005df4:	08005f8b 	.word	0x08005f8b
 8005df8:	08005f8b 	.word	0x08005f8b
 8005dfc:	08005f8b 	.word	0x08005f8b
 8005e00:	08005f49 	.word	0x08005f49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fa48 	bl	80062a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0208 	orr.w	r2, r2, #8
 8005e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0204 	bic.w	r2, r2, #4
 8005e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6999      	ldr	r1, [r3, #24]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	691a      	ldr	r2, [r3, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	619a      	str	r2, [r3, #24]
      break;
 8005e42:	e0a3      	b.n	8005f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fab8 	bl	80063c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6999      	ldr	r1, [r3, #24]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	021a      	lsls	r2, r3, #8
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	619a      	str	r2, [r3, #24]
      break;
 8005e84:	e082      	b.n	8005f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fb21 	bl	80064d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0208 	orr.w	r2, r2, #8
 8005ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0204 	bic.w	r2, r2, #4
 8005eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69d9      	ldr	r1, [r3, #28]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	61da      	str	r2, [r3, #28]
      break;
 8005ec4:	e062      	b.n	8005f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fb89 	bl	80065e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69d9      	ldr	r1, [r3, #28]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	021a      	lsls	r2, r3, #8
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	61da      	str	r2, [r3, #28]
      break;
 8005f06:	e041      	b.n	8005f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fbd2 	bl	80066b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0208 	orr.w	r2, r2, #8
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0204 	bic.w	r2, r2, #4
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691a      	ldr	r2, [r3, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f46:	e021      	b.n	8005f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fc16 	bl	8006780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	021a      	lsls	r2, r3, #8
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f88:	e000      	b.n	8005f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005f8a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop

08005fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_TIM_ConfigClockSource+0x18>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e0a8      	b.n	8006112 <HAL_TIM_ConfigClockSource+0x16a>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b40      	cmp	r3, #64	; 0x40
 8005ffa:	d067      	beq.n	80060cc <HAL_TIM_ConfigClockSource+0x124>
 8005ffc:	2b40      	cmp	r3, #64	; 0x40
 8005ffe:	d80b      	bhi.n	8006018 <HAL_TIM_ConfigClockSource+0x70>
 8006000:	2b10      	cmp	r3, #16
 8006002:	d073      	beq.n	80060ec <HAL_TIM_ConfigClockSource+0x144>
 8006004:	2b10      	cmp	r3, #16
 8006006:	d802      	bhi.n	800600e <HAL_TIM_ConfigClockSource+0x66>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d06f      	beq.n	80060ec <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800600c:	e078      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800600e:	2b20      	cmp	r3, #32
 8006010:	d06c      	beq.n	80060ec <HAL_TIM_ConfigClockSource+0x144>
 8006012:	2b30      	cmp	r3, #48	; 0x30
 8006014:	d06a      	beq.n	80060ec <HAL_TIM_ConfigClockSource+0x144>
      break;
 8006016:	e073      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8006018:	2b70      	cmp	r3, #112	; 0x70
 800601a:	d00d      	beq.n	8006038 <HAL_TIM_ConfigClockSource+0x90>
 800601c:	2b70      	cmp	r3, #112	; 0x70
 800601e:	d804      	bhi.n	800602a <HAL_TIM_ConfigClockSource+0x82>
 8006020:	2b50      	cmp	r3, #80	; 0x50
 8006022:	d033      	beq.n	800608c <HAL_TIM_ConfigClockSource+0xe4>
 8006024:	2b60      	cmp	r3, #96	; 0x60
 8006026:	d041      	beq.n	80060ac <HAL_TIM_ConfigClockSource+0x104>
      break;
 8006028:	e06a      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800602a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602e:	d066      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x156>
 8006030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006034:	d017      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8006036:	e063      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6899      	ldr	r1, [r3, #8]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f000 fc7a 	bl	8006940 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800605a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	609a      	str	r2, [r3, #8]
      break;
 8006064:	e04c      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	6899      	ldr	r1, [r3, #8]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f000 fc63 	bl	8006940 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006088:	609a      	str	r2, [r3, #8]
      break;
 800608a:	e039      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	6859      	ldr	r1, [r3, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	461a      	mov	r2, r3
 800609a:	f000 fbd7 	bl	800684c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2150      	movs	r1, #80	; 0x50
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fc30 	bl	800690a <TIM_ITRx_SetConfig>
      break;
 80060aa:	e029      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	6859      	ldr	r1, [r3, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	461a      	mov	r2, r3
 80060ba:	f000 fbf6 	bl	80068aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2160      	movs	r1, #96	; 0x60
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fc20 	bl	800690a <TIM_ITRx_SetConfig>
      break;
 80060ca:	e019      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	6859      	ldr	r1, [r3, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	461a      	mov	r2, r3
 80060da:	f000 fbb7 	bl	800684c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2140      	movs	r1, #64	; 0x40
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fc10 	bl	800690a <TIM_ITRx_SetConfig>
      break;
 80060ea:	e009      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4619      	mov	r1, r3
 80060f6:	4610      	mov	r0, r2
 80060f8:	f000 fc07 	bl	800690a <TIM_ITRx_SetConfig>
      break;
 80060fc:	e000      	b.n	8006100 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80060fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
	...

0800616c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a40      	ldr	r2, [pc, #256]	; (8006280 <TIM_Base_SetConfig+0x114>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d013      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618a:	d00f      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a3d      	ldr	r2, [pc, #244]	; (8006284 <TIM_Base_SetConfig+0x118>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00b      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a3c      	ldr	r2, [pc, #240]	; (8006288 <TIM_Base_SetConfig+0x11c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a3b      	ldr	r2, [pc, #236]	; (800628c <TIM_Base_SetConfig+0x120>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a3a      	ldr	r2, [pc, #232]	; (8006290 <TIM_Base_SetConfig+0x124>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d108      	bne.n	80061be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2f      	ldr	r2, [pc, #188]	; (8006280 <TIM_Base_SetConfig+0x114>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01f      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061cc:	d01b      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2c      	ldr	r2, [pc, #176]	; (8006284 <TIM_Base_SetConfig+0x118>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d017      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2b      	ldr	r2, [pc, #172]	; (8006288 <TIM_Base_SetConfig+0x11c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2a      	ldr	r2, [pc, #168]	; (800628c <TIM_Base_SetConfig+0x120>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00f      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a29      	ldr	r2, [pc, #164]	; (8006290 <TIM_Base_SetConfig+0x124>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00b      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a28      	ldr	r2, [pc, #160]	; (8006294 <TIM_Base_SetConfig+0x128>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d007      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a27      	ldr	r2, [pc, #156]	; (8006298 <TIM_Base_SetConfig+0x12c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_Base_SetConfig+0x9a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a26      	ldr	r2, [pc, #152]	; (800629c <TIM_Base_SetConfig+0x130>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d108      	bne.n	8006218 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800620c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a10      	ldr	r2, [pc, #64]	; (8006280 <TIM_Base_SetConfig+0x114>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00f      	beq.n	8006264 <TIM_Base_SetConfig+0xf8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a12      	ldr	r2, [pc, #72]	; (8006290 <TIM_Base_SetConfig+0x124>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00b      	beq.n	8006264 <TIM_Base_SetConfig+0xf8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a11      	ldr	r2, [pc, #68]	; (8006294 <TIM_Base_SetConfig+0x128>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d007      	beq.n	8006264 <TIM_Base_SetConfig+0xf8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a10      	ldr	r2, [pc, #64]	; (8006298 <TIM_Base_SetConfig+0x12c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_Base_SetConfig+0xf8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a0f      	ldr	r2, [pc, #60]	; (800629c <TIM_Base_SetConfig+0x130>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d103      	bne.n	800626c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	615a      	str	r2, [r3, #20]
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40012c00 	.word	0x40012c00
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40013400 	.word	0x40013400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800

080062a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	f023 0201 	bic.w	r2, r3, #1
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0303 	bic.w	r3, r3, #3
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f023 0302 	bic.w	r3, r3, #2
 80062ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a2c      	ldr	r2, [pc, #176]	; (80063ac <TIM_OC1_SetConfig+0x10c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00f      	beq.n	8006320 <TIM_OC1_SetConfig+0x80>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a2b      	ldr	r2, [pc, #172]	; (80063b0 <TIM_OC1_SetConfig+0x110>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00b      	beq.n	8006320 <TIM_OC1_SetConfig+0x80>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a2a      	ldr	r2, [pc, #168]	; (80063b4 <TIM_OC1_SetConfig+0x114>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d007      	beq.n	8006320 <TIM_OC1_SetConfig+0x80>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a29      	ldr	r2, [pc, #164]	; (80063b8 <TIM_OC1_SetConfig+0x118>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d003      	beq.n	8006320 <TIM_OC1_SetConfig+0x80>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a28      	ldr	r2, [pc, #160]	; (80063bc <TIM_OC1_SetConfig+0x11c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d10c      	bne.n	800633a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f023 0308 	bic.w	r3, r3, #8
 8006326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f023 0304 	bic.w	r3, r3, #4
 8006338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a1b      	ldr	r2, [pc, #108]	; (80063ac <TIM_OC1_SetConfig+0x10c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00f      	beq.n	8006362 <TIM_OC1_SetConfig+0xc2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a1a      	ldr	r2, [pc, #104]	; (80063b0 <TIM_OC1_SetConfig+0x110>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d00b      	beq.n	8006362 <TIM_OC1_SetConfig+0xc2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a19      	ldr	r2, [pc, #100]	; (80063b4 <TIM_OC1_SetConfig+0x114>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d007      	beq.n	8006362 <TIM_OC1_SetConfig+0xc2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <TIM_OC1_SetConfig+0x118>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d003      	beq.n	8006362 <TIM_OC1_SetConfig+0xc2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a17      	ldr	r2, [pc, #92]	; (80063bc <TIM_OC1_SetConfig+0x11c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d111      	bne.n	8006386 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	621a      	str	r2, [r3, #32]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40013400 	.word	0x40013400
 80063b4:	40014000 	.word	0x40014000
 80063b8:	40014400 	.word	0x40014400
 80063bc:	40014800 	.word	0x40014800

080063c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	f023 0210 	bic.w	r2, r3, #16
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f023 0320 	bic.w	r3, r3, #32
 800640e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a28      	ldr	r2, [pc, #160]	; (80064c0 <TIM_OC2_SetConfig+0x100>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC2_SetConfig+0x6c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a27      	ldr	r2, [pc, #156]	; (80064c4 <TIM_OC2_SetConfig+0x104>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d10d      	bne.n	8006448 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <TIM_OC2_SetConfig+0x100>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00f      	beq.n	8006470 <TIM_OC2_SetConfig+0xb0>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <TIM_OC2_SetConfig+0x104>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00b      	beq.n	8006470 <TIM_OC2_SetConfig+0xb0>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <TIM_OC2_SetConfig+0x108>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d007      	beq.n	8006470 <TIM_OC2_SetConfig+0xb0>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a1a      	ldr	r2, [pc, #104]	; (80064cc <TIM_OC2_SetConfig+0x10c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d003      	beq.n	8006470 <TIM_OC2_SetConfig+0xb0>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <TIM_OC2_SetConfig+0x110>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d113      	bne.n	8006498 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800647e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	bf00      	nop
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40013400 	.word	0x40013400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40014400 	.word	0x40014400
 80064d0:	40014800 	.word	0x40014800

080064d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0303 	bic.w	r3, r3, #3
 800650e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a27      	ldr	r2, [pc, #156]	; (80065d0 <TIM_OC3_SetConfig+0xfc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d003      	beq.n	800653e <TIM_OC3_SetConfig+0x6a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a26      	ldr	r2, [pc, #152]	; (80065d4 <TIM_OC3_SetConfig+0x100>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d10d      	bne.n	800655a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <TIM_OC3_SetConfig+0xfc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00f      	beq.n	8006582 <TIM_OC3_SetConfig+0xae>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a1b      	ldr	r2, [pc, #108]	; (80065d4 <TIM_OC3_SetConfig+0x100>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00b      	beq.n	8006582 <TIM_OC3_SetConfig+0xae>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1a      	ldr	r2, [pc, #104]	; (80065d8 <TIM_OC3_SetConfig+0x104>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d007      	beq.n	8006582 <TIM_OC3_SetConfig+0xae>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a19      	ldr	r2, [pc, #100]	; (80065dc <TIM_OC3_SetConfig+0x108>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d003      	beq.n	8006582 <TIM_OC3_SetConfig+0xae>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a18      	ldr	r2, [pc, #96]	; (80065e0 <TIM_OC3_SetConfig+0x10c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d113      	bne.n	80065aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	621a      	str	r2, [r3, #32]
}
 80065c4:	bf00      	nop
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	40012c00 	.word	0x40012c00
 80065d4:	40013400 	.word	0x40013400
 80065d8:	40014000 	.word	0x40014000
 80065dc:	40014400 	.word	0x40014400
 80065e0:	40014800 	.word	0x40014800

080065e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	031b      	lsls	r3, r3, #12
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a18      	ldr	r2, [pc, #96]	; (80066a4 <TIM_OC4_SetConfig+0xc0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00f      	beq.n	8006668 <TIM_OC4_SetConfig+0x84>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a17      	ldr	r2, [pc, #92]	; (80066a8 <TIM_OC4_SetConfig+0xc4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00b      	beq.n	8006668 <TIM_OC4_SetConfig+0x84>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a16      	ldr	r2, [pc, #88]	; (80066ac <TIM_OC4_SetConfig+0xc8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d007      	beq.n	8006668 <TIM_OC4_SetConfig+0x84>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <TIM_OC4_SetConfig+0xcc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_OC4_SetConfig+0x84>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a14      	ldr	r2, [pc, #80]	; (80066b4 <TIM_OC4_SetConfig+0xd0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d109      	bne.n	800667c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800666e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	019b      	lsls	r3, r3, #6
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40012c00 	.word	0x40012c00
 80066a8:	40013400 	.word	0x40013400
 80066ac:	40014000 	.word	0x40014000
 80066b0:	40014400 	.word	0x40014400
 80066b4:	40014800 	.word	0x40014800

080066b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	041b      	lsls	r3, r3, #16
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a17      	ldr	r2, [pc, #92]	; (800676c <TIM_OC5_SetConfig+0xb4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00f      	beq.n	8006732 <TIM_OC5_SetConfig+0x7a>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a16      	ldr	r2, [pc, #88]	; (8006770 <TIM_OC5_SetConfig+0xb8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d00b      	beq.n	8006732 <TIM_OC5_SetConfig+0x7a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a15      	ldr	r2, [pc, #84]	; (8006774 <TIM_OC5_SetConfig+0xbc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d007      	beq.n	8006732 <TIM_OC5_SetConfig+0x7a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a14      	ldr	r2, [pc, #80]	; (8006778 <TIM_OC5_SetConfig+0xc0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d003      	beq.n	8006732 <TIM_OC5_SetConfig+0x7a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a13      	ldr	r2, [pc, #76]	; (800677c <TIM_OC5_SetConfig+0xc4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d109      	bne.n	8006746 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006738:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	621a      	str	r2, [r3, #32]
}
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800

08006780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	051b      	lsls	r3, r3, #20
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <TIM_OC6_SetConfig+0xb8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00f      	beq.n	80067fc <TIM_OC6_SetConfig+0x7c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a17      	ldr	r2, [pc, #92]	; (800683c <TIM_OC6_SetConfig+0xbc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00b      	beq.n	80067fc <TIM_OC6_SetConfig+0x7c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a16      	ldr	r2, [pc, #88]	; (8006840 <TIM_OC6_SetConfig+0xc0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <TIM_OC6_SetConfig+0x7c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a15      	ldr	r2, [pc, #84]	; (8006844 <TIM_OC6_SetConfig+0xc4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_OC6_SetConfig+0x7c>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a14      	ldr	r2, [pc, #80]	; (8006848 <TIM_OC6_SetConfig+0xc8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d109      	bne.n	8006810 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006802:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	029b      	lsls	r3, r3, #10
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	621a      	str	r2, [r3, #32]
}
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40012c00 	.word	0x40012c00
 800683c:	40013400 	.word	0x40013400
 8006840:	40014000 	.word	0x40014000
 8006844:	40014400 	.word	0x40014400
 8006848:	40014800 	.word	0x40014800

0800684c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f023 0201 	bic.w	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f023 030a 	bic.w	r3, r3, #10
 8006888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4313      	orrs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	621a      	str	r2, [r3, #32]
}
 800689e:	bf00      	nop
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b087      	sub	sp, #28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f023 0210 	bic.w	r2, r3, #16
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	031b      	lsls	r3, r3, #12
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	621a      	str	r2, [r3, #32]
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	f043 0307 	orr.w	r3, r3, #7
 800692c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	609a      	str	r2, [r3, #8]
}
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	021a      	lsls	r2, r3, #8
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	431a      	orrs	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4313      	orrs	r3, r2
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	bf00      	nop
 8006976:	371c      	adds	r7, #28
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	2201      	movs	r2, #1
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a1a      	ldr	r2, [r3, #32]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	43db      	mvns	r3, r3
 80069a2:	401a      	ands	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f003 031f 	and.w	r3, r3, #31
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	fa01 f303 	lsl.w	r3, r1, r3
 80069b8:	431a      	orrs	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
}
 80069be:	bf00      	nop
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
	...

080069cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e068      	b.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a2e      	ldr	r2, [pc, #184]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d004      	beq.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a2d      	ldr	r2, [pc, #180]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d108      	bne.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a1e      	ldr	r2, [pc, #120]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01d      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a56:	d018      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1b      	ldr	r2, [pc, #108]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1a      	ldr	r2, [pc, #104]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00e      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a18      	ldr	r2, [pc, #96]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d009      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a13      	ldr	r2, [pc, #76]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d004      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d10c      	bne.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40000c00 	.word	0x40000c00
 8006ad8:	40014000 	.word	0x40014000

08006adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e040      	b.n	8006bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fb fae6 	bl	800210c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2224      	movs	r2, #36	; 0x24
 8006b44:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0201 	bic.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f8c0 	bl	8006cdc <UART_SetConfig>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e022      	b.n	8006bac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fc26 	bl	80073c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fcad 	bl	8007504 <UART_CheckIdleState>
 8006baa:	4603      	mov	r3, r0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	; 0x28
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	f040 8081 	bne.w	8006cd0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <HAL_UART_Transmit+0x26>
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e079      	b.n	8006cd2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d101      	bne.n	8006bec <HAL_UART_Transmit+0x38>
 8006be8:	2302      	movs	r3, #2
 8006bea:	e072      	b.n	8006cd2 <HAL_UART_Transmit+0x11e>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2221      	movs	r2, #33	; 0x21
 8006bfe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006c00:	f7fb fc0a 	bl	8002418 <HAL_GetTick>
 8006c04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	88fa      	ldrh	r2, [r7, #6]
 8006c0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	88fa      	ldrh	r2, [r7, #6]
 8006c12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1e:	d108      	bne.n	8006c32 <HAL_UART_Transmit+0x7e>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	61bb      	str	r3, [r7, #24]
 8006c30:	e003      	b.n	8006c3a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006c42:	e02d      	b.n	8006ca0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2180      	movs	r1, #128	; 0x80
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 fc9d 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e039      	b.n	8006cd2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	881a      	ldrh	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c70:	b292      	uxth	r2, r2
 8006c72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	3302      	adds	r3, #2
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	e008      	b.n	8006c8e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	781a      	ldrb	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	b292      	uxth	r2, r2
 8006c86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1cb      	bne.n	8006c44 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2140      	movs	r1, #64	; 0x40
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fc69 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e005      	b.n	8006cd2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e000      	b.n	8006cd2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006cd0:	2302      	movs	r3, #2
  }
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3720      	adds	r7, #32
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cdc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006ce0:	b08a      	sub	sp, #40	; 0x28
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4bb8      	ldr	r3, [pc, #736]	; (8006ff4 <UART_SetConfig+0x318>)
 8006d12:	4013      	ands	r3, r2
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6812      	ldr	r2, [r2, #0]
 8006d18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d1a:	430b      	orrs	r3, r1
 8006d1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4aae      	ldr	r2, [pc, #696]	; (8006ff8 <UART_SetConfig+0x31c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4aa5      	ldr	r2, [pc, #660]	; (8006ffc <UART_SetConfig+0x320>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d126      	bne.n	8006dba <UART_SetConfig+0xde>
 8006d6c:	4ba4      	ldr	r3, [pc, #656]	; (8007000 <UART_SetConfig+0x324>)
 8006d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d81a      	bhi.n	8006db0 <UART_SetConfig+0xd4>
 8006d7a:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <UART_SetConfig+0xa4>)
 8006d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d80:	08006d91 	.word	0x08006d91
 8006d84:	08006da1 	.word	0x08006da1
 8006d88:	08006d99 	.word	0x08006d99
 8006d8c:	08006da9 	.word	0x08006da9
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d96:	e105      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9e:	e101      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006da0:	2304      	movs	r3, #4
 8006da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da6:	e0fd      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006da8:	2308      	movs	r3, #8
 8006daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dae:	e0f9      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006db0:	2310      	movs	r3, #16
 8006db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db6:	bf00      	nop
 8006db8:	e0f4      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a91      	ldr	r2, [pc, #580]	; (8007004 <UART_SetConfig+0x328>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d138      	bne.n	8006e36 <UART_SetConfig+0x15a>
 8006dc4:	4b8e      	ldr	r3, [pc, #568]	; (8007000 <UART_SetConfig+0x324>)
 8006dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	2b0c      	cmp	r3, #12
 8006dd0:	d82c      	bhi.n	8006e2c <UART_SetConfig+0x150>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <UART_SetConfig+0xfc>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006e0d 	.word	0x08006e0d
 8006ddc:	08006e2d 	.word	0x08006e2d
 8006de0:	08006e2d 	.word	0x08006e2d
 8006de4:	08006e2d 	.word	0x08006e2d
 8006de8:	08006e1d 	.word	0x08006e1d
 8006dec:	08006e2d 	.word	0x08006e2d
 8006df0:	08006e2d 	.word	0x08006e2d
 8006df4:	08006e2d 	.word	0x08006e2d
 8006df8:	08006e15 	.word	0x08006e15
 8006dfc:	08006e2d 	.word	0x08006e2d
 8006e00:	08006e2d 	.word	0x08006e2d
 8006e04:	08006e2d 	.word	0x08006e2d
 8006e08:	08006e25 	.word	0x08006e25
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e12:	e0c7      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006e14:	2302      	movs	r3, #2
 8006e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e1a:	e0c3      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e22:	e0bf      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006e24:	2308      	movs	r3, #8
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e2a:	e0bb      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006e2c:	2310      	movs	r3, #16
 8006e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e32:	bf00      	nop
 8006e34:	e0b6      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a73      	ldr	r2, [pc, #460]	; (8007008 <UART_SetConfig+0x32c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d125      	bne.n	8006e8c <UART_SetConfig+0x1b0>
 8006e40:	4b6f      	ldr	r3, [pc, #444]	; (8007000 <UART_SetConfig+0x324>)
 8006e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e4a:	2b10      	cmp	r3, #16
 8006e4c:	d011      	beq.n	8006e72 <UART_SetConfig+0x196>
 8006e4e:	2b10      	cmp	r3, #16
 8006e50:	d802      	bhi.n	8006e58 <UART_SetConfig+0x17c>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <UART_SetConfig+0x186>
 8006e56:	e014      	b.n	8006e82 <UART_SetConfig+0x1a6>
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d006      	beq.n	8006e6a <UART_SetConfig+0x18e>
 8006e5c:	2b30      	cmp	r3, #48	; 0x30
 8006e5e:	d00c      	beq.n	8006e7a <UART_SetConfig+0x19e>
 8006e60:	e00f      	b.n	8006e82 <UART_SetConfig+0x1a6>
 8006e62:	2300      	movs	r3, #0
 8006e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e68:	e09c      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e70:	e098      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006e72:	2304      	movs	r3, #4
 8006e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e78:	e094      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006e7a:	2308      	movs	r3, #8
 8006e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e80:	e090      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006e82:	2310      	movs	r3, #16
 8006e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e88:	bf00      	nop
 8006e8a:	e08b      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a5e      	ldr	r2, [pc, #376]	; (800700c <UART_SetConfig+0x330>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d125      	bne.n	8006ee2 <UART_SetConfig+0x206>
 8006e96:	4b5a      	ldr	r3, [pc, #360]	; (8007000 <UART_SetConfig+0x324>)
 8006e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ea0:	2b40      	cmp	r3, #64	; 0x40
 8006ea2:	d011      	beq.n	8006ec8 <UART_SetConfig+0x1ec>
 8006ea4:	2b40      	cmp	r3, #64	; 0x40
 8006ea6:	d802      	bhi.n	8006eae <UART_SetConfig+0x1d2>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <UART_SetConfig+0x1dc>
 8006eac:	e014      	b.n	8006ed8 <UART_SetConfig+0x1fc>
 8006eae:	2b80      	cmp	r3, #128	; 0x80
 8006eb0:	d006      	beq.n	8006ec0 <UART_SetConfig+0x1e4>
 8006eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb4:	d00c      	beq.n	8006ed0 <UART_SetConfig+0x1f4>
 8006eb6:	e00f      	b.n	8006ed8 <UART_SetConfig+0x1fc>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ebe:	e071      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec6:	e06d      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ece:	e069      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed6:	e065      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ede:	bf00      	nop
 8006ee0:	e060      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a4a      	ldr	r2, [pc, #296]	; (8007010 <UART_SetConfig+0x334>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d129      	bne.n	8006f40 <UART_SetConfig+0x264>
 8006eec:	4b44      	ldr	r3, [pc, #272]	; (8007000 <UART_SetConfig+0x324>)
 8006eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efa:	d014      	beq.n	8006f26 <UART_SetConfig+0x24a>
 8006efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f00:	d802      	bhi.n	8006f08 <UART_SetConfig+0x22c>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d007      	beq.n	8006f16 <UART_SetConfig+0x23a>
 8006f06:	e016      	b.n	8006f36 <UART_SetConfig+0x25a>
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f0c:	d007      	beq.n	8006f1e <UART_SetConfig+0x242>
 8006f0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f12:	d00c      	beq.n	8006f2e <UART_SetConfig+0x252>
 8006f14:	e00f      	b.n	8006f36 <UART_SetConfig+0x25a>
 8006f16:	2300      	movs	r3, #0
 8006f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f1c:	e042      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f24:	e03e      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006f26:	2304      	movs	r3, #4
 8006f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f2c:	e03a      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006f2e:	2308      	movs	r3, #8
 8006f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f34:	e036      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006f36:	2310      	movs	r3, #16
 8006f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f3c:	bf00      	nop
 8006f3e:	e031      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a2c      	ldr	r2, [pc, #176]	; (8006ff8 <UART_SetConfig+0x31c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d129      	bne.n	8006f9e <UART_SetConfig+0x2c2>
 8006f4a:	4b2d      	ldr	r3, [pc, #180]	; (8007000 <UART_SetConfig+0x324>)
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f58:	d014      	beq.n	8006f84 <UART_SetConfig+0x2a8>
 8006f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f5e:	d802      	bhi.n	8006f66 <UART_SetConfig+0x28a>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <UART_SetConfig+0x298>
 8006f64:	e016      	b.n	8006f94 <UART_SetConfig+0x2b8>
 8006f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f6a:	d007      	beq.n	8006f7c <UART_SetConfig+0x2a0>
 8006f6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f70:	d00c      	beq.n	8006f8c <UART_SetConfig+0x2b0>
 8006f72:	e00f      	b.n	8006f94 <UART_SetConfig+0x2b8>
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f7a:	e013      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f82:	e00f      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006f84:	2304      	movs	r3, #4
 8006f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f8a:	e00b      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f92:	e007      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006f94:	2310      	movs	r3, #16
 8006f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f9a:	bf00      	nop
 8006f9c:	e002      	b.n	8006fa4 <UART_SetConfig+0x2c8>
 8006f9e:	2310      	movs	r3, #16
 8006fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a13      	ldr	r2, [pc, #76]	; (8006ff8 <UART_SetConfig+0x31c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	f040 80fe 	bne.w	80071ac <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d837      	bhi.n	8007028 <UART_SetConfig+0x34c>
 8006fb8:	a201      	add	r2, pc, #4	; (adr r2, 8006fc0 <UART_SetConfig+0x2e4>)
 8006fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbe:	bf00      	nop
 8006fc0:	08006fe5 	.word	0x08006fe5
 8006fc4:	08007029 	.word	0x08007029
 8006fc8:	08006fed 	.word	0x08006fed
 8006fcc:	08007029 	.word	0x08007029
 8006fd0:	08007019 	.word	0x08007019
 8006fd4:	08007029 	.word	0x08007029
 8006fd8:	08007029 	.word	0x08007029
 8006fdc:	08007029 	.word	0x08007029
 8006fe0:	08007021 	.word	0x08007021
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006fe4:	f7fd ff92 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
 8006fe8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006fea:	e020      	b.n	800702e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006fec:	4b09      	ldr	r3, [pc, #36]	; (8007014 <UART_SetConfig+0x338>)
 8006fee:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ff0:	e01d      	b.n	800702e <UART_SetConfig+0x352>
 8006ff2:	bf00      	nop
 8006ff4:	efff69f3 	.word	0xefff69f3
 8006ff8:	40008000 	.word	0x40008000
 8006ffc:	40013800 	.word	0x40013800
 8007000:	40021000 	.word	0x40021000
 8007004:	40004400 	.word	0x40004400
 8007008:	40004800 	.word	0x40004800
 800700c:	40004c00 	.word	0x40004c00
 8007010:	40005000 	.word	0x40005000
 8007014:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007018:	f7fd fee2 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 800701c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800701e:	e006      	b.n	800702e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8007020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007024:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007026:	e002      	b.n	800702e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	76fb      	strb	r3, [r7, #27]
        break;
 800702c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 81b9 	beq.w	80073a8 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	4413      	add	r3, r2
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	429a      	cmp	r2, r3
 8007044:	d305      	bcc.n	8007052 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	429a      	cmp	r2, r3
 8007050:	d902      	bls.n	8007058 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	76fb      	strb	r3, [r7, #27]
 8007056:	e1a7      	b.n	80073a8 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8007058:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800705c:	2b08      	cmp	r3, #8
 800705e:	f200 8092 	bhi.w	8007186 <UART_SetConfig+0x4aa>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <UART_SetConfig+0x38c>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	0800708d 	.word	0x0800708d
 800706c:	08007187 	.word	0x08007187
 8007070:	080070db 	.word	0x080070db
 8007074:	08007187 	.word	0x08007187
 8007078:	0800710f 	.word	0x0800710f
 800707c:	08007187 	.word	0x08007187
 8007080:	08007187 	.word	0x08007187
 8007084:	08007187 	.word	0x08007187
 8007088:	0800715d 	.word	0x0800715d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800708c:	f7fd ff3e 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
 8007090:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4619      	mov	r1, r3
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	f04f 0300 	mov.w	r3, #0
 800709e:	f04f 0400 	mov.w	r4, #0
 80070a2:	0214      	lsls	r4, r2, #8
 80070a4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80070a8:	020b      	lsls	r3, r1, #8
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6852      	ldr	r2, [r2, #4]
 80070ae:	0852      	lsrs	r2, r2, #1
 80070b0:	4611      	mov	r1, r2
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	eb13 0b01 	adds.w	fp, r3, r1
 80070ba:	eb44 0c02 	adc.w	ip, r4, r2
 80070be:	4658      	mov	r0, fp
 80070c0:	4661      	mov	r1, ip
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f04f 0400 	mov.w	r4, #0
 80070ca:	461a      	mov	r2, r3
 80070cc:	4623      	mov	r3, r4
 80070ce:	f7f9 fccd 	bl	8000a6c <__aeabi_uldivmod>
 80070d2:	4603      	mov	r3, r0
 80070d4:	460c      	mov	r4, r1
 80070d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80070d8:	e058      	b.n	800718c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	085b      	lsrs	r3, r3, #1
 80070e0:	f04f 0400 	mov.w	r4, #0
 80070e4:	49ae      	ldr	r1, [pc, #696]	; (80073a0 <UART_SetConfig+0x6c4>)
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	eb13 0b01 	adds.w	fp, r3, r1
 80070ee:	eb44 0c02 	adc.w	ip, r4, r2
 80070f2:	4658      	mov	r0, fp
 80070f4:	4661      	mov	r1, ip
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f04f 0400 	mov.w	r4, #0
 80070fe:	461a      	mov	r2, r3
 8007100:	4623      	mov	r3, r4
 8007102:	f7f9 fcb3 	bl	8000a6c <__aeabi_uldivmod>
 8007106:	4603      	mov	r3, r0
 8007108:	460c      	mov	r4, r1
 800710a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800710c:	e03e      	b.n	800718c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800710e:	f7fd fe67 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 8007112:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4619      	mov	r1, r3
 8007118:	f04f 0200 	mov.w	r2, #0
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	f04f 0400 	mov.w	r4, #0
 8007124:	0214      	lsls	r4, r2, #8
 8007126:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800712a:	020b      	lsls	r3, r1, #8
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6852      	ldr	r2, [r2, #4]
 8007130:	0852      	lsrs	r2, r2, #1
 8007132:	4611      	mov	r1, r2
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	eb13 0b01 	adds.w	fp, r3, r1
 800713c:	eb44 0c02 	adc.w	ip, r4, r2
 8007140:	4658      	mov	r0, fp
 8007142:	4661      	mov	r1, ip
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f04f 0400 	mov.w	r4, #0
 800714c:	461a      	mov	r2, r3
 800714e:	4623      	mov	r3, r4
 8007150:	f7f9 fc8c 	bl	8000a6c <__aeabi_uldivmod>
 8007154:	4603      	mov	r3, r0
 8007156:	460c      	mov	r4, r1
 8007158:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800715a:	e017      	b.n	800718c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	f04f 0400 	mov.w	r4, #0
 8007166:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800716a:	f144 0100 	adc.w	r1, r4, #0
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f04f 0400 	mov.w	r4, #0
 8007176:	461a      	mov	r2, r3
 8007178:	4623      	mov	r3, r4
 800717a:	f7f9 fc77 	bl	8000a6c <__aeabi_uldivmod>
 800717e:	4603      	mov	r3, r0
 8007180:	460c      	mov	r4, r1
 8007182:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007184:	e002      	b.n	800718c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	76fb      	strb	r3, [r7, #27]
            break;
 800718a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007192:	d308      	bcc.n	80071a6 <UART_SetConfig+0x4ca>
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800719a:	d204      	bcs.n	80071a6 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	60da      	str	r2, [r3, #12]
 80071a4:	e100      	b.n	80073a8 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	76fb      	strb	r3, [r7, #27]
 80071aa:	e0fd      	b.n	80073a8 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b4:	f040 8084 	bne.w	80072c0 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80071b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d85f      	bhi.n	8007280 <UART_SetConfig+0x5a4>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <UART_SetConfig+0x4ec>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071ed 	.word	0x080071ed
 80071cc:	0800720d 	.word	0x0800720d
 80071d0:	0800722d 	.word	0x0800722d
 80071d4:	08007281 	.word	0x08007281
 80071d8:	08007249 	.word	0x08007249
 80071dc:	08007281 	.word	0x08007281
 80071e0:	08007281 	.word	0x08007281
 80071e4:	08007281 	.word	0x08007281
 80071e8:	08007269 	.word	0x08007269
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ec:	f7fd fe8e 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
 80071f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	005a      	lsls	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	085b      	lsrs	r3, r3, #1
 80071fc:	441a      	add	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	fbb2 f3f3 	udiv	r3, r2, r3
 8007206:	b29b      	uxth	r3, r3
 8007208:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800720a:	e03c      	b.n	8007286 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800720c:	f7fd fe94 	bl	8004f38 <HAL_RCC_GetPCLK2Freq>
 8007210:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	005a      	lsls	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	441a      	add	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	fbb2 f3f3 	udiv	r3, r2, r3
 8007226:	b29b      	uxth	r3, r3
 8007228:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800722a:	e02c      	b.n	8007286 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007236:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6852      	ldr	r2, [r2, #4]
 800723e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007242:	b29b      	uxth	r3, r3
 8007244:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007246:	e01e      	b.n	8007286 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007248:	f7fd fdca 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 800724c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	005a      	lsls	r2, r3, #1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	085b      	lsrs	r3, r3, #1
 8007258:	441a      	add	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007262:	b29b      	uxth	r3, r3
 8007264:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007266:	e00e      	b.n	8007286 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	085b      	lsrs	r3, r3, #1
 800726e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	fbb2 f3f3 	udiv	r3, r2, r3
 800727a:	b29b      	uxth	r3, r3
 800727c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800727e:	e002      	b.n	8007286 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	76fb      	strb	r3, [r7, #27]
        break;
 8007284:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	2b0f      	cmp	r3, #15
 800728a:	d916      	bls.n	80072ba <UART_SetConfig+0x5de>
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007292:	d212      	bcs.n	80072ba <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	b29b      	uxth	r3, r3
 8007298:	f023 030f 	bic.w	r3, r3, #15
 800729c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	085b      	lsrs	r3, r3, #1
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	89fb      	ldrh	r3, [r7, #14]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	89fa      	ldrh	r2, [r7, #14]
 80072b6:	60da      	str	r2, [r3, #12]
 80072b8:	e076      	b.n	80073a8 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	76fb      	strb	r3, [r7, #27]
 80072be:	e073      	b.n	80073a8 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80072c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d85c      	bhi.n	8007382 <UART_SetConfig+0x6a6>
 80072c8:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <UART_SetConfig+0x5f4>)
 80072ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ce:	bf00      	nop
 80072d0:	080072f5 	.word	0x080072f5
 80072d4:	08007313 	.word	0x08007313
 80072d8:	08007331 	.word	0x08007331
 80072dc:	08007383 	.word	0x08007383
 80072e0:	0800734d 	.word	0x0800734d
 80072e4:	08007383 	.word	0x08007383
 80072e8:	08007383 	.word	0x08007383
 80072ec:	08007383 	.word	0x08007383
 80072f0:	0800736b 	.word	0x0800736b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072f4:	f7fd fe0a 	bl	8004f0c <HAL_RCC_GetPCLK1Freq>
 80072f8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	085a      	lsrs	r2, r3, #1
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	441a      	add	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	fbb2 f3f3 	udiv	r3, r2, r3
 800730c:	b29b      	uxth	r3, r3
 800730e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007310:	e03a      	b.n	8007388 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007312:	f7fd fe11 	bl	8004f38 <HAL_RCC_GetPCLK2Freq>
 8007316:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	085a      	lsrs	r2, r3, #1
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	441a      	add	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	fbb2 f3f3 	udiv	r3, r2, r3
 800732a:	b29b      	uxth	r3, r3
 800732c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800732e:	e02b      	b.n	8007388 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	085b      	lsrs	r3, r3, #1
 8007336:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800733a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6852      	ldr	r2, [r2, #4]
 8007342:	fbb3 f3f2 	udiv	r3, r3, r2
 8007346:	b29b      	uxth	r3, r3
 8007348:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800734a:	e01d      	b.n	8007388 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800734c:	f7fd fd48 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 8007350:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	085a      	lsrs	r2, r3, #1
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	441a      	add	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	fbb2 f3f3 	udiv	r3, r2, r3
 8007364:	b29b      	uxth	r3, r3
 8007366:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007368:	e00e      	b.n	8007388 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	fbb2 f3f3 	udiv	r3, r2, r3
 800737c:	b29b      	uxth	r3, r3
 800737e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007380:	e002      	b.n	8007388 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	76fb      	strb	r3, [r7, #27]
        break;
 8007386:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	2b0f      	cmp	r3, #15
 800738c:	d90a      	bls.n	80073a4 <UART_SetConfig+0x6c8>
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007394:	d206      	bcs.n	80073a4 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69fa      	ldr	r2, [r7, #28]
 800739c:	60da      	str	r2, [r3, #12]
 800739e:	e003      	b.n	80073a8 <UART_SetConfig+0x6cc>
 80073a0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80073b4:	7efb      	ldrb	r3, [r7, #27]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3728      	adds	r7, #40	; 0x28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080073c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01a      	beq.n	80074d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074be:	d10a      	bne.n	80074d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	605a      	str	r2, [r3, #4]
  }
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af02      	add	r7, sp, #8
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007512:	f7fa ff81 	bl	8002418 <HAL_GetTick>
 8007516:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b08      	cmp	r3, #8
 8007524:	d10e      	bne.n	8007544 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007526:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f82a 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e020      	b.n	8007586 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b04      	cmp	r3, #4
 8007550:	d10e      	bne.n	8007570 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007552:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f814 	bl	800758e <UART_WaitOnFlagUntilTimeout>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e00a      	b.n	8007586 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2220      	movs	r2, #32
 8007574:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	603b      	str	r3, [r7, #0]
 800759a:	4613      	mov	r3, r2
 800759c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759e:	e05d      	b.n	800765c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	d059      	beq.n	800765c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075a8:	f7fa ff36 	bl	8002418 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d302      	bcc.n	80075be <UART_WaitOnFlagUntilTimeout+0x30>
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d11b      	bne.n	80075f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0201 	bic.w	r2, r2, #1
 80075dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2220      	movs	r2, #32
 80075e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e042      	b.n	800767c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d02b      	beq.n	800765c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800760e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007612:	d123      	bne.n	800765c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800761c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800762c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0201 	bic.w	r2, r2, #1
 800763c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2220      	movs	r2, #32
 8007642:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2220      	movs	r2, #32
 800764e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e00f      	b.n	800767c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	69da      	ldr	r2, [r3, #28]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4013      	ands	r3, r2
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	429a      	cmp	r2, r3
 800766a:	bf0c      	ite	eq
 800766c:	2301      	moveq	r3, #1
 800766e:	2300      	movne	r3, #0
 8007670:	b2db      	uxtb	r3, r3
 8007672:	461a      	mov	r2, r3
 8007674:	79fb      	ldrb	r3, [r7, #7]
 8007676:	429a      	cmp	r2, r3
 8007678:	d092      	beq.n	80075a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <__errno>:
 8007684:	4b01      	ldr	r3, [pc, #4]	; (800768c <__errno+0x8>)
 8007686:	6818      	ldr	r0, [r3, #0]
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	2000000c 	.word	0x2000000c

08007690 <__libc_init_array>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	4e0d      	ldr	r6, [pc, #52]	; (80076c8 <__libc_init_array+0x38>)
 8007694:	4c0d      	ldr	r4, [pc, #52]	; (80076cc <__libc_init_array+0x3c>)
 8007696:	1ba4      	subs	r4, r4, r6
 8007698:	10a4      	asrs	r4, r4, #2
 800769a:	2500      	movs	r5, #0
 800769c:	42a5      	cmp	r5, r4
 800769e:	d109      	bne.n	80076b4 <__libc_init_array+0x24>
 80076a0:	4e0b      	ldr	r6, [pc, #44]	; (80076d0 <__libc_init_array+0x40>)
 80076a2:	4c0c      	ldr	r4, [pc, #48]	; (80076d4 <__libc_init_array+0x44>)
 80076a4:	f000 fc26 	bl	8007ef4 <_init>
 80076a8:	1ba4      	subs	r4, r4, r6
 80076aa:	10a4      	asrs	r4, r4, #2
 80076ac:	2500      	movs	r5, #0
 80076ae:	42a5      	cmp	r5, r4
 80076b0:	d105      	bne.n	80076be <__libc_init_array+0x2e>
 80076b2:	bd70      	pop	{r4, r5, r6, pc}
 80076b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076b8:	4798      	blx	r3
 80076ba:	3501      	adds	r5, #1
 80076bc:	e7ee      	b.n	800769c <__libc_init_array+0xc>
 80076be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076c2:	4798      	blx	r3
 80076c4:	3501      	adds	r5, #1
 80076c6:	e7f2      	b.n	80076ae <__libc_init_array+0x1e>
 80076c8:	08007f9c 	.word	0x08007f9c
 80076cc:	08007f9c 	.word	0x08007f9c
 80076d0:	08007f9c 	.word	0x08007f9c
 80076d4:	08007fa0 	.word	0x08007fa0

080076d8 <memset>:
 80076d8:	4402      	add	r2, r0
 80076da:	4603      	mov	r3, r0
 80076dc:	4293      	cmp	r3, r2
 80076de:	d100      	bne.n	80076e2 <memset+0xa>
 80076e0:	4770      	bx	lr
 80076e2:	f803 1b01 	strb.w	r1, [r3], #1
 80076e6:	e7f9      	b.n	80076dc <memset+0x4>

080076e8 <siprintf>:
 80076e8:	b40e      	push	{r1, r2, r3}
 80076ea:	b500      	push	{lr}
 80076ec:	b09c      	sub	sp, #112	; 0x70
 80076ee:	ab1d      	add	r3, sp, #116	; 0x74
 80076f0:	9002      	str	r0, [sp, #8]
 80076f2:	9006      	str	r0, [sp, #24]
 80076f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076f8:	4809      	ldr	r0, [pc, #36]	; (8007720 <siprintf+0x38>)
 80076fa:	9107      	str	r1, [sp, #28]
 80076fc:	9104      	str	r1, [sp, #16]
 80076fe:	4909      	ldr	r1, [pc, #36]	; (8007724 <siprintf+0x3c>)
 8007700:	f853 2b04 	ldr.w	r2, [r3], #4
 8007704:	9105      	str	r1, [sp, #20]
 8007706:	6800      	ldr	r0, [r0, #0]
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	a902      	add	r1, sp, #8
 800770c:	f000 f866 	bl	80077dc <_svfiprintf_r>
 8007710:	9b02      	ldr	r3, [sp, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	b01c      	add	sp, #112	; 0x70
 8007718:	f85d eb04 	ldr.w	lr, [sp], #4
 800771c:	b003      	add	sp, #12
 800771e:	4770      	bx	lr
 8007720:	2000000c 	.word	0x2000000c
 8007724:	ffff0208 	.word	0xffff0208

08007728 <__ssputs_r>:
 8007728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800772c:	688e      	ldr	r6, [r1, #8]
 800772e:	429e      	cmp	r6, r3
 8007730:	4682      	mov	sl, r0
 8007732:	460c      	mov	r4, r1
 8007734:	4690      	mov	r8, r2
 8007736:	4699      	mov	r9, r3
 8007738:	d837      	bhi.n	80077aa <__ssputs_r+0x82>
 800773a:	898a      	ldrh	r2, [r1, #12]
 800773c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007740:	d031      	beq.n	80077a6 <__ssputs_r+0x7e>
 8007742:	6825      	ldr	r5, [r4, #0]
 8007744:	6909      	ldr	r1, [r1, #16]
 8007746:	1a6f      	subs	r7, r5, r1
 8007748:	6965      	ldr	r5, [r4, #20]
 800774a:	2302      	movs	r3, #2
 800774c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007750:	fb95 f5f3 	sdiv	r5, r5, r3
 8007754:	f109 0301 	add.w	r3, r9, #1
 8007758:	443b      	add	r3, r7
 800775a:	429d      	cmp	r5, r3
 800775c:	bf38      	it	cc
 800775e:	461d      	movcc	r5, r3
 8007760:	0553      	lsls	r3, r2, #21
 8007762:	d530      	bpl.n	80077c6 <__ssputs_r+0x9e>
 8007764:	4629      	mov	r1, r5
 8007766:	f000 fb2b 	bl	8007dc0 <_malloc_r>
 800776a:	4606      	mov	r6, r0
 800776c:	b950      	cbnz	r0, 8007784 <__ssputs_r+0x5c>
 800776e:	230c      	movs	r3, #12
 8007770:	f8ca 3000 	str.w	r3, [sl]
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800777a:	81a3      	strh	r3, [r4, #12]
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007784:	463a      	mov	r2, r7
 8007786:	6921      	ldr	r1, [r4, #16]
 8007788:	f000 faa8 	bl	8007cdc <memcpy>
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007796:	81a3      	strh	r3, [r4, #12]
 8007798:	6126      	str	r6, [r4, #16]
 800779a:	6165      	str	r5, [r4, #20]
 800779c:	443e      	add	r6, r7
 800779e:	1bed      	subs	r5, r5, r7
 80077a0:	6026      	str	r6, [r4, #0]
 80077a2:	60a5      	str	r5, [r4, #8]
 80077a4:	464e      	mov	r6, r9
 80077a6:	454e      	cmp	r6, r9
 80077a8:	d900      	bls.n	80077ac <__ssputs_r+0x84>
 80077aa:	464e      	mov	r6, r9
 80077ac:	4632      	mov	r2, r6
 80077ae:	4641      	mov	r1, r8
 80077b0:	6820      	ldr	r0, [r4, #0]
 80077b2:	f000 fa9e 	bl	8007cf2 <memmove>
 80077b6:	68a3      	ldr	r3, [r4, #8]
 80077b8:	1b9b      	subs	r3, r3, r6
 80077ba:	60a3      	str	r3, [r4, #8]
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	441e      	add	r6, r3
 80077c0:	6026      	str	r6, [r4, #0]
 80077c2:	2000      	movs	r0, #0
 80077c4:	e7dc      	b.n	8007780 <__ssputs_r+0x58>
 80077c6:	462a      	mov	r2, r5
 80077c8:	f000 fb54 	bl	8007e74 <_realloc_r>
 80077cc:	4606      	mov	r6, r0
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d1e2      	bne.n	8007798 <__ssputs_r+0x70>
 80077d2:	6921      	ldr	r1, [r4, #16]
 80077d4:	4650      	mov	r0, sl
 80077d6:	f000 faa5 	bl	8007d24 <_free_r>
 80077da:	e7c8      	b.n	800776e <__ssputs_r+0x46>

080077dc <_svfiprintf_r>:
 80077dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e0:	461d      	mov	r5, r3
 80077e2:	898b      	ldrh	r3, [r1, #12]
 80077e4:	061f      	lsls	r7, r3, #24
 80077e6:	b09d      	sub	sp, #116	; 0x74
 80077e8:	4680      	mov	r8, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	4616      	mov	r6, r2
 80077ee:	d50f      	bpl.n	8007810 <_svfiprintf_r+0x34>
 80077f0:	690b      	ldr	r3, [r1, #16]
 80077f2:	b96b      	cbnz	r3, 8007810 <_svfiprintf_r+0x34>
 80077f4:	2140      	movs	r1, #64	; 0x40
 80077f6:	f000 fae3 	bl	8007dc0 <_malloc_r>
 80077fa:	6020      	str	r0, [r4, #0]
 80077fc:	6120      	str	r0, [r4, #16]
 80077fe:	b928      	cbnz	r0, 800780c <_svfiprintf_r+0x30>
 8007800:	230c      	movs	r3, #12
 8007802:	f8c8 3000 	str.w	r3, [r8]
 8007806:	f04f 30ff 	mov.w	r0, #4294967295
 800780a:	e0c8      	b.n	800799e <_svfiprintf_r+0x1c2>
 800780c:	2340      	movs	r3, #64	; 0x40
 800780e:	6163      	str	r3, [r4, #20]
 8007810:	2300      	movs	r3, #0
 8007812:	9309      	str	r3, [sp, #36]	; 0x24
 8007814:	2320      	movs	r3, #32
 8007816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800781a:	2330      	movs	r3, #48	; 0x30
 800781c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007820:	9503      	str	r5, [sp, #12]
 8007822:	f04f 0b01 	mov.w	fp, #1
 8007826:	4637      	mov	r7, r6
 8007828:	463d      	mov	r5, r7
 800782a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800782e:	b10b      	cbz	r3, 8007834 <_svfiprintf_r+0x58>
 8007830:	2b25      	cmp	r3, #37	; 0x25
 8007832:	d13e      	bne.n	80078b2 <_svfiprintf_r+0xd6>
 8007834:	ebb7 0a06 	subs.w	sl, r7, r6
 8007838:	d00b      	beq.n	8007852 <_svfiprintf_r+0x76>
 800783a:	4653      	mov	r3, sl
 800783c:	4632      	mov	r2, r6
 800783e:	4621      	mov	r1, r4
 8007840:	4640      	mov	r0, r8
 8007842:	f7ff ff71 	bl	8007728 <__ssputs_r>
 8007846:	3001      	adds	r0, #1
 8007848:	f000 80a4 	beq.w	8007994 <_svfiprintf_r+0x1b8>
 800784c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784e:	4453      	add	r3, sl
 8007850:	9309      	str	r3, [sp, #36]	; 0x24
 8007852:	783b      	ldrb	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 809d 	beq.w	8007994 <_svfiprintf_r+0x1b8>
 800785a:	2300      	movs	r3, #0
 800785c:	f04f 32ff 	mov.w	r2, #4294967295
 8007860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	9307      	str	r3, [sp, #28]
 8007868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800786c:	931a      	str	r3, [sp, #104]	; 0x68
 800786e:	462f      	mov	r7, r5
 8007870:	2205      	movs	r2, #5
 8007872:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007876:	4850      	ldr	r0, [pc, #320]	; (80079b8 <_svfiprintf_r+0x1dc>)
 8007878:	f7f8 fcb2 	bl	80001e0 <memchr>
 800787c:	9b04      	ldr	r3, [sp, #16]
 800787e:	b9d0      	cbnz	r0, 80078b6 <_svfiprintf_r+0xda>
 8007880:	06d9      	lsls	r1, r3, #27
 8007882:	bf44      	itt	mi
 8007884:	2220      	movmi	r2, #32
 8007886:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800788a:	071a      	lsls	r2, r3, #28
 800788c:	bf44      	itt	mi
 800788e:	222b      	movmi	r2, #43	; 0x2b
 8007890:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007894:	782a      	ldrb	r2, [r5, #0]
 8007896:	2a2a      	cmp	r2, #42	; 0x2a
 8007898:	d015      	beq.n	80078c6 <_svfiprintf_r+0xea>
 800789a:	9a07      	ldr	r2, [sp, #28]
 800789c:	462f      	mov	r7, r5
 800789e:	2000      	movs	r0, #0
 80078a0:	250a      	movs	r5, #10
 80078a2:	4639      	mov	r1, r7
 80078a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078a8:	3b30      	subs	r3, #48	; 0x30
 80078aa:	2b09      	cmp	r3, #9
 80078ac:	d94d      	bls.n	800794a <_svfiprintf_r+0x16e>
 80078ae:	b1b8      	cbz	r0, 80078e0 <_svfiprintf_r+0x104>
 80078b0:	e00f      	b.n	80078d2 <_svfiprintf_r+0xf6>
 80078b2:	462f      	mov	r7, r5
 80078b4:	e7b8      	b.n	8007828 <_svfiprintf_r+0x4c>
 80078b6:	4a40      	ldr	r2, [pc, #256]	; (80079b8 <_svfiprintf_r+0x1dc>)
 80078b8:	1a80      	subs	r0, r0, r2
 80078ba:	fa0b f000 	lsl.w	r0, fp, r0
 80078be:	4318      	orrs	r0, r3
 80078c0:	9004      	str	r0, [sp, #16]
 80078c2:	463d      	mov	r5, r7
 80078c4:	e7d3      	b.n	800786e <_svfiprintf_r+0x92>
 80078c6:	9a03      	ldr	r2, [sp, #12]
 80078c8:	1d11      	adds	r1, r2, #4
 80078ca:	6812      	ldr	r2, [r2, #0]
 80078cc:	9103      	str	r1, [sp, #12]
 80078ce:	2a00      	cmp	r2, #0
 80078d0:	db01      	blt.n	80078d6 <_svfiprintf_r+0xfa>
 80078d2:	9207      	str	r2, [sp, #28]
 80078d4:	e004      	b.n	80078e0 <_svfiprintf_r+0x104>
 80078d6:	4252      	negs	r2, r2
 80078d8:	f043 0302 	orr.w	r3, r3, #2
 80078dc:	9207      	str	r2, [sp, #28]
 80078de:	9304      	str	r3, [sp, #16]
 80078e0:	783b      	ldrb	r3, [r7, #0]
 80078e2:	2b2e      	cmp	r3, #46	; 0x2e
 80078e4:	d10c      	bne.n	8007900 <_svfiprintf_r+0x124>
 80078e6:	787b      	ldrb	r3, [r7, #1]
 80078e8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ea:	d133      	bne.n	8007954 <_svfiprintf_r+0x178>
 80078ec:	9b03      	ldr	r3, [sp, #12]
 80078ee:	1d1a      	adds	r2, r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	9203      	str	r2, [sp, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	bfb8      	it	lt
 80078f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80078fc:	3702      	adds	r7, #2
 80078fe:	9305      	str	r3, [sp, #20]
 8007900:	4d2e      	ldr	r5, [pc, #184]	; (80079bc <_svfiprintf_r+0x1e0>)
 8007902:	7839      	ldrb	r1, [r7, #0]
 8007904:	2203      	movs	r2, #3
 8007906:	4628      	mov	r0, r5
 8007908:	f7f8 fc6a 	bl	80001e0 <memchr>
 800790c:	b138      	cbz	r0, 800791e <_svfiprintf_r+0x142>
 800790e:	2340      	movs	r3, #64	; 0x40
 8007910:	1b40      	subs	r0, r0, r5
 8007912:	fa03 f000 	lsl.w	r0, r3, r0
 8007916:	9b04      	ldr	r3, [sp, #16]
 8007918:	4303      	orrs	r3, r0
 800791a:	3701      	adds	r7, #1
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	7839      	ldrb	r1, [r7, #0]
 8007920:	4827      	ldr	r0, [pc, #156]	; (80079c0 <_svfiprintf_r+0x1e4>)
 8007922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007926:	2206      	movs	r2, #6
 8007928:	1c7e      	adds	r6, r7, #1
 800792a:	f7f8 fc59 	bl	80001e0 <memchr>
 800792e:	2800      	cmp	r0, #0
 8007930:	d038      	beq.n	80079a4 <_svfiprintf_r+0x1c8>
 8007932:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <_svfiprintf_r+0x1e8>)
 8007934:	bb13      	cbnz	r3, 800797c <_svfiprintf_r+0x1a0>
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	3307      	adds	r3, #7
 800793a:	f023 0307 	bic.w	r3, r3, #7
 800793e:	3308      	adds	r3, #8
 8007940:	9303      	str	r3, [sp, #12]
 8007942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007944:	444b      	add	r3, r9
 8007946:	9309      	str	r3, [sp, #36]	; 0x24
 8007948:	e76d      	b.n	8007826 <_svfiprintf_r+0x4a>
 800794a:	fb05 3202 	mla	r2, r5, r2, r3
 800794e:	2001      	movs	r0, #1
 8007950:	460f      	mov	r7, r1
 8007952:	e7a6      	b.n	80078a2 <_svfiprintf_r+0xc6>
 8007954:	2300      	movs	r3, #0
 8007956:	3701      	adds	r7, #1
 8007958:	9305      	str	r3, [sp, #20]
 800795a:	4619      	mov	r1, r3
 800795c:	250a      	movs	r5, #10
 800795e:	4638      	mov	r0, r7
 8007960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007964:	3a30      	subs	r2, #48	; 0x30
 8007966:	2a09      	cmp	r2, #9
 8007968:	d903      	bls.n	8007972 <_svfiprintf_r+0x196>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0c8      	beq.n	8007900 <_svfiprintf_r+0x124>
 800796e:	9105      	str	r1, [sp, #20]
 8007970:	e7c6      	b.n	8007900 <_svfiprintf_r+0x124>
 8007972:	fb05 2101 	mla	r1, r5, r1, r2
 8007976:	2301      	movs	r3, #1
 8007978:	4607      	mov	r7, r0
 800797a:	e7f0      	b.n	800795e <_svfiprintf_r+0x182>
 800797c:	ab03      	add	r3, sp, #12
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	4622      	mov	r2, r4
 8007982:	4b11      	ldr	r3, [pc, #68]	; (80079c8 <_svfiprintf_r+0x1ec>)
 8007984:	a904      	add	r1, sp, #16
 8007986:	4640      	mov	r0, r8
 8007988:	f3af 8000 	nop.w
 800798c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007990:	4681      	mov	r9, r0
 8007992:	d1d6      	bne.n	8007942 <_svfiprintf_r+0x166>
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	065b      	lsls	r3, r3, #25
 8007998:	f53f af35 	bmi.w	8007806 <_svfiprintf_r+0x2a>
 800799c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800799e:	b01d      	add	sp, #116	; 0x74
 80079a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a4:	ab03      	add	r3, sp, #12
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	4622      	mov	r2, r4
 80079aa:	4b07      	ldr	r3, [pc, #28]	; (80079c8 <_svfiprintf_r+0x1ec>)
 80079ac:	a904      	add	r1, sp, #16
 80079ae:	4640      	mov	r0, r8
 80079b0:	f000 f882 	bl	8007ab8 <_printf_i>
 80079b4:	e7ea      	b.n	800798c <_svfiprintf_r+0x1b0>
 80079b6:	bf00      	nop
 80079b8:	08007f60 	.word	0x08007f60
 80079bc:	08007f66 	.word	0x08007f66
 80079c0:	08007f6a 	.word	0x08007f6a
 80079c4:	00000000 	.word	0x00000000
 80079c8:	08007729 	.word	0x08007729

080079cc <_printf_common>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	4691      	mov	r9, r2
 80079d2:	461f      	mov	r7, r3
 80079d4:	688a      	ldr	r2, [r1, #8]
 80079d6:	690b      	ldr	r3, [r1, #16]
 80079d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079dc:	4293      	cmp	r3, r2
 80079de:	bfb8      	it	lt
 80079e0:	4613      	movlt	r3, r2
 80079e2:	f8c9 3000 	str.w	r3, [r9]
 80079e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079ea:	4606      	mov	r6, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	b112      	cbz	r2, 80079f6 <_printf_common+0x2a>
 80079f0:	3301      	adds	r3, #1
 80079f2:	f8c9 3000 	str.w	r3, [r9]
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	0699      	lsls	r1, r3, #26
 80079fa:	bf42      	ittt	mi
 80079fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a00:	3302      	addmi	r3, #2
 8007a02:	f8c9 3000 	strmi.w	r3, [r9]
 8007a06:	6825      	ldr	r5, [r4, #0]
 8007a08:	f015 0506 	ands.w	r5, r5, #6
 8007a0c:	d107      	bne.n	8007a1e <_printf_common+0x52>
 8007a0e:	f104 0a19 	add.w	sl, r4, #25
 8007a12:	68e3      	ldr	r3, [r4, #12]
 8007a14:	f8d9 2000 	ldr.w	r2, [r9]
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	42ab      	cmp	r3, r5
 8007a1c:	dc28      	bgt.n	8007a70 <_printf_common+0xa4>
 8007a1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	3300      	adds	r3, #0
 8007a26:	bf18      	it	ne
 8007a28:	2301      	movne	r3, #1
 8007a2a:	0692      	lsls	r2, r2, #26
 8007a2c:	d42d      	bmi.n	8007a8a <_printf_common+0xbe>
 8007a2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a32:	4639      	mov	r1, r7
 8007a34:	4630      	mov	r0, r6
 8007a36:	47c0      	blx	r8
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d020      	beq.n	8007a7e <_printf_common+0xb2>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	68e5      	ldr	r5, [r4, #12]
 8007a40:	f8d9 2000 	ldr.w	r2, [r9]
 8007a44:	f003 0306 	and.w	r3, r3, #6
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	bf08      	it	eq
 8007a4c:	1aad      	subeq	r5, r5, r2
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	6922      	ldr	r2, [r4, #16]
 8007a52:	bf0c      	ite	eq
 8007a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a58:	2500      	movne	r5, #0
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	bfc4      	itt	gt
 8007a5e:	1a9b      	subgt	r3, r3, r2
 8007a60:	18ed      	addgt	r5, r5, r3
 8007a62:	f04f 0900 	mov.w	r9, #0
 8007a66:	341a      	adds	r4, #26
 8007a68:	454d      	cmp	r5, r9
 8007a6a:	d11a      	bne.n	8007aa2 <_printf_common+0xd6>
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	e008      	b.n	8007a82 <_printf_common+0xb6>
 8007a70:	2301      	movs	r3, #1
 8007a72:	4652      	mov	r2, sl
 8007a74:	4639      	mov	r1, r7
 8007a76:	4630      	mov	r0, r6
 8007a78:	47c0      	blx	r8
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	d103      	bne.n	8007a86 <_printf_common+0xba>
 8007a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a86:	3501      	adds	r5, #1
 8007a88:	e7c3      	b.n	8007a12 <_printf_common+0x46>
 8007a8a:	18e1      	adds	r1, r4, r3
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	2030      	movs	r0, #48	; 0x30
 8007a90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a94:	4422      	add	r2, r4
 8007a96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	e7c5      	b.n	8007a2e <_printf_common+0x62>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	47c0      	blx	r8
 8007aac:	3001      	adds	r0, #1
 8007aae:	d0e6      	beq.n	8007a7e <_printf_common+0xb2>
 8007ab0:	f109 0901 	add.w	r9, r9, #1
 8007ab4:	e7d8      	b.n	8007a68 <_printf_common+0x9c>
	...

08007ab8 <_printf_i>:
 8007ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007abc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	7e09      	ldrb	r1, [r1, #24]
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	296e      	cmp	r1, #110	; 0x6e
 8007ac8:	4617      	mov	r7, r2
 8007aca:	4606      	mov	r6, r0
 8007acc:	4698      	mov	r8, r3
 8007ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad0:	f000 80b3 	beq.w	8007c3a <_printf_i+0x182>
 8007ad4:	d822      	bhi.n	8007b1c <_printf_i+0x64>
 8007ad6:	2963      	cmp	r1, #99	; 0x63
 8007ad8:	d036      	beq.n	8007b48 <_printf_i+0x90>
 8007ada:	d80a      	bhi.n	8007af2 <_printf_i+0x3a>
 8007adc:	2900      	cmp	r1, #0
 8007ade:	f000 80b9 	beq.w	8007c54 <_printf_i+0x19c>
 8007ae2:	2958      	cmp	r1, #88	; 0x58
 8007ae4:	f000 8083 	beq.w	8007bee <_printf_i+0x136>
 8007ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007af0:	e032      	b.n	8007b58 <_printf_i+0xa0>
 8007af2:	2964      	cmp	r1, #100	; 0x64
 8007af4:	d001      	beq.n	8007afa <_printf_i+0x42>
 8007af6:	2969      	cmp	r1, #105	; 0x69
 8007af8:	d1f6      	bne.n	8007ae8 <_printf_i+0x30>
 8007afa:	6820      	ldr	r0, [r4, #0]
 8007afc:	6813      	ldr	r3, [r2, #0]
 8007afe:	0605      	lsls	r5, r0, #24
 8007b00:	f103 0104 	add.w	r1, r3, #4
 8007b04:	d52a      	bpl.n	8007b5c <_printf_i+0xa4>
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6011      	str	r1, [r2, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	da03      	bge.n	8007b16 <_printf_i+0x5e>
 8007b0e:	222d      	movs	r2, #45	; 0x2d
 8007b10:	425b      	negs	r3, r3
 8007b12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b16:	486f      	ldr	r0, [pc, #444]	; (8007cd4 <_printf_i+0x21c>)
 8007b18:	220a      	movs	r2, #10
 8007b1a:	e039      	b.n	8007b90 <_printf_i+0xd8>
 8007b1c:	2973      	cmp	r1, #115	; 0x73
 8007b1e:	f000 809d 	beq.w	8007c5c <_printf_i+0x1a4>
 8007b22:	d808      	bhi.n	8007b36 <_printf_i+0x7e>
 8007b24:	296f      	cmp	r1, #111	; 0x6f
 8007b26:	d020      	beq.n	8007b6a <_printf_i+0xb2>
 8007b28:	2970      	cmp	r1, #112	; 0x70
 8007b2a:	d1dd      	bne.n	8007ae8 <_printf_i+0x30>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	f043 0320 	orr.w	r3, r3, #32
 8007b32:	6023      	str	r3, [r4, #0]
 8007b34:	e003      	b.n	8007b3e <_printf_i+0x86>
 8007b36:	2975      	cmp	r1, #117	; 0x75
 8007b38:	d017      	beq.n	8007b6a <_printf_i+0xb2>
 8007b3a:	2978      	cmp	r1, #120	; 0x78
 8007b3c:	d1d4      	bne.n	8007ae8 <_printf_i+0x30>
 8007b3e:	2378      	movs	r3, #120	; 0x78
 8007b40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b44:	4864      	ldr	r0, [pc, #400]	; (8007cd8 <_printf_i+0x220>)
 8007b46:	e055      	b.n	8007bf4 <_printf_i+0x13c>
 8007b48:	6813      	ldr	r3, [r2, #0]
 8007b4a:	1d19      	adds	r1, r3, #4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6011      	str	r1, [r2, #0]
 8007b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e08c      	b.n	8007c76 <_printf_i+0x1be>
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6011      	str	r1, [r2, #0]
 8007b60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b64:	bf18      	it	ne
 8007b66:	b21b      	sxthne	r3, r3
 8007b68:	e7cf      	b.n	8007b0a <_printf_i+0x52>
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	6825      	ldr	r5, [r4, #0]
 8007b6e:	1d18      	adds	r0, r3, #4
 8007b70:	6010      	str	r0, [r2, #0]
 8007b72:	0628      	lsls	r0, r5, #24
 8007b74:	d501      	bpl.n	8007b7a <_printf_i+0xc2>
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	e002      	b.n	8007b80 <_printf_i+0xc8>
 8007b7a:	0668      	lsls	r0, r5, #25
 8007b7c:	d5fb      	bpl.n	8007b76 <_printf_i+0xbe>
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	4854      	ldr	r0, [pc, #336]	; (8007cd4 <_printf_i+0x21c>)
 8007b82:	296f      	cmp	r1, #111	; 0x6f
 8007b84:	bf14      	ite	ne
 8007b86:	220a      	movne	r2, #10
 8007b88:	2208      	moveq	r2, #8
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b90:	6865      	ldr	r5, [r4, #4]
 8007b92:	60a5      	str	r5, [r4, #8]
 8007b94:	2d00      	cmp	r5, #0
 8007b96:	f2c0 8095 	blt.w	8007cc4 <_printf_i+0x20c>
 8007b9a:	6821      	ldr	r1, [r4, #0]
 8007b9c:	f021 0104 	bic.w	r1, r1, #4
 8007ba0:	6021      	str	r1, [r4, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d13d      	bne.n	8007c22 <_printf_i+0x16a>
 8007ba6:	2d00      	cmp	r5, #0
 8007ba8:	f040 808e 	bne.w	8007cc8 <_printf_i+0x210>
 8007bac:	4665      	mov	r5, ip
 8007bae:	2a08      	cmp	r2, #8
 8007bb0:	d10b      	bne.n	8007bca <_printf_i+0x112>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	07db      	lsls	r3, r3, #31
 8007bb6:	d508      	bpl.n	8007bca <_printf_i+0x112>
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	6862      	ldr	r2, [r4, #4]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	bfde      	ittt	le
 8007bc0:	2330      	movle	r3, #48	; 0x30
 8007bc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bca:	ebac 0305 	sub.w	r3, ip, r5
 8007bce:	6123      	str	r3, [r4, #16]
 8007bd0:	f8cd 8000 	str.w	r8, [sp]
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	aa03      	add	r2, sp, #12
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7ff fef6 	bl	80079cc <_printf_common>
 8007be0:	3001      	adds	r0, #1
 8007be2:	d14d      	bne.n	8007c80 <_printf_i+0x1c8>
 8007be4:	f04f 30ff 	mov.w	r0, #4294967295
 8007be8:	b005      	add	sp, #20
 8007bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bee:	4839      	ldr	r0, [pc, #228]	; (8007cd4 <_printf_i+0x21c>)
 8007bf0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007bf4:	6813      	ldr	r3, [r2, #0]
 8007bf6:	6821      	ldr	r1, [r4, #0]
 8007bf8:	1d1d      	adds	r5, r3, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6015      	str	r5, [r2, #0]
 8007bfe:	060a      	lsls	r2, r1, #24
 8007c00:	d50b      	bpl.n	8007c1a <_printf_i+0x162>
 8007c02:	07ca      	lsls	r2, r1, #31
 8007c04:	bf44      	itt	mi
 8007c06:	f041 0120 	orrmi.w	r1, r1, #32
 8007c0a:	6021      	strmi	r1, [r4, #0]
 8007c0c:	b91b      	cbnz	r3, 8007c16 <_printf_i+0x15e>
 8007c0e:	6822      	ldr	r2, [r4, #0]
 8007c10:	f022 0220 	bic.w	r2, r2, #32
 8007c14:	6022      	str	r2, [r4, #0]
 8007c16:	2210      	movs	r2, #16
 8007c18:	e7b7      	b.n	8007b8a <_printf_i+0xd2>
 8007c1a:	064d      	lsls	r5, r1, #25
 8007c1c:	bf48      	it	mi
 8007c1e:	b29b      	uxthmi	r3, r3
 8007c20:	e7ef      	b.n	8007c02 <_printf_i+0x14a>
 8007c22:	4665      	mov	r5, ip
 8007c24:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c28:	fb02 3311 	mls	r3, r2, r1, r3
 8007c2c:	5cc3      	ldrb	r3, [r0, r3]
 8007c2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c32:	460b      	mov	r3, r1
 8007c34:	2900      	cmp	r1, #0
 8007c36:	d1f5      	bne.n	8007c24 <_printf_i+0x16c>
 8007c38:	e7b9      	b.n	8007bae <_printf_i+0xf6>
 8007c3a:	6813      	ldr	r3, [r2, #0]
 8007c3c:	6825      	ldr	r5, [r4, #0]
 8007c3e:	6961      	ldr	r1, [r4, #20]
 8007c40:	1d18      	adds	r0, r3, #4
 8007c42:	6010      	str	r0, [r2, #0]
 8007c44:	0628      	lsls	r0, r5, #24
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	d501      	bpl.n	8007c4e <_printf_i+0x196>
 8007c4a:	6019      	str	r1, [r3, #0]
 8007c4c:	e002      	b.n	8007c54 <_printf_i+0x19c>
 8007c4e:	066a      	lsls	r2, r5, #25
 8007c50:	d5fb      	bpl.n	8007c4a <_printf_i+0x192>
 8007c52:	8019      	strh	r1, [r3, #0]
 8007c54:	2300      	movs	r3, #0
 8007c56:	6123      	str	r3, [r4, #16]
 8007c58:	4665      	mov	r5, ip
 8007c5a:	e7b9      	b.n	8007bd0 <_printf_i+0x118>
 8007c5c:	6813      	ldr	r3, [r2, #0]
 8007c5e:	1d19      	adds	r1, r3, #4
 8007c60:	6011      	str	r1, [r2, #0]
 8007c62:	681d      	ldr	r5, [r3, #0]
 8007c64:	6862      	ldr	r2, [r4, #4]
 8007c66:	2100      	movs	r1, #0
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f7f8 fab9 	bl	80001e0 <memchr>
 8007c6e:	b108      	cbz	r0, 8007c74 <_printf_i+0x1bc>
 8007c70:	1b40      	subs	r0, r0, r5
 8007c72:	6060      	str	r0, [r4, #4]
 8007c74:	6863      	ldr	r3, [r4, #4]
 8007c76:	6123      	str	r3, [r4, #16]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c7e:	e7a7      	b.n	8007bd0 <_printf_i+0x118>
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	462a      	mov	r2, r5
 8007c84:	4639      	mov	r1, r7
 8007c86:	4630      	mov	r0, r6
 8007c88:	47c0      	blx	r8
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d0aa      	beq.n	8007be4 <_printf_i+0x12c>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	079b      	lsls	r3, r3, #30
 8007c92:	d413      	bmi.n	8007cbc <_printf_i+0x204>
 8007c94:	68e0      	ldr	r0, [r4, #12]
 8007c96:	9b03      	ldr	r3, [sp, #12]
 8007c98:	4298      	cmp	r0, r3
 8007c9a:	bfb8      	it	lt
 8007c9c:	4618      	movlt	r0, r3
 8007c9e:	e7a3      	b.n	8007be8 <_printf_i+0x130>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	464a      	mov	r2, r9
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	47c0      	blx	r8
 8007caa:	3001      	adds	r0, #1
 8007cac:	d09a      	beq.n	8007be4 <_printf_i+0x12c>
 8007cae:	3501      	adds	r5, #1
 8007cb0:	68e3      	ldr	r3, [r4, #12]
 8007cb2:	9a03      	ldr	r2, [sp, #12]
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	42ab      	cmp	r3, r5
 8007cb8:	dcf2      	bgt.n	8007ca0 <_printf_i+0x1e8>
 8007cba:	e7eb      	b.n	8007c94 <_printf_i+0x1dc>
 8007cbc:	2500      	movs	r5, #0
 8007cbe:	f104 0919 	add.w	r9, r4, #25
 8007cc2:	e7f5      	b.n	8007cb0 <_printf_i+0x1f8>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1ac      	bne.n	8007c22 <_printf_i+0x16a>
 8007cc8:	7803      	ldrb	r3, [r0, #0]
 8007cca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd2:	e76c      	b.n	8007bae <_printf_i+0xf6>
 8007cd4:	08007f71 	.word	0x08007f71
 8007cd8:	08007f82 	.word	0x08007f82

08007cdc <memcpy>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	1e43      	subs	r3, r0, #1
 8007ce0:	440a      	add	r2, r1
 8007ce2:	4291      	cmp	r1, r2
 8007ce4:	d100      	bne.n	8007ce8 <memcpy+0xc>
 8007ce6:	bd10      	pop	{r4, pc}
 8007ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cf0:	e7f7      	b.n	8007ce2 <memcpy+0x6>

08007cf2 <memmove>:
 8007cf2:	4288      	cmp	r0, r1
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	eb01 0302 	add.w	r3, r1, r2
 8007cfa:	d807      	bhi.n	8007d0c <memmove+0x1a>
 8007cfc:	1e42      	subs	r2, r0, #1
 8007cfe:	4299      	cmp	r1, r3
 8007d00:	d00a      	beq.n	8007d18 <memmove+0x26>
 8007d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d06:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d0a:	e7f8      	b.n	8007cfe <memmove+0xc>
 8007d0c:	4283      	cmp	r3, r0
 8007d0e:	d9f5      	bls.n	8007cfc <memmove+0xa>
 8007d10:	1881      	adds	r1, r0, r2
 8007d12:	1ad2      	subs	r2, r2, r3
 8007d14:	42d3      	cmn	r3, r2
 8007d16:	d100      	bne.n	8007d1a <memmove+0x28>
 8007d18:	bd10      	pop	{r4, pc}
 8007d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d1e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d22:	e7f7      	b.n	8007d14 <memmove+0x22>

08007d24 <_free_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4605      	mov	r5, r0
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	d045      	beq.n	8007db8 <_free_r+0x94>
 8007d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d30:	1f0c      	subs	r4, r1, #4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	bfb8      	it	lt
 8007d36:	18e4      	addlt	r4, r4, r3
 8007d38:	f000 f8d2 	bl	8007ee0 <__malloc_lock>
 8007d3c:	4a1f      	ldr	r2, [pc, #124]	; (8007dbc <_free_r+0x98>)
 8007d3e:	6813      	ldr	r3, [r2, #0]
 8007d40:	4610      	mov	r0, r2
 8007d42:	b933      	cbnz	r3, 8007d52 <_free_r+0x2e>
 8007d44:	6063      	str	r3, [r4, #4]
 8007d46:	6014      	str	r4, [r2, #0]
 8007d48:	4628      	mov	r0, r5
 8007d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d4e:	f000 b8c8 	b.w	8007ee2 <__malloc_unlock>
 8007d52:	42a3      	cmp	r3, r4
 8007d54:	d90c      	bls.n	8007d70 <_free_r+0x4c>
 8007d56:	6821      	ldr	r1, [r4, #0]
 8007d58:	1862      	adds	r2, r4, r1
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	bf04      	itt	eq
 8007d5e:	681a      	ldreq	r2, [r3, #0]
 8007d60:	685b      	ldreq	r3, [r3, #4]
 8007d62:	6063      	str	r3, [r4, #4]
 8007d64:	bf04      	itt	eq
 8007d66:	1852      	addeq	r2, r2, r1
 8007d68:	6022      	streq	r2, [r4, #0]
 8007d6a:	6004      	str	r4, [r0, #0]
 8007d6c:	e7ec      	b.n	8007d48 <_free_r+0x24>
 8007d6e:	4613      	mov	r3, r2
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	b10a      	cbz	r2, 8007d78 <_free_r+0x54>
 8007d74:	42a2      	cmp	r2, r4
 8007d76:	d9fa      	bls.n	8007d6e <_free_r+0x4a>
 8007d78:	6819      	ldr	r1, [r3, #0]
 8007d7a:	1858      	adds	r0, r3, r1
 8007d7c:	42a0      	cmp	r0, r4
 8007d7e:	d10b      	bne.n	8007d98 <_free_r+0x74>
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	4401      	add	r1, r0
 8007d84:	1858      	adds	r0, r3, r1
 8007d86:	4282      	cmp	r2, r0
 8007d88:	6019      	str	r1, [r3, #0]
 8007d8a:	d1dd      	bne.n	8007d48 <_free_r+0x24>
 8007d8c:	6810      	ldr	r0, [r2, #0]
 8007d8e:	6852      	ldr	r2, [r2, #4]
 8007d90:	605a      	str	r2, [r3, #4]
 8007d92:	4401      	add	r1, r0
 8007d94:	6019      	str	r1, [r3, #0]
 8007d96:	e7d7      	b.n	8007d48 <_free_r+0x24>
 8007d98:	d902      	bls.n	8007da0 <_free_r+0x7c>
 8007d9a:	230c      	movs	r3, #12
 8007d9c:	602b      	str	r3, [r5, #0]
 8007d9e:	e7d3      	b.n	8007d48 <_free_r+0x24>
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	1821      	adds	r1, r4, r0
 8007da4:	428a      	cmp	r2, r1
 8007da6:	bf04      	itt	eq
 8007da8:	6811      	ldreq	r1, [r2, #0]
 8007daa:	6852      	ldreq	r2, [r2, #4]
 8007dac:	6062      	str	r2, [r4, #4]
 8007dae:	bf04      	itt	eq
 8007db0:	1809      	addeq	r1, r1, r0
 8007db2:	6021      	streq	r1, [r4, #0]
 8007db4:	605c      	str	r4, [r3, #4]
 8007db6:	e7c7      	b.n	8007d48 <_free_r+0x24>
 8007db8:	bd38      	pop	{r3, r4, r5, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000098 	.word	0x20000098

08007dc0 <_malloc_r>:
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	1ccd      	adds	r5, r1, #3
 8007dc4:	f025 0503 	bic.w	r5, r5, #3
 8007dc8:	3508      	adds	r5, #8
 8007dca:	2d0c      	cmp	r5, #12
 8007dcc:	bf38      	it	cc
 8007dce:	250c      	movcc	r5, #12
 8007dd0:	2d00      	cmp	r5, #0
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	db01      	blt.n	8007dda <_malloc_r+0x1a>
 8007dd6:	42a9      	cmp	r1, r5
 8007dd8:	d903      	bls.n	8007de2 <_malloc_r+0x22>
 8007dda:	230c      	movs	r3, #12
 8007ddc:	6033      	str	r3, [r6, #0]
 8007dde:	2000      	movs	r0, #0
 8007de0:	bd70      	pop	{r4, r5, r6, pc}
 8007de2:	f000 f87d 	bl	8007ee0 <__malloc_lock>
 8007de6:	4a21      	ldr	r2, [pc, #132]	; (8007e6c <_malloc_r+0xac>)
 8007de8:	6814      	ldr	r4, [r2, #0]
 8007dea:	4621      	mov	r1, r4
 8007dec:	b991      	cbnz	r1, 8007e14 <_malloc_r+0x54>
 8007dee:	4c20      	ldr	r4, [pc, #128]	; (8007e70 <_malloc_r+0xb0>)
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	b91b      	cbnz	r3, 8007dfc <_malloc_r+0x3c>
 8007df4:	4630      	mov	r0, r6
 8007df6:	f000 f863 	bl	8007ec0 <_sbrk_r>
 8007dfa:	6020      	str	r0, [r4, #0]
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f000 f85e 	bl	8007ec0 <_sbrk_r>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d124      	bne.n	8007e52 <_malloc_r+0x92>
 8007e08:	230c      	movs	r3, #12
 8007e0a:	6033      	str	r3, [r6, #0]
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f000 f868 	bl	8007ee2 <__malloc_unlock>
 8007e12:	e7e4      	b.n	8007dde <_malloc_r+0x1e>
 8007e14:	680b      	ldr	r3, [r1, #0]
 8007e16:	1b5b      	subs	r3, r3, r5
 8007e18:	d418      	bmi.n	8007e4c <_malloc_r+0x8c>
 8007e1a:	2b0b      	cmp	r3, #11
 8007e1c:	d90f      	bls.n	8007e3e <_malloc_r+0x7e>
 8007e1e:	600b      	str	r3, [r1, #0]
 8007e20:	50cd      	str	r5, [r1, r3]
 8007e22:	18cc      	adds	r4, r1, r3
 8007e24:	4630      	mov	r0, r6
 8007e26:	f000 f85c 	bl	8007ee2 <__malloc_unlock>
 8007e2a:	f104 000b 	add.w	r0, r4, #11
 8007e2e:	1d23      	adds	r3, r4, #4
 8007e30:	f020 0007 	bic.w	r0, r0, #7
 8007e34:	1ac3      	subs	r3, r0, r3
 8007e36:	d0d3      	beq.n	8007de0 <_malloc_r+0x20>
 8007e38:	425a      	negs	r2, r3
 8007e3a:	50e2      	str	r2, [r4, r3]
 8007e3c:	e7d0      	b.n	8007de0 <_malloc_r+0x20>
 8007e3e:	428c      	cmp	r4, r1
 8007e40:	684b      	ldr	r3, [r1, #4]
 8007e42:	bf16      	itet	ne
 8007e44:	6063      	strne	r3, [r4, #4]
 8007e46:	6013      	streq	r3, [r2, #0]
 8007e48:	460c      	movne	r4, r1
 8007e4a:	e7eb      	b.n	8007e24 <_malloc_r+0x64>
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	6849      	ldr	r1, [r1, #4]
 8007e50:	e7cc      	b.n	8007dec <_malloc_r+0x2c>
 8007e52:	1cc4      	adds	r4, r0, #3
 8007e54:	f024 0403 	bic.w	r4, r4, #3
 8007e58:	42a0      	cmp	r0, r4
 8007e5a:	d005      	beq.n	8007e68 <_malloc_r+0xa8>
 8007e5c:	1a21      	subs	r1, r4, r0
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f000 f82e 	bl	8007ec0 <_sbrk_r>
 8007e64:	3001      	adds	r0, #1
 8007e66:	d0cf      	beq.n	8007e08 <_malloc_r+0x48>
 8007e68:	6025      	str	r5, [r4, #0]
 8007e6a:	e7db      	b.n	8007e24 <_malloc_r+0x64>
 8007e6c:	20000098 	.word	0x20000098
 8007e70:	2000009c 	.word	0x2000009c

08007e74 <_realloc_r>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	4607      	mov	r7, r0
 8007e78:	4614      	mov	r4, r2
 8007e7a:	460e      	mov	r6, r1
 8007e7c:	b921      	cbnz	r1, 8007e88 <_realloc_r+0x14>
 8007e7e:	4611      	mov	r1, r2
 8007e80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e84:	f7ff bf9c 	b.w	8007dc0 <_malloc_r>
 8007e88:	b922      	cbnz	r2, 8007e94 <_realloc_r+0x20>
 8007e8a:	f7ff ff4b 	bl	8007d24 <_free_r>
 8007e8e:	4625      	mov	r5, r4
 8007e90:	4628      	mov	r0, r5
 8007e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e94:	f000 f826 	bl	8007ee4 <_malloc_usable_size_r>
 8007e98:	42a0      	cmp	r0, r4
 8007e9a:	d20f      	bcs.n	8007ebc <_realloc_r+0x48>
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f7ff ff8e 	bl	8007dc0 <_malloc_r>
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d0f2      	beq.n	8007e90 <_realloc_r+0x1c>
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4622      	mov	r2, r4
 8007eae:	f7ff ff15 	bl	8007cdc <memcpy>
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7ff ff35 	bl	8007d24 <_free_r>
 8007eba:	e7e9      	b.n	8007e90 <_realloc_r+0x1c>
 8007ebc:	4635      	mov	r5, r6
 8007ebe:	e7e7      	b.n	8007e90 <_realloc_r+0x1c>

08007ec0 <_sbrk_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4c06      	ldr	r4, [pc, #24]	; (8007edc <_sbrk_r+0x1c>)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	4608      	mov	r0, r1
 8007eca:	6023      	str	r3, [r4, #0]
 8007ecc:	f7fa f9ac 	bl	8002228 <_sbrk>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_sbrk_r+0x1a>
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_sbrk_r+0x1a>
 8007ed8:	602b      	str	r3, [r5, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	20000338 	.word	0x20000338

08007ee0 <__malloc_lock>:
 8007ee0:	4770      	bx	lr

08007ee2 <__malloc_unlock>:
 8007ee2:	4770      	bx	lr

08007ee4 <_malloc_usable_size_r>:
 8007ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ee8:	1f18      	subs	r0, r3, #4
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	bfbc      	itt	lt
 8007eee:	580b      	ldrlt	r3, [r1, r0]
 8007ef0:	18c0      	addlt	r0, r0, r3
 8007ef2:	4770      	bx	lr

08007ef4 <_init>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	bf00      	nop
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr

08007f00 <_fini>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	bf00      	nop
 8007f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	469e      	mov	lr, r3
 8007f0a:	4770      	bx	lr
