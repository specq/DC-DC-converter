
empc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006d8c  08006d8c  00016d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd4  08006dd4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ddc  08006ddc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ddc  08006ddc  00016ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006de0  08006de0  00016de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000010  08006df0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006df0  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bfb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000234a  00000000  00000000  00033c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  00035f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  000372d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000291e3  00000000  00000000  00038500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfeb  00000000  00000000  000616e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107882  00000000  00000000  0006f6ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176f50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005304  00000000  00000000  00176fcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d74 	.word	0x08006d74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006d74 	.word	0x08006d74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <swap>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void swap(int* a, int* b)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
	int t = *a;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	60fb      	str	r3, [r7, #12]
    *a = *b;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	601a      	str	r2, [r3, #0]
    *b = t;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <partition>:

int partition (int arr[], int low, int high)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b088      	sub	sp, #32
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
	int pivot = arr[high];    // pivot
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	4413      	add	r3, r2
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	617b      	str	r3, [r7, #20]
	int i = (low - 1);  // Index of smaller element
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	3b01      	subs	r3, #1
 800050e:	61fb      	str	r3, [r7, #28]

    for (int j = low; j <= high- 1; j++)
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	61bb      	str	r3, [r7, #24]
 8000514:	e018      	b.n	8000548 <partition+0x56>
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	429a      	cmp	r2, r3
 8000524:	dd0d      	ble.n	8000542 <partition+0x50>
        {
            i++;    // increment index of smaller element
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	3301      	adds	r3, #1
 800052a:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	18d0      	adds	r0, r2, r3
 8000534:	69bb      	ldr	r3, [r7, #24]
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	4413      	add	r3, r2
 800053c:	4619      	mov	r1, r3
 800053e:	f7ff ffc3 	bl	80004c8 <swap>
    for (int j = low; j <= high- 1; j++)
 8000542:	69bb      	ldr	r3, [r7, #24]
 8000544:	3301      	adds	r3, #1
 8000546:	61bb      	str	r3, [r7, #24]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3b01      	subs	r3, #1
 800054c:	69ba      	ldr	r2, [r7, #24]
 800054e:	429a      	cmp	r2, r3
 8000550:	dde1      	ble.n	8000516 <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	3301      	adds	r3, #1
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	18d0      	adds	r0, r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	68fa      	ldr	r2, [r7, #12]
 8000562:	4413      	add	r3, r2
 8000564:	4619      	mov	r1, r3
 8000566:	f7ff ffaf 	bl	80004c8 <swap>
    return (i + 1);
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3301      	adds	r3, #1
}
 800056e:	4618      	mov	r0, r3
 8000570:	3720      	adds	r7, #32
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <quickSort>:

void quickSort(int arr[], int low, int high)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b086      	sub	sp, #24
 800057a:	af00      	add	r7, sp, #0
 800057c:	60f8      	str	r0, [r7, #12]
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	607a      	str	r2, [r7, #4]
    if (low < high)
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	da13      	bge.n	80005b2 <quickSort+0x3c>
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
    	int pi = partition(arr, low, high);
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f7ff ffaf 	bl	80004f2 <partition>
 8000594:	6178      	str	r0, [r7, #20]

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3b01      	subs	r3, #1
 800059a:	461a      	mov	r2, r3
 800059c:	68b9      	ldr	r1, [r7, #8]
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f7ff ffe9 	bl	8000576 <quickSort>
        quickSort(arr, pi + 1, high);
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	3301      	adds	r3, #1
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4619      	mov	r1, r3
 80005ac:	68f8      	ldr	r0, [r7, #12]
 80005ae:	f7ff ffe2 	bl	8000576 <quickSort>
    }
}
 80005b2:	bf00      	nop
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <get_median>:

int get_median(int *values){
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b084      	sub	sp, #16
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
	int n = sizeof(values)/sizeof(values[0]);
 80005c2:	2301      	movs	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
    quickSort(values, 0, n-1);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	461a      	mov	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff ffd1 	bl	8000576 <quickSort>
    return values[SIZE/2];
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	68db      	ldr	r3, [r3, #12]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80005e4:	b0b2      	sub	sp, #200	; 0xc8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	f040 848f 	bne.w	8000f16 <HAL_TIM_PeriodElapsedCallback+0x936>
    {
		if(iter < 10000){
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000600:	4293      	cmp	r3, r2
 8000602:	d807      	bhi.n	8000614 <HAL_TIM_PeriodElapsedCallback+0x34>
			iter++;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800060e:	801a      	strh	r2, [r3, #0]
			u /= 1000;
			//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, input*4095/5277);
		}
	}
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
}
 8000610:	f000 bc81 	b.w	8000f16 <HAL_TIM_PeriodElapsedCallback+0x936>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061e:	f003 fa7b 	bl	8003b18 <HAL_GPIO_WritePin>
			for(uint8_t i = 0; i<SIZE; i++){
 8000622:	2300      	movs	r3, #0
 8000624:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8000628:	e023      	b.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x92>
 800062a:	bf00      	nop
 800062c:	200000d8 	.word	0x200000d8
 8000630:	20000030 	.word	0x20000030
				value0[i] = (int)adc_buf0[i];
 8000634:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000638:	4aca      	ldr	r2, [pc, #808]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800063a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800063e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000648:	440b      	add	r3, r1
 800064a:	f843 2ca4 	str.w	r2, [r3, #-164]
				value1[i] = (int)adc_buf1[i];
 800064e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000652:	4ac5      	ldr	r2, [pc, #788]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000654:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000658:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000662:	440b      	add	r3, r1
 8000664:	f843 2cc0 	str.w	r2, [r3, #-192]
			for(uint8_t i = 0; i<SIZE; i++){
 8000668:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800066c:	3301      	adds	r3, #1
 800066e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8000672:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000676:	2b06      	cmp	r3, #6
 8000678:	d9dc      	bls.n	8000634 <HAL_TIM_PeriodElapsedCallback+0x54>
			y[0] = get_median(value0); y[0] *= 1075; y[0] /= 10000;
 800067a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff9b 	bl	80005ba <get_median>
 8000684:	4602      	mov	r2, r0
 8000686:	4bb9      	ldr	r3, [pc, #740]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	4bb8      	ldr	r3, [pc, #736]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f240 4233 	movw	r2, #1075	; 0x433
 8000692:	fb02 f303 	mul.w	r3, r2, r3
 8000696:	4ab5      	ldr	r2, [pc, #724]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000698:	6013      	str	r3, [r2, #0]
 800069a:	4bb4      	ldr	r3, [pc, #720]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4ab4      	ldr	r2, [pc, #720]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80006a0:	fb82 1203 	smull	r1, r2, r2, r3
 80006a4:	1312      	asrs	r2, r2, #12
 80006a6:	17db      	asrs	r3, r3, #31
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	4ab0      	ldr	r2, [pc, #704]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80006ac:	6013      	str	r3, [r2, #0]
			y[1] = get_median(value1);   y[1] *= 28900; y[1] /= 10000;
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff81 	bl	80005ba <get_median>
 80006b8:	4602      	mov	r2, r0
 80006ba:	4bac      	ldr	r3, [pc, #688]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	4bab      	ldr	r3, [pc, #684]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	f247 02e4 	movw	r2, #28900	; 0x70e4
 80006c6:	fb02 f303 	mul.w	r3, r2, r3
 80006ca:	4aa8      	ldr	r2, [pc, #672]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80006cc:	6053      	str	r3, [r2, #4]
 80006ce:	4ba7      	ldr	r3, [pc, #668]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	4aa7      	ldr	r2, [pc, #668]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80006d4:	fb82 1203 	smull	r1, r2, r2, r3
 80006d8:	1312      	asrs	r2, r2, #12
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	4aa3      	ldr	r2, [pc, #652]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80006e0:	6053      	str	r3, [r2, #4]
			int x0_prev = x[0];
 80006e2:	4ba4      	ldr	r3, [pc, #656]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			int x1_prev = x[1];
 80006ea:	4ba2      	ldr	r3, [pc, #648]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			x_est[0] = 97136*x0_prev - 978*x1_prev + 14878*u;    x_est[0] /= 100000;
 80006f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006f6:	4aa0      	ldr	r2, [pc, #640]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80006f8:	fb02 f203 	mul.w	r2, r2, r3
 80006fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000700:	499e      	ldr	r1, [pc, #632]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000702:	fb01 f303 	mul.w	r3, r1, r3
 8000706:	441a      	add	r2, r3
 8000708:	4b9d      	ldr	r3, [pc, #628]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f643 211e 	movw	r1, #14878	; 0x3a1e
 8000710:	fb01 f303 	mul.w	r3, r1, r3
 8000714:	4413      	add	r3, r2
 8000716:	4a9b      	ldr	r2, [pc, #620]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	4b9a      	ldr	r3, [pc, #616]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a9a      	ldr	r2, [pc, #616]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000720:	fb82 1203 	smull	r1, r2, r2, r3
 8000724:	1352      	asrs	r2, r2, #13
 8000726:	17db      	asrs	r3, r3, #31
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	4a96      	ldr	r2, [pc, #600]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800072c:	6013      	str	r3, [r2, #0]
			x_est[1] = 173187*x0_prev + 97046*x1_prev + 18083*u; x_est[1] /= 100000;
 800072e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000732:	4a96      	ldr	r2, [pc, #600]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000734:	fb02 f203 	mul.w	r2, r2, r3
 8000738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800073c:	4994      	ldr	r1, [pc, #592]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800073e:	fb01 f303 	mul.w	r3, r1, r3
 8000742:	441a      	add	r2, r3
 8000744:	4b8e      	ldr	r3, [pc, #568]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f244 61a3 	movw	r1, #18083	; 0x46a3
 800074c:	fb01 f303 	mul.w	r3, r1, r3
 8000750:	4413      	add	r3, r2
 8000752:	4a8c      	ldr	r2, [pc, #560]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8000754:	6053      	str	r3, [r2, #4]
 8000756:	4b8b      	ldr	r3, [pc, #556]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	4a8b      	ldr	r2, [pc, #556]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800075c:	fb82 1203 	smull	r1, r2, r2, r3
 8000760:	1352      	asrs	r2, r2, #13
 8000762:	17db      	asrs	r3, r3, #31
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	4a87      	ldr	r2, [pc, #540]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8000768:	6053      	str	r3, [r2, #4]
			int alpha = 500;
 800076a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800076e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			int alpha_bar = 1000-alpha;
 8000772:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000776:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800077a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			x[0] = alpha*y[0] + alpha_bar*x_est[0]; x[0] /= 1000;
 800077e:	4b7b      	ldr	r3, [pc, #492]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000786:	fb02 f203 	mul.w	r2, r2, r3
 800078a:	4b7e      	ldr	r3, [pc, #504]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000792:	fb01 f303 	mul.w	r3, r1, r3
 8000796:	4413      	add	r3, r2
 8000798:	4a76      	ldr	r2, [pc, #472]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b75      	ldr	r3, [pc, #468]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a7c      	ldr	r2, [pc, #496]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80007a2:	fb82 1203 	smull	r1, r2, r2, r3
 80007a6:	1192      	asrs	r2, r2, #6
 80007a8:	17db      	asrs	r3, r3, #31
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	4a71      	ldr	r2, [pc, #452]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80007ae:	6013      	str	r3, [r2, #0]
			x[1] = alpha*y[1] + alpha_bar*x_est[1]; x[1] /= 1000;
 80007b0:	4b6e      	ldr	r3, [pc, #440]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80007b8:	fb02 f203 	mul.w	r2, r2, r3
 80007bc:	4b71      	ldr	r3, [pc, #452]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80007c4:	fb01 f303 	mul.w	r3, r1, r3
 80007c8:	4413      	add	r3, r2
 80007ca:	4a6a      	ldr	r2, [pc, #424]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80007cc:	6053      	str	r3, [r2, #4]
 80007ce:	4b69      	ldr	r3, [pc, #420]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	4a70      	ldr	r2, [pc, #448]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80007d4:	fb82 1203 	smull	r1, r2, r2, r3
 80007d8:	1192      	asrs	r2, r2, #6
 80007da:	17db      	asrs	r3, r3, #31
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	4a65      	ldr	r2, [pc, #404]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80007e0:	6053      	str	r3, [r2, #4]
			int dx0 = x[0] - xs0;
 80007e2:	4b64      	ldr	r3, [pc, #400]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2232      	movs	r2, #50	; 0x32
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			int dx1 = x[1] - xs1;
 80007ee:	4b61      	ldr	r3, [pc, #388]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			int H11 = -1000*dx0-49999;              H11 = H11<=0;
 80007fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000800:	4a65      	ldr	r2, [pc, #404]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000802:	fb02 f303 	mul.w	r3, r2, r3
 8000806:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800080a:	3b4f      	subs	r3, #79	; 0x4f
 800080c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000810:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000814:	2b00      	cmp	r3, #0
 8000816:	bfd4      	ite	le
 8000818:	2301      	movle	r3, #1
 800081a:	2300      	movgt	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			int H12 = -948*dx0+317*dx1-246980;      H12 = H12<=0;
 8000822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000826:	4a5d      	ldr	r2, [pc, #372]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8000828:	fb02 f203 	mul.w	r2, r2, r3
 800082c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000830:	f240 113d 	movw	r1, #317	; 0x13d
 8000834:	fb01 f303 	mul.w	r3, r1, r3
 8000838:	4413      	add	r3, r2
 800083a:	f5a3 3371 	sub.w	r3, r3, #246784	; 0x3c400
 800083e:	3bc4      	subs	r3, #196	; 0xc4
 8000840:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000844:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000848:	2b00      	cmp	r3, #0
 800084a:	bfd4      	ite	le
 800084c:	2301      	movle	r3, #1
 800084e:	2300      	movgt	r3, #0
 8000850:	b2db      	uxtb	r3, r3
 8000852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			int H13 = 948*dx0-317*dx1-740942;       H13 = H13<=0;
 8000856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800085a:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 800085e:	fb02 f203 	mul.w	r2, r2, r3
 8000862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000866:	f46f 719e 	mvn.w	r1, #316	; 0x13c
 800086a:	fb01 f303 	mul.w	r3, r1, r3
 800086e:	4413      	add	r3, r2
 8000870:	f5a3 2334 	sub.w	r3, r3, #737280	; 0xb4000
 8000874:	f6a3 634e 	subw	r3, r3, #3662	; 0xe4e
 8000878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800087c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000880:	2b00      	cmp	r3, #0
 8000882:	bfd4      	ite	le
 8000884:	2301      	movle	r3, #1
 8000886:	2300      	movgt	r3, #0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			int H14 = 997*dx0+69*dx1-64337;         H14 = H14<=0;
 800088e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000892:	f240 32e5 	movw	r2, #997	; 0x3e5
 8000896:	fb02 f103 	mul.w	r1, r2, r3
 800089a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800089e:	4613      	mov	r3, r2
 80008a0:	011b      	lsls	r3, r3, #4
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	f5a3 437b 	sub.w	r3, r3, #64256	; 0xfb00
 80008ae:	3b51      	subs	r3, #81	; 0x51
 80008b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80008b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bfd4      	ite	le
 80008bc:	2301      	movle	r3, #1
 80008be:	2300      	movgt	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			int H15 = -997*dx0-69*dx1-126088;       H15 = H15<=0;
 80008c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80008ca:	f46f 7279 	mvn.w	r2, #996	; 0x3e4
 80008ce:	fb02 f203 	mul.w	r2, r2, r3
 80008d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008d6:	f06f 0144 	mvn.w	r1, #68	; 0x44
 80008da:	fb01 f303 	mul.w	r3, r1, r3
 80008de:	4413      	add	r3, r2
 80008e0:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80008e4:	3b88      	subs	r3, #136	; 0x88
 80008e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80008ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bfd4      	ite	le
 80008f2:	2301      	movle	r3, #1
 80008f4:	2300      	movgt	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			int H16 = 1000*dx0-150000;              H16 = H16<=0;
 80008fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000904:	fb02 f303 	mul.w	r3, r2, r3
 8000908:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 800090c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000914:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000918:	2b00      	cmp	r3, #0
 800091a:	bfd4      	ite	le
 800091c:	2301      	movle	r3, #1
 800091e:	2300      	movgt	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			if(H11 && H12 && H13 && H14 && H15 && H16){
 8000926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 8099 	beq.w	8000a62 <HAL_TIM_PeriodElapsedCallback+0x482>
 8000930:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 8094 	beq.w	8000a62 <HAL_TIM_PeriodElapsedCallback+0x482>
 800093a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800093e:	2b00      	cmp	r3, #0
 8000940:	f000 808f 	beq.w	8000a62 <HAL_TIM_PeriodElapsedCallback+0x482>
 8000944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 808a 	beq.w	8000a62 <HAL_TIM_PeriodElapsedCallback+0x482>
 800094e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000952:	2b00      	cmp	r3, #0
 8000954:	f000 8085 	beq.w	8000a62 <HAL_TIM_PeriodElapsedCallback+0x482>
 8000958:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 8080 	beq.w	8000a62 <HAL_TIM_PeriodElapsedCallback+0x482>
 8000962:	e01d      	b.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 8000964:	200002dc 	.word	0x200002dc
 8000968:	20000118 	.word	0x20000118
 800096c:	2000003c 	.word	0x2000003c
 8000970:	68db8bad 	.word	0x68db8bad
 8000974:	20000034 	.word	0x20000034
 8000978:	00017b70 	.word	0x00017b70
 800097c:	fffffc2e 	.word	0xfffffc2e
 8000980:	2000002c 	.word	0x2000002c
 8000984:	20000044 	.word	0x20000044
 8000988:	14f8b589 	.word	0x14f8b589
 800098c:	0002a483 	.word	0x0002a483
 8000990:	00017b16 	.word	0x00017b16
 8000994:	10624dd3 	.word	0x10624dd3
 8000998:	fffffc18 	.word	0xfffffc18
 800099c:	fffffc4c 	.word	0xfffffc4c
				u = -5237*dx0; u -= 366*dx1;
 80009a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80009a4:	4a9e      	ldr	r2, [pc, #632]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80009a6:	fb02 f303 	mul.w	r3, r2, r3
 80009aa:	4a9e      	ldr	r2, [pc, #632]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x644>)
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009b2:	4a9d      	ldr	r2, [pc, #628]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x648>)
 80009b4:	fb02 f203 	mul.w	r2, r2, r3
 80009b8:	4b9a      	ldr	r3, [pc, #616]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x644>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	4a99      	ldr	r2, [pc, #612]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x644>)
 80009c0:	6013      	str	r3, [r2, #0]
				if(!settled){
 80009c2:	4b9a      	ldr	r3, [pc, #616]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	f083 0301 	eor.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d021      	beq.n	8000a14 <HAL_TIM_PeriodElapsedCallback+0x434>
					int diff = x[0]-x0_prev;
 80009d0:	4b97      	ldr	r3, [pc, #604]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x650>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					if(diff > -100 && diff < 100){
 80009de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009e2:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80009e6:	db11      	blt.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x42c>
 80009e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009ec:	2b63      	cmp	r3, #99	; 0x63
 80009ee:	dc0d      	bgt.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x42c>
						settling_iter++;
 80009f0:	4b90      	ldr	r3, [pc, #576]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x654>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b8e      	ldr	r3, [pc, #568]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x654>)
 80009fa:	701a      	strb	r2, [r3, #0]
						if(settling_iter == 100){
 80009fc:	4b8d      	ldr	r3, [pc, #564]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x654>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b64      	cmp	r3, #100	; 0x64
 8000a02:	d12d      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x480>
							settled = true;
 8000a04:	4b89      	ldr	r3, [pc, #548]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
						if(settling_iter == 100){
 8000a0a:	e029      	b.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x480>
						settling_iter = 0;
 8000a0c:	4b89      	ldr	r3, [pc, #548]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
				if(!settled){
 8000a12:	e24d      	b.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x8d0>
					int error = 5000-y[1];
 8000a14:	4b88      	ldr	r3, [pc, #544]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					integral += error;
 8000a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a26:	4619      	mov	r1, r3
 8000a28:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000a2c:	4b83      	ldr	r3, [pc, #524]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8000a2e:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000a32:	eb1b 0301 	adds.w	r3, fp, r1
 8000a36:	eb4c 0402 	adc.w	r4, ip, r2
 8000a3a:	4a80      	ldr	r2, [pc, #512]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8000a3c:	e9c2 3400 	strd	r3, r4, [r2]
					u += 40*integral;
 8000a40:	4b7e      	ldr	r3, [pc, #504]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8000a42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a46:	461a      	mov	r2, r3
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b74      	ldr	r3, [pc, #464]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b72      	ldr	r3, [pc, #456]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8000a5c:	601a      	str	r2, [r3, #0]
				if(!settled){
 8000a5e:	e227      	b.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x8d0>
 8000a60:	e226      	b.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x8d0>
				int H51 = 998*dx0+70*dx1+126100;  H51 = H51<=0;
 8000a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a66:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000a6a:	fb02 f203 	mul.w	r2, r2, r3
 8000a6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a72:	2146      	movs	r1, #70	; 0x46
 8000a74:	fb01 f303 	mul.w	r3, r1, r3
 8000a78:	4413      	add	r3, r2
 8000a7a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8000a7e:	3394      	adds	r3, #148	; 0x94
 8000a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bfd4      	ite	le
 8000a8c:	2301      	movle	r3, #1
 8000a8e:	2300      	movgt	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				int H52 = -1000*dx0-50000;       H52 = H52<=0;
 8000a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a9a:	4a69      	ldr	r2, [pc, #420]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8000a9c:	fb02 f303 	mul.w	r3, r2, r3
 8000aa0:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000aa4:	3b50      	subs	r3, #80	; 0x50
 8000aa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bfd4      	ite	le
 8000ab2:	2301      	movle	r3, #1
 8000ab4:	2300      	movgt	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				int H53 = -1000*dx1-5000000;     H53 = H53<=0;
 8000abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ac0:	4a5f      	ldr	r2, [pc, #380]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8000ac2:	fb02 f203 	mul.w	r2, r2, r3
 8000ac6:	4b5f      	ldr	r3, [pc, #380]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8000ac8:	4413      	add	r3, r2
 8000aca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bfd4      	ite	le
 8000ad2:	2301      	movle	r3, #1
 8000ad4:	2300      	movgt	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	67fb      	str	r3, [r7, #124]	; 0x7c
				int H54 = 1000*dx0-10*dx1-53000;  H54 = H54<=0;
 8000ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ade:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae2:	fb02 f203 	mul.w	r2, r2, r3
 8000ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000aea:	f06f 0109 	mvn.w	r1, #9
 8000aee:	fb01 f303 	mul.w	r3, r1, r3
 8000af2:	4413      	add	r3, r2
 8000af4:	f5a3 434f 	sub.w	r3, r3, #52992	; 0xcf00
 8000af8:	3b08      	subs	r3, #8
 8000afa:	67bb      	str	r3, [r7, #120]	; 0x78
 8000afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bfd4      	ite	le
 8000b02:	2301      	movle	r3, #1
 8000b04:	2300      	movgt	r3, #0
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	67bb      	str	r3, [r7, #120]	; 0x78
				if(H51 && H52 && H53 && H54){
 8000b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00d      	beq.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x54e>
 8000b12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d009      	beq.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x54e>
 8000b1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x54e>
 8000b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x54e>
					u = 662000;
 8000b26:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8000b28:	4a47      	ldr	r2, [pc, #284]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	e1c0      	b.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x8d0>
					int H31 = -1000*dx1-5000000;         H31 = H31<=0;
 8000b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b32:	4a43      	ldr	r2, [pc, #268]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8000b34:	fb02 f203 	mul.w	r2, r2, r3
 8000b38:	4b42      	ldr	r3, [pc, #264]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	677b      	str	r3, [r7, #116]	; 0x74
 8000b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	bfd4      	ite	le
 8000b44:	2301      	movle	r3, #1
 8000b46:	2300      	movgt	r3, #0
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	677b      	str	r3, [r7, #116]	; 0x74
					int H32 = -1000*dx0+10*dx1+53000;     H32 = H32<=0;
 8000b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b50:	4a3b      	ldr	r2, [pc, #236]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8000b52:	fb02 f103 	mul.w	r1, r2, r3
 8000b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	440b      	add	r3, r1
 8000b64:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8000b68:	3308      	adds	r3, #8
 8000b6a:	673b      	str	r3, [r7, #112]	; 0x70
 8000b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bfd4      	ite	le
 8000b72:	2301      	movle	r3, #1
 8000b74:	2300      	movgt	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	673b      	str	r3, [r7, #112]	; 0x70
					int H33 = -948*dx0+318*dx1+740900;    H33 = H33<=0;
 8000b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b7e:	4a33      	ldr	r2, [pc, #204]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x66c>)
 8000b80:	fb02 f203 	mul.w	r2, r2, r3
 8000b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b88:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000b8c:	fb01 f303 	mul.w	r3, r1, r3
 8000b90:	4413      	add	r3, r2
 8000b92:	f503 2334 	add.w	r3, r3, #737280	; 0xb4000
 8000b96:	f603 6324 	addw	r3, r3, #3620	; 0xe24
 8000b9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	bfd4      	ite	le
 8000ba2:	2301      	movle	r3, #1
 8000ba4:	2300      	movgt	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
					int H34 = 1000*dx0-150000;           H34 = H34<=0;
 8000baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb2:	fb02 f303 	mul.w	r3, r2, r3
 8000bb6:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 8000bba:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8000bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	bfd4      	ite	le
 8000bc6:	2301      	movle	r3, #1
 8000bc8:	2300      	movgt	r3, #0
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	66bb      	str	r3, [r7, #104]	; 0x68
					if(H31 && H32 && H33 && H34){
 8000bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d03f      	beq.n	8000c54 <HAL_TIM_PeriodElapsedCallback+0x674>
 8000bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d03c      	beq.n	8000c54 <HAL_TIM_PeriodElapsedCallback+0x674>
 8000bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d039      	beq.n	8000c54 <HAL_TIM_PeriodElapsedCallback+0x674>
 8000be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d036      	beq.n	8000c54 <HAL_TIM_PeriodElapsedCallback+0x674>
						u = -6528*dx0; u += 66*dx1; u += 1000000;
 8000be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	015b      	lsls	r3, r3, #5
 8000bfc:	4413      	add	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 8000c14:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000c18:	4a02      	ldr	r2, [pc, #8]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	e148      	b.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x8d0>
 8000c1e:	bf00      	nop
 8000c20:	ffffeb8b 	.word	0xffffeb8b
 8000c24:	2000002c 	.word	0x2000002c
 8000c28:	fffffe92 	.word	0xfffffe92
 8000c2c:	20000058 	.word	0x20000058
 8000c30:	20000034 	.word	0x20000034
 8000c34:	20000059 	.word	0x20000059
 8000c38:	2000003c 	.word	0x2000003c
 8000c3c:	20000050 	.word	0x20000050
 8000c40:	fffffc18 	.word	0xfffffc18
 8000c44:	ffb3b4c0 	.word	0xffb3b4c0
 8000c48:	000a19f0 	.word	0x000a19f0
 8000c4c:	fffffc4c 	.word	0xfffffc4c
 8000c50:	ffffe680 	.word	0xffffe680
						int H21 = -1000*dx0-50000;          H21 = H21<=0;
 8000c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c58:	4ab1      	ldr	r2, [pc, #708]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8000c5a:	fb02 f303 	mul.w	r3, r2, r3
 8000c5e:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000c62:	3b50      	subs	r3, #80	; 0x50
 8000c64:	667b      	str	r3, [r7, #100]	; 0x64
 8000c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bfd4      	ite	le
 8000c6c:	2301      	movle	r3, #1
 8000c6e:	2300      	movgt	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	667b      	str	r3, [r7, #100]	; 0x64
						int H22 = 489*dx0+872*dx1-1533900;  H22 = H22<=0;
 8000c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c78:	f240 12e9 	movw	r2, #489	; 0x1e9
 8000c7c:	fb02 f203 	mul.w	r2, r2, r3
 8000c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c84:	f44f 715a 	mov.w	r1, #872	; 0x368
 8000c88:	fb01 f303 	mul.w	r3, r1, r3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	f5a3 13bb 	sub.w	r3, r3, #1531904	; 0x176000
 8000c92:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 8000c96:	663b      	str	r3, [r7, #96]	; 0x60
 8000c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bfd4      	ite	le
 8000c9e:	2301      	movle	r3, #1
 8000ca0:	2300      	movgt	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	663b      	str	r3, [r7, #96]	; 0x60
						int H23 = 1000*dx0-10*dx1-300;      H23 = H23<=0;
 8000ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000caa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cae:	fb02 f203 	mul.w	r2, r2, r3
 8000cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000cb6:	f06f 0109 	mvn.w	r1, #9
 8000cba:	fb01 f303 	mul.w	r3, r1, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bfd4      	ite	le
 8000ccc:	2301      	movle	r3, #1
 8000cce:	2300      	movgt	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
						int H24 = 948*dx0-318*dx1+247000;   H24 = H24<=0;
 8000cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cd8:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 8000cdc:	fb02 f203 	mul.w	r2, r2, r3
 8000ce0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ce4:	498f      	ldr	r1, [pc, #572]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8000ce6:	fb01 f303 	mul.w	r3, r1, r3
 8000cea:	4413      	add	r3, r2
 8000cec:	f503 3371 	add.w	r3, r3, #246784	; 0x3c400
 8000cf0:	33d8      	adds	r3, #216	; 0xd8
 8000cf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8000cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bfd4      	ite	le
 8000cfa:	2301      	movle	r3, #1
 8000cfc:	2300      	movgt	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	65bb      	str	r3, [r7, #88]	; 0x58
						if(H21 && H22 && H23 && H24){
 8000d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d024      	beq.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x772>
 8000d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d021      	beq.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x772>
 8000d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d01e      	beq.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x772>
 8000d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d01b      	beq.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x772>
							u = -6527*dx0; u += 66*dx1;  u -= 335700;
 8000d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d1e:	4a82      	ldr	r2, [pc, #520]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	4a81      	ldr	r2, [pc, #516]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	015b      	lsls	r3, r3, #5
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b7d      	ldr	r3, [pc, #500]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a7b      	ldr	r2, [pc, #492]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	4b7a      	ldr	r3, [pc, #488]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f5a3 23a3 	sub.w	r3, r3, #333824	; 0x51800
 8000d48:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 8000d4c:	4a77      	ldr	r2, [pc, #476]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e0ae      	b.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x8d0>
							int H41 = 921*dx0+390*dx1-698900;             H41 = H41<=0;
 8000d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d56:	f240 3299 	movw	r2, #921	; 0x399
 8000d5a:	fb02 f203 	mul.w	r2, r2, r3
 8000d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d62:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8000d66:	fb01 f303 	mul.w	r3, r1, r3
 8000d6a:	4413      	add	r3, r2
 8000d6c:	f5a3 232a 	sub.w	r3, r3, #696320	; 0xaa000
 8000d70:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000d74:	657b      	str	r3, [r7, #84]	; 0x54
 8000d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	bfd4      	ite	le
 8000d7c:	2301      	movle	r3, #1
 8000d7e:	2300      	movgt	r3, #0
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	657b      	str	r3, [r7, #84]	; 0x54
							int H42 = 973*dx0+229*dx1-447200;             H42 = H42<=0;
 8000d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d88:	f240 32cd 	movw	r2, #973	; 0x3cd
 8000d8c:	fb02 f203 	mul.w	r2, r2, r3
 8000d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d94:	21e5      	movs	r1, #229	; 0xe5
 8000d96:	fb01 f303 	mul.w	r3, r1, r3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	f5a3 23da 	sub.w	r3, r3, #446464	; 0x6d000
 8000da0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000da4:	653b      	str	r3, [r7, #80]	; 0x50
 8000da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bfd4      	ite	le
 8000dac:	2301      	movle	r3, #1
 8000dae:	2300      	movgt	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	653b      	str	r3, [r7, #80]	; 0x50
							int H43 = 988*dx0+157*dx1-354000;             H43 = H43<=0;
 8000db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000db8:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 8000dbc:	fb02 f203 	mul.w	r2, r2, r3
 8000dc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000dc4:	219d      	movs	r1, #157	; 0x9d
 8000dc6:	fb01 f303 	mul.w	r3, r1, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	f5a3 23ac 	sub.w	r3, r3, #352256	; 0x56000
 8000dd0:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8000dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bfd4      	ite	le
 8000ddc:	2301      	movle	r3, #1
 8000dde:	2300      	movgt	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	64fb      	str	r3, [r7, #76]	; 0x4c
							int H44 = -1000*dx0+10*dx1+300;               H43 = H43<=0;
 8000de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000de8:	4a4d      	ldr	r2, [pc, #308]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8000dea:	fb02 f103 	mul.w	r1, r2, r3
 8000dee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bfd4      	ite	le
 8000e08:	2301      	movle	r3, #1
 8000e0a:	2300      	movgt	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
							int H45 = -998*dx0-70*dx1+64300;              H45 = H45<=0;
 8000e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e14:	4a46      	ldr	r2, [pc, #280]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8000e16:	fb02 f203 	mul.w	r2, r2, r3
 8000e1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e1e:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8000e22:	fb01 f303 	mul.w	r3, r1, r3
 8000e26:	4413      	add	r3, r2
 8000e28:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8000e2c:	332c      	adds	r3, #44	; 0x2c
 8000e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8000e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bfd4      	ite	le
 8000e36:	2301      	movle	r3, #1
 8000e38:	2300      	movgt	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	647b      	str	r3, [r7, #68]	; 0x44
							int H46 = 1000*dx0-150000;                    H46 = H46<=0;
 8000e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 8000e4e:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000e52:	643b      	str	r3, [r7, #64]	; 0x40
 8000e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bfd4      	ite	le
 8000e5a:	2301      	movle	r3, #1
 8000e5c:	2300      	movgt	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	643b      	str	r3, [r7, #64]	; 0x40
							if(H41 && H42 && H43 && H44 && H45 && H46){
 8000e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d012      	beq.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x8ae>
 8000e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00f      	beq.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x8ae>
 8000e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00c      	beq.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x8ae>
 8000e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d009      	beq.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x8ae>
 8000e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x8ae>
 8000e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x8ae>
								u = -338000;
 8000e86:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000e88:	4a2a      	ldr	r2, [pc, #168]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e010      	b.n	8000eb0 <HAL_TIM_PeriodElapsedCallback+0x8d0>
								u = -4854*dx0; u += 53*dx1;
 8000e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e92:	4a29      	ldr	r2, [pc, #164]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8000e94:	fb02 f303 	mul.w	r3, r2, r3
 8000e98:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ea0:	2235      	movs	r2, #53	; 0x35
 8000ea2:	fb02 f203 	mul.w	r2, r2, r3
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000eae:	6013      	str	r3, [r2, #0]
			u += us;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000eba:	6013      	str	r3, [r2, #0]
			int input = u*COUNTER_PERIOD/1000000;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8000eca:	fb82 1203 	smull	r1, r2, r2, r3
 8000ece:	1492      	asrs	r2, r2, #18
 8000ed0:	17db      	asrs	r3, r3, #31
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			if(input < 0) input = 0;
 8000ed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	da02      	bge.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0x906>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			if(input > COUNTER_PERIOD) input = COUNTER_PERIOD;
 8000ee6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000eea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000eee:	db03      	blt.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0x918>
 8000ef0:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			htim2.Instance->CCR2 = input;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
			u /= 1000;
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8000f08:	fb82 1203 	smull	r1, r2, r2, r3
 8000f0c:	1192      	asrs	r2, r2, #6
 8000f0e:	17db      	asrs	r3, r3, #31
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000f14:	6013      	str	r3, [r2, #0]
}
 8000f16:	bf00      	nop
 8000f18:	37c8      	adds	r7, #200	; 0xc8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000f20:	fffffc18 	.word	0xfffffc18
 8000f24:	fffffec2 	.word	0xfffffec2
 8000f28:	ffffe681 	.word	0xffffe681
 8000f2c:	2000002c 	.word	0x2000002c
 8000f30:	fffffc1a 	.word	0xfffffc1a
 8000f34:	fffad7b0 	.word	0xfffad7b0
 8000f38:	ffffed0a 	.word	0xffffed0a
 8000f3c:	000527ec 	.word	0x000527ec
 8000f40:	431bde83 	.word	0x431bde83
 8000f44:	200001d4 	.word	0x200001d4
 8000f48:	10624dd3 	.word	0x10624dd3

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fdfc 	bl	8001b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f83c 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 fade 	bl	8001518 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5c:	f000 fab6 	bl	80014cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f60:	f000 fa84 	bl	800146c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f64:	f000 f8bc 	bl	80010e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f68:	f000 f934 	bl	80011d4 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000f6c:	f000 f998 	bl	80012a0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000f70:	f000 f9d4 	bl	800131c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f74:	f000 fa2c 	bl	80013d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <main+0x68>)
 8000f7c:	f002 f8c5 	bl	800310a <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000f80:	2110      	movs	r1, #16
 8000f82:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <main+0x68>)
 8000f84:	f002 f8c1 	bl	800310a <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf0, SIZE);
 8000f88:	2207      	movs	r2, #7
 8000f8a:	490b      	ldr	r1, [pc, #44]	; (8000fb8 <main+0x6c>)
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <main+0x70>)
 8000f8e:	f001 f993 	bl	80022b8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf1, SIZE);
 8000f92:	2207      	movs	r2, #7
 8000f94:	490a      	ldr	r1, [pc, #40]	; (8000fc0 <main+0x74>)
 8000f96:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <main+0x78>)
 8000f98:	f001 f98e 	bl	80022b8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <main+0x7c>)
 8000f9e:	f004 f8fd 	bl	800519c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <main+0x80>)
 8000fa6:	f004 f94f 	bl	8005248 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <main+0x80>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //char msg[20];
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <main+0x66>
 8000fb4:	20000060 	.word	0x20000060
 8000fb8:	200002dc 	.word	0x200002dc
 8000fbc:	20000074 	.word	0x20000074
 8000fc0:	20000118 	.word	0x20000118
 8000fc4:	20000128 	.word	0x20000128
 8000fc8:	200000d8 	.word	0x200000d8
 8000fcc:	200001d4 	.word	0x200001d4

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0b8      	sub	sp, #224	; 0xe0
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fda:	2244      	movs	r2, #68	; 0x44
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f005 fec0 	bl	8006d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2288      	movs	r2, #136	; 0x88
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 feb2 	bl	8006d64 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100e:	2310      	movs	r3, #16
 8001010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001026:	230a      	movs	r3, #10
 8001028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800102c:	2307      	movs	r3, #7
 800102e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001042:	4618      	mov	r0, r3
 8001044:	f002 fde4 	bl	8003c10 <HAL_RCC_OscConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800104e:	f000 facd 	bl	80015ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001052:	230f      	movs	r3, #15
 8001054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001058:	2303      	movs	r3, #3
 800105a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001070:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001074:	2104      	movs	r1, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f003 f9b0 	bl	80043dc <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001082:	f000 fab3 	bl	80015ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8001086:	f244 0302 	movw	r3, #16386	; 0x4002
 800108a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800108c:	2300      	movs	r3, #0
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001090:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001094:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001096:	2302      	movs	r3, #2
 8001098:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800109e:	2308      	movs	r3, #8
 80010a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010b2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 fb94 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80010c2:	f000 fa93 	bl	80015ec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ca:	f002 fd4b 	bl	8003b64 <HAL_PWREx_ControlVoltageScaling>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80010d4:	f000 fa8a 	bl	80015ec <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	37e0      	adds	r7, #224	; 0xe0
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <MX_ADC1_Init+0xe8>)
 8001104:	4a31      	ldr	r2, [pc, #196]	; (80011cc <MX_ADC1_Init+0xec>)
 8001106:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <MX_ADC1_Init+0xe8>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <MX_ADC1_Init+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001114:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <MX_ADC1_Init+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <MX_ADC1_Init+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <MX_ADC1_Init+0xe8>)
 8001122:	2204      	movs	r2, #4
 8001124:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <MX_ADC1_Init+0xe8>)
 8001128:	2200      	movs	r2, #0
 800112a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_ADC1_Init+0xe8>)
 800112e:	2201      	movs	r2, #1
 8001130:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <MX_ADC1_Init+0xe8>)
 8001134:	2201      	movs	r2, #1
 8001136:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <MX_ADC1_Init+0xe8>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_ADC1_Init+0xe8>)
 8001142:	2201      	movs	r2, #1
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_ADC1_Init+0xe8>)
 8001148:	2200      	movs	r2, #0
 800114a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_ADC1_Init+0xe8>)
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_ADC1_Init+0xe8>)
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_ADC1_Init+0xe8>)
 800115c:	2200      	movs	r2, #0
 800115e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_ADC1_Init+0xe8>)
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001168:	4817      	ldr	r0, [pc, #92]	; (80011c8 <MX_ADC1_Init+0xe8>)
 800116a:	f000 ff51 	bl	8002010 <HAL_ADC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001174:	f000 fa3a 	bl	80015ec <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <MX_ADC1_Init+0xe8>)
 8001184:	f001 fde2 	bl	8002d4c <HAL_ADCEx_MultiModeConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800118e:	f000 fa2d 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_ADC1_Init+0xf0>)
 8001194:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001196:	2306      	movs	r3, #6
 8001198:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800119a:	2305      	movs	r3, #5
 800119c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800119e:	237f      	movs	r3, #127	; 0x7f
 80011a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a2:	2304      	movs	r3, #4
 80011a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_ADC1_Init+0xe8>)
 80011b0:	f001 f954 	bl	800245c <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80011ba:	f000 fa17 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000128 	.word	0x20000128
 80011cc:	50040000 	.word	0x50040000
 80011d0:	14f00020 	.word	0x14f00020

080011d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011da:	463b      	mov	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
 80011e8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <MX_ADC2_Init+0xc0>)
 80011ec:	4a2a      	ldr	r2, [pc, #168]	; (8001298 <MX_ADC2_Init+0xc4>)
 80011ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011f0:	4b28      	ldr	r3, [pc, #160]	; (8001294 <MX_ADC2_Init+0xc0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011f6:	4b27      	ldr	r3, [pc, #156]	; (8001294 <MX_ADC2_Init+0xc0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fc:	4b25      	ldr	r3, [pc, #148]	; (8001294 <MX_ADC2_Init+0xc0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <MX_ADC2_Init+0xc0>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <MX_ADC2_Init+0xc0>)
 800120a:	2204      	movs	r2, #4
 800120c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800120e:	4b21      	ldr	r3, [pc, #132]	; (8001294 <MX_ADC2_Init+0xc0>)
 8001210:	2200      	movs	r2, #0
 8001212:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_ADC2_Init+0xc0>)
 8001216:	2201      	movs	r2, #1
 8001218:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_ADC2_Init+0xc0>)
 800121c:	2201      	movs	r2, #1
 800121e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_ADC2_Init+0xc0>)
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_ADC2_Init+0xc0>)
 800122a:	2201      	movs	r2, #1
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_ADC2_Init+0xc0>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_ADC2_Init+0xc0>)
 8001236:	2200      	movs	r2, #0
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_ADC2_Init+0xc0>)
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_ADC2_Init+0xc0>)
 8001244:	2200      	movs	r2, #0
 8001246:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_ADC2_Init+0xc0>)
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001250:	4810      	ldr	r0, [pc, #64]	; (8001294 <MX_ADC2_Init+0xc0>)
 8001252:	f000 fedd 	bl	8002010 <HAL_ADC_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 800125c:	f000 f9c6 	bl	80015ec <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_ADC2_Init+0xc8>)
 8001262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001264:	2306      	movs	r3, #6
 8001266:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001268:	2305      	movs	r3, #5
 800126a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800126c:	237f      	movs	r3, #127	; 0x7f
 800126e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001270:	2304      	movs	r3, #4
 8001272:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_ADC2_Init+0xc0>)
 800127e:	f001 f8ed 	bl	800245c <HAL_ADC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001288:	f000 f9b0 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000074 	.word	0x20000074
 8001298:	50040100 	.word	0x50040100
 800129c:	19200040 	.word	0x19200040

080012a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2224      	movs	r2, #36	; 0x24
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f005 fd59 	bl	8006d64 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_DAC1_Init+0x74>)
 80012b4:	4a18      	ldr	r2, [pc, #96]	; (8001318 <MX_DAC1_Init+0x78>)
 80012b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012b8:	4816      	ldr	r0, [pc, #88]	; (8001314 <MX_DAC1_Init+0x74>)
 80012ba:	f001 ff04 	bl	80030c6 <HAL_DAC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012c4:	f000 f992 	bl	80015ec <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	4619      	mov	r1, r3
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_DAC1_Init+0x74>)
 80012e4:	f001 ff5e 	bl	80031a4 <HAL_DAC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80012ee:	f000 f97d 	bl	80015ec <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2210      	movs	r2, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_DAC1_Init+0x74>)
 80012fe:	f001 ff51 	bl	80031a4 <HAL_DAC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001308:	f000 f970 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000060 	.word	0x20000060
 8001318:	40007400 	.word	0x40007400

0800131c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_TIM2_Init+0xb0>)
 8001342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001346:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_TIM2_Init+0xb0>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_TIM2_Init+0xb0>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_TIM2_Init+0xb0>)
 8001356:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800135a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_TIM2_Init+0xb0>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_TIM2_Init+0xb0>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <MX_TIM2_Init+0xb0>)
 800136a:	f003 ff41 	bl	80051f0 <HAL_TIM_PWM_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001374:	f000 f93a 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_TIM2_Init+0xb0>)
 8001388:	f004 ff00 	bl	800618c <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001392:	f000 f92b 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001396:	2360      	movs	r3, #96	; 0x60
 8001398:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	2204      	movs	r2, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <MX_TIM2_Init+0xb0>)
 80013ae:	f004 f8c3 	bl	8005538 <HAL_TIM_PWM_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80013b8:	f000 f918 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013bc:	4803      	ldr	r0, [pc, #12]	; (80013cc <MX_TIM2_Init+0xb0>)
 80013be:	f000 faa1 	bl	8001904 <HAL_TIM_MspPostInit>

}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200001d4 	.word	0x200001d4

080013d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_TIM3_Init+0x94>)
 80013f0:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <MX_TIM3_Init+0x98>)
 80013f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_TIM3_Init+0x94>)
 80013f6:	224f      	movs	r2, #79	; 0x4f
 80013f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_TIM3_Init+0x94>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_TIM3_Init+0x94>)
 8001402:	2263      	movs	r2, #99	; 0x63
 8001404:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_TIM3_Init+0x94>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_TIM3_Init+0x94>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001412:	4814      	ldr	r0, [pc, #80]	; (8001464 <MX_TIM3_Init+0x94>)
 8001414:	f003 fe96 	bl	8005144 <HAL_TIM_Base_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800141e:	f000 f8e5 	bl	80015ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001426:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_TIM3_Init+0x94>)
 8001430:	f004 f99a 	bl	8005768 <HAL_TIM_ConfigClockSource>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800143a:	f000 f8d7 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	4619      	mov	r1, r3
 800144a:	4806      	ldr	r0, [pc, #24]	; (8001464 <MX_TIM3_Init+0x94>)
 800144c:	f004 fe9e 	bl	800618c <HAL_TIMEx_MasterConfigSynchronization>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001456:	f000 f8c9 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200000d8 	.word	0x200000d8
 8001468:	40000400 	.word	0x40000400

0800146c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <MX_USART2_UART_Init+0x5c>)
 8001474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001478:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800147c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_USART2_UART_Init+0x58>)
 80014b0:	f004 ff12 	bl	80062d8 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014ba:	f000 f897 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000214 	.word	0x20000214
 80014c8:	40004400 	.word	0x40004400

080014cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_DMA_Init+0x48>)
 80014d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d6:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <MX_DMA_Init+0x48>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6493      	str	r3, [r2, #72]	; 0x48
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <MX_DMA_Init+0x48>)
 80014e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	200b      	movs	r0, #11
 80014f0:	f001 fdb3 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014f4:	200b      	movs	r0, #11
 80014f6:	f001 fdcc 	bl	8003092 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	200c      	movs	r0, #12
 8001500:	f001 fdab 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001504:	200c      	movs	r0, #12
 8001506:	f001 fdc4 	bl	8003092 <HAL_NVIC_EnableIRQ>

}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <MX_GPIO_Init+0xc8>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a2b      	ldr	r2, [pc, #172]	; (80015e0 <MX_GPIO_Init+0xc8>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <MX_GPIO_Init+0xc8>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <MX_GPIO_Init+0xc8>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a25      	ldr	r2, [pc, #148]	; (80015e0 <MX_GPIO_Init+0xc8>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <MX_GPIO_Init+0xc8>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <MX_GPIO_Init+0xc8>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <MX_GPIO_Init+0xc8>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <MX_GPIO_Init+0xc8>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_GPIO_Init+0xc8>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <MX_GPIO_Init+0xc8>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_GPIO_Init+0xc8>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001598:	f002 fabe 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800159c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_GPIO_Init+0xcc>)
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <MX_GPIO_Init+0xd0>)
 80015b2:	f002 f909 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f002 f8f9 	bl	80037c8 <HAL_GPIO_Init>

}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	10210000 	.word	0x10210000
 80015e8:	48000800 	.word	0x48000800

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_MspInit+0x44>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <HAL_MspInit+0x44>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6613      	str	r3, [r2, #96]	; 0x60
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_MspInit+0x44>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_MspInit+0x44>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_MspInit+0x44>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6593      	str	r3, [r2, #88]	; 0x58
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_MspInit+0x44>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08c      	sub	sp, #48	; 0x30
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a5f      	ldr	r2, [pc, #380]	; (80017e0 <HAL_ADC_MspInit+0x19c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d159      	bne.n	800171a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001666:	4b5f      	ldr	r3, [pc, #380]	; (80017e4 <HAL_ADC_MspInit+0x1a0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a5d      	ldr	r2, [pc, #372]	; (80017e4 <HAL_ADC_MspInit+0x1a0>)
 800166e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001670:	4b5c      	ldr	r3, [pc, #368]	; (80017e4 <HAL_ADC_MspInit+0x1a0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d10b      	bne.n	8001690 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001678:	4b5b      	ldr	r3, [pc, #364]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	4a5a      	ldr	r2, [pc, #360]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 800167e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001684:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b55      	ldr	r3, [pc, #340]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	4a54      	ldr	r2, [pc, #336]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169c:	4b52      	ldr	r3, [pc, #328]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016ac:	230b      	movs	r3, #11
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016be:	f002 f883 	bl	80037c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 80016c4:	4a4a      	ldr	r2, [pc, #296]	; (80017f0 <HAL_ADC_MspInit+0x1ac>)
 80016c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80016c8:	4b48      	ldr	r3, [pc, #288]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d4:	4b45      	ldr	r3, [pc, #276]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016da:	4b44      	ldr	r3, [pc, #272]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016e0:	4b42      	ldr	r3, [pc, #264]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 80016e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016e8:	4b40      	ldr	r3, [pc, #256]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 80016ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016f0:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 80016f2:	2220      	movs	r2, #32
 80016f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016fc:	483b      	ldr	r0, [pc, #236]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 80016fe:	f001 fe6b 	bl	80033d8 <HAL_DMA_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001708:	f7ff ff70 	bl	80015ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a37      	ldr	r2, [pc, #220]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 8001710:	64da      	str	r2, [r3, #76]	; 0x4c
 8001712:	4a36      	ldr	r2, [pc, #216]	; (80017ec <HAL_ADC_MspInit+0x1a8>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001718:	e05d      	b.n	80017d6 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a35      	ldr	r2, [pc, #212]	; (80017f4 <HAL_ADC_MspInit+0x1b0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d158      	bne.n	80017d6 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001724:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <HAL_ADC_MspInit+0x1a0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a2e      	ldr	r2, [pc, #184]	; (80017e4 <HAL_ADC_MspInit+0x1a0>)
 800172c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_ADC_MspInit+0x1a0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10b      	bne.n	800174e <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001736:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a2b      	ldr	r2, [pc, #172]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 800173c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_ADC_MspInit+0x1a4>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001766:	2302      	movs	r3, #2
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800176a:	230b      	movs	r3, #11
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177c:	f002 f824 	bl	80037c8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 8001782:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <HAL_ADC_MspInit+0x1b8>)
 8001784:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 8001788:	2200      	movs	r2, #0
 800178a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 8001794:	2200      	movs	r2, #0
 8001796:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 80017a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 80017a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ac:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 80017b0:	2220      	movs	r2, #32
 80017b2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80017ba:	480f      	ldr	r0, [pc, #60]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 80017bc:	f001 fe0c 	bl	80033d8 <HAL_DMA_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_ADC_MspInit+0x186>
      Error_Handler();
 80017c6:	f7ff ff11 	bl	80015ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 80017ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80017d0:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_ADC_MspInit+0x1b4>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80017d6:	bf00      	nop
 80017d8:	3730      	adds	r7, #48	; 0x30
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	50040000 	.word	0x50040000
 80017e4:	2000005c 	.word	0x2000005c
 80017e8:	40021000 	.word	0x40021000
 80017ec:	2000018c 	.word	0x2000018c
 80017f0:	40020008 	.word	0x40020008
 80017f4:	50040100 	.word	0x50040100
 80017f8:	20000294 	.word	0x20000294
 80017fc:	4002001c 	.word	0x4002001c

08001800 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a15      	ldr	r2, [pc, #84]	; (8001874 <HAL_DAC_MspInit+0x74>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d124      	bne.n	800186c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_DAC_MspInit+0x78>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	4a14      	ldr	r2, [pc, #80]	; (8001878 <HAL_DAC_MspInit+0x78>)
 8001828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800182c:	6593      	str	r3, [r2, #88]	; 0x58
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_DAC_MspInit+0x78>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_DAC_MspInit+0x78>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <HAL_DAC_MspInit+0x78>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_DAC_MspInit+0x78>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001852:	2330      	movs	r3, #48	; 0x30
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001856:	2303      	movs	r3, #3
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001868:	f001 ffae 	bl	80037c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40007400 	.word	0x40007400
 8001878:	40021000 	.word	0x40021000

0800187c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188c:	d10b      	bne.n	80018a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_TIM_PWM_MspInit+0x38>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_TIM_PWM_MspInit+0x38>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6593      	str	r3, [r2, #88]	; 0x58
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_TIM_PWM_MspInit+0x38>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <HAL_TIM_Base_MspInit+0x44>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d113      	bne.n	80018f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_TIM_Base_MspInit+0x48>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <HAL_TIM_Base_MspInit+0x48>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6593      	str	r3, [r2, #88]	; 0x58
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_TIM_Base_MspInit+0x48>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	201d      	movs	r0, #29
 80018e8:	f001 fbb7 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018ec:	201d      	movs	r0, #29
 80018ee:	f001 fbd0 	bl	8003092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40000400 	.word	0x40000400
 8001900:	40021000 	.word	0x40021000

08001904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001924:	d11b      	bne.n	800195e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_TIM_MspPostInit+0x64>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_TIM_MspPostInit+0x64>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_TIM_MspPostInit+0x64>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800193e:	2308      	movs	r3, #8
 8001940:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800194e:	2301      	movs	r3, #1
 8001950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	4619      	mov	r1, r3
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <HAL_TIM_MspPostInit+0x68>)
 800195a:	f001 ff35 	bl	80037c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	48000400 	.word	0x48000400

08001970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_UART_MspInit+0x7c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d128      	bne.n	80019e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_UART_MspInit+0x80>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <HAL_UART_MspInit+0x80>)
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	6593      	str	r3, [r2, #88]	; 0x58
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_UART_MspInit+0x80>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_UART_MspInit+0x80>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_UART_MspInit+0x80>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_UART_MspInit+0x80>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019c2:	230c      	movs	r3, #12
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d2:	2307      	movs	r3, #7
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4619      	mov	r1, r3
 80019dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e0:	f001 fef2 	bl	80037c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40004400 	.word	0x40004400
 80019f0:	40021000 	.word	0x40021000

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a48:	f000 f8da 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <DMA1_Channel1_IRQHandler+0x10>)
 8001a56:	f001 fdd7 	bl	8003608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000018c 	.word	0x2000018c

08001a64 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <DMA1_Channel2_IRQHandler+0x10>)
 8001a6a:	f001 fdcd 	bl	8003608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000294 	.word	0x20000294

08001a78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <TIM3_IRQHandler+0x10>)
 8001a7e:	f003 fc3b 	bl	80052f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200000d8 	.word	0x200000d8

08001a8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <SystemInit+0x64>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <SystemInit+0x64>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <SystemInit+0x68>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <SystemInit+0x68>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <SystemInit+0x68>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <SystemInit+0x68>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <SystemInit+0x68>)
 8001ab8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001abc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <SystemInit+0x68>)
 8001ac4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <SystemInit+0x68>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <SystemInit+0x68>)
 8001ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <SystemInit+0x68>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SystemInit+0x64>)
 8001ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00
 8001af4:	40021000 	.word	0x40021000

08001af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001afc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001afe:	e003      	b.n	8001b08 <LoopCopyDataInit>

08001b00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b06:	3104      	adds	r1, #4

08001b08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b08:	480b      	ldr	r0, [pc, #44]	; (8001b38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b10:	d3f6      	bcc.n	8001b00 <CopyDataInit>
	ldr	r2, =_sbss
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b14:	e002      	b.n	8001b1c <LoopFillZerobss>

08001b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b18:	f842 3b04 	str.w	r3, [r2], #4

08001b1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <LoopForever+0x16>)
	cmp	r2, r3
 8001b1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b20:	d3f9      	bcc.n	8001b16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b22:	f7ff ffb3 	bl	8001a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b26:	f005 f8f9 	bl	8006d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b2a:	f7ff fa0f 	bl	8000f4c <main>

08001b2e <LoopForever>:

LoopForever:
    b LoopForever
 8001b2e:	e7fe      	b.n	8001b2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b30:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b34:	08006de4 	.word	0x08006de4
	ldr	r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b3c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001b40:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001b44:	200002f0 	.word	0x200002f0

08001b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC1_2_IRQHandler>
	...

08001b4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_Init+0x3c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_Init+0x3c>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b62:	2003      	movs	r0, #3
 8001b64:	f001 fa6e 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f000 f80f 	bl	8001b8c <HAL_InitTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	e001      	b.n	8001b7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b7a:	f7ff fd3f 	bl	80015fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40022000 	.word	0x40022000

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_InitTick+0x68>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d022      	beq.n	8001be6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_InitTick+0x6c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_InitTick+0x68>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fa7a 	bl	80030ae <HAL_SYSTICK_Config>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10f      	bne.n	8001be0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b0f      	cmp	r3, #15
 8001bc4:	d809      	bhi.n	8001bda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	f04f 30ff 	mov.w	r0, #4294967295
 8001bce:	f001 fa44 	bl	800305a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_InitTick+0x70>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e007      	b.n	8001bea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e004      	b.n	8001bea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e001      	b.n	8001bea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_IncTick+0x1c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_IncTick+0x20>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <HAL_IncTick+0x1c>)
 8001c10:	6013      	str	r3, [r2, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	200002ec 	.word	0x200002ec
 8001c20:	20000008 	.word	0x20000008

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	200002ec 	.word	0x200002ec

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff ffee 	bl	8001c24 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d004      	beq.n	8001c60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_Delay+0x40>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c60:	bf00      	nop
 8001c62:	f7ff ffdf 	bl	8001c24 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d8f7      	bhi.n	8001c62 <HAL_Delay+0x26>
  {
  }
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008

08001c80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	609a      	str	r2, [r3, #8]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ce8:	b490      	push	{r4, r7}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3360      	adds	r3, #96	; 0x60
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001d04:	6822      	ldr	r2, [r4, #0]
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <LL_ADC_SetOffset+0x40>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d1a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc90      	pop	{r4, r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	03fff000 	.word	0x03fff000

08001d2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d2c:	b490      	push	{r4, r7}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3360      	adds	r3, #96	; 0x60
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc90      	pop	{r4, r7}
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d54:	b490      	push	{r4, r7}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3360      	adds	r3, #96	; 0x60
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc90      	pop	{r4, r7}
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001daa:	b490      	push	{r4, r7}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3330      	adds	r3, #48	; 0x30
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	4413      	add	r3, r2
 8001dc8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	211f      	movs	r1, #31
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	401a      	ands	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	0e9b      	lsrs	r3, r3, #26
 8001de0:	f003 011f 	and.w	r1, r3, #31
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc90      	pop	{r4, r7}
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dfc:	b490      	push	{r4, r7}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3314      	adds	r3, #20
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	0e5b      	lsrs	r3, r3, #25
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	4413      	add	r3, r2
 8001e1a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e1c:	6822      	ldr	r2, [r4, #0]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	0d1b      	lsrs	r3, r3, #20
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2107      	movs	r1, #7
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	401a      	ands	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	0d1b      	lsrs	r3, r3, #20
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc90      	pop	{r4, r7}
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e64:	43db      	mvns	r3, r3
 8001e66:	401a      	ands	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0318 	and.w	r3, r3, #24
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e70:	40d9      	lsrs	r1, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	400b      	ands	r3, r1
 8001e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	0007ffff 	.word	0x0007ffff

08001e94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ec0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6093      	str	r3, [r2, #8]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee8:	d101      	bne.n	8001eee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f38:	d101      	bne.n	8001f3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <LL_ADC_IsEnabled+0x18>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <LL_ADC_IsEnabled+0x1a>
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001faa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fae:	f043 0204 	orr.w	r2, r3, #4
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d101      	bne.n	8001fda <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d101      	bne.n	8002000 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e134      	b.n	8002294 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fb03 	bl	8001644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff3f 	bl	8001ed4 <LL_ADC_IsDeepPowerDownEnabled>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d004      	beq.n	8002066 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff25 	bl	8001eb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff5a 	bl	8001f24 <LL_ADC_IsInternalRegulatorEnabled>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d113      	bne.n	800209e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff3e 	bl	8001efc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002080:	4b86      	ldr	r3, [pc, #536]	; (800229c <HAL_ADC_Init+0x28c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	4a86      	ldr	r2, [pc, #536]	; (80022a0 <HAL_ADC_Init+0x290>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	099b      	lsrs	r3, r3, #6
 800208e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002090:	e002      	b.n	8002098 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3b01      	subs	r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f9      	bne.n	8002092 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff3e 	bl	8001f24 <LL_ADC_IsInternalRegulatorEnabled>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10d      	bne.n	80020ca <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	f043 0210 	orr.w	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	f043 0201 	orr.w	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff77 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 80020d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 80cf 	bne.w	8002282 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 80cb 	bne.w	8002282 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020f4:	f043 0202 	orr.w	r2, r3, #2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff37 	bl	8001f74 <LL_ADC_IsEnabled>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d115      	bne.n	8002138 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800210c:	4865      	ldr	r0, [pc, #404]	; (80022a4 <HAL_ADC_Init+0x294>)
 800210e:	f7ff ff31 	bl	8001f74 <LL_ADC_IsEnabled>
 8002112:	4604      	mov	r4, r0
 8002114:	4864      	ldr	r0, [pc, #400]	; (80022a8 <HAL_ADC_Init+0x298>)
 8002116:	f7ff ff2d 	bl	8001f74 <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	431c      	orrs	r4, r3
 800211e:	4863      	ldr	r0, [pc, #396]	; (80022ac <HAL_ADC_Init+0x29c>)
 8002120:	f7ff ff28 	bl	8001f74 <LL_ADC_IsEnabled>
 8002124:	4603      	mov	r3, r0
 8002126:	4323      	orrs	r3, r4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4619      	mov	r1, r3
 8002132:	485f      	ldr	r0, [pc, #380]	; (80022b0 <HAL_ADC_Init+0x2a0>)
 8002134:	f7ff fda4 	bl	8001c80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7e5b      	ldrb	r3, [r3, #25]
 800213c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002142:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002148:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800214e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002156:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d106      	bne.n	8002174 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	3b01      	subs	r3, #1
 800216c:	045b      	lsls	r3, r3, #17
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_ADC_Init+0x2a4>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff0a 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 80021ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff17 	bl	8001fe8 <LL_ADC_INJ_IsConversionOngoing>
 80021ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d13d      	bne.n	800223e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d13a      	bne.n	800223e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021cc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021e4:	f023 0302 	bic.w	r3, r3, #2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	69b9      	ldr	r1, [r7, #24]
 80021ee:	430b      	orrs	r3, r1
 80021f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d118      	bne.n	800222e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002206:	f023 0304 	bic.w	r3, r3, #4
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800221e:	430a      	orrs	r2, r1
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	611a      	str	r2, [r3, #16]
 800222c:	e007      	b.n	800223e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10c      	bne.n	8002260 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	f023 010f 	bic.w	r1, r3, #15
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	1e5a      	subs	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
 800225e:	e007      	b.n	8002270 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020f 	bic.w	r2, r2, #15
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	f023 0303 	bic.w	r3, r3, #3
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
 8002280:	e007      	b.n	8002292 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	f043 0210 	orr.w	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002292:	7ffb      	ldrb	r3, [r7, #31]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3724      	adds	r7, #36	; 0x24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	20000000 	.word	0x20000000
 80022a0:	053e2d63 	.word	0x053e2d63
 80022a4:	50040000 	.word	0x50040000
 80022a8:	50040100 	.word	0x50040100
 80022ac:	50040200 	.word	0x50040200
 80022b0:	50040300 	.word	0x50040300
 80022b4:	fff0c007 	.word	0xfff0c007

080022b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022c4:	4850      	ldr	r0, [pc, #320]	; (8002408 <HAL_ADC_Start_DMA+0x150>)
 80022c6:	f7ff fde5 	bl	8001e94 <LL_ADC_GetMultimode>
 80022ca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fe76 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f040 808e 	bne.w	80023fa <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_Start_DMA+0x34>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e089      	b.n	8002400 <HAL_ADC_Start_DMA+0x148>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d002      	beq.n	8002306 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b09      	cmp	r3, #9
 8002304:	d172      	bne.n	80023ec <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fc0c 	bl	8002b24 <ADC_Enable>
 800230c:	4603      	mov	r3, r0
 800230e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d165      	bne.n	80023e2 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a37      	ldr	r2, [pc, #220]	; (800240c <HAL_ADC_Start_DMA+0x154>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d002      	beq.n	800233a <HAL_ADC_Start_DMA+0x82>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	e000      	b.n	800233c <HAL_ADC_Start_DMA+0x84>
 800233a:	4b35      	ldr	r3, [pc, #212]	; (8002410 <HAL_ADC_Start_DMA+0x158>)
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	4293      	cmp	r3, r2
 8002342:	d002      	beq.n	800234a <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	f023 0206 	bic.w	r2, r3, #6
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	659a      	str	r2, [r3, #88]	; 0x58
 800236e:	e002      	b.n	8002376 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	4a26      	ldr	r2, [pc, #152]	; (8002414 <HAL_ADC_Start_DMA+0x15c>)
 800237c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	4a25      	ldr	r2, [pc, #148]	; (8002418 <HAL_ADC_Start_DMA+0x160>)
 8002384:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	4a24      	ldr	r2, [pc, #144]	; (800241c <HAL_ADC_Start_DMA+0x164>)
 800238c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	221c      	movs	r2, #28
 8002394:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0210 	orr.w	r2, r2, #16
 80023ac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3340      	adds	r3, #64	; 0x40
 80023c8:	4619      	mov	r1, r3
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f001 f8bb 	bl	8003548 <HAL_DMA_Start_IT>
 80023d2:	4603      	mov	r3, r0
 80023d4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fddd 	bl	8001f9a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80023e0:	e00d      	b.n	80023fe <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80023ea:	e008      	b.n	80023fe <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80023f8:	e001      	b.n	80023fe <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
 80023fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	50040300 	.word	0x50040300
 800240c:	50040100 	.word	0x50040100
 8002410:	50040000 	.word	0x50040000
 8002414:	08002bd9 	.word	0x08002bd9
 8002418:	08002cb1 	.word	0x08002cb1
 800241c:	08002ccd 	.word	0x08002ccd

08002420 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0a6      	sub	sp, #152	; 0x98
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x22>
 800247a:	2302      	movs	r3, #2
 800247c:	e348      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x6b4>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fd99 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 8329 	bne.w	8002aea <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d824      	bhi.n	80024ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	3b02      	subs	r3, #2
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d81b      	bhi.n	80024e2 <HAL_ADC_ConfigChannel+0x86>
 80024aa:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <HAL_ADC_ConfigChannel+0x54>)
 80024ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b0:	080024c1 	.word	0x080024c1
 80024b4:	080024c9 	.word	0x080024c9
 80024b8:	080024d1 	.word	0x080024d1
 80024bc:	080024d9 	.word	0x080024d9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	220c      	movs	r2, #12
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	e011      	b.n	80024ec <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2212      	movs	r2, #18
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	e00d      	b.n	80024ec <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2218      	movs	r2, #24
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	e009      	b.n	80024ec <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	e004      	b.n	80024ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2206      	movs	r2, #6
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	e000      	b.n	80024ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80024ea:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	f7ff fc56 	bl	8001daa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fd5d 	bl	8001fc2 <LL_ADC_REG_IsConversionOngoing>
 8002508:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fd69 	bl	8001fe8 <LL_ADC_INJ_IsConversionOngoing>
 8002516:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800251a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 8148 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002528:	2b00      	cmp	r3, #0
 800252a:	f040 8143 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6819      	ldr	r1, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	461a      	mov	r2, r3
 800253c:	f7ff fc5e 	bl	8001dfc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	08db      	lsrs	r3, r3, #3
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b04      	cmp	r3, #4
 8002560:	d00a      	beq.n	8002578 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6919      	ldr	r1, [r3, #16]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002572:	f7ff fbb9 	bl	8001ce8 <LL_ADC_SetOffset>
 8002576:	e11d      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fbd4 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x148>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fbc9 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	f003 021f 	and.w	r2, r3, #31
 80025a2:	e012      	b.n	80025ca <HAL_ADC_ConfigChannel+0x16e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fbbe 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x186>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0e9b      	lsrs	r3, r3, #26
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	e00a      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x19c>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80025f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d106      	bne.n	800260a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fba5 	bl	8001d54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2101      	movs	r1, #1
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fb8b 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10a      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x1da>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2101      	movs	r1, #1
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fb80 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	0e9b      	lsrs	r3, r3, #26
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	e010      	b.n	8002658 <HAL_ADC_ConfigChannel+0x1fc>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fb75 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800264e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x214>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	e00a      	b.n	8002686 <HAL_ADC_ConfigChannel+0x22a>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800267e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	429a      	cmp	r2, r3
 8002688:	d106      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	2101      	movs	r1, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fb5e 	bl	8001d54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2102      	movs	r1, #2
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fb44 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x268>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fb39 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	e010      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x28a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2102      	movs	r1, #2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fb2e 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80026dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x2a2>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	e00a      	b.n	8002714 <HAL_ADC_ConfigChannel+0x2b8>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800270c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	429a      	cmp	r2, r3
 8002716:	d106      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2200      	movs	r2, #0
 800271e:	2102      	movs	r1, #2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fb17 	bl	8001d54 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2103      	movs	r1, #3
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fafd 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002732:	4603      	mov	r3, r0
 8002734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x2f6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2103      	movs	r1, #3
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff faf2 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 8002748:	4603      	mov	r3, r0
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	e010      	b.n	8002774 <HAL_ADC_ConfigChannel+0x318>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2103      	movs	r1, #3
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fae7 	bl	8001d2c <LL_ADC_GetOffsetChannel>
 800275e:	4603      	mov	r3, r0
 8002760:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800276a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_ADC_ConfigChannel+0x330>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0e9b      	lsrs	r3, r3, #26
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	e00a      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x346>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800279a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d106      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2200      	movs	r2, #0
 80027ac:	2103      	movs	r1, #3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fad0 	bl	8001d54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fbdb 	bl	8001f74 <LL_ADC_IsEnabled>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 810c 	bne.w	80029de <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f7ff fb3a 	bl	8001e4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4aad      	ldr	r2, [pc, #692]	; (8002a94 <HAL_ADC_ConfigChannel+0x638>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f040 80fd 	bne.w	80029de <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_ADC_ConfigChannel+0x3b0>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	3301      	adds	r3, #1
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2b09      	cmp	r3, #9
 8002802:	bf94      	ite	ls
 8002804:	2301      	movls	r3, #1
 8002806:	2300      	movhi	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e012      	b.n	8002832 <HAL_ADC_ConfigChannel+0x3d6>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800281a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	2b09      	cmp	r3, #9
 800282a:	bf94      	ite	ls
 800282c:	2301      	movls	r3, #1
 800282e:	2300      	movhi	r3, #0
 8002830:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002832:	2b00      	cmp	r3, #0
 8002834:	d064      	beq.n	8002900 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283e:	2b00      	cmp	r3, #0
 8002840:	d107      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x3f6>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0e9b      	lsrs	r3, r3, #26
 8002848:	3301      	adds	r3, #1
 800284a:	069b      	lsls	r3, r3, #26
 800284c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002850:	e00e      	b.n	8002870 <HAL_ADC_ConfigChannel+0x414>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	3301      	adds	r3, #1
 800286a:	069b      	lsls	r3, r3, #26
 800286c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x434>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	3301      	adds	r3, #1
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2101      	movs	r1, #1
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	e010      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x456>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	ea42 0103 	orr.w	r1, r2, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x47c>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	0e9b      	lsrs	r3, r3, #26
 80028c8:	3301      	adds	r3, #1
 80028ca:	f003 021f 	and.w	r2, r3, #31
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	051b      	lsls	r3, r3, #20
 80028d6:	e011      	b.n	80028fc <HAL_ADC_ConfigChannel+0x4a0>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028fc:	430b      	orrs	r3, r1
 80028fe:	e069      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002908:	2b00      	cmp	r3, #0
 800290a:	d107      	bne.n	800291c <HAL_ADC_ConfigChannel+0x4c0>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0e9b      	lsrs	r3, r3, #26
 8002912:	3301      	adds	r3, #1
 8002914:	069b      	lsls	r3, r3, #26
 8002916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800291a:	e00e      	b.n	800293a <HAL_ADC_ConfigChannel+0x4de>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	61fb      	str	r3, [r7, #28]
  return result;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	3301      	adds	r3, #1
 8002934:	069b      	lsls	r3, r3, #26
 8002936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_ADC_ConfigChannel+0x4fe>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0e9b      	lsrs	r3, r3, #26
 800294c:	3301      	adds	r3, #1
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	e010      	b.n	800297c <HAL_ADC_ConfigChannel+0x520>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	617b      	str	r3, [r7, #20]
  return result;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	ea42 0103 	orr.w	r1, r2, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10d      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x54c>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	3301      	adds	r3, #1
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	3b1e      	subs	r3, #30
 80029a0:	051b      	lsls	r3, r3, #20
 80029a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029a6:	e014      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x576>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	60fb      	str	r3, [r7, #12]
  return result;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4613      	mov	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4413      	add	r3, r2
 80029ca:	3b1e      	subs	r3, #30
 80029cc:	051b      	lsls	r3, r3, #20
 80029ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d2:	430b      	orrs	r3, r1
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	6892      	ldr	r2, [r2, #8]
 80029d8:	4619      	mov	r1, r3
 80029da:	f7ff fa0f 	bl	8001dfc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_ADC_ConfigChannel+0x63c>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 808c 	beq.w	8002b04 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ec:	482b      	ldr	r0, [pc, #172]	; (8002a9c <HAL_ADC_ConfigChannel+0x640>)
 80029ee:	f7ff f96d 	bl	8001ccc <LL_ADC_GetCommonPathInternalCh>
 80029f2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a29      	ldr	r2, [pc, #164]	; (8002aa0 <HAL_ADC_ConfigChannel+0x644>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d12b      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x5fc>
 8002a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d125      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <HAL_ADC_ConfigChannel+0x648>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_ADC_ConfigChannel+0x5c4>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a23      	ldr	r2, [pc, #140]	; (8002aa8 <HAL_ADC_ConfigChannel+0x64c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d16e      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a28:	4619      	mov	r1, r3
 8002a2a:	481c      	ldr	r0, [pc, #112]	; (8002a9c <HAL_ADC_ConfigChannel+0x640>)
 8002a2c:	f7ff f93b 	bl	8001ca6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_ADC_ConfigChannel+0x650>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	099b      	lsrs	r3, r3, #6
 8002a36:	4a1e      	ldr	r2, [pc, #120]	; (8002ab0 <HAL_ADC_ConfigChannel+0x654>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	099a      	lsrs	r2, r3, #6
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a48:	e002      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a56:	e052      	b.n	8002afe <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <HAL_ADC_ConfigChannel+0x658>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d12a      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x65c>
 8002a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d124      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a0c      	ldr	r2, [pc, #48]	; (8002aa4 <HAL_ADC_ConfigChannel+0x648>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x626>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_ADC_ConfigChannel+0x64c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d13f      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4803      	ldr	r0, [pc, #12]	; (8002a9c <HAL_ADC_ConfigChannel+0x640>)
 8002a8e:	f7ff f90a 	bl	8001ca6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a92:	e036      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x6a6>
 8002a94:	407f0000 	.word	0x407f0000
 8002a98:	80080000 	.word	0x80080000
 8002a9c:	50040300 	.word	0x50040300
 8002aa0:	c7520000 	.word	0xc7520000
 8002aa4:	50040000 	.word	0x50040000
 8002aa8:	50040200 	.word	0x50040200
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	053e2d63 	.word	0x053e2d63
 8002ab4:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <HAL_ADC_ConfigChannel+0x6bc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d120      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11a      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <HAL_ADC_ConfigChannel+0x6c0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d115      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002adc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	480f      	ldr	r0, [pc, #60]	; (8002b20 <HAL_ADC_ConfigChannel+0x6c4>)
 8002ae4:	f7ff f8df 	bl	8001ca6 <LL_ADC_SetCommonPathInternalCh>
 8002ae8:	e00c      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b02:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b0c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3798      	adds	r7, #152	; 0x98
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	80000001 	.word	0x80000001
 8002b1c:	50040000 	.word	0x50040000
 8002b20:	50040300 	.word	0x50040300

08002b24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fa1f 	bl	8001f74 <LL_ADC_IsEnabled>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d146      	bne.n	8002bca <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <ADC_Enable+0xb0>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e032      	b.n	8002bcc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff f9ee 	bl	8001f4c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b70:	f7ff f858 	bl	8001c24 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b76:	e021      	b.n	8002bbc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f9f9 	bl	8001f74 <LL_ADC_IsEnabled>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f9dd 	bl	8001f4c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b92:	f7ff f847 	bl	8001c24 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d90d      	bls.n	8002bbc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f043 0210 	orr.w	r2, r3, #16
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e007      	b.n	8002bcc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d1d6      	bne.n	8002b78 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	8000003f 	.word	0x8000003f

08002bd8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d14b      	bne.n	8002c8a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d021      	beq.n	8002c50 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff f8b7 	bl	8001d84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d032      	beq.n	8002c82 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d12b      	bne.n	8002c82 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11f      	bne.n	8002c82 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54
 8002c4e:	e018      	b.n	8002c82 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d111      	bne.n	8002c82 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d105      	bne.n	8002c82 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff fbcc 	bl	8002420 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c88:	e00e      	b.n	8002ca8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f7ff fbd6 	bl	8002448 <HAL_ADC_ErrorCallback>
}
 8002c9c:	e004      	b.n	8002ca8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff fbb8 	bl	8002434 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cea:	f043 0204 	orr.w	r2, r3, #4
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7ff fba8 	bl	8002448 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <LL_ADC_IsEnabled>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <LL_ADC_IsEnabled+0x18>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <LL_ADC_IsEnabled+0x1a>
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d101      	bne.n	8002d3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b09f      	sub	sp, #124	; 0x7c
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e08f      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a47      	ldr	r2, [pc, #284]	; (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d102      	bne.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002d7c:	4b46      	ldr	r3, [pc, #280]	; (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	e001      	b.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e072      	b.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ffbd 	bl	8002d26 <LL_ADC_REG_IsConversionOngoing>
 8002dac:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ffb7 	bl	8002d26 <LL_ADC_REG_IsConversionOngoing>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d154      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d151      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dc4:	4b35      	ldr	r3, [pc, #212]	; (8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002dc6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02c      	beq.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002de2:	035b      	lsls	r3, r3, #13
 8002de4:	430b      	orrs	r3, r1
 8002de6:	431a      	orrs	r2, r3
 8002de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dec:	4829      	ldr	r0, [pc, #164]	; (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002dee:	f7ff ff87 	bl	8002d00 <LL_ADC_IsEnabled>
 8002df2:	4604      	mov	r4, r0
 8002df4:	4828      	ldr	r0, [pc, #160]	; (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002df6:	f7ff ff83 	bl	8002d00 <LL_ADC_IsEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	431c      	orrs	r4, r3
 8002dfe:	4828      	ldr	r0, [pc, #160]	; (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e00:	f7ff ff7e 	bl	8002d00 <LL_ADC_IsEnabled>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4323      	orrs	r3, r4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d137      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e14:	f023 030f 	bic.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	6811      	ldr	r1, [r2, #0]
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	6892      	ldr	r2, [r2, #8]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	431a      	orrs	r2, r3
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e28:	e028      	b.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e36:	4817      	ldr	r0, [pc, #92]	; (8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002e38:	f7ff ff62 	bl	8002d00 <LL_ADC_IsEnabled>
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	4816      	ldr	r0, [pc, #88]	; (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002e40:	f7ff ff5e 	bl	8002d00 <LL_ADC_IsEnabled>
 8002e44:	4603      	mov	r3, r0
 8002e46:	431c      	orrs	r4, r3
 8002e48:	4815      	ldr	r0, [pc, #84]	; (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e4a:	f7ff ff59 	bl	8002d00 <LL_ADC_IsEnabled>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4323      	orrs	r3, r4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d112      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e5e:	f023 030f 	bic.w	r3, r3, #15
 8002e62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e64:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e66:	e009      	b.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e7a:	e000      	b.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	377c      	adds	r7, #124	; 0x7c
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd90      	pop	{r4, r7, pc}
 8002e92:	bf00      	nop
 8002e94:	50040000 	.word	0x50040000
 8002e98:	50040100 	.word	0x50040100
 8002e9c:	50040300 	.word	0x50040300
 8002ea0:	50040200 	.word	0x50040200

08002ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed6:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	60d3      	str	r3, [r2, #12]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	f003 0307 	and.w	r3, r3, #7
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	db0b      	blt.n	8002f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4907      	ldr	r1, [pc, #28]	; (8002f40 <__NVIC_EnableIRQ+0x38>)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2001      	movs	r0, #1
 8002f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e100 	.word	0xe000e100

08002f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db0a      	blt.n	8002f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	490c      	ldr	r1, [pc, #48]	; (8002f90 <__NVIC_SetPriority+0x4c>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f6c:	e00a      	b.n	8002f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4908      	ldr	r1, [pc, #32]	; (8002f94 <__NVIC_SetPriority+0x50>)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	761a      	strb	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	bf28      	it	cs
 8002fb6:	2304      	movcs	r3, #4
 8002fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d902      	bls.n	8002fc8 <NVIC_EncodePriority+0x30>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	e000      	b.n	8002fca <NVIC_EncodePriority+0x32>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	401a      	ands	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43d9      	mvns	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	4313      	orrs	r3, r2
         );
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	; 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f7ff ff8e 	bl	8002f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff29 	bl	8002ea4 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff3e 	bl	8002eec <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff8e 	bl	8002f98 <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5d 	bl	8002f44 <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff31 	bl	8002f08 <__NVIC_EnableIRQ>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffa2 	bl	8003000 <SysTick_Config>
 80030bc:	4603      	mov	r3, r0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e014      	b.n	8003102 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	791b      	ldrb	r3, [r3, #4]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7fe fb89 	bl	8001800 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2202      	movs	r2, #2
 80030f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	795b      	ldrb	r3, [r3, #5]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_DAC_Start+0x16>
 800311c:	2302      	movs	r3, #2
 800311e:	e03b      	b.n	8003198 <HAL_DAC_Start+0x8e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2201      	movs	r2, #1
 800313a:	409a      	lsls	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10f      	bne.n	800316a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003154:	2b04      	cmp	r3, #4
 8003156:	d118      	bne.n	800318a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	e00f      	b.n	800318a <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003174:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003178:	d107      	bne.n	800318a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0202 	orr.w	r2, r2, #2
 8003188:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	795b      	ldrb	r3, [r3, #5]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_DAC_ConfigChannel+0x1c>
 80031bc:	2302      	movs	r3, #2
 80031be:	e107      	b.n	80033d0 <HAL_DAC_ConfigChannel+0x22c>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2202      	movs	r2, #2
 80031ca:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d174      	bne.n	80032be <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d137      	bne.n	800324a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80031da:	f7fe fd23 	bl	8001c24 <HAL_GetTick>
 80031de:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031e0:	e011      	b.n	8003206 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031e2:	f7fe fd1f 	bl	8001c24 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d90a      	bls.n	8003206 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f043 0208 	orr.w	r2, r3, #8
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2203      	movs	r2, #3
 8003200:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e0e4      	b.n	80033d0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e6      	bne.n	80031e2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003214:	2001      	movs	r0, #1
 8003216:	f7fe fd11 	bl	8001c3c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	6992      	ldr	r2, [r2, #24]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
 8003224:	e01e      	b.n	8003264 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003226:	f7fe fcfd 	bl	8001c24 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d90a      	bls.n	800324a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f043 0208 	orr.w	r2, r3, #8
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2203      	movs	r2, #3
 8003244:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0c2      	b.n	80033d0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003250:	2b00      	cmp	r3, #0
 8003252:	dbe8      	blt.n	8003226 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003254:	2001      	movs	r0, #1
 8003256:	f7fe fcf1 	bl	8001c3c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	6992      	ldr	r2, [r2, #24]
 8003262:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	ea02 0103 	and.w	r1, r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	409a      	lsls	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	21ff      	movs	r1, #255	; 0xff
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	ea02 0103 	and.w	r1, r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6a1a      	ldr	r2, [r3, #32]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d11d      	bne.n	8003302 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	221f      	movs	r2, #31
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2207      	movs	r2, #7
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	431a      	orrs	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	400a      	ands	r2, r1
 8003366:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	f640 72fc 	movw	r2, #4092	; 0xffc
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	22c0      	movs	r2, #192	; 0xc0
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43da      	mvns	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	400a      	ands	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e098      	b.n	800351c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b4d      	ldr	r3, [pc, #308]	; (8003528 <HAL_DMA_Init+0x150>)
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d80f      	bhi.n	8003416 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b4b      	ldr	r3, [pc, #300]	; (800352c <HAL_DMA_Init+0x154>)
 80033fe:	4413      	add	r3, r2
 8003400:	4a4b      	ldr	r2, [pc, #300]	; (8003530 <HAL_DMA_Init+0x158>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	009a      	lsls	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a48      	ldr	r2, [pc, #288]	; (8003534 <HAL_DMA_Init+0x15c>)
 8003412:	641a      	str	r2, [r3, #64]	; 0x40
 8003414:	e00e      	b.n	8003434 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	4b46      	ldr	r3, [pc, #280]	; (8003538 <HAL_DMA_Init+0x160>)
 800341e:	4413      	add	r3, r2
 8003420:	4a43      	ldr	r2, [pc, #268]	; (8003530 <HAL_DMA_Init+0x158>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	009a      	lsls	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a42      	ldr	r2, [pc, #264]	; (800353c <HAL_DMA_Init+0x164>)
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800344a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348e:	d039      	beq.n	8003504 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	4a27      	ldr	r2, [pc, #156]	; (8003534 <HAL_DMA_Init+0x15c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d11a      	bne.n	80034d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800349a:	4b29      	ldr	r3, [pc, #164]	; (8003540 <HAL_DMA_Init+0x168>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f003 031c 	and.w	r3, r3, #28
 80034a6:	210f      	movs	r1, #15
 80034a8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	4924      	ldr	r1, [pc, #144]	; (8003540 <HAL_DMA_Init+0x168>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034b4:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_DMA_Init+0x168>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	f003 031c 	and.w	r3, r3, #28
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	491d      	ldr	r1, [pc, #116]	; (8003540 <HAL_DMA_Init+0x168>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
 80034ce:	e019      	b.n	8003504 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034d0:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_DMA_Init+0x16c>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d8:	f003 031c 	and.w	r3, r3, #28
 80034dc:	210f      	movs	r1, #15
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	4917      	ldr	r1, [pc, #92]	; (8003544 <HAL_DMA_Init+0x16c>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_DMA_Init+0x16c>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f003 031c 	and.w	r3, r3, #28
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	4911      	ldr	r1, [pc, #68]	; (8003544 <HAL_DMA_Init+0x16c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40020407 	.word	0x40020407
 800352c:	bffdfff8 	.word	0xbffdfff8
 8003530:	cccccccd 	.word	0xcccccccd
 8003534:	40020000 	.word	0x40020000
 8003538:	bffdfbf8 	.word	0xbffdfbf8
 800353c:	40020400 	.word	0x40020400
 8003540:	400200a8 	.word	0x400200a8
 8003544:	400204a8 	.word	0x400204a8

08003548 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_DMA_Start_IT+0x20>
 8003564:	2302      	movs	r3, #2
 8003566:	e04b      	b.n	8003600 <HAL_DMA_Start_IT+0xb8>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d13a      	bne.n	80035f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f8e0 	bl	8003766 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 020e 	orr.w	r2, r2, #14
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e00f      	b.n	80035e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0204 	bic.w	r2, r2, #4
 80035ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 020a 	orr.w	r2, r2, #10
 80035de:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	e005      	b.n	80035fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
 80035fc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f003 031c 	and.w	r3, r3, #28
 8003628:	2204      	movs	r2, #4
 800362a:	409a      	lsls	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d026      	beq.n	8003682 <HAL_DMA_IRQHandler+0x7a>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d021      	beq.n	8003682 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d107      	bne.n	800365c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0204 	bic.w	r2, r2, #4
 800365a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003660:	f003 021c 	and.w	r2, r3, #28
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	2104      	movs	r1, #4
 800366a:	fa01 f202 	lsl.w	r2, r1, r2
 800366e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	2b00      	cmp	r3, #0
 8003676:	d071      	beq.n	800375c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003680:	e06c      	b.n	800375c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f003 031c 	and.w	r3, r3, #28
 800368a:	2202      	movs	r2, #2
 800368c:	409a      	lsls	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d02e      	beq.n	80036f4 <HAL_DMA_IRQHandler+0xec>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d029      	beq.n	80036f4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10b      	bne.n	80036c6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 020a 	bic.w	r2, r2, #10
 80036bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	f003 021c 	and.w	r2, r3, #28
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2102      	movs	r1, #2
 80036d4:	fa01 f202 	lsl.w	r2, r1, r2
 80036d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d038      	beq.n	800375c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80036f2:	e033      	b.n	800375c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	f003 031c 	and.w	r3, r3, #28
 80036fc:	2208      	movs	r2, #8
 80036fe:	409a      	lsls	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d02a      	beq.n	800375e <HAL_DMA_IRQHandler+0x156>
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d025      	beq.n	800375e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 020e 	bic.w	r2, r2, #14
 8003720:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f003 021c 	and.w	r2, r3, #28
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800375c:	bf00      	nop
 800375e:	bf00      	nop
}
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	f003 021c 	and.w	r2, r3, #28
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	2101      	movs	r1, #1
 8003782:	fa01 f202 	lsl.w	r2, r1, r2
 8003786:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b10      	cmp	r3, #16
 8003796:	d108      	bne.n	80037aa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037a8:	e007      	b.n	80037ba <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	60da      	str	r2, [r3, #12]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d6:	e17f      	b.n	8003ad8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8171 	beq.w	8003ad2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d00b      	beq.n	8003810 <HAL_GPIO_Init+0x48>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d007      	beq.n	8003810 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003804:	2b11      	cmp	r3, #17
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b12      	cmp	r3, #18
 800380e:	d130      	bne.n	8003872 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	2203      	movs	r2, #3
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003846:	2201      	movs	r2, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	f003 0201 	and.w	r2, r3, #1
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b03      	cmp	r3, #3
 800387c:	d118      	bne.n	80038b0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003884:	2201      	movs	r2, #1
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	08db      	lsrs	r3, r3, #3
 800389a:	f003 0201 	and.w	r2, r3, #1
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0x128>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b12      	cmp	r3, #18
 80038ee:	d123      	bne.n	8003938 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	08da      	lsrs	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3208      	adds	r2, #8
 80038f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	220f      	movs	r2, #15
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	08da      	lsrs	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3208      	adds	r2, #8
 8003932:	6939      	ldr	r1, [r7, #16]
 8003934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	2203      	movs	r2, #3
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0203 	and.w	r2, r3, #3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80ac 	beq.w	8003ad2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397a:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <HAL_GPIO_Init+0x32c>)
 800397c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397e:	4a5d      	ldr	r2, [pc, #372]	; (8003af4 <HAL_GPIO_Init+0x32c>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6613      	str	r3, [r2, #96]	; 0x60
 8003986:	4b5b      	ldr	r3, [pc, #364]	; (8003af4 <HAL_GPIO_Init+0x32c>)
 8003988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003992:	4a59      	ldr	r2, [pc, #356]	; (8003af8 <HAL_GPIO_Init+0x330>)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039bc:	d025      	beq.n	8003a0a <HAL_GPIO_Init+0x242>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4e      	ldr	r2, [pc, #312]	; (8003afc <HAL_GPIO_Init+0x334>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01f      	beq.n	8003a06 <HAL_GPIO_Init+0x23e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4d      	ldr	r2, [pc, #308]	; (8003b00 <HAL_GPIO_Init+0x338>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d019      	beq.n	8003a02 <HAL_GPIO_Init+0x23a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4c      	ldr	r2, [pc, #304]	; (8003b04 <HAL_GPIO_Init+0x33c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_GPIO_Init+0x236>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4b      	ldr	r2, [pc, #300]	; (8003b08 <HAL_GPIO_Init+0x340>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00d      	beq.n	80039fa <HAL_GPIO_Init+0x232>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4a      	ldr	r2, [pc, #296]	; (8003b0c <HAL_GPIO_Init+0x344>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d007      	beq.n	80039f6 <HAL_GPIO_Init+0x22e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a49      	ldr	r2, [pc, #292]	; (8003b10 <HAL_GPIO_Init+0x348>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_GPIO_Init+0x22a>
 80039ee:	2306      	movs	r3, #6
 80039f0:	e00c      	b.n	8003a0c <HAL_GPIO_Init+0x244>
 80039f2:	2307      	movs	r3, #7
 80039f4:	e00a      	b.n	8003a0c <HAL_GPIO_Init+0x244>
 80039f6:	2305      	movs	r3, #5
 80039f8:	e008      	b.n	8003a0c <HAL_GPIO_Init+0x244>
 80039fa:	2304      	movs	r3, #4
 80039fc:	e006      	b.n	8003a0c <HAL_GPIO_Init+0x244>
 80039fe:	2303      	movs	r3, #3
 8003a00:	e004      	b.n	8003a0c <HAL_GPIO_Init+0x244>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e002      	b.n	8003a0c <HAL_GPIO_Init+0x244>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_GPIO_Init+0x244>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	f002 0203 	and.w	r2, r2, #3
 8003a12:	0092      	lsls	r2, r2, #2
 8003a14:	4093      	lsls	r3, r2
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a1c:	4936      	ldr	r1, [pc, #216]	; (8003af8 <HAL_GPIO_Init+0x330>)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	3302      	adds	r3, #2
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a2a:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_GPIO_Init+0x34c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a4e:	4a31      	ldr	r2, [pc, #196]	; (8003b14 <HAL_GPIO_Init+0x34c>)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a54:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <HAL_GPIO_Init+0x34c>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a78:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <HAL_GPIO_Init+0x34c>)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a7e:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <HAL_GPIO_Init+0x34c>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <HAL_GPIO_Init+0x34c>)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_GPIO_Init+0x34c>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003acc:	4a11      	ldr	r2, [pc, #68]	; (8003b14 <HAL_GPIO_Init+0x34c>)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f47f ae78 	bne.w	80037d8 <HAL_GPIO_Init+0x10>
  }
}
 8003ae8:	bf00      	nop
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40010000 	.word	0x40010000
 8003afc:	48000400 	.word	0x48000400
 8003b00:	48000800 	.word	0x48000800
 8003b04:	48000c00 	.word	0x48000c00
 8003b08:	48001000 	.word	0x48001000
 8003b0c:	48001400 	.word	0x48001400
 8003b10:	48001800 	.word	0x48001800
 8003b14:	40010400 	.word	0x40010400

08003b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
 8003b24:	4613      	mov	r3, r2
 8003b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b28:	787b      	ldrb	r3, [r7, #1]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b34:	e002      	b.n	8003b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b36:	887a      	ldrh	r2, [r7, #2]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40007000 	.word	0x40007000

08003b64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b72:	d130      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b74:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b80:	d038      	beq.n	8003bf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b8a:	4a1e      	ldr	r2, [pc, #120]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2232      	movs	r2, #50	; 0x32
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	0c9b      	lsrs	r3, r3, #18
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba8:	e002      	b.n	8003bb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbc:	d102      	bne.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f2      	bne.n	8003baa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	d110      	bne.n	8003bf4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e00f      	b.n	8003bf6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be2:	d007      	beq.n	8003bf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003be4:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bec:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bf2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40007000 	.word	0x40007000
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	431bde83 	.word	0x431bde83

08003c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e3d4      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c22:	4ba1      	ldr	r3, [pc, #644]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c2c:	4b9e      	ldr	r3, [pc, #632]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80e4 	beq.w	8003e0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_RCC_OscConfig+0x4a>
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	f040 808b 	bne.w	8003d68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	f040 8087 	bne.w	8003d68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c5a:	4b93      	ldr	r3, [pc, #588]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_RCC_OscConfig+0x62>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e3ac      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1a      	ldr	r2, [r3, #32]
 8003c76:	4b8c      	ldr	r3, [pc, #560]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <HAL_RCC_OscConfig+0x7c>
 8003c82:	4b89      	ldr	r3, [pc, #548]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c8a:	e005      	b.n	8003c98 <HAL_RCC_OscConfig+0x88>
 8003c8c:	4b86      	ldr	r3, [pc, #536]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d223      	bcs.n	8003ce4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fd3f 	bl	8004724 <RCC_SetFlashLatencyFromMSIRange>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e38d      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cb0:	4b7d      	ldr	r3, [pc, #500]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a7c      	ldr	r2, [pc, #496]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003cb6:	f043 0308 	orr.w	r3, r3, #8
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	4b7a      	ldr	r3, [pc, #488]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	4977      	ldr	r1, [pc, #476]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cce:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	4972      	ldr	r1, [pc, #456]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
 8003ce2:	e025      	b.n	8003d30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ce4:	4b70      	ldr	r3, [pc, #448]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6f      	ldr	r2, [pc, #444]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003cea:	f043 0308 	orr.w	r3, r3, #8
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	4b6d      	ldr	r3, [pc, #436]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	496a      	ldr	r1, [pc, #424]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d02:	4b69      	ldr	r3, [pc, #420]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	4965      	ldr	r1, [pc, #404]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fcff 	bl	8004724 <RCC_SetFlashLatencyFromMSIRange>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e34d      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d30:	f000 fc36 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8003d34:	4601      	mov	r1, r0
 8003d36:	4b5c      	ldr	r3, [pc, #368]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	4a5a      	ldr	r2, [pc, #360]	; (8003eac <HAL_RCC_OscConfig+0x29c>)
 8003d42:	5cd3      	ldrb	r3, [r2, r3]
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	fa21 f303 	lsr.w	r3, r1, r3
 8003d4c:	4a58      	ldr	r2, [pc, #352]	; (8003eb0 <HAL_RCC_OscConfig+0x2a0>)
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d50:	4b58      	ldr	r3, [pc, #352]	; (8003eb4 <HAL_RCC_OscConfig+0x2a4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd ff19 	bl	8001b8c <HAL_InitTick>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d052      	beq.n	8003e0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	e331      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d032      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d70:	4b4d      	ldr	r3, [pc, #308]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a4c      	ldr	r2, [pc, #304]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d7c:	f7fd ff52 	bl	8001c24 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d84:	f7fd ff4e 	bl	8001c24 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e31a      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d96:	4b44      	ldr	r3, [pc, #272]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003da2:	4b41      	ldr	r3, [pc, #260]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a40      	ldr	r2, [pc, #256]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003da8:	f043 0308 	orr.w	r3, r3, #8
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b3e      	ldr	r3, [pc, #248]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	493b      	ldr	r1, [pc, #236]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dc0:	4b39      	ldr	r3, [pc, #228]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	4936      	ldr	r1, [pc, #216]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
 8003dd4:	e01a      	b.n	8003e0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dd6:	4b34      	ldr	r3, [pc, #208]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a33      	ldr	r2, [pc, #204]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003de2:	f7fd ff1f 	bl	8001c24 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dea:	f7fd ff1b 	bl	8001c24 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e2e7      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dfc:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f0      	bne.n	8003dea <HAL_RCC_OscConfig+0x1da>
 8003e08:	e000      	b.n	8003e0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d074      	beq.n	8003f02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d005      	beq.n	8003e2a <HAL_RCC_OscConfig+0x21a>
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b0c      	cmp	r3, #12
 8003e22:	d10e      	bne.n	8003e42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d10b      	bne.n	8003e42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d064      	beq.n	8003f00 <HAL_RCC_OscConfig+0x2f0>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d160      	bne.n	8003f00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e2c4      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4a:	d106      	bne.n	8003e5a <HAL_RCC_OscConfig+0x24a>
 8003e4c:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	e01d      	b.n	8003e96 <HAL_RCC_OscConfig+0x286>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e62:	d10c      	bne.n	8003e7e <HAL_RCC_OscConfig+0x26e>
 8003e64:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a0f      	ldr	r2, [pc, #60]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e00b      	b.n	8003e96 <HAL_RCC_OscConfig+0x286>
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a09      	ldr	r2, [pc, #36]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a06      	ldr	r2, [pc, #24]	; (8003ea8 <HAL_RCC_OscConfig+0x298>)
 8003e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e94:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01c      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fd fec1 	bl	8001c24 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea4:	e011      	b.n	8003eca <HAL_RCC_OscConfig+0x2ba>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	08006d8c 	.word	0x08006d8c
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fd feb4 	bl	8001c24 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e280      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eca:	4baf      	ldr	r3, [pc, #700]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x2a8>
 8003ed6:	e014      	b.n	8003f02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fd fea4 	bl	8001c24 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee0:	f7fd fea0 	bl	8001c24 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e26c      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef2:	4ba5      	ldr	r3, [pc, #660]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x2d0>
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d060      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_OscConfig+0x310>
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2b0c      	cmp	r3, #12
 8003f18:	d119      	bne.n	8003f4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d116      	bne.n	8003f4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f20:	4b99      	ldr	r3, [pc, #612]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_OscConfig+0x328>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e249      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b93      	ldr	r3, [pc, #588]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	061b      	lsls	r3, r3, #24
 8003f46:	4990      	ldr	r1, [pc, #576]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f4c:	e040      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d023      	beq.n	8003f9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f56:	4b8c      	ldr	r3, [pc, #560]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a8b      	ldr	r2, [pc, #556]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fd fe5f 	bl	8001c24 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6a:	f7fd fe5b 	bl	8001c24 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e227      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7c:	4b82      	ldr	r3, [pc, #520]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f88:	4b7f      	ldr	r3, [pc, #508]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	497c      	ldr	r1, [pc, #496]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
 8003f9c:	e018      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9e:	4b7a      	ldr	r3, [pc, #488]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a79      	ldr	r2, [pc, #484]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fd fe3b 	bl	8001c24 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb2:	f7fd fe37 	bl	8001c24 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e203      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc4:	4b70      	ldr	r3, [pc, #448]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f0      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d03c      	beq.n	8004056 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01c      	beq.n	800401e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe4:	4b68      	ldr	r3, [pc, #416]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fea:	4a67      	ldr	r2, [pc, #412]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff4:	f7fd fe16 	bl	8001c24 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ffc:	f7fd fe12 	bl	8001c24 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e1de      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800400e:	4b5e      	ldr	r3, [pc, #376]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8004010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0ef      	beq.n	8003ffc <HAL_RCC_OscConfig+0x3ec>
 800401c:	e01b      	b.n	8004056 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800401e:	4b5a      	ldr	r3, [pc, #360]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8004020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004024:	4a58      	ldr	r2, [pc, #352]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402e:	f7fd fdf9 	bl	8001c24 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004036:	f7fd fdf5 	bl	8001c24 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e1c1      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004048:	4b4f      	ldr	r3, [pc, #316]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 800404a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ef      	bne.n	8004036 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80a6 	beq.w	80041b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004064:	2300      	movs	r3, #0
 8004066:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004068:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10d      	bne.n	8004090 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004074:	4b44      	ldr	r3, [pc, #272]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	4a43      	ldr	r2, [pc, #268]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407e:	6593      	str	r3, [r2, #88]	; 0x58
 8004080:	4b41      	ldr	r3, [pc, #260]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800408c:	2301      	movs	r3, #1
 800408e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004090:	4b3e      	ldr	r3, [pc, #248]	; (800418c <HAL_RCC_OscConfig+0x57c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d118      	bne.n	80040ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800409c:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_RCC_OscConfig+0x57c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a3a      	ldr	r2, [pc, #232]	; (800418c <HAL_RCC_OscConfig+0x57c>)
 80040a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a8:	f7fd fdbc 	bl	8001c24 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b0:	f7fd fdb8 	bl	8001c24 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e184      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c2:	4b32      	ldr	r3, [pc, #200]	; (800418c <HAL_RCC_OscConfig+0x57c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d108      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4d8>
 80040d6:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e6:	e024      	b.n	8004132 <HAL_RCC_OscConfig+0x522>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d110      	bne.n	8004112 <HAL_RCC_OscConfig+0x502>
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	4a24      	ldr	r2, [pc, #144]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 80040f8:	f043 0304 	orr.w	r3, r3, #4
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004100:	4b21      	ldr	r3, [pc, #132]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	4a20      	ldr	r2, [pc, #128]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004110:	e00f      	b.n	8004132 <HAL_RCC_OscConfig+0x522>
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	4a1b      	ldr	r2, [pc, #108]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004122:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	4a17      	ldr	r2, [pc, #92]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 800412a:	f023 0304 	bic.w	r3, r3, #4
 800412e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fd fd73 	bl	8001c24 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004142:	f7fd fd6f 	bl	8001c24 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e139      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_RCC_OscConfig+0x578>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0ed      	beq.n	8004142 <HAL_RCC_OscConfig+0x532>
 8004166:	e01a      	b.n	800419e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004168:	f7fd fd5c 	bl	8001c24 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800416e:	e00f      	b.n	8004190 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004170:	f7fd fd58 	bl	8001c24 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d906      	bls.n	8004190 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e122      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004190:	4b90      	ldr	r3, [pc, #576]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e8      	bne.n	8004170 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800419e:	7ffb      	ldrb	r3, [r7, #31]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d105      	bne.n	80041b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a4:	4b8b      	ldr	r3, [pc, #556]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a8:	4a8a      	ldr	r2, [pc, #552]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 80041aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8108 	beq.w	80043ca <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	2b02      	cmp	r3, #2
 80041c0:	f040 80d0 	bne.w	8004364 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041c4:	4b83      	ldr	r3, [pc, #524]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0203 	and.w	r2, r3, #3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d130      	bne.n	800423a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	3b01      	subs	r3, #1
 80041e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d127      	bne.n	800423a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d11f      	bne.n	800423a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004204:	2a07      	cmp	r2, #7
 8004206:	bf14      	ite	ne
 8004208:	2201      	movne	r2, #1
 800420a:	2200      	moveq	r2, #0
 800420c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800420e:	4293      	cmp	r3, r2
 8004210:	d113      	bne.n	800423a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	3b01      	subs	r3, #1
 8004220:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d109      	bne.n	800423a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	3b01      	subs	r3, #1
 8004234:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d06e      	beq.n	8004318 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b0c      	cmp	r3, #12
 800423e:	d069      	beq.n	8004314 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004240:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0b7      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800425c:	4b5d      	ldr	r3, [pc, #372]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a5c      	ldr	r2, [pc, #368]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004266:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004268:	f7fd fcdc 	bl	8001c24 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fd fcd8 	bl	8001c24 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e0a4      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004282:	4b54      	ldr	r3, [pc, #336]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428e:	4b51      	ldr	r3, [pc, #324]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	4b51      	ldr	r3, [pc, #324]	; (80043d8 <HAL_RCC_OscConfig+0x7c8>)
 8004294:	4013      	ands	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800429e:	3a01      	subs	r2, #1
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	4311      	orrs	r1, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042a8:	0212      	lsls	r2, r2, #8
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042b0:	0852      	lsrs	r2, r2, #1
 80042b2:	3a01      	subs	r2, #1
 80042b4:	0552      	lsls	r2, r2, #21
 80042b6:	4311      	orrs	r1, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042bc:	0852      	lsrs	r2, r2, #1
 80042be:	3a01      	subs	r2, #1
 80042c0:	0652      	lsls	r2, r2, #25
 80042c2:	4311      	orrs	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042c8:	0912      	lsrs	r2, r2, #4
 80042ca:	0452      	lsls	r2, r2, #17
 80042cc:	430a      	orrs	r2, r1
 80042ce:	4941      	ldr	r1, [pc, #260]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042d4:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a3e      	ldr	r2, [pc, #248]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 80042da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042e0:	4b3c      	ldr	r3, [pc, #240]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4a3b      	ldr	r2, [pc, #236]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 80042e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042ec:	f7fd fc9a 	bl	8001c24 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fd fc96 	bl	8001c24 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e062      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004306:	4b33      	ldr	r3, [pc, #204]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004312:	e05a      	b.n	80043ca <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e059      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004318:	4b2e      	ldr	r3, [pc, #184]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d152      	bne.n	80043ca <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004324:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2a      	ldr	r2, [pc, #168]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 800432a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004330:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a27      	ldr	r2, [pc, #156]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800433a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800433c:	f7fd fc72 	bl	8001c24 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fd fc6e 	bl	8001c24 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e03a      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x734>
 8004362:	e032      	b.n	80043ca <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b0c      	cmp	r3, #12
 8004368:	d02d      	beq.n	80043c6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a19      	ldr	r2, [pc, #100]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004374:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004376:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004382:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004388:	f023 0303 	bic.w	r3, r3, #3
 800438c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800438e:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 8004394:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fd fc41 	bl	8001c24 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a6:	f7fd fc3d 	bl	8001c24 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e009      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_RCC_OscConfig+0x7c4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f0      	bne.n	80043a6 <HAL_RCC_OscConfig+0x796>
 80043c4:	e001      	b.n	80043ca <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000
 80043d8:	f99d808c 	.word	0xf99d808c

080043dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0c8      	b.n	8004582 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f0:	4b66      	ldr	r3, [pc, #408]	; (800458c <HAL_RCC_ClockConfig+0x1b0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d910      	bls.n	8004420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b63      	ldr	r3, [pc, #396]	; (800458c <HAL_RCC_ClockConfig+0x1b0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 0207 	bic.w	r2, r3, #7
 8004406:	4961      	ldr	r1, [pc, #388]	; (800458c <HAL_RCC_ClockConfig+0x1b0>)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b5f      	ldr	r3, [pc, #380]	; (800458c <HAL_RCC_ClockConfig+0x1b0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0b0      	b.n	8004582 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d04c      	beq.n	80044c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d107      	bne.n	8004444 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004434:	4b56      	ldr	r3, [pc, #344]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d121      	bne.n	8004484 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e09e      	b.n	8004582 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d107      	bne.n	800445c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444c:	4b50      	ldr	r3, [pc, #320]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d115      	bne.n	8004484 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e092      	b.n	8004582 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d107      	bne.n	8004474 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004464:	4b4a      	ldr	r3, [pc, #296]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e086      	b.n	8004582 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004474:	4b46      	ldr	r3, [pc, #280]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e07e      	b.n	8004582 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004484:	4b42      	ldr	r3, [pc, #264]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f023 0203 	bic.w	r2, r3, #3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	493f      	ldr	r1, [pc, #252]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 8004492:	4313      	orrs	r3, r2
 8004494:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004496:	f7fd fbc5 	bl	8001c24 <HAL_GetTick>
 800449a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449c:	e00a      	b.n	80044b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449e:	f7fd fbc1 	bl	8001c24 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e066      	b.n	8004582 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b4:	4b36      	ldr	r3, [pc, #216]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 020c 	and.w	r2, r3, #12
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d1eb      	bne.n	800449e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d2:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	492c      	ldr	r1, [pc, #176]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044e4:	4b29      	ldr	r3, [pc, #164]	; (800458c <HAL_RCC_ClockConfig+0x1b0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d210      	bcs.n	8004514 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b26      	ldr	r3, [pc, #152]	; (800458c <HAL_RCC_ClockConfig+0x1b0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 0207 	bic.w	r2, r3, #7
 80044fa:	4924      	ldr	r1, [pc, #144]	; (800458c <HAL_RCC_ClockConfig+0x1b0>)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004502:	4b22      	ldr	r3, [pc, #136]	; (800458c <HAL_RCC_ClockConfig+0x1b0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e036      	b.n	8004582 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4918      	ldr	r1, [pc, #96]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4910      	ldr	r1, [pc, #64]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004552:	f000 f825 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8004556:	4601      	mov	r1, r0
 8004558:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <HAL_RCC_ClockConfig+0x1b4>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	4a0c      	ldr	r2, [pc, #48]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	5cd3      	ldrb	r3, [r2, r3]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	fa21 f303 	lsr.w	r3, r1, r3
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004572:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd fb08 	bl	8001b8c <HAL_InitTick>
 800457c:	4603      	mov	r3, r0
 800457e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004580:	7afb      	ldrb	r3, [r7, #11]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40022000 	.word	0x40022000
 8004590:	40021000 	.word	0x40021000
 8004594:	08006d8c 	.word	0x08006d8c
 8004598:	20000000 	.word	0x20000000
 800459c:	20000004 	.word	0x20000004

080045a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ae:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045b8:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x34>
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d121      	bne.n	8004612 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d11e      	bne.n	8004612 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045d4:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045e0:	4b30      	ldr	r3, [pc, #192]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80045e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	e005      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045f0:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045fc:	4a2a      	ldr	r2, [pc, #168]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004604:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10d      	bne.n	8004628 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d102      	bne.n	800461e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004618:	4b24      	ldr	r3, [pc, #144]	; (80046ac <HAL_RCC_GetSysClockFreq+0x10c>)
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	e004      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d101      	bne.n	8004628 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004624:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004626:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b0c      	cmp	r3, #12
 800462c:	d133      	bne.n	8004696 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800462e:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d002      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0xa4>
 800463e:	2b03      	cmp	r3, #3
 8004640:	d003      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0xaa>
 8004642:	e005      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8004646:	617b      	str	r3, [r7, #20]
      break;
 8004648:	e005      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800464a:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800464c:	617b      	str	r3, [r7, #20]
      break;
 800464e:	e002      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	617b      	str	r3, [r7, #20]
      break;
 8004654:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004656:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	3301      	adds	r3, #1
 8004662:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004664:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	0a1b      	lsrs	r3, r3, #8
 800466a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	fb02 f203 	mul.w	r2, r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800467c:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x104>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	0e5b      	lsrs	r3, r3, #25
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	3301      	adds	r3, #1
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004696:	69bb      	ldr	r3, [r7, #24]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3724      	adds	r7, #36	; 0x24
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	40021000 	.word	0x40021000
 80046a8:	08006da4 	.word	0x08006da4
 80046ac:	00f42400 	.word	0x00f42400
 80046b0:	007a1200 	.word	0x007a1200

080046b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b8:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000000 	.word	0x20000000

080046cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046d0:	f7ff fff0 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80046d4:	4601      	mov	r1, r0
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046e2:	5cd3      	ldrb	r3, [r2, r3]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	08006d9c 	.word	0x08006d9c

080046f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046fc:	f7ff ffda 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 8004700:	4601      	mov	r1, r0
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	0adb      	lsrs	r3, r3, #11
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <HAL_RCC_GetPCLK2Freq+0x28>)
 800470e:	5cd3      	ldrb	r3, [r2, r3]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004718:	4618      	mov	r0, r3
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40021000 	.word	0x40021000
 8004720:	08006d9c 	.word	0x08006d9c

08004724 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004730:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800473c:	f7ff fa04 	bl	8003b48 <HAL_PWREx_GetVoltageRange>
 8004740:	6178      	str	r0, [r7, #20]
 8004742:	e014      	b.n	800476e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	4b25      	ldr	r3, [pc, #148]	; (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004748:	4a24      	ldr	r2, [pc, #144]	; (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	6593      	str	r3, [r2, #88]	; 0x58
 8004750:	4b22      	ldr	r3, [pc, #136]	; (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800475c:	f7ff f9f4 	bl	8003b48 <HAL_PWREx_GetVoltageRange>
 8004760:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004762:	4b1e      	ldr	r3, [pc, #120]	; (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004766:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004774:	d10b      	bne.n	800478e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b80      	cmp	r3, #128	; 0x80
 800477a:	d919      	bls.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2ba0      	cmp	r3, #160	; 0xa0
 8004780:	d902      	bls.n	8004788 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004782:	2302      	movs	r3, #2
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	e013      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004788:	2301      	movs	r3, #1
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	e010      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b80      	cmp	r3, #128	; 0x80
 8004792:	d902      	bls.n	800479a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004794:	2303      	movs	r3, #3
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	e00a      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d102      	bne.n	80047a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047a0:	2302      	movs	r3, #2
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	e004      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b70      	cmp	r3, #112	; 0x70
 80047aa:	d101      	bne.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047ac:	2301      	movs	r3, #1
 80047ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 0207 	bic.w	r2, r3, #7
 80047b8:	4909      	ldr	r1, [pc, #36]	; (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047c0:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d001      	beq.n	80047d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40022000 	.word	0x40022000

080047e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047ec:	2300      	movs	r3, #0
 80047ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047f0:	2300      	movs	r3, #0
 80047f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d03f      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004808:	d01c      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800480a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800480e:	d802      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00e      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004814:	e01f      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800481a:	d003      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800481c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004820:	d01c      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004822:	e018      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004824:	4b85      	ldr	r3, [pc, #532]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4a84      	ldr	r2, [pc, #528]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800482a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004830:	e015      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	2100      	movs	r1, #0
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fab9 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004842:	e00c      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3320      	adds	r3, #32
 8004848:	2100      	movs	r1, #0
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fba0 	bl	8004f90 <RCCEx_PLLSAI2_Config>
 8004850:	4603      	mov	r3, r0
 8004852:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004854:	e003      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	74fb      	strb	r3, [r7, #19]
      break;
 800485a:	e000      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800485c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004864:	4b75      	ldr	r3, [pc, #468]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004872:	4972      	ldr	r1, [pc, #456]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800487a:	e001      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d03f      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004894:	d01c      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004896:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800489a:	d802      	bhi.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00e      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xda>
 80048a0:	e01f      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80048a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a6:	d003      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80048a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048ac:	d01c      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80048ae:	e018      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048b0:	4b62      	ldr	r3, [pc, #392]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a61      	ldr	r2, [pc, #388]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048bc:	e015      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3304      	adds	r3, #4
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fa73 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048ce:	e00c      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3320      	adds	r3, #32
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fb5a 	bl	8004f90 <RCCEx_PLLSAI2_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048e0:	e003      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	74fb      	strb	r3, [r7, #19]
      break;
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80048e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ea:	7cfb      	ldrb	r3, [r7, #19]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10b      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048f0:	4b52      	ldr	r3, [pc, #328]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048fe:	494f      	ldr	r1, [pc, #316]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004906:	e001      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80a0 	beq.w	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004934:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004938:	4a40      	ldr	r2, [pc, #256]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800493a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493e:	6593      	str	r3, [r2, #88]	; 0x58
 8004940:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494c:	2301      	movs	r3, #1
 800494e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004950:	4b3b      	ldr	r3, [pc, #236]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3a      	ldr	r2, [pc, #232]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800495c:	f7fd f962 	bl	8001c24 <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004962:	e009      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004964:	f7fd f95e 	bl	8001c24 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d902      	bls.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	74fb      	strb	r3, [r7, #19]
        break;
 8004976:	e005      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004978:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0ef      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d15c      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800498a:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01f      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d019      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049a8:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049b4:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	4a20      	ldr	r2, [pc, #128]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049c4:	4b1d      	ldr	r3, [pc, #116]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e6:	f7fd f91d 	bl	8001c24 <HAL_GetTick>
 80049ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ec:	e00b      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fd f919 	bl	8001c24 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d902      	bls.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	74fb      	strb	r3, [r7, #19]
            break;
 8004a04:	e006      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ec      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a1a:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2a:	4904      	ldr	r1, [pc, #16]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a32:	e009      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	74bb      	strb	r3, [r7, #18]
 8004a38:	e006      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a48:	7c7b      	ldrb	r3, [r7, #17]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d105      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a4e:	4b9e      	ldr	r3, [pc, #632]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a52:	4a9d      	ldr	r2, [pc, #628]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a66:	4b98      	ldr	r3, [pc, #608]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f023 0203 	bic.w	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	4994      	ldr	r1, [pc, #592]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a88:	4b8f      	ldr	r3, [pc, #572]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f023 020c 	bic.w	r2, r3, #12
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	498c      	ldr	r1, [pc, #560]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aaa:	4b87      	ldr	r3, [pc, #540]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	4983      	ldr	r1, [pc, #524]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004acc:	4b7e      	ldr	r3, [pc, #504]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	497b      	ldr	r1, [pc, #492]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aee:	4b76      	ldr	r3, [pc, #472]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afc:	4972      	ldr	r1, [pc, #456]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b10:	4b6d      	ldr	r3, [pc, #436]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1e:	496a      	ldr	r1, [pc, #424]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b32:	4b65      	ldr	r3, [pc, #404]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b40:	4961      	ldr	r1, [pc, #388]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b54:	4b5c      	ldr	r3, [pc, #368]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b62:	4959      	ldr	r1, [pc, #356]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b76:	4b54      	ldr	r3, [pc, #336]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b84:	4950      	ldr	r1, [pc, #320]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b98:	4b4b      	ldr	r3, [pc, #300]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	4948      	ldr	r1, [pc, #288]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bba:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	493f      	ldr	r1, [pc, #252]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d028      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bdc:	4b3a      	ldr	r3, [pc, #232]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bea:	4937      	ldr	r1, [pc, #220]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bfc:	4b32      	ldr	r3, [pc, #200]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4a31      	ldr	r2, [pc, #196]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c06:	60d3      	str	r3, [r2, #12]
 8004c08:	e011      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c12:	d10c      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	2101      	movs	r1, #1
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f8c8 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004c2a:	7cfb      	ldrb	r3, [r7, #19]
 8004c2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d028      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c3a:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	491f      	ldr	r1, [pc, #124]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c58:	d106      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c64:	60d3      	str	r3, [r2, #12]
 8004c66:	e011      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c70:	d10c      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	2101      	movs	r1, #1
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f899 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c82:	7cfb      	ldrb	r3, [r7, #19]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004c88:	7cfb      	ldrb	r3, [r7, #19]
 8004c8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02b      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca6:	4908      	ldr	r1, [pc, #32]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb6:	d109      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb8:	4b03      	ldr	r3, [pc, #12]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a02      	ldr	r2, [pc, #8]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc2:	60d3      	str	r3, [r2, #12]
 8004cc4:	e014      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	2101      	movs	r1, #1
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 f867 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ce6:	7cfb      	ldrb	r3, [r7, #19]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004cec:	7cfb      	ldrb	r3, [r7, #19]
 8004cee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02f      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0a:	4928      	ldr	r1, [pc, #160]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d1a:	d10d      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	2102      	movs	r1, #2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f844 	bl	8004db0 <RCCEx_PLLSAI1_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d2c:	7cfb      	ldrb	r3, [r7, #19]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d014      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	74bb      	strb	r3, [r7, #18]
 8004d36:	e011      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3320      	adds	r3, #32
 8004d46:	2102      	movs	r1, #2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 f921 	bl	8004f90 <RCCEx_PLLSAI2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d52:	7cfb      	ldrb	r3, [r7, #19]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d68:	4b10      	ldr	r3, [pc, #64]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d76:	490d      	ldr	r1, [pc, #52]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9a:	4904      	ldr	r1, [pc, #16]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004da2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40021000 	.word	0x40021000

08004db0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dbe:	4b73      	ldr	r3, [pc, #460]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d018      	beq.n	8004dfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dca:	4b70      	ldr	r3, [pc, #448]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0203 	and.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d10d      	bne.n	8004df6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004de2:	4b6a      	ldr	r3, [pc, #424]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
       ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d044      	beq.n	8004e80 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	e041      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d00c      	beq.n	8004e1e <RCCEx_PLLSAI1_Config+0x6e>
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d013      	beq.n	8004e30 <RCCEx_PLLSAI1_Config+0x80>
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d120      	bne.n	8004e4e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e0c:	4b5f      	ldr	r3, [pc, #380]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11d      	bne.n	8004e54 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e1c:	e01a      	b.n	8004e54 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e1e:	4b5b      	ldr	r3, [pc, #364]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d116      	bne.n	8004e58 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e2e:	e013      	b.n	8004e58 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e30:	4b56      	ldr	r3, [pc, #344]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10f      	bne.n	8004e5c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e3c:	4b53      	ldr	r3, [pc, #332]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e4c:	e006      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
      break;
 8004e52:	e004      	b.n	8004e5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e54:	bf00      	nop
 8004e56:	e002      	b.n	8004e5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e58:	bf00      	nop
 8004e5a:	e000      	b.n	8004e5e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e5c:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10d      	bne.n	8004e80 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e64:	4b49      	ldr	r3, [pc, #292]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	4944      	ldr	r1, [pc, #272]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d17d      	bne.n	8004f82 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e86:	4b41      	ldr	r3, [pc, #260]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a40      	ldr	r2, [pc, #256]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e92:	f7fc fec7 	bl	8001c24 <HAL_GetTick>
 8004e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e98:	e009      	b.n	8004eae <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e9a:	f7fc fec3 	bl	8001c24 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d902      	bls.n	8004eae <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	73fb      	strb	r3, [r7, #15]
        break;
 8004eac:	e005      	b.n	8004eba <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eae:	4b37      	ldr	r3, [pc, #220]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1ef      	bne.n	8004e9a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d160      	bne.n	8004f82 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d111      	bne.n	8004eea <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ec6:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6892      	ldr	r2, [r2, #8]
 8004ed6:	0211      	lsls	r1, r2, #8
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68d2      	ldr	r2, [r2, #12]
 8004edc:	0912      	lsrs	r2, r2, #4
 8004ede:	0452      	lsls	r2, r2, #17
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	492a      	ldr	r1, [pc, #168]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	610b      	str	r3, [r1, #16]
 8004ee8:	e027      	b.n	8004f3a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d112      	bne.n	8004f16 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ef0:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ef8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6892      	ldr	r2, [r2, #8]
 8004f00:	0211      	lsls	r1, r2, #8
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6912      	ldr	r2, [r2, #16]
 8004f06:	0852      	lsrs	r2, r2, #1
 8004f08:	3a01      	subs	r2, #1
 8004f0a:	0552      	lsls	r2, r2, #21
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	491f      	ldr	r1, [pc, #124]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	610b      	str	r3, [r1, #16]
 8004f14:	e011      	b.n	8004f3a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f16:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6892      	ldr	r2, [r2, #8]
 8004f26:	0211      	lsls	r1, r2, #8
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6952      	ldr	r2, [r2, #20]
 8004f2c:	0852      	lsrs	r2, r2, #1
 8004f2e:	3a01      	subs	r2, #1
 8004f30:	0652      	lsls	r2, r2, #25
 8004f32:	430a      	orrs	r2, r1
 8004f34:	4915      	ldr	r1, [pc, #84]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f3a:	4b14      	ldr	r3, [pc, #80]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f46:	f7fc fe6d 	bl	8001c24 <HAL_GetTick>
 8004f4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f4c:	e009      	b.n	8004f62 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f4e:	f7fc fe69 	bl	8001c24 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d902      	bls.n	8004f62 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	73fb      	strb	r3, [r7, #15]
          break;
 8004f60:	e005      	b.n	8004f6e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f62:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0ef      	beq.n	8004f4e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	4903      	ldr	r1, [pc, #12]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000

08004f90 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f9e:	4b68      	ldr	r3, [pc, #416]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d018      	beq.n	8004fdc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004faa:	4b65      	ldr	r3, [pc, #404]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0203 	and.w	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d10d      	bne.n	8004fd6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
       ||
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fc2:	4b5f      	ldr	r3, [pc, #380]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
       ||
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d044      	beq.n	8005060 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
 8004fda:	e041      	b.n	8005060 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d00c      	beq.n	8004ffe <RCCEx_PLLSAI2_Config+0x6e>
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d013      	beq.n	8005010 <RCCEx_PLLSAI2_Config+0x80>
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d120      	bne.n	800502e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fec:	4b54      	ldr	r3, [pc, #336]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d11d      	bne.n	8005034 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffc:	e01a      	b.n	8005034 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ffe:	4b50      	ldr	r3, [pc, #320]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005006:	2b00      	cmp	r3, #0
 8005008:	d116      	bne.n	8005038 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500e:	e013      	b.n	8005038 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005010:	4b4b      	ldr	r3, [pc, #300]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10f      	bne.n	800503c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800501c:	4b48      	ldr	r3, [pc, #288]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800502c:	e006      	b.n	800503c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
      break;
 8005032:	e004      	b.n	800503e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005034:	bf00      	nop
 8005036:	e002      	b.n	800503e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005038:	bf00      	nop
 800503a:	e000      	b.n	800503e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800503c:	bf00      	nop
    }

    if(status == HAL_OK)
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10d      	bne.n	8005060 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005044:	4b3e      	ldr	r3, [pc, #248]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	3b01      	subs	r3, #1
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	430b      	orrs	r3, r1
 800505a:	4939      	ldr	r1, [pc, #228]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 800505c:	4313      	orrs	r3, r2
 800505e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d167      	bne.n	8005136 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005066:	4b36      	ldr	r3, [pc, #216]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a35      	ldr	r2, [pc, #212]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 800506c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005072:	f7fc fdd7 	bl	8001c24 <HAL_GetTick>
 8005076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005078:	e009      	b.n	800508e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800507a:	f7fc fdd3 	bl	8001c24 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d902      	bls.n	800508e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	73fb      	strb	r3, [r7, #15]
        break;
 800508c:	e005      	b.n	800509a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800508e:	4b2c      	ldr	r3, [pc, #176]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1ef      	bne.n	800507a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d14a      	bne.n	8005136 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d111      	bne.n	80050ca <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050a6:	4b26      	ldr	r3, [pc, #152]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6892      	ldr	r2, [r2, #8]
 80050b6:	0211      	lsls	r1, r2, #8
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	68d2      	ldr	r2, [r2, #12]
 80050bc:	0912      	lsrs	r2, r2, #4
 80050be:	0452      	lsls	r2, r2, #17
 80050c0:	430a      	orrs	r2, r1
 80050c2:	491f      	ldr	r1, [pc, #124]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	614b      	str	r3, [r1, #20]
 80050c8:	e011      	b.n	80050ee <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050ca:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6892      	ldr	r2, [r2, #8]
 80050da:	0211      	lsls	r1, r2, #8
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6912      	ldr	r2, [r2, #16]
 80050e0:	0852      	lsrs	r2, r2, #1
 80050e2:	3a01      	subs	r2, #1
 80050e4:	0652      	lsls	r2, r2, #25
 80050e6:	430a      	orrs	r2, r1
 80050e8:	4915      	ldr	r1, [pc, #84]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a13      	ldr	r2, [pc, #76]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 80050f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fa:	f7fc fd93 	bl	8001c24 <HAL_GetTick>
 80050fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005100:	e009      	b.n	8005116 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005102:	f7fc fd8f 	bl	8001c24 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d902      	bls.n	8005116 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	73fb      	strb	r3, [r7, #15]
          break;
 8005114:	e005      	b.n	8005122 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ef      	beq.n	8005102 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	4903      	ldr	r1, [pc, #12]	; (8005140 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005132:	4313      	orrs	r3, r2
 8005134:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005136:	7bfb      	ldrb	r3, [r7, #15]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40021000 	.word	0x40021000

08005144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e01d      	b.n	8005192 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fc fba4 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 fbd2 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <HAL_TIM_Base_Start_IT+0x50>)
 80051bc:	4013      	ands	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b06      	cmp	r3, #6
 80051c4:	d00b      	beq.n	80051de <HAL_TIM_Base_Start_IT+0x42>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051cc:	d007      	beq.n	80051de <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0201 	orr.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	00010007 	.word	0x00010007

080051f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e01d      	b.n	800523e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc fb30 	bl	800187c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f000 fb7c 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2201      	movs	r2, #1
 8005258:	6839      	ldr	r1, [r7, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 ff70 	bl	8006140 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1e      	ldr	r2, [pc, #120]	; (80052e0 <HAL_TIM_PWM_Start+0x98>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <HAL_TIM_PWM_Start+0x4a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1d      	ldr	r2, [pc, #116]	; (80052e4 <HAL_TIM_PWM_Start+0x9c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00e      	beq.n	8005292 <HAL_TIM_PWM_Start+0x4a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <HAL_TIM_PWM_Start+0xa0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d009      	beq.n	8005292 <HAL_TIM_PWM_Start+0x4a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <HAL_TIM_PWM_Start+0xa4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_TIM_PWM_Start+0x4a>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <HAL_TIM_PWM_Start+0xa8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d101      	bne.n	8005296 <HAL_TIM_PWM_Start+0x4e>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <HAL_TIM_PWM_Start+0x50>
 8005296:	2300      	movs	r3, #0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <HAL_TIM_PWM_Start+0xac>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b06      	cmp	r3, #6
 80052bc:	d00b      	beq.n	80052d6 <HAL_TIM_PWM_Start+0x8e>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c4:	d007      	beq.n	80052d6 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40013400 	.word	0x40013400
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40014400 	.word	0x40014400
 80052f0:	40014800 	.word	0x40014800
 80052f4:	00010007 	.word	0x00010007

080052f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d122      	bne.n	8005354 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d11b      	bne.n	8005354 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0202 	mvn.w	r2, #2
 8005324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fad7 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 8005340:	e005      	b.n	800534e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fac9 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fada 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b04      	cmp	r3, #4
 8005360:	d122      	bne.n	80053a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b04      	cmp	r3, #4
 800536e:	d11b      	bne.n	80053a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0204 	mvn.w	r2, #4
 8005378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 faad 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fa9f 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fab0 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0208 	mvn.w	r2, #8
 80053cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2204      	movs	r2, #4
 80053d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa83 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa75 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fa86 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b10      	cmp	r3, #16
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b10      	cmp	r3, #16
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0210 	mvn.w	r2, #16
 8005420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2208      	movs	r2, #8
 8005426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa59 	bl	80058ee <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fa4b 	bl	80058da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fa5c 	bl	8005902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	d10e      	bne.n	800547c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d107      	bne.n	800547c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0201 	mvn.w	r2, #1
 8005474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fb f8b2 	bl	80005e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b80      	cmp	r3, #128	; 0x80
 8005488:	d10e      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005494:	2b80      	cmp	r3, #128	; 0x80
 8005496:	d107      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 ff04 	bl	80062b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b6:	d10e      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d107      	bne.n	80054d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fef7 	bl	80062c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b40      	cmp	r3, #64	; 0x40
 80054e2:	d10e      	bne.n	8005502 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d107      	bne.n	8005502 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fa0a 	bl	8005916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b20      	cmp	r3, #32
 800550e:	d10e      	bne.n	800552e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b20      	cmp	r3, #32
 800551c:	d107      	bne.n	800552e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f06f 0220 	mvn.w	r2, #32
 8005526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 feb7 	bl	800629c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800554e:	2302      	movs	r3, #2
 8005550:	e105      	b.n	800575e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2202      	movs	r2, #2
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b14      	cmp	r3, #20
 8005566:	f200 80f0 	bhi.w	800574a <HAL_TIM_PWM_ConfigChannel+0x212>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	080055c5 	.word	0x080055c5
 8005574:	0800574b 	.word	0x0800574b
 8005578:	0800574b 	.word	0x0800574b
 800557c:	0800574b 	.word	0x0800574b
 8005580:	08005605 	.word	0x08005605
 8005584:	0800574b 	.word	0x0800574b
 8005588:	0800574b 	.word	0x0800574b
 800558c:	0800574b 	.word	0x0800574b
 8005590:	08005647 	.word	0x08005647
 8005594:	0800574b 	.word	0x0800574b
 8005598:	0800574b 	.word	0x0800574b
 800559c:	0800574b 	.word	0x0800574b
 80055a0:	08005687 	.word	0x08005687
 80055a4:	0800574b 	.word	0x0800574b
 80055a8:	0800574b 	.word	0x0800574b
 80055ac:	0800574b 	.word	0x0800574b
 80055b0:	080056c9 	.word	0x080056c9
 80055b4:	0800574b 	.word	0x0800574b
 80055b8:	0800574b 	.word	0x0800574b
 80055bc:	0800574b 	.word	0x0800574b
 80055c0:	08005709 	.word	0x08005709
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fa48 	bl	8005a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0208 	orr.w	r2, r2, #8
 80055de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0204 	bic.w	r2, r2, #4
 80055ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6999      	ldr	r1, [r3, #24]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	619a      	str	r2, [r3, #24]
      break;
 8005602:	e0a3      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fab8 	bl	8005b80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6999      	ldr	r1, [r3, #24]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	021a      	lsls	r2, r3, #8
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	619a      	str	r2, [r3, #24]
      break;
 8005644:	e082      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fb21 	bl	8005c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0208 	orr.w	r2, r2, #8
 8005660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0204 	bic.w	r2, r2, #4
 8005670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69d9      	ldr	r1, [r3, #28]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	61da      	str	r2, [r3, #28]
      break;
 8005684:	e062      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fb89 	bl	8005da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69d9      	ldr	r1, [r3, #28]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	021a      	lsls	r2, r3, #8
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	61da      	str	r2, [r3, #28]
      break;
 80056c6:	e041      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fbd2 	bl	8005e78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0208 	orr.w	r2, r2, #8
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0204 	bic.w	r2, r2, #4
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005706:	e021      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fc16 	bl	8005f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005722:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005732:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	021a      	lsls	r2, r3, #8
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005748:	e000      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800574a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop

08005768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_TIM_ConfigClockSource+0x18>
 800577c:	2302      	movs	r3, #2
 800577e:	e0a8      	b.n	80058d2 <HAL_TIM_ConfigClockSource+0x16a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800579e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d067      	beq.n	800588c <HAL_TIM_ConfigClockSource+0x124>
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d80b      	bhi.n	80057d8 <HAL_TIM_ConfigClockSource+0x70>
 80057c0:	2b10      	cmp	r3, #16
 80057c2:	d073      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0x144>
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d802      	bhi.n	80057ce <HAL_TIM_ConfigClockSource+0x66>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d06f      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80057cc:	e078      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d06c      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0x144>
 80057d2:	2b30      	cmp	r3, #48	; 0x30
 80057d4:	d06a      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0x144>
      break;
 80057d6:	e073      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80057d8:	2b70      	cmp	r3, #112	; 0x70
 80057da:	d00d      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0x90>
 80057dc:	2b70      	cmp	r3, #112	; 0x70
 80057de:	d804      	bhi.n	80057ea <HAL_TIM_ConfigClockSource+0x82>
 80057e0:	2b50      	cmp	r3, #80	; 0x50
 80057e2:	d033      	beq.n	800584c <HAL_TIM_ConfigClockSource+0xe4>
 80057e4:	2b60      	cmp	r3, #96	; 0x60
 80057e6:	d041      	beq.n	800586c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80057e8:	e06a      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	d066      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x156>
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f4:	d017      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80057f6:	e063      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6899      	ldr	r1, [r3, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f000 fc7a 	bl	8006100 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800581a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	609a      	str	r2, [r3, #8]
      break;
 8005824:	e04c      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6899      	ldr	r1, [r3, #8]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f000 fc63 	bl	8006100 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005848:	609a      	str	r2, [r3, #8]
      break;
 800584a:	e039      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	6859      	ldr	r1, [r3, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	461a      	mov	r2, r3
 800585a:	f000 fbd7 	bl	800600c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2150      	movs	r1, #80	; 0x50
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fc30 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 800586a:	e029      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	6859      	ldr	r1, [r3, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	461a      	mov	r2, r3
 800587a:	f000 fbf6 	bl	800606a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2160      	movs	r1, #96	; 0x60
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fc20 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 800588a:	e019      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6859      	ldr	r1, [r3, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	461a      	mov	r2, r3
 800589a:	f000 fbb7 	bl	800600c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2140      	movs	r1, #64	; 0x40
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fc10 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 80058aa:	e009      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f000 fc07 	bl	80060ca <TIM_ITRx_SetConfig>
      break;
 80058bc:	e000      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80058be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a40      	ldr	r2, [pc, #256]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594a:	d00f      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a3d      	ldr	r2, [pc, #244]	; (8005a44 <TIM_Base_SetConfig+0x118>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a3c      	ldr	r2, [pc, #240]	; (8005a48 <TIM_Base_SetConfig+0x11c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3b      	ldr	r2, [pc, #236]	; (8005a4c <TIM_Base_SetConfig+0x120>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3a      	ldr	r2, [pc, #232]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d108      	bne.n	800597e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01f      	beq.n	80059c6 <TIM_Base_SetConfig+0x9a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598c:	d01b      	beq.n	80059c6 <TIM_Base_SetConfig+0x9a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2c      	ldr	r2, [pc, #176]	; (8005a44 <TIM_Base_SetConfig+0x118>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d017      	beq.n	80059c6 <TIM_Base_SetConfig+0x9a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2b      	ldr	r2, [pc, #172]	; (8005a48 <TIM_Base_SetConfig+0x11c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d013      	beq.n	80059c6 <TIM_Base_SetConfig+0x9a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <TIM_Base_SetConfig+0x120>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00f      	beq.n	80059c6 <TIM_Base_SetConfig+0x9a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a29      	ldr	r2, [pc, #164]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <TIM_Base_SetConfig+0x9a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a28      	ldr	r2, [pc, #160]	; (8005a54 <TIM_Base_SetConfig+0x128>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <TIM_Base_SetConfig+0x9a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a27      	ldr	r2, [pc, #156]	; (8005a58 <TIM_Base_SetConfig+0x12c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_Base_SetConfig+0x9a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a26      	ldr	r2, [pc, #152]	; (8005a5c <TIM_Base_SetConfig+0x130>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d108      	bne.n	80059d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a10      	ldr	r2, [pc, #64]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00f      	beq.n	8005a24 <TIM_Base_SetConfig+0xf8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a12      	ldr	r2, [pc, #72]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <TIM_Base_SetConfig+0xf8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a11      	ldr	r2, [pc, #68]	; (8005a54 <TIM_Base_SetConfig+0x128>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <TIM_Base_SetConfig+0xf8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <TIM_Base_SetConfig+0x12c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0xf8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a0f      	ldr	r2, [pc, #60]	; (8005a5c <TIM_Base_SetConfig+0x130>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d103      	bne.n	8005a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	615a      	str	r2, [r3, #20]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40013400 	.word	0x40013400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800

08005a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0303 	bic.w	r3, r3, #3
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f023 0302 	bic.w	r3, r3, #2
 8005aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a2c      	ldr	r2, [pc, #176]	; (8005b6c <TIM_OC1_SetConfig+0x10c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00f      	beq.n	8005ae0 <TIM_OC1_SetConfig+0x80>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a2b      	ldr	r2, [pc, #172]	; (8005b70 <TIM_OC1_SetConfig+0x110>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_OC1_SetConfig+0x80>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a2a      	ldr	r2, [pc, #168]	; (8005b74 <TIM_OC1_SetConfig+0x114>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_OC1_SetConfig+0x80>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a29      	ldr	r2, [pc, #164]	; (8005b78 <TIM_OC1_SetConfig+0x118>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC1_SetConfig+0x80>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a28      	ldr	r2, [pc, #160]	; (8005b7c <TIM_OC1_SetConfig+0x11c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10c      	bne.n	8005afa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0308 	bic.w	r3, r3, #8
 8005ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a1b      	ldr	r2, [pc, #108]	; (8005b6c <TIM_OC1_SetConfig+0x10c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00f      	beq.n	8005b22 <TIM_OC1_SetConfig+0xc2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a1a      	ldr	r2, [pc, #104]	; (8005b70 <TIM_OC1_SetConfig+0x110>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00b      	beq.n	8005b22 <TIM_OC1_SetConfig+0xc2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a19      	ldr	r2, [pc, #100]	; (8005b74 <TIM_OC1_SetConfig+0x114>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d007      	beq.n	8005b22 <TIM_OC1_SetConfig+0xc2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a18      	ldr	r2, [pc, #96]	; (8005b78 <TIM_OC1_SetConfig+0x118>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_OC1_SetConfig+0xc2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a17      	ldr	r2, [pc, #92]	; (8005b7c <TIM_OC1_SetConfig+0x11c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d111      	bne.n	8005b46 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	621a      	str	r2, [r3, #32]
}
 8005b60:	bf00      	nop
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	40012c00 	.word	0x40012c00
 8005b70:	40013400 	.word	0x40013400
 8005b74:	40014000 	.word	0x40014000
 8005b78:	40014400 	.word	0x40014400
 8005b7c:	40014800 	.word	0x40014800

08005b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	f023 0210 	bic.w	r2, r3, #16
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0320 	bic.w	r3, r3, #32
 8005bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a28      	ldr	r2, [pc, #160]	; (8005c80 <TIM_OC2_SetConfig+0x100>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_OC2_SetConfig+0x6c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a27      	ldr	r2, [pc, #156]	; (8005c84 <TIM_OC2_SetConfig+0x104>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d10d      	bne.n	8005c08 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a1d      	ldr	r2, [pc, #116]	; (8005c80 <TIM_OC2_SetConfig+0x100>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00f      	beq.n	8005c30 <TIM_OC2_SetConfig+0xb0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <TIM_OC2_SetConfig+0x104>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00b      	beq.n	8005c30 <TIM_OC2_SetConfig+0xb0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a1b      	ldr	r2, [pc, #108]	; (8005c88 <TIM_OC2_SetConfig+0x108>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d007      	beq.n	8005c30 <TIM_OC2_SetConfig+0xb0>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a1a      	ldr	r2, [pc, #104]	; (8005c8c <TIM_OC2_SetConfig+0x10c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_OC2_SetConfig+0xb0>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a19      	ldr	r2, [pc, #100]	; (8005c90 <TIM_OC2_SetConfig+0x110>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d113      	bne.n	8005c58 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40013400 	.word	0x40013400
 8005c88:	40014000 	.word	0x40014000
 8005c8c:	40014400 	.word	0x40014400
 8005c90:	40014800 	.word	0x40014800

08005c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0303 	bic.w	r3, r3, #3
 8005cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a27      	ldr	r2, [pc, #156]	; (8005d90 <TIM_OC3_SetConfig+0xfc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d003      	beq.n	8005cfe <TIM_OC3_SetConfig+0x6a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <TIM_OC3_SetConfig+0x100>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d10d      	bne.n	8005d1a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a1c      	ldr	r2, [pc, #112]	; (8005d90 <TIM_OC3_SetConfig+0xfc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00f      	beq.n	8005d42 <TIM_OC3_SetConfig+0xae>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a1b      	ldr	r2, [pc, #108]	; (8005d94 <TIM_OC3_SetConfig+0x100>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00b      	beq.n	8005d42 <TIM_OC3_SetConfig+0xae>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1a      	ldr	r2, [pc, #104]	; (8005d98 <TIM_OC3_SetConfig+0x104>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d007      	beq.n	8005d42 <TIM_OC3_SetConfig+0xae>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a19      	ldr	r2, [pc, #100]	; (8005d9c <TIM_OC3_SetConfig+0x108>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_OC3_SetConfig+0xae>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a18      	ldr	r2, [pc, #96]	; (8005da0 <TIM_OC3_SetConfig+0x10c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d113      	bne.n	8005d6a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40013400 	.word	0x40013400
 8005d98:	40014000 	.word	0x40014000
 8005d9c:	40014400 	.word	0x40014400
 8005da0:	40014800 	.word	0x40014800

08005da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	031b      	lsls	r3, r3, #12
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a18      	ldr	r2, [pc, #96]	; (8005e64 <TIM_OC4_SetConfig+0xc0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00f      	beq.n	8005e28 <TIM_OC4_SetConfig+0x84>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a17      	ldr	r2, [pc, #92]	; (8005e68 <TIM_OC4_SetConfig+0xc4>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00b      	beq.n	8005e28 <TIM_OC4_SetConfig+0x84>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <TIM_OC4_SetConfig+0xc8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d007      	beq.n	8005e28 <TIM_OC4_SetConfig+0x84>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <TIM_OC4_SetConfig+0xcc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_OC4_SetConfig+0x84>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <TIM_OC4_SetConfig+0xd0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d109      	bne.n	8005e3c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	019b      	lsls	r3, r3, #6
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40012c00 	.word	0x40012c00
 8005e68:	40013400 	.word	0x40013400
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40014400 	.word	0x40014400
 8005e74:	40014800 	.word	0x40014800

08005e78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ebc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a17      	ldr	r2, [pc, #92]	; (8005f2c <TIM_OC5_SetConfig+0xb4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00f      	beq.n	8005ef2 <TIM_OC5_SetConfig+0x7a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a16      	ldr	r2, [pc, #88]	; (8005f30 <TIM_OC5_SetConfig+0xb8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00b      	beq.n	8005ef2 <TIM_OC5_SetConfig+0x7a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <TIM_OC5_SetConfig+0xbc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d007      	beq.n	8005ef2 <TIM_OC5_SetConfig+0x7a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a14      	ldr	r2, [pc, #80]	; (8005f38 <TIM_OC5_SetConfig+0xc0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_OC5_SetConfig+0x7a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a13      	ldr	r2, [pc, #76]	; (8005f3c <TIM_OC5_SetConfig+0xc4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d109      	bne.n	8005f06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	621a      	str	r2, [r3, #32]
}
 8005f20:	bf00      	nop
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	40012c00 	.word	0x40012c00
 8005f30:	40013400 	.word	0x40013400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40014400 	.word	0x40014400
 8005f3c:	40014800 	.word	0x40014800

08005f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	051b      	lsls	r3, r3, #20
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a18      	ldr	r2, [pc, #96]	; (8005ff8 <TIM_OC6_SetConfig+0xb8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00f      	beq.n	8005fbc <TIM_OC6_SetConfig+0x7c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a17      	ldr	r2, [pc, #92]	; (8005ffc <TIM_OC6_SetConfig+0xbc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d00b      	beq.n	8005fbc <TIM_OC6_SetConfig+0x7c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a16      	ldr	r2, [pc, #88]	; (8006000 <TIM_OC6_SetConfig+0xc0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d007      	beq.n	8005fbc <TIM_OC6_SetConfig+0x7c>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a15      	ldr	r2, [pc, #84]	; (8006004 <TIM_OC6_SetConfig+0xc4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_OC6_SetConfig+0x7c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a14      	ldr	r2, [pc, #80]	; (8006008 <TIM_OC6_SetConfig+0xc8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d109      	bne.n	8005fd0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	029b      	lsls	r3, r3, #10
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40012c00 	.word	0x40012c00
 8005ffc:	40013400 	.word	0x40013400
 8006000:	40014000 	.word	0x40014000
 8006004:	40014400 	.word	0x40014400
 8006008:	40014800 	.word	0x40014800

0800600c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f023 0201 	bic.w	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f023 030a 	bic.w	r3, r3, #10
 8006048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800606a:	b480      	push	{r7}
 800606c:	b087      	sub	sp, #28
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f023 0210 	bic.w	r2, r3, #16
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	031b      	lsls	r3, r3, #12
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f043 0307 	orr.w	r3, r3, #7
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	609a      	str	r2, [r3, #8]
}
 80060f4:	bf00      	nop
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800611a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	021a      	lsls	r2, r3, #8
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	431a      	orrs	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4313      	orrs	r3, r2
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	609a      	str	r2, [r3, #8]
}
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	2201      	movs	r2, #1
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a1a      	ldr	r2, [r3, #32]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	43db      	mvns	r3, r3
 8006162:	401a      	ands	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1a      	ldr	r2, [r3, #32]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	fa01 f303 	lsl.w	r3, r1, r3
 8006178:	431a      	orrs	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	621a      	str	r2, [r3, #32]
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e068      	b.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2e      	ldr	r2, [pc, #184]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d004      	beq.n	80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2d      	ldr	r2, [pc, #180]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d108      	bne.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d01d      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006216:	d018      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1b      	ldr	r2, [pc, #108]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d013      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1a      	ldr	r2, [pc, #104]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00e      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a18      	ldr	r2, [pc, #96]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d009      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a13      	ldr	r2, [pc, #76]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d004      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a14      	ldr	r2, [pc, #80]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d10c      	bne.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	4313      	orrs	r3, r2
 800625a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40012c00 	.word	0x40012c00
 8006288:	40013400 	.word	0x40013400
 800628c:	40000400 	.word	0x40000400
 8006290:	40000800 	.word	0x40000800
 8006294:	40000c00 	.word	0x40000c00
 8006298:	40014000 	.word	0x40014000

0800629c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e040      	b.n	800636c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fb fb38 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2224      	movs	r2, #36	; 0x24
 8006304:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0201 	bic.w	r2, r2, #1
 8006314:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f82c 	bl	8006374 <UART_SetConfig>
 800631c:	4603      	mov	r3, r0
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e022      	b.n	800636c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fb92 	bl	8006a58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006342:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006352:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fc19 	bl	8006b9c <UART_CheckIdleState>
 800636a:	4603      	mov	r3, r0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006374:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006378:	b08a      	sub	sp, #40	; 0x28
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800637e:	2300      	movs	r3, #0
 8006380:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	4313      	orrs	r3, r2
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4bb8      	ldr	r3, [pc, #736]	; (800668c <UART_SetConfig+0x318>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063b2:	430b      	orrs	r3, r1
 80063b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4aae      	ldr	r2, [pc, #696]	; (8006690 <UART_SetConfig+0x31c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e2:	4313      	orrs	r3, r2
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f6:	430a      	orrs	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4aa5      	ldr	r2, [pc, #660]	; (8006694 <UART_SetConfig+0x320>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d126      	bne.n	8006452 <UART_SetConfig+0xde>
 8006404:	4ba4      	ldr	r3, [pc, #656]	; (8006698 <UART_SetConfig+0x324>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	2b03      	cmp	r3, #3
 8006410:	d81a      	bhi.n	8006448 <UART_SetConfig+0xd4>
 8006412:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <UART_SetConfig+0xa4>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	08006429 	.word	0x08006429
 800641c:	08006439 	.word	0x08006439
 8006420:	08006431 	.word	0x08006431
 8006424:	08006441 	.word	0x08006441
 8006428:	2301      	movs	r3, #1
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800642e:	e105      	b.n	800663c <UART_SetConfig+0x2c8>
 8006430:	2302      	movs	r3, #2
 8006432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006436:	e101      	b.n	800663c <UART_SetConfig+0x2c8>
 8006438:	2304      	movs	r3, #4
 800643a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800643e:	e0fd      	b.n	800663c <UART_SetConfig+0x2c8>
 8006440:	2308      	movs	r3, #8
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006446:	e0f9      	b.n	800663c <UART_SetConfig+0x2c8>
 8006448:	2310      	movs	r3, #16
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644e:	bf00      	nop
 8006450:	e0f4      	b.n	800663c <UART_SetConfig+0x2c8>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a91      	ldr	r2, [pc, #580]	; (800669c <UART_SetConfig+0x328>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d138      	bne.n	80064ce <UART_SetConfig+0x15a>
 800645c:	4b8e      	ldr	r3, [pc, #568]	; (8006698 <UART_SetConfig+0x324>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006462:	f003 030c 	and.w	r3, r3, #12
 8006466:	2b0c      	cmp	r3, #12
 8006468:	d82c      	bhi.n	80064c4 <UART_SetConfig+0x150>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <UART_SetConfig+0xfc>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	080064a5 	.word	0x080064a5
 8006474:	080064c5 	.word	0x080064c5
 8006478:	080064c5 	.word	0x080064c5
 800647c:	080064c5 	.word	0x080064c5
 8006480:	080064b5 	.word	0x080064b5
 8006484:	080064c5 	.word	0x080064c5
 8006488:	080064c5 	.word	0x080064c5
 800648c:	080064c5 	.word	0x080064c5
 8006490:	080064ad 	.word	0x080064ad
 8006494:	080064c5 	.word	0x080064c5
 8006498:	080064c5 	.word	0x080064c5
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064bd 	.word	0x080064bd
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064aa:	e0c7      	b.n	800663c <UART_SetConfig+0x2c8>
 80064ac:	2302      	movs	r3, #2
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064b2:	e0c3      	b.n	800663c <UART_SetConfig+0x2c8>
 80064b4:	2304      	movs	r3, #4
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ba:	e0bf      	b.n	800663c <UART_SetConfig+0x2c8>
 80064bc:	2308      	movs	r3, #8
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c2:	e0bb      	b.n	800663c <UART_SetConfig+0x2c8>
 80064c4:	2310      	movs	r3, #16
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ca:	bf00      	nop
 80064cc:	e0b6      	b.n	800663c <UART_SetConfig+0x2c8>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a73      	ldr	r2, [pc, #460]	; (80066a0 <UART_SetConfig+0x32c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d125      	bne.n	8006524 <UART_SetConfig+0x1b0>
 80064d8:	4b6f      	ldr	r3, [pc, #444]	; (8006698 <UART_SetConfig+0x324>)
 80064da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064e2:	2b10      	cmp	r3, #16
 80064e4:	d011      	beq.n	800650a <UART_SetConfig+0x196>
 80064e6:	2b10      	cmp	r3, #16
 80064e8:	d802      	bhi.n	80064f0 <UART_SetConfig+0x17c>
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <UART_SetConfig+0x186>
 80064ee:	e014      	b.n	800651a <UART_SetConfig+0x1a6>
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d006      	beq.n	8006502 <UART_SetConfig+0x18e>
 80064f4:	2b30      	cmp	r3, #48	; 0x30
 80064f6:	d00c      	beq.n	8006512 <UART_SetConfig+0x19e>
 80064f8:	e00f      	b.n	800651a <UART_SetConfig+0x1a6>
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006500:	e09c      	b.n	800663c <UART_SetConfig+0x2c8>
 8006502:	2302      	movs	r3, #2
 8006504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006508:	e098      	b.n	800663c <UART_SetConfig+0x2c8>
 800650a:	2304      	movs	r3, #4
 800650c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006510:	e094      	b.n	800663c <UART_SetConfig+0x2c8>
 8006512:	2308      	movs	r3, #8
 8006514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006518:	e090      	b.n	800663c <UART_SetConfig+0x2c8>
 800651a:	2310      	movs	r3, #16
 800651c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006520:	bf00      	nop
 8006522:	e08b      	b.n	800663c <UART_SetConfig+0x2c8>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a5e      	ldr	r2, [pc, #376]	; (80066a4 <UART_SetConfig+0x330>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d125      	bne.n	800657a <UART_SetConfig+0x206>
 800652e:	4b5a      	ldr	r3, [pc, #360]	; (8006698 <UART_SetConfig+0x324>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006538:	2b40      	cmp	r3, #64	; 0x40
 800653a:	d011      	beq.n	8006560 <UART_SetConfig+0x1ec>
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d802      	bhi.n	8006546 <UART_SetConfig+0x1d2>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <UART_SetConfig+0x1dc>
 8006544:	e014      	b.n	8006570 <UART_SetConfig+0x1fc>
 8006546:	2b80      	cmp	r3, #128	; 0x80
 8006548:	d006      	beq.n	8006558 <UART_SetConfig+0x1e4>
 800654a:	2bc0      	cmp	r3, #192	; 0xc0
 800654c:	d00c      	beq.n	8006568 <UART_SetConfig+0x1f4>
 800654e:	e00f      	b.n	8006570 <UART_SetConfig+0x1fc>
 8006550:	2300      	movs	r3, #0
 8006552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006556:	e071      	b.n	800663c <UART_SetConfig+0x2c8>
 8006558:	2302      	movs	r3, #2
 800655a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800655e:	e06d      	b.n	800663c <UART_SetConfig+0x2c8>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006566:	e069      	b.n	800663c <UART_SetConfig+0x2c8>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800656e:	e065      	b.n	800663c <UART_SetConfig+0x2c8>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006576:	bf00      	nop
 8006578:	e060      	b.n	800663c <UART_SetConfig+0x2c8>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a4a      	ldr	r2, [pc, #296]	; (80066a8 <UART_SetConfig+0x334>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d129      	bne.n	80065d8 <UART_SetConfig+0x264>
 8006584:	4b44      	ldr	r3, [pc, #272]	; (8006698 <UART_SetConfig+0x324>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800658e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006592:	d014      	beq.n	80065be <UART_SetConfig+0x24a>
 8006594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006598:	d802      	bhi.n	80065a0 <UART_SetConfig+0x22c>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d007      	beq.n	80065ae <UART_SetConfig+0x23a>
 800659e:	e016      	b.n	80065ce <UART_SetConfig+0x25a>
 80065a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a4:	d007      	beq.n	80065b6 <UART_SetConfig+0x242>
 80065a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065aa:	d00c      	beq.n	80065c6 <UART_SetConfig+0x252>
 80065ac:	e00f      	b.n	80065ce <UART_SetConfig+0x25a>
 80065ae:	2300      	movs	r3, #0
 80065b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b4:	e042      	b.n	800663c <UART_SetConfig+0x2c8>
 80065b6:	2302      	movs	r3, #2
 80065b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065bc:	e03e      	b.n	800663c <UART_SetConfig+0x2c8>
 80065be:	2304      	movs	r3, #4
 80065c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065c4:	e03a      	b.n	800663c <UART_SetConfig+0x2c8>
 80065c6:	2308      	movs	r3, #8
 80065c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065cc:	e036      	b.n	800663c <UART_SetConfig+0x2c8>
 80065ce:	2310      	movs	r3, #16
 80065d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065d4:	bf00      	nop
 80065d6:	e031      	b.n	800663c <UART_SetConfig+0x2c8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a2c      	ldr	r2, [pc, #176]	; (8006690 <UART_SetConfig+0x31c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d129      	bne.n	8006636 <UART_SetConfig+0x2c2>
 80065e2:	4b2d      	ldr	r3, [pc, #180]	; (8006698 <UART_SetConfig+0x324>)
 80065e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f0:	d014      	beq.n	800661c <UART_SetConfig+0x2a8>
 80065f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f6:	d802      	bhi.n	80065fe <UART_SetConfig+0x28a>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <UART_SetConfig+0x298>
 80065fc:	e016      	b.n	800662c <UART_SetConfig+0x2b8>
 80065fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006602:	d007      	beq.n	8006614 <UART_SetConfig+0x2a0>
 8006604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006608:	d00c      	beq.n	8006624 <UART_SetConfig+0x2b0>
 800660a:	e00f      	b.n	800662c <UART_SetConfig+0x2b8>
 800660c:	2300      	movs	r3, #0
 800660e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006612:	e013      	b.n	800663c <UART_SetConfig+0x2c8>
 8006614:	2302      	movs	r3, #2
 8006616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800661a:	e00f      	b.n	800663c <UART_SetConfig+0x2c8>
 800661c:	2304      	movs	r3, #4
 800661e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006622:	e00b      	b.n	800663c <UART_SetConfig+0x2c8>
 8006624:	2308      	movs	r3, #8
 8006626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800662a:	e007      	b.n	800663c <UART_SetConfig+0x2c8>
 800662c:	2310      	movs	r3, #16
 800662e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <UART_SetConfig+0x2c8>
 8006636:	2310      	movs	r3, #16
 8006638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a13      	ldr	r2, [pc, #76]	; (8006690 <UART_SetConfig+0x31c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	f040 80fe 	bne.w	8006844 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800664c:	2b08      	cmp	r3, #8
 800664e:	d837      	bhi.n	80066c0 <UART_SetConfig+0x34c>
 8006650:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <UART_SetConfig+0x2e4>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	0800667d 	.word	0x0800667d
 800665c:	080066c1 	.word	0x080066c1
 8006660:	08006685 	.word	0x08006685
 8006664:	080066c1 	.word	0x080066c1
 8006668:	080066b1 	.word	0x080066b1
 800666c:	080066c1 	.word	0x080066c1
 8006670:	080066c1 	.word	0x080066c1
 8006674:	080066c1 	.word	0x080066c1
 8006678:	080066b9 	.word	0x080066b9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800667c:	f7fe f826 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8006680:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006682:	e020      	b.n	80066c6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006684:	4b09      	ldr	r3, [pc, #36]	; (80066ac <UART_SetConfig+0x338>)
 8006686:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006688:	e01d      	b.n	80066c6 <UART_SetConfig+0x352>
 800668a:	bf00      	nop
 800668c:	efff69f3 	.word	0xefff69f3
 8006690:	40008000 	.word	0x40008000
 8006694:	40013800 	.word	0x40013800
 8006698:	40021000 	.word	0x40021000
 800669c:	40004400 	.word	0x40004400
 80066a0:	40004800 	.word	0x40004800
 80066a4:	40004c00 	.word	0x40004c00
 80066a8:	40005000 	.word	0x40005000
 80066ac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80066b0:	f7fd ff76 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 80066b4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066b6:	e006      	b.n	80066c6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80066b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066be:	e002      	b.n	80066c6 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	76fb      	strb	r3, [r7, #27]
        break;
 80066c4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 81b9 	beq.w	8006a40 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	4413      	add	r3, r2
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d305      	bcc.n	80066ea <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d902      	bls.n	80066f0 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	76fb      	strb	r3, [r7, #27]
 80066ee:	e1a7      	b.n	8006a40 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80066f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	f200 8092 	bhi.w	800681e <UART_SetConfig+0x4aa>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <UART_SetConfig+0x38c>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006725 	.word	0x08006725
 8006704:	0800681f 	.word	0x0800681f
 8006708:	08006773 	.word	0x08006773
 800670c:	0800681f 	.word	0x0800681f
 8006710:	080067a7 	.word	0x080067a7
 8006714:	0800681f 	.word	0x0800681f
 8006718:	0800681f 	.word	0x0800681f
 800671c:	0800681f 	.word	0x0800681f
 8006720:	080067f5 	.word	0x080067f5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006724:	f7fd ffd2 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8006728:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4619      	mov	r1, r3
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	f04f 0400 	mov.w	r4, #0
 800673a:	0214      	lsls	r4, r2, #8
 800673c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006740:	020b      	lsls	r3, r1, #8
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	6852      	ldr	r2, [r2, #4]
 8006746:	0852      	lsrs	r2, r2, #1
 8006748:	4611      	mov	r1, r2
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	eb13 0b01 	adds.w	fp, r3, r1
 8006752:	eb44 0c02 	adc.w	ip, r4, r2
 8006756:	4658      	mov	r0, fp
 8006758:	4661      	mov	r1, ip
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f04f 0400 	mov.w	r4, #0
 8006762:	461a      	mov	r2, r3
 8006764:	4623      	mov	r3, r4
 8006766:	f7f9 fd2f 	bl	80001c8 <__aeabi_uldivmod>
 800676a:	4603      	mov	r3, r0
 800676c:	460c      	mov	r4, r1
 800676e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006770:	e058      	b.n	8006824 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	f04f 0400 	mov.w	r4, #0
 800677c:	49ae      	ldr	r1, [pc, #696]	; (8006a38 <UART_SetConfig+0x6c4>)
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	eb13 0b01 	adds.w	fp, r3, r1
 8006786:	eb44 0c02 	adc.w	ip, r4, r2
 800678a:	4658      	mov	r0, fp
 800678c:	4661      	mov	r1, ip
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f04f 0400 	mov.w	r4, #0
 8006796:	461a      	mov	r2, r3
 8006798:	4623      	mov	r3, r4
 800679a:	f7f9 fd15 	bl	80001c8 <__aeabi_uldivmod>
 800679e:	4603      	mov	r3, r0
 80067a0:	460c      	mov	r4, r1
 80067a2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80067a4:	e03e      	b.n	8006824 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80067a6:	f7fd fefb 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 80067aa:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4619      	mov	r1, r3
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	f04f 0400 	mov.w	r4, #0
 80067bc:	0214      	lsls	r4, r2, #8
 80067be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80067c2:	020b      	lsls	r3, r1, #8
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6852      	ldr	r2, [r2, #4]
 80067c8:	0852      	lsrs	r2, r2, #1
 80067ca:	4611      	mov	r1, r2
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	eb13 0b01 	adds.w	fp, r3, r1
 80067d4:	eb44 0c02 	adc.w	ip, r4, r2
 80067d8:	4658      	mov	r0, fp
 80067da:	4661      	mov	r1, ip
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f04f 0400 	mov.w	r4, #0
 80067e4:	461a      	mov	r2, r3
 80067e6:	4623      	mov	r3, r4
 80067e8:	f7f9 fcee 	bl	80001c8 <__aeabi_uldivmod>
 80067ec:	4603      	mov	r3, r0
 80067ee:	460c      	mov	r4, r1
 80067f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80067f2:	e017      	b.n	8006824 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	085b      	lsrs	r3, r3, #1
 80067fa:	f04f 0400 	mov.w	r4, #0
 80067fe:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006802:	f144 0100 	adc.w	r1, r4, #0
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f04f 0400 	mov.w	r4, #0
 800680e:	461a      	mov	r2, r3
 8006810:	4623      	mov	r3, r4
 8006812:	f7f9 fcd9 	bl	80001c8 <__aeabi_uldivmod>
 8006816:	4603      	mov	r3, r0
 8006818:	460c      	mov	r4, r1
 800681a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800681c:	e002      	b.n	8006824 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	76fb      	strb	r3, [r7, #27]
            break;
 8006822:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800682a:	d308      	bcc.n	800683e <UART_SetConfig+0x4ca>
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006832:	d204      	bcs.n	800683e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	60da      	str	r2, [r3, #12]
 800683c:	e100      	b.n	8006a40 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	76fb      	strb	r3, [r7, #27]
 8006842:	e0fd      	b.n	8006a40 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800684c:	f040 8084 	bne.w	8006958 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006854:	2b08      	cmp	r3, #8
 8006856:	d85f      	bhi.n	8006918 <UART_SetConfig+0x5a4>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <UART_SetConfig+0x4ec>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006885 	.word	0x08006885
 8006864:	080068a5 	.word	0x080068a5
 8006868:	080068c5 	.word	0x080068c5
 800686c:	08006919 	.word	0x08006919
 8006870:	080068e1 	.word	0x080068e1
 8006874:	08006919 	.word	0x08006919
 8006878:	08006919 	.word	0x08006919
 800687c:	08006919 	.word	0x08006919
 8006880:	08006901 	.word	0x08006901
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006884:	f7fd ff22 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8006888:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	005a      	lsls	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	085b      	lsrs	r3, r3, #1
 8006894:	441a      	add	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	fbb2 f3f3 	udiv	r3, r2, r3
 800689e:	b29b      	uxth	r3, r3
 80068a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068a2:	e03c      	b.n	800691e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a4:	f7fd ff28 	bl	80046f8 <HAL_RCC_GetPCLK2Freq>
 80068a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	005a      	lsls	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	085b      	lsrs	r3, r3, #1
 80068b4:	441a      	add	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80068be:	b29b      	uxth	r3, r3
 80068c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068c2:	e02c      	b.n	800691e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80068ce:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6852      	ldr	r2, [r2, #4]
 80068d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80068da:	b29b      	uxth	r3, r3
 80068dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068de:	e01e      	b.n	800691e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068e0:	f7fd fe5e 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 80068e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	005a      	lsls	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	085b      	lsrs	r3, r3, #1
 80068f0:	441a      	add	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068fe:	e00e      	b.n	800691e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	085b      	lsrs	r3, r3, #1
 8006906:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006912:	b29b      	uxth	r3, r3
 8006914:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006916:	e002      	b.n	800691e <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	76fb      	strb	r3, [r7, #27]
        break;
 800691c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	2b0f      	cmp	r3, #15
 8006922:	d916      	bls.n	8006952 <UART_SetConfig+0x5de>
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800692a:	d212      	bcs.n	8006952 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	b29b      	uxth	r3, r3
 8006930:	f023 030f 	bic.w	r3, r3, #15
 8006934:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	085b      	lsrs	r3, r3, #1
 800693a:	b29b      	uxth	r3, r3
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	b29a      	uxth	r2, r3
 8006942:	89fb      	ldrh	r3, [r7, #14]
 8006944:	4313      	orrs	r3, r2
 8006946:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	89fa      	ldrh	r2, [r7, #14]
 800694e:	60da      	str	r2, [r3, #12]
 8006950:	e076      	b.n	8006a40 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	76fb      	strb	r3, [r7, #27]
 8006956:	e073      	b.n	8006a40 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006958:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800695c:	2b08      	cmp	r3, #8
 800695e:	d85c      	bhi.n	8006a1a <UART_SetConfig+0x6a6>
 8006960:	a201      	add	r2, pc, #4	; (adr r2, 8006968 <UART_SetConfig+0x5f4>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	0800698d 	.word	0x0800698d
 800696c:	080069ab 	.word	0x080069ab
 8006970:	080069c9 	.word	0x080069c9
 8006974:	08006a1b 	.word	0x08006a1b
 8006978:	080069e5 	.word	0x080069e5
 800697c:	08006a1b 	.word	0x08006a1b
 8006980:	08006a1b 	.word	0x08006a1b
 8006984:	08006a1b 	.word	0x08006a1b
 8006988:	08006a03 	.word	0x08006a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800698c:	f7fd fe9e 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8006990:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	085a      	lsrs	r2, r3, #1
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	441a      	add	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069a8:	e03a      	b.n	8006a20 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069aa:	f7fd fea5 	bl	80046f8 <HAL_RCC_GetPCLK2Freq>
 80069ae:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	085a      	lsrs	r2, r3, #1
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	441a      	add	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069c6:	e02b      	b.n	8006a20 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	085b      	lsrs	r3, r3, #1
 80069ce:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80069d2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6852      	ldr	r2, [r2, #4]
 80069da:	fbb3 f3f2 	udiv	r3, r3, r2
 80069de:	b29b      	uxth	r3, r3
 80069e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069e2:	e01d      	b.n	8006a20 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069e4:	f7fd fddc 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 80069e8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	085a      	lsrs	r2, r3, #1
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	441a      	add	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a00:	e00e      	b.n	8006a20 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	085b      	lsrs	r3, r3, #1
 8006a08:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a18:	e002      	b.n	8006a20 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	76fb      	strb	r3, [r7, #27]
        break;
 8006a1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	2b0f      	cmp	r3, #15
 8006a24:	d90a      	bls.n	8006a3c <UART_SetConfig+0x6c8>
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2c:	d206      	bcs.n	8006a3c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	60da      	str	r2, [r3, #12]
 8006a36:	e003      	b.n	8006a40 <UART_SetConfig+0x6cc>
 8006a38:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006a4c:	7efb      	ldrb	r3, [r7, #27]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3728      	adds	r7, #40	; 0x28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006a58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00a      	beq.n	8006a82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00a      	beq.n	8006aa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00a      	beq.n	8006ac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	f003 0310 	and.w	r3, r3, #16
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01a      	beq.n	8006b6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b56:	d10a      	bne.n	8006b6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	605a      	str	r2, [r3, #4]
  }
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006baa:	f7fb f83b 	bl	8001c24 <HAL_GetTick>
 8006bae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d10e      	bne.n	8006bdc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f82a 	bl	8006c26 <UART_WaitOnFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e020      	b.n	8006c1e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d10e      	bne.n	8006c08 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f814 	bl	8006c26 <UART_WaitOnFlagUntilTimeout>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e00a      	b.n	8006c1e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2220      	movs	r2, #32
 8006c12:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	603b      	str	r3, [r7, #0]
 8006c32:	4613      	mov	r3, r2
 8006c34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c36:	e05d      	b.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d059      	beq.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c40:	f7fa fff0 	bl	8001c24 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d302      	bcc.n	8006c56 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d11b      	bne.n	8006c8e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c64:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0201 	bic.w	r2, r2, #1
 8006c74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e042      	b.n	8006d14 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d02b      	beq.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006caa:	d123      	bne.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cb4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cc4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e00f      	b.n	8006d14 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	bf0c      	ite	eq
 8006d04:	2301      	moveq	r3, #1
 8006d06:	2300      	movne	r3, #0
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d092      	beq.n	8006c38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <__libc_init_array>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	4e0d      	ldr	r6, [pc, #52]	; (8006d54 <__libc_init_array+0x38>)
 8006d20:	4c0d      	ldr	r4, [pc, #52]	; (8006d58 <__libc_init_array+0x3c>)
 8006d22:	1ba4      	subs	r4, r4, r6
 8006d24:	10a4      	asrs	r4, r4, #2
 8006d26:	2500      	movs	r5, #0
 8006d28:	42a5      	cmp	r5, r4
 8006d2a:	d109      	bne.n	8006d40 <__libc_init_array+0x24>
 8006d2c:	4e0b      	ldr	r6, [pc, #44]	; (8006d5c <__libc_init_array+0x40>)
 8006d2e:	4c0c      	ldr	r4, [pc, #48]	; (8006d60 <__libc_init_array+0x44>)
 8006d30:	f000 f820 	bl	8006d74 <_init>
 8006d34:	1ba4      	subs	r4, r4, r6
 8006d36:	10a4      	asrs	r4, r4, #2
 8006d38:	2500      	movs	r5, #0
 8006d3a:	42a5      	cmp	r5, r4
 8006d3c:	d105      	bne.n	8006d4a <__libc_init_array+0x2e>
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d44:	4798      	blx	r3
 8006d46:	3501      	adds	r5, #1
 8006d48:	e7ee      	b.n	8006d28 <__libc_init_array+0xc>
 8006d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d4e:	4798      	blx	r3
 8006d50:	3501      	adds	r5, #1
 8006d52:	e7f2      	b.n	8006d3a <__libc_init_array+0x1e>
 8006d54:	08006ddc 	.word	0x08006ddc
 8006d58:	08006ddc 	.word	0x08006ddc
 8006d5c:	08006ddc 	.word	0x08006ddc
 8006d60:	08006de0 	.word	0x08006de0

08006d64 <memset>:
 8006d64:	4402      	add	r2, r0
 8006d66:	4603      	mov	r3, r0
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d100      	bne.n	8006d6e <memset+0xa>
 8006d6c:	4770      	bx	lr
 8006d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d72:	e7f9      	b.n	8006d68 <memset+0x4>

08006d74 <_init>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	bf00      	nop
 8006d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7a:	bc08      	pop	{r3}
 8006d7c:	469e      	mov	lr, r3
 8006d7e:	4770      	bx	lr

08006d80 <_fini>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	bf00      	nop
 8006d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d86:	bc08      	pop	{r3}
 8006d88:	469e      	mov	lr, r3
 8006d8a:	4770      	bx	lr
