
empc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e80  08006e80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e80  08006e80  00016e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e88  08006e88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000010  08006e9c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006e9c  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bdc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000234a  00000000  00000000  00033c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  00035f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  000372b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000291dd  00000000  00000000  000384e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfe0  00000000  00000000  000616bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010785e  00000000  00000000  0006f69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176efb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005304  00000000  00000000  00176f78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e20 	.word	0x08006e20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006e20 	.word	0x08006e20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <swap>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void swap(int* a, int* b)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
	int t = *a;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	60fb      	str	r3, [r7, #12]
    *a = *b;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	601a      	str	r2, [r3, #0]
    *b = t;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <partition>:

int partition (int arr[], int low, int high)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b088      	sub	sp, #32
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
	int pivot = arr[high];    // pivot
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	4413      	add	r3, r2
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	617b      	str	r3, [r7, #20]
	int i = (low - 1);  // Index of smaller element
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	3b01      	subs	r3, #1
 800050e:	61fb      	str	r3, [r7, #28]

    for (int j = low; j <= high- 1; j++)
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	61bb      	str	r3, [r7, #24]
 8000514:	e018      	b.n	8000548 <partition+0x56>
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
 8000516:	69bb      	ldr	r3, [r7, #24]
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	429a      	cmp	r2, r3
 8000524:	dd0d      	ble.n	8000542 <partition+0x50>
        {
            i++;    // increment index of smaller element
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	3301      	adds	r3, #1
 800052a:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	18d0      	adds	r0, r2, r3
 8000534:	69bb      	ldr	r3, [r7, #24]
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	4413      	add	r3, r2
 800053c:	4619      	mov	r1, r3
 800053e:	f7ff ffc3 	bl	80004c8 <swap>
    for (int j = low; j <= high- 1; j++)
 8000542:	69bb      	ldr	r3, [r7, #24]
 8000544:	3301      	adds	r3, #1
 8000546:	61bb      	str	r3, [r7, #24]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3b01      	subs	r3, #1
 800054c:	69ba      	ldr	r2, [r7, #24]
 800054e:	429a      	cmp	r2, r3
 8000550:	dde1      	ble.n	8000516 <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	3301      	adds	r3, #1
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	18d0      	adds	r0, r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	68fa      	ldr	r2, [r7, #12]
 8000562:	4413      	add	r3, r2
 8000564:	4619      	mov	r1, r3
 8000566:	f7ff ffaf 	bl	80004c8 <swap>
    return (i + 1);
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3301      	adds	r3, #1
}
 800056e:	4618      	mov	r0, r3
 8000570:	3720      	adds	r7, #32
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <quickSort>:

void quickSort(int arr[], int low, int high)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b086      	sub	sp, #24
 800057a:	af00      	add	r7, sp, #0
 800057c:	60f8      	str	r0, [r7, #12]
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	607a      	str	r2, [r7, #4]
    if (low < high)
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	da13      	bge.n	80005b2 <quickSort+0x3c>
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
    	int pi = partition(arr, low, high);
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f7ff ffaf 	bl	80004f2 <partition>
 8000594:	6178      	str	r0, [r7, #20]

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	3b01      	subs	r3, #1
 800059a:	461a      	mov	r2, r3
 800059c:	68b9      	ldr	r1, [r7, #8]
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f7ff ffe9 	bl	8000576 <quickSort>
        quickSort(arr, pi + 1, high);
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	3301      	adds	r3, #1
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4619      	mov	r1, r3
 80005ac:	68f8      	ldr	r0, [r7, #12]
 80005ae:	f7ff ffe2 	bl	8000576 <quickSort>
    }
}
 80005b2:	bf00      	nop
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <get_median>:

int get_median(int *values){
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b084      	sub	sp, #16
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
	int n = sizeof(values)/sizeof(values[0]);
 80005c2:	2301      	movs	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
    quickSort(values, 0, n-1);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	461a      	mov	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff ffd1 	bl	8000576 <quickSort>
    return values[SIZE/2];
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	68db      	ldr	r3, [r3, #12]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80005e4:	b0b0      	sub	sp, #192	; 0xc0
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	f040 84c9 	bne.w	8000f8a <HAL_TIM_PeriodElapsedCallback+0x9aa>
    {
		if(iter < 10000){
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000600:	4293      	cmp	r3, r2
 8000602:	d807      	bhi.n	8000614 <HAL_TIM_PeriodElapsedCallback+0x34>
			iter++;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800060e:	801a      	strh	r2, [r3, #0]
			u /= 1000;
			u += us;
		}
	}
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
}
 8000610:	f000 bcbb 	b.w	8000f8a <HAL_TIM_PeriodElapsedCallback+0x9aa>
			for(uint8_t i = 0; i<SIZE; i++){
 8000614:	2300      	movs	r3, #0
 8000616:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800061a:	e022      	b.n	8000662 <HAL_TIM_PeriodElapsedCallback+0x82>
 800061c:	200000d8 	.word	0x200000d8
 8000620:	20000030 	.word	0x20000030
				value0[i] = (int)adc_buf0[i];
 8000624:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000628:	4ac9      	ldr	r2, [pc, #804]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800062a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800062e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8000638:	440b      	add	r3, r1
 800063a:	f843 2c9c 	str.w	r2, [r3, #-156]
				value1[i] = (int)adc_buf1[i];
 800063e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000642:	4ac4      	ldr	r2, [pc, #784]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000644:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000648:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8000652:	440b      	add	r3, r1
 8000654:	f843 2cb8 	str.w	r2, [r3, #-184]
			for(uint8_t i = 0; i<SIZE; i++){
 8000658:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800065c:	3301      	adds	r3, #1
 800065e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8000662:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000666:	2b06      	cmp	r3, #6
 8000668:	d9dc      	bls.n	8000624 <HAL_TIM_PeriodElapsedCallback+0x44>
			y[0] = get_median(value0); y[0] *= 1075; y[0] /= 10000;
 800066a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ffa3 	bl	80005ba <get_median>
 8000674:	4602      	mov	r2, r0
 8000676:	4bb8      	ldr	r3, [pc, #736]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	4bb7      	ldr	r3, [pc, #732]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f240 4233 	movw	r2, #1075	; 0x433
 8000682:	fb02 f303 	mul.w	r3, r2, r3
 8000686:	4ab4      	ldr	r2, [pc, #720]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	4bb3      	ldr	r3, [pc, #716]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4ab3      	ldr	r2, [pc, #716]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000690:	fb82 1203 	smull	r1, r2, r2, r3
 8000694:	1312      	asrs	r2, r2, #12
 8000696:	17db      	asrs	r3, r3, #31
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	4aaf      	ldr	r2, [pc, #700]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800069c:	6013      	str	r3, [r2, #0]
			y[1] = get_median(value1);   y[1] *= 28900; y[1] /= 10000;
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff89 	bl	80005ba <get_median>
 80006a8:	4602      	mov	r2, r0
 80006aa:	4bab      	ldr	r3, [pc, #684]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	4baa      	ldr	r3, [pc, #680]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	f247 02e4 	movw	r2, #28900	; 0x70e4
 80006b6:	fb02 f303 	mul.w	r3, r2, r3
 80006ba:	4aa7      	ldr	r2, [pc, #668]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80006bc:	6053      	str	r3, [r2, #4]
 80006be:	4ba6      	ldr	r3, [pc, #664]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	4aa6      	ldr	r2, [pc, #664]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	1312      	asrs	r2, r2, #12
 80006ca:	17db      	asrs	r3, r3, #31
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	4aa2      	ldr	r2, [pc, #648]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80006d0:	6053      	str	r3, [r2, #4]
			int x0_prev = x[0];
 80006d2:	4ba3      	ldr	r3, [pc, #652]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			int x1_prev = x[1];
 80006da:	4ba1      	ldr	r3, [pc, #644]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			x_est[0] = 97136*x0_prev - 978*x1_prev + 14878*u;    x_est[0] /= 100000;
 80006e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80006e6:	4a9f      	ldr	r2, [pc, #636]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80006e8:	fb02 f203 	mul.w	r2, r2, r3
 80006ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80006f0:	499d      	ldr	r1, [pc, #628]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80006f2:	fb01 f303 	mul.w	r3, r1, r3
 80006f6:	441a      	add	r2, r3
 80006f8:	4b9c      	ldr	r3, [pc, #624]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f643 211e 	movw	r1, #14878	; 0x3a1e
 8000700:	fb01 f303 	mul.w	r3, r1, r3
 8000704:	4413      	add	r3, r2
 8000706:	4a9a      	ldr	r2, [pc, #616]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	4b99      	ldr	r3, [pc, #612]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a99      	ldr	r2, [pc, #612]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000710:	fb82 1203 	smull	r1, r2, r2, r3
 8000714:	1352      	asrs	r2, r2, #13
 8000716:	17db      	asrs	r3, r3, #31
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	4a95      	ldr	r2, [pc, #596]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800071c:	6013      	str	r3, [r2, #0]
			x_est[1] = 173187*x0_prev + 97046*x1_prev + 18083*u; x_est[1] /= 100000;
 800071e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000722:	4a95      	ldr	r2, [pc, #596]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000724:	fb02 f203 	mul.w	r2, r2, r3
 8000728:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800072c:	4993      	ldr	r1, [pc, #588]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800072e:	fb01 f303 	mul.w	r3, r1, r3
 8000732:	441a      	add	r2, r3
 8000734:	4b8d      	ldr	r3, [pc, #564]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f244 61a3 	movw	r1, #18083	; 0x46a3
 800073c:	fb01 f303 	mul.w	r3, r1, r3
 8000740:	4413      	add	r3, r2
 8000742:	4a8b      	ldr	r2, [pc, #556]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000744:	6053      	str	r3, [r2, #4]
 8000746:	4b8a      	ldr	r3, [pc, #552]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	4a8a      	ldr	r2, [pc, #552]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800074c:	fb82 1203 	smull	r1, r2, r2, r3
 8000750:	1352      	asrs	r2, r2, #13
 8000752:	17db      	asrs	r3, r3, #31
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	4a86      	ldr	r2, [pc, #536]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000758:	6053      	str	r3, [r2, #4]
			x[0] = 200*y[0] + 800*x_est[0]; x[0] /= 1000;
 800075a:	4b7f      	ldr	r3, [pc, #508]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	22c8      	movs	r2, #200	; 0xc8
 8000760:	fb02 f203 	mul.w	r2, r2, r3
 8000764:	4b82      	ldr	r3, [pc, #520]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f44f 7148 	mov.w	r1, #800	; 0x320
 800076c:	fb01 f303 	mul.w	r3, r1, r3
 8000770:	4413      	add	r3, r2
 8000772:	4a7b      	ldr	r2, [pc, #492]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	4b7a      	ldr	r3, [pc, #488]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a81      	ldr	r2, [pc, #516]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800077c:	fb82 1203 	smull	r1, r2, r2, r3
 8000780:	1192      	asrs	r2, r2, #6
 8000782:	17db      	asrs	r3, r3, #31
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	4a76      	ldr	r2, [pc, #472]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000788:	6013      	str	r3, [r2, #0]
			x[1] = 200*y[1] + 800*x_est[1]; x[1] /= 1000;
 800078a:	4b73      	ldr	r3, [pc, #460]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	22c8      	movs	r2, #200	; 0xc8
 8000790:	fb02 f203 	mul.w	r2, r2, r3
 8000794:	4b76      	ldr	r3, [pc, #472]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	f44f 7148 	mov.w	r1, #800	; 0x320
 800079c:	fb01 f303 	mul.w	r3, r1, r3
 80007a0:	4413      	add	r3, r2
 80007a2:	4a6f      	ldr	r2, [pc, #444]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80007a4:	6053      	str	r3, [r2, #4]
 80007a6:	4b6e      	ldr	r3, [pc, #440]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	4a75      	ldr	r2, [pc, #468]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80007ac:	fb82 1203 	smull	r1, r2, r2, r3
 80007b0:	1192      	asrs	r2, r2, #6
 80007b2:	17db      	asrs	r3, r3, #31
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	4a6a      	ldr	r2, [pc, #424]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80007b8:	6053      	str	r3, [r2, #4]
			int dx0 = x[0] - xs0;
 80007ba:	4b69      	ldr	r3, [pc, #420]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2232      	movs	r2, #50	; 0x32
 80007c0:	1a9b      	subs	r3, r3, r2
 80007c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			int dx1 = x[1] - xs1;
 80007c6:	4b66      	ldr	r3, [pc, #408]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			int H11 = -1000*dx0-49999;              H11 = H11<=0;
 80007d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80007d8:	4a6a      	ldr	r2, [pc, #424]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 80007e2:	3b4f      	subs	r3, #79	; 0x4f
 80007e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80007e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	bfd4      	ite	le
 80007f0:	2301      	movle	r3, #1
 80007f2:	2300      	movgt	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			int H12 = -948*dx0+317*dx1-246980;      H12 = H12<=0;
 80007fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80007fe:	4a62      	ldr	r2, [pc, #392]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000800:	fb02 f203 	mul.w	r2, r2, r3
 8000804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000808:	f240 113d 	movw	r1, #317	; 0x13d
 800080c:	fb01 f303 	mul.w	r3, r1, r3
 8000810:	4413      	add	r3, r2
 8000812:	f5a3 3371 	sub.w	r3, r3, #246784	; 0x3c400
 8000816:	3bc4      	subs	r3, #196	; 0xc4
 8000818:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800081c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000820:	2b00      	cmp	r3, #0
 8000822:	bfd4      	ite	le
 8000824:	2301      	movle	r3, #1
 8000826:	2300      	movgt	r3, #0
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			int H13 = 948*dx0-317*dx1-740942;       H13 = H13<=0;
 800082e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000832:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 8000836:	fb02 f203 	mul.w	r2, r2, r3
 800083a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800083e:	f46f 719e 	mvn.w	r1, #316	; 0x13c
 8000842:	fb01 f303 	mul.w	r3, r1, r3
 8000846:	4413      	add	r3, r2
 8000848:	f5a3 2334 	sub.w	r3, r3, #737280	; 0xb4000
 800084c:	f6a3 634e 	subw	r3, r3, #3662	; 0xe4e
 8000850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000858:	2b00      	cmp	r3, #0
 800085a:	bfd4      	ite	le
 800085c:	2301      	movle	r3, #1
 800085e:	2300      	movgt	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			int H14 = 997*dx0+69*dx1-64337;         H14 = H14<=0;
 8000866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800086a:	f240 32e5 	movw	r2, #997	; 0x3e5
 800086e:	fb02 f103 	mul.w	r1, r2, r3
 8000872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000876:	4613      	mov	r3, r2
 8000878:	011b      	lsls	r3, r3, #4
 800087a:	4413      	add	r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	440b      	add	r3, r1
 8000882:	f5a3 437b 	sub.w	r3, r3, #64256	; 0xfb00
 8000886:	3b51      	subs	r3, #81	; 0x51
 8000888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800088c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000890:	2b00      	cmp	r3, #0
 8000892:	bfd4      	ite	le
 8000894:	2301      	movle	r3, #1
 8000896:	2300      	movgt	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			int H15 = -997*dx0-69*dx1-126088;       H15 = H15<=0;
 800089e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80008a2:	f46f 7279 	mvn.w	r2, #996	; 0x3e4
 80008a6:	fb02 f203 	mul.w	r2, r2, r3
 80008aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008ae:	f06f 0144 	mvn.w	r1, #68	; 0x44
 80008b2:	fb01 f303 	mul.w	r3, r1, r3
 80008b6:	4413      	add	r3, r2
 80008b8:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80008bc:	3b88      	subs	r3, #136	; 0x88
 80008be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80008c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	bfd4      	ite	le
 80008ca:	2301      	movle	r3, #1
 80008cc:	2300      	movgt	r3, #0
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			int H16 = 1000*dx0-150000;              H16 = H16<=0;
 80008d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80008d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008dc:	fb02 f303 	mul.w	r3, r2, r3
 80008e0:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 80008e4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80008e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80008ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	bfd4      	ite	le
 80008f4:	2301      	movle	r3, #1
 80008f6:	2300      	movgt	r3, #0
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			if(H11 && H12 && H13 && H14 && H15 && H16){
 80008fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000902:	2b00      	cmp	r3, #0
 8000904:	f000 80b0 	beq.w	8000a68 <HAL_TIM_PeriodElapsedCallback+0x488>
 8000908:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800090c:	2b00      	cmp	r3, #0
 800090e:	f000 80ab 	beq.w	8000a68 <HAL_TIM_PeriodElapsedCallback+0x488>
 8000912:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000916:	2b00      	cmp	r3, #0
 8000918:	f000 80a6 	beq.w	8000a68 <HAL_TIM_PeriodElapsedCallback+0x488>
 800091c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000920:	2b00      	cmp	r3, #0
 8000922:	f000 80a1 	beq.w	8000a68 <HAL_TIM_PeriodElapsedCallback+0x488>
 8000926:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 809c 	beq.w	8000a68 <HAL_TIM_PeriodElapsedCallback+0x488>
 8000930:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 8097 	beq.w	8000a68 <HAL_TIM_PeriodElapsedCallback+0x488>
				u = -5237*dx0; u -= 366*dx1;
 800093a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800093e:	4a13      	ldr	r2, [pc, #76]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000940:	fb02 f303 	mul.w	r3, r2, r3
 8000944:	4a09      	ldr	r2, [pc, #36]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800094c:	e020      	b.n	8000990 <HAL_TIM_PeriodElapsedCallback+0x3b0>
 800094e:	bf00      	nop
 8000950:	200002dc 	.word	0x200002dc
 8000954:	20000118 	.word	0x20000118
 8000958:	2000003c 	.word	0x2000003c
 800095c:	68db8bad 	.word	0x68db8bad
 8000960:	20000034 	.word	0x20000034
 8000964:	00017b70 	.word	0x00017b70
 8000968:	fffffc2e 	.word	0xfffffc2e
 800096c:	2000002c 	.word	0x2000002c
 8000970:	20000044 	.word	0x20000044
 8000974:	14f8b589 	.word	0x14f8b589
 8000978:	0002a483 	.word	0x0002a483
 800097c:	00017b16 	.word	0x00017b16
 8000980:	10624dd3 	.word	0x10624dd3
 8000984:	fffffc18 	.word	0xfffffc18
 8000988:	fffffc4c 	.word	0xfffffc4c
 800098c:	ffffeb8b 	.word	0xffffeb8b
 8000990:	4aab      	ldr	r2, [pc, #684]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8000992:	fb02 f203 	mul.w	r2, r2, r3
 8000996:	4bab      	ldr	r3, [pc, #684]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4aa9      	ldr	r2, [pc, #676]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 800099e:	6013      	str	r3, [r2, #0]
				if(!settled){
 80009a0:	4ba9      	ldr	r3, [pc, #676]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x668>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	f083 0301 	eor.w	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d028      	beq.n	8000a00 <HAL_TIM_PeriodElapsedCallback+0x420>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f003 f904 	bl	8003bc4 <HAL_GPIO_WritePin>
					int diff = x[0]-x0_prev;
 80009bc:	4ba3      	ldr	r3, [pc, #652]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x66c>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					if(diff > -100 && diff < 100){
 80009ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009ce:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80009d2:	db11      	blt.n	80009f8 <HAL_TIM_PeriodElapsedCallback+0x418>
 80009d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009d8:	2b63      	cmp	r3, #99	; 0x63
 80009da:	dc0d      	bgt.n	80009f8 <HAL_TIM_PeriodElapsedCallback+0x418>
						settling_iter++;
 80009dc:	4b9c      	ldr	r3, [pc, #624]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b9a      	ldr	r3, [pc, #616]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80009e6:	701a      	strb	r2, [r3, #0]
						if(settling_iter == 100){
 80009e8:	4b99      	ldr	r3, [pc, #612]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b64      	cmp	r3, #100	; 0x64
 80009ee:	d133      	bne.n	8000a58 <HAL_TIM_PeriodElapsedCallback+0x478>
							settled = true;
 80009f0:	4b95      	ldr	r3, [pc, #596]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x668>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
						if(settling_iter == 100){
 80009f6:	e02f      	b.n	8000a58 <HAL_TIM_PeriodElapsedCallback+0x478>
						settling_iter = 0;
 80009f8:	4b95      	ldr	r3, [pc, #596]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e02b      	b.n	8000a58 <HAL_TIM_PeriodElapsedCallback+0x478>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f003 f8db 	bl	8003bc4 <HAL_GPIO_WritePin>
					int error = 5000-y[1];
 8000a0e:	4b91      	ldr	r3, [pc, #580]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x674>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000a16:	3308      	adds	r3, #8
 8000a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					integral += error;
 8000a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a20:	4619      	mov	r1, r3
 8000a22:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000a26:	4b8c      	ldr	r3, [pc, #560]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8000a28:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000a2c:	eb1b 0301 	adds.w	r3, fp, r1
 8000a30:	eb4c 0402 	adc.w	r4, ip, r2
 8000a34:	4a88      	ldr	r2, [pc, #544]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8000a36:	e9c2 3400 	strd	r3, r4, [r2]
					u += 30*integral;
 8000a3a:	4b87      	ldr	r3, [pc, #540]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x678>)
 8000a3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4613      	mov	r3, r2
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b7d      	ldr	r3, [pc, #500]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b7b      	ldr	r3, [pc, #492]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8000a56:	601a      	str	r2, [r3, #0]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0.5/3.3*4095);
 8000a58:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	487e      	ldr	r0, [pc, #504]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8000a62:	f002 fbcf 	bl	8003204 <HAL_DAC_SetValue>
 8000a66:	e256      	b.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x936>
				int H51 = 998*dx0+70*dx1+126100;  H51 = H51<=0;
 8000a68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a6c:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000a70:	fb02 f203 	mul.w	r2, r2, r3
 8000a74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a78:	2146      	movs	r1, #70	; 0x46
 8000a7a:	fb01 f303 	mul.w	r3, r1, r3
 8000a7e:	4413      	add	r3, r2
 8000a80:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8000a84:	3394      	adds	r3, #148	; 0x94
 8000a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	bfd4      	ite	le
 8000a92:	2301      	movle	r3, #1
 8000a94:	2300      	movgt	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				int H52 = -1000*dx0-50000;       H52 = H52<=0;
 8000a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000aa0:	4a6f      	ldr	r2, [pc, #444]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8000aa2:	fb02 f303 	mul.w	r3, r2, r3
 8000aa6:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000aaa:	3b50      	subs	r3, #80	; 0x50
 8000aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	bfd4      	ite	le
 8000ab8:	2301      	movle	r3, #1
 8000aba:	2300      	movgt	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				int H53 = -1000*dx1-5000000;     H53 = H53<=0;
 8000ac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ac6:	4a66      	ldr	r2, [pc, #408]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8000ac8:	fb02 f203 	mul.w	r2, r2, r3
 8000acc:	4b65      	ldr	r3, [pc, #404]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000ace:	4413      	add	r3, r2
 8000ad0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ad2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bfd4      	ite	le
 8000ad8:	2301      	movle	r3, #1
 8000ada:	2300      	movgt	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	67fb      	str	r3, [r7, #124]	; 0x7c
				int H54 = 1000*dx0-10*dx1-53000;  H54 = H54<=0;
 8000ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae8:	fb02 f203 	mul.w	r2, r2, r3
 8000aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000af0:	f06f 0109 	mvn.w	r1, #9
 8000af4:	fb01 f303 	mul.w	r3, r1, r3
 8000af8:	4413      	add	r3, r2
 8000afa:	f5a3 434f 	sub.w	r3, r3, #52992	; 0xcf00
 8000afe:	3b08      	subs	r3, #8
 8000b00:	67bb      	str	r3, [r7, #120]	; 0x78
 8000b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bfd4      	ite	le
 8000b08:	2301      	movle	r3, #1
 8000b0a:	2300      	movgt	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	67bb      	str	r3, [r7, #120]	; 0x78
				if(H51 && H52 && H53 && H54){
 8000b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d014      	beq.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x562>
 8000b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d010      	beq.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x562>
 8000b20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00d      	beq.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x562>
 8000b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00a      	beq.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x562>
					u = 662000;
 8000b2c:	4b45      	ldr	r3, [pc, #276]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8000b2e:	4a4e      	ldr	r2, [pc, #312]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8000b30:	601a      	str	r2, [r3, #0]
					HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2.5/3.3*4095);
 8000b32:	f640 431e 	movw	r3, #3102	; 0xc1e
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4848      	ldr	r0, [pc, #288]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8000b3c:	f002 fb62 	bl	8003204 <HAL_DAC_SetValue>
 8000b40:	e1e9      	b.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x936>
					int H31 = -1000*dx1-5000000;         H31 = H31<=0;
 8000b42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b46:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8000b48:	fb02 f203 	mul.w	r2, r2, r3
 8000b4c:	4b45      	ldr	r3, [pc, #276]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8000b4e:	4413      	add	r3, r2
 8000b50:	677b      	str	r3, [r7, #116]	; 0x74
 8000b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	bfd4      	ite	le
 8000b58:	2301      	movle	r3, #1
 8000b5a:	2300      	movgt	r3, #0
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	677b      	str	r3, [r7, #116]	; 0x74
					int H32 = -1000*dx0+10*dx1+53000;     H32 = H32<=0;
 8000b60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b64:	4a3e      	ldr	r2, [pc, #248]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8000b66:	fb02 f103 	mul.w	r1, r2, r3
 8000b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000b6e:	4613      	mov	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	440b      	add	r3, r1
 8000b78:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8000b7c:	3308      	adds	r3, #8
 8000b7e:	673b      	str	r3, [r7, #112]	; 0x70
 8000b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bfd4      	ite	le
 8000b86:	2301      	movle	r3, #1
 8000b88:	2300      	movgt	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	673b      	str	r3, [r7, #112]	; 0x70
					int H33 = -948*dx0+318*dx1+740900;    H33 = H33<=0;
 8000b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8000b94:	fb02 f203 	mul.w	r2, r2, r3
 8000b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b9c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000ba0:	fb01 f303 	mul.w	r3, r1, r3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	f503 2334 	add.w	r3, r3, #737280	; 0xb4000
 8000baa:	f603 6324 	addw	r3, r3, #3620	; 0xe24
 8000bae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bfd4      	ite	le
 8000bb6:	2301      	movle	r3, #1
 8000bb8:	2300      	movgt	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
					int H34 = 1000*dx0-150000;           H34 = H34<=0;
 8000bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 8000bce:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000bd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8000bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bfd4      	ite	le
 8000bda:	2301      	movle	r3, #1
 8000bdc:	2300      	movgt	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	66bb      	str	r3, [r7, #104]	; 0x68
					if(H31 && H32 && H33 && H34){
 8000be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d045      	beq.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0x694>
 8000be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d042      	beq.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0x694>
 8000bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d03f      	beq.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0x694>
 8000bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d03c      	beq.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0x694>
						u = -6528*dx0; u += 66*dx1; u += 1000000;
 8000bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8000c00:	fb02 f303 	mul.w	r3, r2, r3
 8000c04:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	015b      	lsls	r3, r3, #5
 8000c10:	4413      	add	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 8000c28:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000c2c:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8000c2e:	6013      	str	r3, [r2, #0]
						HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1.5/3.3*4095);
 8000c30:	f240 7345 	movw	r3, #1861	; 0x745
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8000c3a:	f002 fae3 	bl	8003204 <HAL_DAC_SetValue>
 8000c3e:	e16a      	b.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x936>
 8000c40:	fffffe92 	.word	0xfffffe92
 8000c44:	2000002c 	.word	0x2000002c
 8000c48:	20000058 	.word	0x20000058
 8000c4c:	20000034 	.word	0x20000034
 8000c50:	20000059 	.word	0x20000059
 8000c54:	2000003c 	.word	0x2000003c
 8000c58:	20000050 	.word	0x20000050
 8000c5c:	20000060 	.word	0x20000060
 8000c60:	fffffc18 	.word	0xfffffc18
 8000c64:	ffb3b4c0 	.word	0xffb3b4c0
 8000c68:	000a19f0 	.word	0x000a19f0
 8000c6c:	fffffc4c 	.word	0xfffffc4c
 8000c70:	ffffe680 	.word	0xffffe680
						int H21 = -1000*dx0-50000;          H21 = H21<=0;
 8000c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c78:	4a94      	ldr	r2, [pc, #592]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000c82:	3b50      	subs	r3, #80	; 0x50
 8000c84:	667b      	str	r3, [r7, #100]	; 0x64
 8000c86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	bfd4      	ite	le
 8000c8c:	2301      	movle	r3, #1
 8000c8e:	2300      	movgt	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	667b      	str	r3, [r7, #100]	; 0x64
						int H22 = 489*dx0+872*dx1-1533900;  H22 = H22<=0;
 8000c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c98:	f240 12e9 	movw	r2, #489	; 0x1e9
 8000c9c:	fb02 f203 	mul.w	r2, r2, r3
 8000ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ca4:	f44f 715a 	mov.w	r1, #872	; 0x368
 8000ca8:	fb01 f303 	mul.w	r3, r1, r3
 8000cac:	4413      	add	r3, r2
 8000cae:	f5a3 13bb 	sub.w	r3, r3, #1531904	; 0x176000
 8000cb2:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 8000cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8000cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bfd4      	ite	le
 8000cbe:	2301      	movle	r3, #1
 8000cc0:	2300      	movgt	r3, #0
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	663b      	str	r3, [r7, #96]	; 0x60
						int H23 = 1000*dx0-10*dx1-300;      H23 = H23<=0;
 8000cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cce:	fb02 f203 	mul.w	r2, r2, r3
 8000cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000cd6:	f06f 0109 	mvn.w	r1, #9
 8000cda:	fb01 f303 	mul.w	r3, r1, r3
 8000cde:	4413      	add	r3, r2
 8000ce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	bfd4      	ite	le
 8000cec:	2301      	movle	r3, #1
 8000cee:	2300      	movgt	r3, #0
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
						int H24 = 948*dx0-318*dx1+247000;   H24 = H24<=0;
 8000cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cf8:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 8000cfc:	fb02 f203 	mul.w	r2, r2, r3
 8000d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d04:	4972      	ldr	r1, [pc, #456]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8000d06:	fb01 f303 	mul.w	r3, r1, r3
 8000d0a:	4413      	add	r3, r2
 8000d0c:	f503 3371 	add.w	r3, r3, #246784	; 0x3c400
 8000d10:	33d8      	adds	r3, #216	; 0xd8
 8000d12:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bfd4      	ite	le
 8000d1a:	2301      	movle	r3, #1
 8000d1c:	2300      	movgt	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	65bb      	str	r3, [r7, #88]	; 0x58
						if(H21 && H22 && H23 && H24){
 8000d22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d02b      	beq.n	8000d80 <HAL_TIM_PeriodElapsedCallback+0x7a0>
 8000d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d028      	beq.n	8000d80 <HAL_TIM_PeriodElapsedCallback+0x7a0>
 8000d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d025      	beq.n	8000d80 <HAL_TIM_PeriodElapsedCallback+0x7a0>
 8000d34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d022      	beq.n	8000d80 <HAL_TIM_PeriodElapsedCallback+0x7a0>
							u = -6527*dx0; u += 66*dx1;  u -= 335700;
 8000d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d3e:	4a65      	ldr	r2, [pc, #404]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 8000d40:	fb02 f303 	mul.w	r3, r2, r3
 8000d44:	4a64      	ldr	r2, [pc, #400]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	015b      	lsls	r3, r3, #5
 8000d50:	4413      	add	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b60      	ldr	r3, [pc, #384]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a5e      	ldr	r2, [pc, #376]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	4b5d      	ldr	r3, [pc, #372]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f5a3 23a3 	sub.w	r3, r3, #333824	; 0x51800
 8000d68:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 8000d6c:	4a5a      	ldr	r2, [pc, #360]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8000d6e:	6013      	str	r3, [r2, #0]
							HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1/3.3*4095);
 8000d70:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	4858      	ldr	r0, [pc, #352]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8000d7a:	f002 fa43 	bl	8003204 <HAL_DAC_SetValue>
 8000d7e:	e0ca      	b.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x936>
							int H41 = 921*dx0+390*dx1-698900;             H41 = H41<=0;
 8000d80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d84:	f240 3299 	movw	r2, #921	; 0x399
 8000d88:	fb02 f203 	mul.w	r2, r2, r3
 8000d8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d90:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8000d94:	fb01 f303 	mul.w	r3, r1, r3
 8000d98:	4413      	add	r3, r2
 8000d9a:	f5a3 232a 	sub.w	r3, r3, #696320	; 0xaa000
 8000d9e:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000da2:	657b      	str	r3, [r7, #84]	; 0x54
 8000da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	bfd4      	ite	le
 8000daa:	2301      	movle	r3, #1
 8000dac:	2300      	movgt	r3, #0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	657b      	str	r3, [r7, #84]	; 0x54
							int H42 = 973*dx0+229*dx1-447200;             H42 = H42<=0;
 8000db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000db6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8000dba:	fb02 f203 	mul.w	r2, r2, r3
 8000dbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000dc2:	21e5      	movs	r1, #229	; 0xe5
 8000dc4:	fb01 f303 	mul.w	r3, r1, r3
 8000dc8:	4413      	add	r3, r2
 8000dca:	f5a3 23da 	sub.w	r3, r3, #446464	; 0x6d000
 8000dce:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8000dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bfd4      	ite	le
 8000dda:	2301      	movle	r3, #1
 8000ddc:	2300      	movgt	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	653b      	str	r3, [r7, #80]	; 0x50
							int H43 = 988*dx0+157*dx1-354000;             H43 = H43<=0;
 8000de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000de6:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 8000dea:	fb02 f203 	mul.w	r2, r2, r3
 8000dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000df2:	219d      	movs	r1, #157	; 0x9d
 8000df4:	fb01 f303 	mul.w	r3, r1, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	f5a3 23ac 	sub.w	r3, r3, #352256	; 0x56000
 8000dfe:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8000e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	bfd4      	ite	le
 8000e0a:	2301      	movle	r3, #1
 8000e0c:	2300      	movgt	r3, #0
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	64fb      	str	r3, [r7, #76]	; 0x4c
							int H44 = -1000*dx0+10*dx1+300;               H43 = H43<=0;
 8000e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e16:	4a2d      	ldr	r2, [pc, #180]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8000e18:	fb02 f103 	mul.w	r1, r2, r3
 8000e1c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	440b      	add	r3, r1
 8000e2a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bfd4      	ite	le
 8000e36:	2301      	movle	r3, #1
 8000e38:	2300      	movgt	r3, #0
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
							int H45 = -998*dx0-70*dx1+64300;              H45 = H45<=0;
 8000e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e42:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8000e44:	fb02 f203 	mul.w	r2, r2, r3
 8000e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e4c:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8000e50:	fb01 f303 	mul.w	r3, r1, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8000e5a:	332c      	adds	r3, #44	; 0x2c
 8000e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8000e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	bfd4      	ite	le
 8000e64:	2301      	movle	r3, #1
 8000e66:	2300      	movgt	r3, #0
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	647b      	str	r3, [r7, #68]	; 0x44
							int H46 = 1000*dx0-150000;                    H46 = H46<=0;
 8000e6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 8000e7c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000e80:	643b      	str	r3, [r7, #64]	; 0x40
 8000e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bfd4      	ite	le
 8000e88:	2301      	movle	r3, #1
 8000e8a:	2300      	movgt	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	643b      	str	r3, [r7, #64]	; 0x40
							if(H41 && H42 && H43 && H44 && H45 && H46){
 8000e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d028      	beq.n	8000ee8 <HAL_TIM_PeriodElapsedCallback+0x908>
 8000e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d025      	beq.n	8000ee8 <HAL_TIM_PeriodElapsedCallback+0x908>
 8000e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d022      	beq.n	8000ee8 <HAL_TIM_PeriodElapsedCallback+0x908>
 8000ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d01f      	beq.n	8000ee8 <HAL_TIM_PeriodElapsedCallback+0x908>
 8000ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d01c      	beq.n	8000ee8 <HAL_TIM_PeriodElapsedCallback+0x908>
 8000eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d019      	beq.n	8000ee8 <HAL_TIM_PeriodElapsedCallback+0x908>
								u = -338000;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8000eb8:	601a      	str	r2, [r3, #0]
								HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2/3.3*4095);
 8000eba:	f640 13b1 	movw	r3, #2481	; 0x9b1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8000ec4:	f002 f99e 	bl	8003204 <HAL_DAC_SetValue>
 8000ec8:	e025      	b.n	8000f16 <HAL_TIM_PeriodElapsedCallback+0x936>
 8000eca:	bf00      	nop
 8000ecc:	fffffc18 	.word	0xfffffc18
 8000ed0:	fffffec2 	.word	0xfffffec2
 8000ed4:	ffffe681 	.word	0xffffe681
 8000ed8:	2000002c 	.word	0x2000002c
 8000edc:	20000060 	.word	0x20000060
 8000ee0:	fffffc1a 	.word	0xfffffc1a
 8000ee4:	fffad7b0 	.word	0xfffad7b0
								u = -4854*dx0; u += 53*dx1;
 8000ee8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000eec:	4a29      	ldr	r2, [pc, #164]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	4a29      	ldr	r2, [pc, #164]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000efa:	2235      	movs	r2, #53	; 0x35
 8000efc:	fb02 f203 	mul.w	r2, r2, r3
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a24      	ldr	r2, [pc, #144]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8000f08:	6013      	str	r3, [r2, #0]
								HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4822      	ldr	r0, [pc, #136]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8000f12:	f002 f977 	bl	8003204 <HAL_DAC_SetValue>
			int input = u*1599/1000000; input += 500;
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f240 623f 	movw	r2, #1599	; 0x63f
 8000f1e:	fb02 f303 	mul.w	r3, r2, r3
 8000f22:	4a1f      	ldr	r2, [pc, #124]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8000f24:	fb82 1203 	smull	r1, r2, r2, r3
 8000f28:	1492      	asrs	r2, r2, #18
 8000f2a:	17db      	asrs	r3, r3, #31
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f36:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			if(input < 0) input = 0;
 8000f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	da02      	bge.n	8000f4c <HAL_TIM_PeriodElapsedCallback+0x96c>
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			if(input > 1599) input = 1599;
 8000f4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000f54:	db03      	blt.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0x97e>
 8000f56:	f240 633f 	movw	r3, #1599	; 0x63f
 8000f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			htim2.Instance->CCR2 = input;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38
			u /= 1000;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8000f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f72:	1192      	asrs	r2, r2, #6
 8000f74:	17db      	asrs	r3, r3, #31
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8000f7a:	6013      	str	r3, [r2, #0]
			u += us;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f240 1257 	movw	r2, #343	; 0x157
 8000f84:	4413      	add	r3, r2
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8000f88:	6013      	str	r3, [r2, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	37c0      	adds	r7, #192	; 0xc0
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000f94:	ffffed0a 	.word	0xffffed0a
 8000f98:	2000002c 	.word	0x2000002c
 8000f9c:	20000060 	.word	0x20000060
 8000fa0:	431bde83 	.word	0x431bde83
 8000fa4:	200001d4 	.word	0x200001d4
 8000fa8:	10624dd3 	.word	0x10624dd3

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb0:	f000 fdfc 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb4:	f000 f83c 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb8:	f000 fade 	bl	8001578 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fbc:	f000 fab6 	bl	800152c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fc0:	f000 fa84 	bl	80014cc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fc4:	f000 f8bc 	bl	8001140 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000fc8:	f000 f934 	bl	8001234 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000fcc:	f000 f998 	bl	8001300 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000fd0:	f000 f9d4 	bl	800137c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fd4:	f000 fa2c 	bl	8001430 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <main+0x68>)
 8000fdc:	f002 f8c5 	bl	800316a <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	480c      	ldr	r0, [pc, #48]	; (8001014 <main+0x68>)
 8000fe4:	f002 f8c1 	bl	800316a <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf0, SIZE);
 8000fe8:	2207      	movs	r2, #7
 8000fea:	490b      	ldr	r1, [pc, #44]	; (8001018 <main+0x6c>)
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <main+0x70>)
 8000fee:	f001 f993 	bl	8002318 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf1, SIZE);
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	490a      	ldr	r1, [pc, #40]	; (8001020 <main+0x74>)
 8000ff6:	480b      	ldr	r0, [pc, #44]	; (8001024 <main+0x78>)
 8000ff8:	f001 f98e 	bl	8002318 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <main+0x7c>)
 8000ffe:	f004 f923 	bl	8005248 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001002:	2104      	movs	r1, #4
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <main+0x80>)
 8001006:	f004 f975 	bl	80052f4 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <main+0x80>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2200      	movs	r2, #0
 8001010:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //char msg[20];
  while (1)
 8001012:	e7fe      	b.n	8001012 <main+0x66>
 8001014:	20000060 	.word	0x20000060
 8001018:	200002dc 	.word	0x200002dc
 800101c:	20000074 	.word	0x20000074
 8001020:	20000118 	.word	0x20000118
 8001024:	20000128 	.word	0x20000128
 8001028:	200000d8 	.word	0x200000d8
 800102c:	200001d4 	.word	0x200001d4

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0b8      	sub	sp, #224	; 0xe0
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800103a:	2244      	movs	r2, #68	; 0x44
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f005 fee6 	bl	8006e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2288      	movs	r2, #136	; 0x88
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f005 fed8 	bl	8006e10 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001066:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106e:	2310      	movs	r3, #16
 8001070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001086:	230a      	movs	r3, #10
 8001088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800108c:	2307      	movs	r3, #7
 800108e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fe0a 	bl	8003cbc <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010ae:	f000 facd 	bl	800164c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	230f      	movs	r3, #15
 80010b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2303      	movs	r3, #3
 80010ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010d4:	2104      	movs	r1, #4
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 f9d6 	bl	8004488 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80010e2:	f000 fab3 	bl	800164c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80010e6:	f244 0302 	movw	r3, #16386	; 0x4002
 80010ea:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010f4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010f6:	2302      	movs	r3, #2
 80010f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010fe:	2308      	movs	r3, #8
 8001100:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001102:	2307      	movs	r3, #7
 8001104:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001106:	2302      	movs	r3, #2
 8001108:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800110a:	2302      	movs	r3, #2
 800110c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800110e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001112:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fbba 	bl	8004890 <HAL_RCCEx_PeriphCLKConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001122:	f000 fa93 	bl	800164c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001126:	f44f 7000 	mov.w	r0, #512	; 0x200
 800112a:	f002 fd71 	bl	8003c10 <HAL_PWREx_ControlVoltageScaling>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001134:	f000 fa8a 	bl	800164c <Error_Handler>
  }
}
 8001138:	bf00      	nop
 800113a:	37e0      	adds	r7, #224	; 0xe0
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <MX_ADC1_Init+0xe8>)
 8001164:	4a31      	ldr	r2, [pc, #196]	; (800122c <MX_ADC1_Init+0xec>)
 8001166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001168:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <MX_ADC1_Init+0xe8>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <MX_ADC1_Init+0xe8>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <MX_ADC1_Init+0xe8>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <MX_ADC1_Init+0xe8>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <MX_ADC1_Init+0xe8>)
 8001182:	2204      	movs	r2, #4
 8001184:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_ADC1_Init+0xe8>)
 8001188:	2200      	movs	r2, #0
 800118a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MX_ADC1_Init+0xe8>)
 800118e:	2201      	movs	r2, #1
 8001190:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_ADC1_Init+0xe8>)
 8001194:	2201      	movs	r2, #1
 8001196:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <MX_ADC1_Init+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <MX_ADC1_Init+0xe8>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_ADC1_Init+0xe8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <MX_ADC1_Init+0xe8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <MX_ADC1_Init+0xe8>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_ADC1_Init+0xe8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_ADC1_Init+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c8:	4817      	ldr	r0, [pc, #92]	; (8001228 <MX_ADC1_Init+0xe8>)
 80011ca:	f000 ff51 	bl	8002070 <HAL_ADC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80011d4:	f000 fa3a 	bl	800164c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_ADC1_Init+0xe8>)
 80011e4:	f001 fde2 	bl	8002dac <HAL_ADCEx_MultiModeConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011ee:	f000 fa2d 	bl	800164c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_ADC1_Init+0xf0>)
 80011f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f6:	2306      	movs	r3, #6
 80011f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80011fa:	2305      	movs	r3, #5
 80011fc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011fe:	237f      	movs	r3, #127	; 0x7f
 8001200:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001202:	2304      	movs	r3, #4
 8001204:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <MX_ADC1_Init+0xe8>)
 8001210:	f001 f954 	bl	80024bc <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800121a:	f000 fa17 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000128 	.word	0x20000128
 800122c:	50040000 	.word	0x50040000
 8001230:	14f00020 	.word	0x14f00020

08001234 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800124c:	4a2a      	ldr	r2, [pc, #168]	; (80012f8 <MX_ADC2_Init+0xc4>)
 800124e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001256:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800126a:	2204      	movs	r2, #4
 800126c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001270:	2200      	movs	r2, #0
 8001272:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001276:	2201      	movs	r2, #1
 8001278:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800127c:	2201      	movs	r2, #1
 800127e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800128a:	2201      	movs	r2, #1
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001290:	2200      	movs	r2, #0
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_ADC2_Init+0xc0>)
 8001296:	2200      	movs	r2, #0
 8001298:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_ADC2_Init+0xc0>)
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_ADC2_Init+0xc0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_ADC2_Init+0xc0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012b0:	4810      	ldr	r0, [pc, #64]	; (80012f4 <MX_ADC2_Init+0xc0>)
 80012b2:	f000 fedd 	bl	8002070 <HAL_ADC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f000 f9c6 	bl	800164c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_ADC2_Init+0xc8>)
 80012c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c4:	2306      	movs	r3, #6
 80012c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80012c8:	2305      	movs	r3, #5
 80012ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012cc:	237f      	movs	r3, #127	; 0x7f
 80012ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012d0:	2304      	movs	r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_ADC2_Init+0xc0>)
 80012de:	f001 f8ed 	bl	80024bc <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80012e8:	f000 f9b0 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000074 	.word	0x20000074
 80012f8:	50040100 	.word	0x50040100
 80012fc:	19200040 	.word	0x19200040

08001300 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2224      	movs	r2, #36	; 0x24
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f005 fd7f 	bl	8006e10 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_DAC1_Init+0x74>)
 8001314:	4a18      	ldr	r2, [pc, #96]	; (8001378 <MX_DAC1_Init+0x78>)
 8001316:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001318:	4816      	ldr	r0, [pc, #88]	; (8001374 <MX_DAC1_Init+0x74>)
 800131a:	f001 ff04 	bl	8003126 <HAL_DAC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001324:	f000 f992 	bl	800164c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <MX_DAC1_Init+0x74>)
 8001344:	f001 ff83 	bl	800324e <HAL_DAC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800134e:	f000 f97d 	bl	800164c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2210      	movs	r2, #16
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_DAC1_Init+0x74>)
 800135e:	f001 ff76 	bl	800324e <HAL_DAC_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001368:	f000 f970 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000060 	.word	0x20000060
 8001378:	40007400 	.word	0x40007400

0800137c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	615a      	str	r2, [r3, #20]
 800139e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_TIM2_Init+0xb0>)
 80013a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013a8:	4b20      	ldr	r3, [pc, #128]	; (800142c <MX_TIM2_Init+0xb0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_TIM2_Init+0xb0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <MX_TIM2_Init+0xb0>)
 80013b6:	f240 623f 	movw	r2, #1599	; 0x63f
 80013ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_TIM2_Init+0xb0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM2_Init+0xb0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013c8:	4818      	ldr	r0, [pc, #96]	; (800142c <MX_TIM2_Init+0xb0>)
 80013ca:	f003 ff67 	bl	800529c <HAL_TIM_PWM_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80013d4:	f000 f93a 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <MX_TIM2_Init+0xb0>)
 80013e8:	f004 ff26 	bl	8006238 <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80013f2:	f000 f92b 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f6:	2360      	movs	r3, #96	; 0x60
 80013f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	2204      	movs	r2, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_TIM2_Init+0xb0>)
 800140e:	f004 f8e9 	bl	80055e4 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001418:	f000 f918 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM2_Init+0xb0>)
 800141e:	f000 faa1 	bl	8001964 <HAL_TIM_MspPostInit>

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	; 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200001d4 	.word	0x200001d4

08001430 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <MX_TIM3_Init+0x98>)
 8001452:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001456:	224f      	movs	r2, #79	; 0x4f
 8001458:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_TIM3_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001462:	2263      	movs	r2, #99	; 0x63
 8001464:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_TIM3_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001474:	f003 febc 	bl	80051f0 <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800147e:	f000 f8e5 	bl	800164c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_TIM3_Init+0x94>)
 8001490:	f004 f9c0 	bl	8005814 <HAL_TIM_ConfigClockSource>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800149a:	f000 f8d7 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_TIM3_Init+0x94>)
 80014ac:	f004 fec4 	bl	8006238 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014b6:	f000 f8c9 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200000d8 	.word	0x200000d8
 80014c8:	40000400 	.word	0x40000400

080014cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_USART2_UART_Init+0x58>)
 80014d2:	4a15      	ldr	r2, [pc, #84]	; (8001528 <MX_USART2_UART_Init+0x5c>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_USART2_UART_Init+0x58>)
 80014d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART2_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_USART2_UART_Init+0x58>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_USART2_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_USART2_UART_Init+0x58>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART2_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_USART2_UART_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART2_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_USART2_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_USART2_UART_Init+0x58>)
 8001510:	f004 ff38 	bl	8006384 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800151a:	f000 f897 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000214 	.word	0x20000214
 8001528:	40004400 	.word	0x40004400

0800152c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_DMA_Init+0x48>)
 8001534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <MX_DMA_Init+0x48>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6493      	str	r3, [r2, #72]	; 0x48
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <MX_DMA_Init+0x48>)
 8001540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	200b      	movs	r0, #11
 8001550:	f001 fdb3 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001554:	200b      	movs	r0, #11
 8001556:	f001 fdcc 	bl	80030f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	200c      	movs	r0, #12
 8001560:	f001 fdab 	bl	80030ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001564:	200c      	movs	r0, #12
 8001566:	f001 fdc4 	bl	80030f2 <HAL_NVIC_EnableIRQ>

}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <MX_GPIO_Init+0xc8>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a2b      	ldr	r2, [pc, #172]	; (8001640 <MX_GPIO_Init+0xc8>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <MX_GPIO_Init+0xc8>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <MX_GPIO_Init+0xc8>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a25      	ldr	r2, [pc, #148]	; (8001640 <MX_GPIO_Init+0xc8>)
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <MX_GPIO_Init+0xc8>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <MX_GPIO_Init+0xc8>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <MX_GPIO_Init+0xc8>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <MX_GPIO_Init+0xc8>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_GPIO_Init+0xc8>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a19      	ldr	r2, [pc, #100]	; (8001640 <MX_GPIO_Init+0xc8>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_GPIO_Init+0xc8>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f002 fae4 	bl	8003bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <MX_GPIO_Init+0xcc>)
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <MX_GPIO_Init+0xd0>)
 8001612:	f002 f92f 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001632:	f002 f91f 	bl	8003874 <HAL_GPIO_Init>

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	10210000 	.word	0x10210000
 8001648:	48000800 	.word	0x48000800

0800164c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_MspInit+0x44>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_MspInit+0x44>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6613      	str	r3, [r2, #96]	; 0x60
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_MspInit+0x44>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_MspInit+0x44>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_MspInit+0x44>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6593      	str	r3, [r2, #88]	; 0x58
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_MspInit+0x44>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a5f      	ldr	r2, [pc, #380]	; (8001840 <HAL_ADC_MspInit+0x19c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d159      	bne.n	800177a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80016c6:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <HAL_ADC_MspInit+0x1a0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	4a5d      	ldr	r2, [pc, #372]	; (8001844 <HAL_ADC_MspInit+0x1a0>)
 80016ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80016d0:	4b5c      	ldr	r3, [pc, #368]	; (8001844 <HAL_ADC_MspInit+0x1a0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d10b      	bne.n	80016f0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80016d8:	4b5b      	ldr	r3, [pc, #364]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	4a5a      	ldr	r2, [pc, #360]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 80016de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e4:	4b58      	ldr	r3, [pc, #352]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ec:	61bb      	str	r3, [r7, #24]
 80016ee:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b55      	ldr	r3, [pc, #340]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	4a54      	ldr	r2, [pc, #336]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fc:	4b52      	ldr	r3, [pc, #328]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001708:	2301      	movs	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800170c:	230b      	movs	r3, #11
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f002 f8a9 	bl	8003874 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001722:	4b4a      	ldr	r3, [pc, #296]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 8001724:	4a4a      	ldr	r2, [pc, #296]	; (8001850 <HAL_ADC_MspInit+0x1ac>)
 8001726:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001734:	4b45      	ldr	r3, [pc, #276]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800173a:	4b44      	ldr	r3, [pc, #272]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 800173c:	2280      	movs	r2, #128	; 0x80
 800173e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001740:	4b42      	ldr	r3, [pc, #264]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 8001742:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001746:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 800174a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800174e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001750:	4b3e      	ldr	r3, [pc, #248]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 8001752:	2220      	movs	r2, #32
 8001754:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001756:	4b3d      	ldr	r3, [pc, #244]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800175c:	483b      	ldr	r0, [pc, #236]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 800175e:	f001 fe91 	bl	8003484 <HAL_DMA_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001768:	f7ff ff70 	bl	800164c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a37      	ldr	r2, [pc, #220]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 8001770:	64da      	str	r2, [r3, #76]	; 0x4c
 8001772:	4a36      	ldr	r2, [pc, #216]	; (800184c <HAL_ADC_MspInit+0x1a8>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001778:	e05d      	b.n	8001836 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a35      	ldr	r2, [pc, #212]	; (8001854 <HAL_ADC_MspInit+0x1b0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d158      	bne.n	8001836 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001784:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <HAL_ADC_MspInit+0x1a0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	4a2e      	ldr	r2, [pc, #184]	; (8001844 <HAL_ADC_MspInit+0x1a0>)
 800178c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_ADC_MspInit+0x1a0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d10b      	bne.n	80017ae <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001796:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a2b      	ldr	r2, [pc, #172]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 800179c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b29      	ldr	r3, [pc, #164]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a25      	ldr	r2, [pc, #148]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_ADC_MspInit+0x1a4>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017ca:	230b      	movs	r3, #11
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017dc:	f002 f84a 	bl	8003874 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <HAL_ADC_MspInit+0x1b8>)
 80017e4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 8001800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001804:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 8001808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800180c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 8001810:	2220      	movs	r2, #32
 8001812:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800181a:	480f      	ldr	r0, [pc, #60]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 800181c:	f001 fe32 	bl	8003484 <HAL_DMA_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8001826:	f7ff ff11 	bl	800164c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 800182e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001830:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_ADC_MspInit+0x1b4>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001836:	bf00      	nop
 8001838:	3730      	adds	r7, #48	; 0x30
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	50040000 	.word	0x50040000
 8001844:	2000005c 	.word	0x2000005c
 8001848:	40021000 	.word	0x40021000
 800184c:	2000018c 	.word	0x2000018c
 8001850:	40020008 	.word	0x40020008
 8001854:	50040100 	.word	0x50040100
 8001858:	20000294 	.word	0x20000294
 800185c:	4002001c 	.word	0x4002001c

08001860 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <HAL_DAC_MspInit+0x74>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d124      	bne.n	80018cc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_DAC_MspInit+0x78>)
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <HAL_DAC_MspInit+0x78>)
 8001888:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800188c:	6593      	str	r3, [r2, #88]	; 0x58
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_DAC_MspInit+0x78>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_DAC_MspInit+0x78>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_DAC_MspInit+0x78>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_DAC_MspInit+0x78>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018b2:	2330      	movs	r3, #48	; 0x30
 80018b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b6:	2303      	movs	r3, #3
 80018b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f001 ffd4 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40007400 	.word	0x40007400
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ec:	d10b      	bne.n	8001906 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_TIM_PWM_MspInit+0x38>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_TIM_PWM_MspInit+0x38>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6593      	str	r3, [r2, #88]	; 0x58
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_TIM_PWM_MspInit+0x38>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <HAL_TIM_Base_MspInit+0x44>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d113      	bne.n	8001952 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_TIM_Base_MspInit+0x48>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_TIM_Base_MspInit+0x48>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6593      	str	r3, [r2, #88]	; 0x58
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_TIM_Base_MspInit+0x48>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	201d      	movs	r0, #29
 8001948:	f001 fbb7 	bl	80030ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800194c:	201d      	movs	r0, #29
 800194e:	f001 fbd0 	bl	80030f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40000400 	.word	0x40000400
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001984:	d11b      	bne.n	80019be <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_TIM_MspPostInit+0x64>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <HAL_TIM_MspPostInit+0x64>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_TIM_MspPostInit+0x64>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800199e:	2308      	movs	r3, #8
 80019a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019ae:	2301      	movs	r3, #1
 80019b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4619      	mov	r1, r3
 80019b8:	4804      	ldr	r0, [pc, #16]	; (80019cc <HAL_TIM_MspPostInit+0x68>)
 80019ba:	f001 ff5b 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019be:	bf00      	nop
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000400 	.word	0x48000400

080019d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_UART_MspInit+0x7c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d128      	bne.n	8001a44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_UART_MspInit+0x80>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f6:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <HAL_UART_MspInit+0x80>)
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	6593      	str	r3, [r2, #88]	; 0x58
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_UART_MspInit+0x80>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a22:	230c      	movs	r3, #12
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a32:	2307      	movs	r3, #7
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a40:	f001 ff18 	bl	8003874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a44:	bf00      	nop
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40004400 	.word	0x40004400
 8001a50:	40021000 	.word	0x40021000

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f000 f8da 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Channel1_IRQHandler+0x10>)
 8001ab6:	f001 fdfd 	bl	80036b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000018c 	.word	0x2000018c

08001ac4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Channel2_IRQHandler+0x10>)
 8001aca:	f001 fdf3 	bl	80036b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000294 	.word	0x20000294

08001ad8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <TIM3_IRQHandler+0x10>)
 8001ade:	f003 fc61 	bl	80053a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200000d8 	.word	0x200000d8

08001aec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <SystemInit+0x64>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <SystemInit+0x64>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <SystemInit+0x68>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <SystemInit+0x68>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <SystemInit+0x68>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <SystemInit+0x68>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <SystemInit+0x68>)
 8001b18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <SystemInit+0x68>)
 8001b24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <SystemInit+0x68>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <SystemInit+0x68>)
 8001b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <SystemInit+0x68>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SystemInit+0x64>)
 8001b3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b42:	609a      	str	r2, [r3, #8]
#endif
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	40021000 	.word	0x40021000

08001b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b5e:	e003      	b.n	8001b68 <LoopCopyDataInit>

08001b60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b66:	3104      	adds	r1, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b68:	480b      	ldr	r0, [pc, #44]	; (8001b98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b70:	d3f6      	bcc.n	8001b60 <CopyDataInit>
	ldr	r2, =_sbss
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b74:	e002      	b.n	8001b7c <LoopFillZerobss>

08001b76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b78:	f842 3b04 	str.w	r3, [r2], #4

08001b7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <LoopForever+0x16>)
	cmp	r2, r3
 8001b7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b80:	d3f9      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b82:	f7ff ffb3 	bl	8001aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b86:	f005 f91f 	bl	8006dc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8a:	f7ff fa0f 	bl	8000fac <main>

08001b8e <LoopForever>:

LoopForever:
    b LoopForever
 8001b8e:	e7fe      	b.n	8001b8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b90:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001b94:	08006e90 	.word	0x08006e90
	ldr	r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b9c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001ba0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001ba4:	200002f0 	.word	0x200002f0

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>
	...

08001bac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_Init+0x3c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <HAL_Init+0x3c>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	f001 fa6e 	bl	80030a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f000 f80f 	bl	8001bec <HAL_InitTick>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	e001      	b.n	8001bde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bda:	f7ff fd3f 	bl	800165c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40022000 	.word	0x40022000

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_InitTick+0x68>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d022      	beq.n	8001c46 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_InitTick+0x6c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_InitTick+0x68>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f001 fa7a 	bl	800310e <HAL_SYSTICK_Config>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10f      	bne.n	8001c40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b0f      	cmp	r3, #15
 8001c24:	d809      	bhi.n	8001c3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c26:	2200      	movs	r2, #0
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2e:	f001 fa44 	bl	80030ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_InitTick+0x70>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e007      	b.n	8001c4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	e004      	b.n	8001c4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e001      	b.n	8001c4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_IncTick+0x1c>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_IncTick+0x20>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a03      	ldr	r2, [pc, #12]	; (8001c7c <HAL_IncTick+0x1c>)
 8001c70:	6013      	str	r3, [r2, #0]
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	200002ec 	.word	0x200002ec
 8001c80:	20000008 	.word	0x20000008

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200002ec 	.word	0x200002ec

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d004      	beq.n	8001cc0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_Delay+0x40>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc0:	bf00      	nop
 8001cc2:	f7ff ffdf 	bl	8001c84 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d8f7      	bhi.n	8001cc2 <HAL_Delay+0x26>
  {
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d48:	b490      	push	{r4, r7}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3360      	adds	r3, #96	; 0x60
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001d64:	6822      	ldr	r2, [r4, #0]
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <LL_ADC_SetOffset+0x40>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	4313      	orrs	r3, r2
 8001d76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d7a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc90      	pop	{r4, r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	03fff000 	.word	0x03fff000

08001d8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d8c:	b490      	push	{r4, r7}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3360      	adds	r3, #96	; 0x60
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc90      	pop	{r4, r7}
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001db4:	b490      	push	{r4, r7}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3360      	adds	r3, #96	; 0x60
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc90      	pop	{r4, r7}
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e0a:	b490      	push	{r4, r7}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3330      	adds	r3, #48	; 0x30
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	4413      	add	r3, r2
 8001e28:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e2a:	6822      	ldr	r2, [r4, #0]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	211f      	movs	r1, #31
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	0e9b      	lsrs	r3, r3, #26
 8001e40:	f003 011f 	and.w	r1, r3, #31
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc90      	pop	{r4, r7}
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e5c:	b490      	push	{r4, r7}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3314      	adds	r3, #20
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	0e5b      	lsrs	r3, r3, #25
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	4413      	add	r3, r2
 8001e7a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	0d1b      	lsrs	r3, r3, #20
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	2107      	movs	r1, #7
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	401a      	ands	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	0d1b      	lsrs	r3, r3, #20
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc90      	pop	{r4, r7}
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0318 	and.w	r3, r3, #24
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ed0:	40d9      	lsrs	r1, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	0007ffff 	.word	0x0007ffff

08001ef4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 031f 	and.w	r3, r3, #31
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6093      	str	r3, [r2, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f98:	d101      	bne.n	8001f9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <LL_ADC_IsEnabled+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <LL_ADC_IsEnabled+0x1a>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800200a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800200e:	f043 0204 	orr.w	r2, r3, #4
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b04      	cmp	r3, #4
 8002034:	d101      	bne.n	800203a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b08      	cmp	r3, #8
 800205a:	d101      	bne.n	8002060 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e134      	b.n	80022f4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fb03 	bl	80016a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff3f 	bl	8001f34 <LL_ADC_IsDeepPowerDownEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff25 	bl	8001f10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff5a 	bl	8001f84 <LL_ADC_IsInternalRegulatorEnabled>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d113      	bne.n	80020fe <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff3e 	bl	8001f5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80020e0:	4b86      	ldr	r3, [pc, #536]	; (80022fc <HAL_ADC_Init+0x28c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	4a86      	ldr	r2, [pc, #536]	; (8002300 <HAL_ADC_Init+0x290>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	099b      	lsrs	r3, r3, #6
 80020ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff3e 	bl	8001f84 <LL_ADC_IsInternalRegulatorEnabled>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10d      	bne.n	800212a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002112:	f043 0210 	orr.w	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff ff77 	bl	8002022 <LL_ADC_REG_IsConversionOngoing>
 8002134:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 80cf 	bne.w	80022e2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 80cb 	bne.w	80022e2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002154:	f043 0202 	orr.w	r2, r3, #2
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff37 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d115      	bne.n	8002198 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800216c:	4865      	ldr	r0, [pc, #404]	; (8002304 <HAL_ADC_Init+0x294>)
 800216e:	f7ff ff31 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002172:	4604      	mov	r4, r0
 8002174:	4864      	ldr	r0, [pc, #400]	; (8002308 <HAL_ADC_Init+0x298>)
 8002176:	f7ff ff2d 	bl	8001fd4 <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	431c      	orrs	r4, r3
 800217e:	4863      	ldr	r0, [pc, #396]	; (800230c <HAL_ADC_Init+0x29c>)
 8002180:	f7ff ff28 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002184:	4603      	mov	r3, r0
 8002186:	4323      	orrs	r3, r4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4619      	mov	r1, r3
 8002192:	485f      	ldr	r0, [pc, #380]	; (8002310 <HAL_ADC_Init+0x2a0>)
 8002194:	f7ff fda4 	bl	8001ce0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7e5b      	ldrb	r3, [r3, #25]
 800219c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021a8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021ae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d106      	bne.n	80021d4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	3b01      	subs	r3, #1
 80021cc:	045b      	lsls	r3, r3, #17
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_ADC_Init+0x2a4>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	430b      	orrs	r3, r1
 8002202:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff0a 	bl	8002022 <LL_ADC_REG_IsConversionOngoing>
 800220e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff17 	bl	8002048 <LL_ADC_INJ_IsConversionOngoing>
 800221a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d13d      	bne.n	800229e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d13a      	bne.n	800229e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800222c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002234:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002244:	f023 0302 	bic.w	r3, r3, #2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	69b9      	ldr	r1, [r7, #24]
 800224e:	430b      	orrs	r3, r1
 8002250:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002258:	2b01      	cmp	r3, #1
 800225a:	d118      	bne.n	800228e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002266:	f023 0304 	bic.w	r3, r3, #4
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002272:	4311      	orrs	r1, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002278:	4311      	orrs	r1, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800227e:	430a      	orrs	r2, r1
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	611a      	str	r2, [r3, #16]
 800228c:	e007      	b.n	800229e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d10c      	bne.n	80022c0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	f023 010f 	bic.w	r1, r3, #15
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	1e5a      	subs	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
 80022be:	e007      	b.n	80022d0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 020f 	bic.w	r2, r2, #15
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	f023 0303 	bic.w	r3, r3, #3
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
 80022e0:	e007      	b.n	80022f2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	f043 0210 	orr.w	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3724      	adds	r7, #36	; 0x24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	20000000 	.word	0x20000000
 8002300:	053e2d63 	.word	0x053e2d63
 8002304:	50040000 	.word	0x50040000
 8002308:	50040100 	.word	0x50040100
 800230c:	50040200 	.word	0x50040200
 8002310:	50040300 	.word	0x50040300
 8002314:	fff0c007 	.word	0xfff0c007

08002318 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002324:	4850      	ldr	r0, [pc, #320]	; (8002468 <HAL_ADC_Start_DMA+0x150>)
 8002326:	f7ff fde5 	bl	8001ef4 <LL_ADC_GetMultimode>
 800232a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fe76 	bl	8002022 <LL_ADC_REG_IsConversionOngoing>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 808e 	bne.w	800245a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_ADC_Start_DMA+0x34>
 8002348:	2302      	movs	r3, #2
 800234a:	e089      	b.n	8002460 <HAL_ADC_Start_DMA+0x148>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b05      	cmp	r3, #5
 800235e:	d002      	beq.n	8002366 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b09      	cmp	r3, #9
 8002364:	d172      	bne.n	800244c <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fc0c 	bl	8002b84 <ADC_Enable>
 800236c:	4603      	mov	r3, r0
 800236e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d165      	bne.n	8002442 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a37      	ldr	r2, [pc, #220]	; (800246c <HAL_ADC_Start_DMA+0x154>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d002      	beq.n	800239a <HAL_ADC_Start_DMA+0x82>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	e000      	b.n	800239c <HAL_ADC_Start_DMA+0x84>
 800239a:	4b35      	ldr	r3, [pc, #212]	; (8002470 <HAL_ADC_Start_DMA+0x158>)
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d002      	beq.n	80023aa <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d006      	beq.n	80023d0 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	f023 0206 	bic.w	r2, r3, #6
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	659a      	str	r2, [r3, #88]	; 0x58
 80023ce:	e002      	b.n	80023d6 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	4a26      	ldr	r2, [pc, #152]	; (8002474 <HAL_ADC_Start_DMA+0x15c>)
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	4a25      	ldr	r2, [pc, #148]	; (8002478 <HAL_ADC_Start_DMA+0x160>)
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	4a24      	ldr	r2, [pc, #144]	; (800247c <HAL_ADC_Start_DMA+0x164>)
 80023ec:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	221c      	movs	r2, #28
 80023f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0210 	orr.w	r2, r2, #16
 800240c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3340      	adds	r3, #64	; 0x40
 8002428:	4619      	mov	r1, r3
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f001 f8e1 	bl	80035f4 <HAL_DMA_Start_IT>
 8002432:	4603      	mov	r3, r0
 8002434:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fddd 	bl	8001ffa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002440:	e00d      	b.n	800245e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800244a:	e008      	b.n	800245e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002458:	e001      	b.n	800245e <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800245a:	2302      	movs	r3, #2
 800245c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800245e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	50040300 	.word	0x50040300
 800246c:	50040100 	.word	0x50040100
 8002470:	50040000 	.word	0x50040000
 8002474:	08002c39 	.word	0x08002c39
 8002478:	08002d11 	.word	0x08002d11
 800247c:	08002d2d 	.word	0x08002d2d

08002480 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0a6      	sub	sp, #152	; 0x98
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x22>
 80024da:	2302      	movs	r3, #2
 80024dc:	e348      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x6b4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fd99 	bl	8002022 <LL_ADC_REG_IsConversionOngoing>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 8329 	bne.w	8002b4a <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d824      	bhi.n	800254a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	3b02      	subs	r3, #2
 8002506:	2b03      	cmp	r3, #3
 8002508:	d81b      	bhi.n	8002542 <HAL_ADC_ConfigChannel+0x86>
 800250a:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <HAL_ADC_ConfigChannel+0x54>)
 800250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002510:	08002521 	.word	0x08002521
 8002514:	08002529 	.word	0x08002529
 8002518:	08002531 	.word	0x08002531
 800251c:	08002539 	.word	0x08002539
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	220c      	movs	r2, #12
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	e011      	b.n	800254c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2212      	movs	r2, #18
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	e00d      	b.n	800254c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2218      	movs	r2, #24
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	e009      	b.n	800254c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	e004      	b.n	800254c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2206      	movs	r2, #6
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	e000      	b.n	800254c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800254a:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	f7ff fc56 	bl	8001e0a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fd5d 	bl	8002022 <LL_ADC_REG_IsConversionOngoing>
 8002568:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fd69 	bl	8002048 <LL_ADC_INJ_IsConversionOngoing>
 8002576:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800257a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 8148 	bne.w	8002814 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 8143 	bne.w	8002814 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	461a      	mov	r2, r3
 800259c:	f7ff fc5e 	bl	8001e5c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	08db      	lsrs	r3, r3, #3
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d00a      	beq.n	80025d8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6919      	ldr	r1, [r3, #16]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025d2:	f7ff fbb9 	bl	8001d48 <LL_ADC_SetOffset>
 80025d6:	e11d      	b.n	8002814 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fbd4 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x148>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fbc9 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	e012      	b.n	800262a <HAL_ADC_ConfigChannel+0x16e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fbbe 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002620:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x186>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	e00a      	b.n	8002658 <HAL_ADC_ConfigChannel+0x19c>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	429a      	cmp	r2, r3
 800265a:	d106      	bne.n	800266a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fba5 	bl	8001db4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2101      	movs	r1, #1
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fb8b 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x1da>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fb80 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	e010      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x1fc>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fb75 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 80026a2:	4603      	mov	r3, r0
 80026a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x214>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	e00a      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x22a>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d106      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2200      	movs	r2, #0
 80026f0:	2101      	movs	r1, #1
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fb5e 	bl	8001db4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2102      	movs	r1, #2
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fb44 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x268>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2102      	movs	r1, #2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fb39 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	f003 021f 	and.w	r2, r3, #31
 8002722:	e010      	b.n	8002746 <HAL_ADC_ConfigChannel+0x28a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2102      	movs	r1, #2
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fb2e 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800273c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <HAL_ADC_ConfigChannel+0x2a2>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	0e9b      	lsrs	r3, r3, #26
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	e00a      	b.n	8002774 <HAL_ADC_ConfigChannel+0x2b8>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800276c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	429a      	cmp	r2, r3
 8002776:	d106      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	2102      	movs	r1, #2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fb17 	bl	8001db4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2103      	movs	r1, #3
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fafd 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x2f6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2103      	movs	r1, #3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff faf2 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	0e9b      	lsrs	r3, r3, #26
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	e010      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x318>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2103      	movs	r1, #3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fae7 	bl	8001d8c <LL_ADC_GetOffsetChannel>
 80027be:	4603      	mov	r3, r0
 80027c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x330>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	e00a      	b.n	8002802 <HAL_ADC_ConfigChannel+0x346>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80027fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	429a      	cmp	r2, r3
 8002804:	d106      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2200      	movs	r2, #0
 800280c:	2103      	movs	r1, #3
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fad0 	bl	8001db4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fbdb 	bl	8001fd4 <LL_ADC_IsEnabled>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	f040 810c 	bne.w	8002a3e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	461a      	mov	r2, r3
 8002834:	f7ff fb3a 	bl	8001eac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4aad      	ldr	r2, [pc, #692]	; (8002af4 <HAL_ADC_ConfigChannel+0x638>)
 800283e:	4293      	cmp	r3, r2
 8002840:	f040 80fd 	bne.w	8002a3e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <HAL_ADC_ConfigChannel+0x3b0>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	3301      	adds	r3, #1
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2b09      	cmp	r3, #9
 8002862:	bf94      	ite	ls
 8002864:	2301      	movls	r3, #1
 8002866:	2300      	movhi	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e012      	b.n	8002892 <HAL_ADC_ConfigChannel+0x3d6>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800287a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	3301      	adds	r3, #1
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2b09      	cmp	r3, #9
 800288a:	bf94      	ite	ls
 800288c:	2301      	movls	r3, #1
 800288e:	2300      	movhi	r3, #0
 8002890:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002892:	2b00      	cmp	r3, #0
 8002894:	d064      	beq.n	8002960 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d107      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x3f6>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	3301      	adds	r3, #1
 80028aa:	069b      	lsls	r3, r3, #26
 80028ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028b0:	e00e      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x414>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	069b      	lsls	r3, r3, #26
 80028cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x434>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	3301      	adds	r3, #1
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	2101      	movs	r1, #1
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	e010      	b.n	8002912 <HAL_ADC_ConfigChannel+0x456>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	ea42 0103 	orr.w	r1, r2, r3
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x47c>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	3301      	adds	r3, #1
 800292a:	f003 021f 	and.w	r2, r3, #31
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	051b      	lsls	r3, r3, #20
 8002936:	e011      	b.n	800295c <HAL_ADC_ConfigChannel+0x4a0>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4613      	mov	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800295c:	430b      	orrs	r3, r1
 800295e:	e069      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002968:	2b00      	cmp	r3, #0
 800296a:	d107      	bne.n	800297c <HAL_ADC_ConfigChannel+0x4c0>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	0e9b      	lsrs	r3, r3, #26
 8002972:	3301      	adds	r3, #1
 8002974:	069b      	lsls	r3, r3, #26
 8002976:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800297a:	e00e      	b.n	800299a <HAL_ADC_ConfigChannel+0x4de>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	61fb      	str	r3, [r7, #28]
  return result;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3301      	adds	r3, #1
 8002994:	069b      	lsls	r3, r3, #26
 8002996:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x4fe>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	0e9b      	lsrs	r3, r3, #26
 80029ac:	3301      	adds	r3, #1
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2101      	movs	r1, #1
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	e010      	b.n	80029dc <HAL_ADC_ConfigChannel+0x520>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	617b      	str	r3, [r7, #20]
  return result;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	ea42 0103 	orr.w	r1, r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10d      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x54c>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	3301      	adds	r3, #1
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	3b1e      	subs	r3, #30
 8002a00:	051b      	lsls	r3, r3, #20
 8002a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a06:	e014      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x576>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	60fb      	str	r3, [r7, #12]
  return result;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	3b1e      	subs	r3, #30
 8002a2c:	051b      	lsls	r3, r3, #20
 8002a2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a32:	430b      	orrs	r3, r1
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7ff fa0f 	bl	8001e5c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_ADC_ConfigChannel+0x63c>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 808c 	beq.w	8002b64 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a4c:	482b      	ldr	r0, [pc, #172]	; (8002afc <HAL_ADC_ConfigChannel+0x640>)
 8002a4e:	f7ff f96d 	bl	8001d2c <LL_ADC_GetCommonPathInternalCh>
 8002a52:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <HAL_ADC_ConfigChannel+0x644>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d12b      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x5fc>
 8002a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d125      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a24      	ldr	r2, [pc, #144]	; (8002b04 <HAL_ADC_ConfigChannel+0x648>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x5c4>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <HAL_ADC_ConfigChannel+0x64c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d16e      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a88:	4619      	mov	r1, r3
 8002a8a:	481c      	ldr	r0, [pc, #112]	; (8002afc <HAL_ADC_ConfigChannel+0x640>)
 8002a8c:	f7ff f93b 	bl	8001d06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a90:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <HAL_ADC_ConfigChannel+0x650>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_ADC_ConfigChannel+0x654>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	099a      	lsrs	r2, r3, #6
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002aa8:	e002      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f9      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ab6:	e052      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a15      	ldr	r2, [pc, #84]	; (8002b14 <HAL_ADC_ConfigChannel+0x658>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d12a      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x65c>
 8002ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d124      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <HAL_ADC_ConfigChannel+0x648>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_ADC_ConfigChannel+0x626>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_ADC_ConfigChannel+0x64c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d13f      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aea:	4619      	mov	r1, r3
 8002aec:	4803      	ldr	r0, [pc, #12]	; (8002afc <HAL_ADC_ConfigChannel+0x640>)
 8002aee:	f7ff f90a 	bl	8001d06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002af2:	e036      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x6a6>
 8002af4:	407f0000 	.word	0x407f0000
 8002af8:	80080000 	.word	0x80080000
 8002afc:	50040300 	.word	0x50040300
 8002b00:	c7520000 	.word	0xc7520000
 8002b04:	50040000 	.word	0x50040000
 8002b08:	50040200 	.word	0x50040200
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	053e2d63 	.word	0x053e2d63
 8002b14:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <HAL_ADC_ConfigChannel+0x6bc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d120      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11a      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_ADC_ConfigChannel+0x6c0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d115      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b40:	4619      	mov	r1, r3
 8002b42:	480f      	ldr	r0, [pc, #60]	; (8002b80 <HAL_ADC_ConfigChannel+0x6c4>)
 8002b44:	f7ff f8df 	bl	8001d06 <LL_ADC_SetCommonPathInternalCh>
 8002b48:	e00c      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b5e:	bf00      	nop
 8002b60:	e000      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b62:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3798      	adds	r7, #152	; 0x98
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	80000001 	.word	0x80000001
 8002b7c:	50040000 	.word	0x50040000
 8002b80:	50040300 	.word	0x50040300

08002b84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fa1f 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d146      	bne.n	8002c2a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <ADC_Enable+0xb0>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00d      	beq.n	8002bc6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	f043 0210 	orr.w	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e032      	b.n	8002c2c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f9ee 	bl	8001fac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bd0:	f7ff f858 	bl	8001c84 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bd6:	e021      	b.n	8002c1c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff f9f9 	bl	8001fd4 <LL_ADC_IsEnabled>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff f9dd 	bl	8001fac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bf2:	f7ff f847 	bl	8001c84 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d90d      	bls.n	8002c1c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	f043 0210 	orr.w	r2, r3, #16
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e007      	b.n	8002c2c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d1d6      	bne.n	8002bd8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	8000003f 	.word	0x8000003f

08002c38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d14b      	bne.n	8002cea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d021      	beq.n	8002cb0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff f8b7 	bl	8001de4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d032      	beq.n	8002ce2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d12b      	bne.n	8002ce2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11f      	bne.n	8002ce2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
 8002cae:	e018      	b.n	8002ce2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d111      	bne.n	8002ce2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d105      	bne.n	8002ce2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff fbcc 	bl	8002480 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ce8:	e00e      	b.n	8002d08 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff fbd6 	bl	80024a8 <HAL_ADC_ErrorCallback>
}
 8002cfc:	e004      	b.n	8002d08 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff fbb8 	bl	8002494 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	f043 0204 	orr.w	r2, r3, #4
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff fba8 	bl	80024a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <LL_ADC_IsEnabled>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <LL_ADC_IsEnabled+0x18>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <LL_ADC_IsEnabled+0x1a>
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d101      	bne.n	8002d9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b09f      	sub	sp, #124	; 0x7c
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e08f      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a47      	ldr	r2, [pc, #284]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d102      	bne.n	8002de2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002ddc:	4b46      	ldr	r3, [pc, #280]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	e001      	b.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e072      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ffbd 	bl	8002d86 <LL_ADC_REG_IsConversionOngoing>
 8002e0c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ffb7 	bl	8002d86 <LL_ADC_REG_IsConversionOngoing>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d154      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d151      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e24:	4b35      	ldr	r3, [pc, #212]	; (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e26:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d02c      	beq.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e42:	035b      	lsls	r3, r3, #13
 8002e44:	430b      	orrs	r3, r1
 8002e46:	431a      	orrs	r2, r3
 8002e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e4c:	4829      	ldr	r0, [pc, #164]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002e4e:	f7ff ff87 	bl	8002d60 <LL_ADC_IsEnabled>
 8002e52:	4604      	mov	r4, r0
 8002e54:	4828      	ldr	r0, [pc, #160]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002e56:	f7ff ff83 	bl	8002d60 <LL_ADC_IsEnabled>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	431c      	orrs	r4, r3
 8002e5e:	4828      	ldr	r0, [pc, #160]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e60:	f7ff ff7e 	bl	8002d60 <LL_ADC_IsEnabled>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4323      	orrs	r3, r4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d137      	bne.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e74:	f023 030f 	bic.w	r3, r3, #15
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	6811      	ldr	r1, [r2, #0]
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	6892      	ldr	r2, [r2, #8]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	431a      	orrs	r2, r3
 8002e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e86:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e88:	e028      	b.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e94:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e96:	4817      	ldr	r0, [pc, #92]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002e98:	f7ff ff62 	bl	8002d60 <LL_ADC_IsEnabled>
 8002e9c:	4604      	mov	r4, r0
 8002e9e:	4816      	ldr	r0, [pc, #88]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002ea0:	f7ff ff5e 	bl	8002d60 <LL_ADC_IsEnabled>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	4815      	ldr	r0, [pc, #84]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002eaa:	f7ff ff59 	bl	8002d60 <LL_ADC_IsEnabled>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4323      	orrs	r3, r4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d112      	bne.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ebe:	f023 030f 	bic.w	r3, r3, #15
 8002ec2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ec4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec6:	e009      	b.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002eda:	e000      	b.n	8002ede <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002edc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ee6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	377c      	adds	r7, #124	; 0x7c
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd90      	pop	{r4, r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	50040000 	.word	0x50040000
 8002ef8:	50040100 	.word	0x50040100
 8002efc:	50040300 	.word	0x50040300
 8002f00:	50040200 	.word	0x50040200

08002f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f20:	4013      	ands	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <__NVIC_SetPriorityGrouping+0x44>)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	60d3      	str	r3, [r2, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <__NVIC_GetPriorityGrouping+0x18>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	f003 0307 	and.w	r3, r3, #7
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db0b      	blt.n	8002f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	f003 021f 	and.w	r2, r3, #31
 8002f80:	4907      	ldr	r1, [pc, #28]	; (8002fa0 <__NVIC_EnableIRQ+0x38>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2001      	movs	r0, #1
 8002f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100

08002fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	6039      	str	r1, [r7, #0]
 8002fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	db0a      	blt.n	8002fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	490c      	ldr	r1, [pc, #48]	; (8002ff0 <__NVIC_SetPriority+0x4c>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fcc:	e00a      	b.n	8002fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4908      	ldr	r1, [pc, #32]	; (8002ff4 <__NVIC_SetPriority+0x50>)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3b04      	subs	r3, #4
 8002fdc:	0112      	lsls	r2, r2, #4
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	761a      	strb	r2, [r3, #24]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000e100 	.word	0xe000e100
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f1c3 0307 	rsb	r3, r3, #7
 8003012:	2b04      	cmp	r3, #4
 8003014:	bf28      	it	cs
 8003016:	2304      	movcs	r3, #4
 8003018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3304      	adds	r3, #4
 800301e:	2b06      	cmp	r3, #6
 8003020:	d902      	bls.n	8003028 <NVIC_EncodePriority+0x30>
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3b03      	subs	r3, #3
 8003026:	e000      	b.n	800302a <NVIC_EncodePriority+0x32>
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	f04f 32ff 	mov.w	r2, #4294967295
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	401a      	ands	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003040:	f04f 31ff 	mov.w	r1, #4294967295
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	43d9      	mvns	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	4313      	orrs	r3, r2
         );
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	; 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003070:	d301      	bcc.n	8003076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003072:	2301      	movs	r3, #1
 8003074:	e00f      	b.n	8003096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <SysTick_Config+0x40>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307e:	210f      	movs	r1, #15
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	f7ff ff8e 	bl	8002fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <SysTick_Config+0x40>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <SysTick_Config+0x40>)
 8003090:	2207      	movs	r2, #7
 8003092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	e000e010 	.word	0xe000e010

080030a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff29 	bl	8002f04 <__NVIC_SetPriorityGrouping>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030cc:	f7ff ff3e 	bl	8002f4c <__NVIC_GetPriorityGrouping>
 80030d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	6978      	ldr	r0, [r7, #20]
 80030d8:	f7ff ff8e 	bl	8002ff8 <NVIC_EncodePriority>
 80030dc:	4602      	mov	r2, r0
 80030de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff5d 	bl	8002fa4 <__NVIC_SetPriority>
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff31 	bl	8002f68 <__NVIC_EnableIRQ>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ffa2 	bl	8003060 <SysTick_Config>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e014      	b.n	8003162 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	791b      	ldrb	r3, [r3, #4]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7fe fb89 	bl	8001860 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	795b      	ldrb	r3, [r3, #5]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_DAC_Start+0x16>
 800317c:	2302      	movs	r3, #2
 800317e:	e03b      	b.n	80031f8 <HAL_DAC_Start+0x8e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6819      	ldr	r1, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2201      	movs	r2, #1
 800319a:	409a      	lsls	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10f      	bne.n	80031ca <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d118      	bne.n	80031ea <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	e00f      	b.n	80031ea <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031d8:	d107      	bne.n	80031ea <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0202 	orr.w	r2, r2, #2
 80031e8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	3308      	adds	r3, #8
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	e004      	b.n	8003238 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	3314      	adds	r3, #20
 8003236:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	461a      	mov	r2, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b088      	sub	sp, #32
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	795b      	ldrb	r3, [r3, #5]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_DAC_ConfigChannel+0x1c>
 8003266:	2302      	movs	r3, #2
 8003268:	e107      	b.n	800347a <HAL_DAC_ConfigChannel+0x22c>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2202      	movs	r2, #2
 8003274:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b04      	cmp	r3, #4
 800327c:	d174      	bne.n	8003368 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d137      	bne.n	80032f4 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003284:	f7fe fcfe 	bl	8001c84 <HAL_GetTick>
 8003288:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800328a:	e011      	b.n	80032b0 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800328c:	f7fe fcfa 	bl	8001c84 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d90a      	bls.n	80032b0 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f043 0208 	orr.w	r2, r3, #8
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2203      	movs	r2, #3
 80032aa:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e0e4      	b.n	800347a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e6      	bne.n	800328c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80032be:	2001      	movs	r0, #1
 80032c0:	f7fe fcec 	bl	8001c9c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	6992      	ldr	r2, [r2, #24]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
 80032ce:	e01e      	b.n	800330e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032d0:	f7fe fcd8 	bl	8001c84 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d90a      	bls.n	80032f4 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f043 0208 	orr.w	r2, r3, #8
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2203      	movs	r2, #3
 80032ee:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0c2      	b.n	800347a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	dbe8      	blt.n	80032d0 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80032fe:	2001      	movs	r0, #1
 8003300:	f7fe fccc 	bl	8001c9c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	6992      	ldr	r2, [r2, #24]
 800330c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	ea02 0103 	and.w	r1, r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	409a      	lsls	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	21ff      	movs	r1, #255	; 0xff
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	ea02 0103 	and.w	r1, r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	6a1a      	ldr	r2, [r3, #32]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	409a      	lsls	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d11d      	bne.n	80033ac <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	221f      	movs	r2, #31
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2207      	movs	r2, #7
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43da      	mvns	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	400a      	ands	r2, r1
 8003410:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6819      	ldr	r1, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	22c0      	movs	r2, #192	; 0xc0
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	400a      	ands	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e098      	b.n	80035c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	4b4d      	ldr	r3, [pc, #308]	; (80035d4 <HAL_DMA_Init+0x150>)
 800349e:	429a      	cmp	r2, r3
 80034a0:	d80f      	bhi.n	80034c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <HAL_DMA_Init+0x154>)
 80034aa:	4413      	add	r3, r2
 80034ac:	4a4b      	ldr	r2, [pc, #300]	; (80035dc <HAL_DMA_Init+0x158>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	009a      	lsls	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a48      	ldr	r2, [pc, #288]	; (80035e0 <HAL_DMA_Init+0x15c>)
 80034be:	641a      	str	r2, [r3, #64]	; 0x40
 80034c0:	e00e      	b.n	80034e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <HAL_DMA_Init+0x160>)
 80034ca:	4413      	add	r3, r2
 80034cc:	4a43      	ldr	r2, [pc, #268]	; (80035dc <HAL_DMA_Init+0x158>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	009a      	lsls	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a42      	ldr	r2, [pc, #264]	; (80035e8 <HAL_DMA_Init+0x164>)
 80034de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800353a:	d039      	beq.n	80035b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	4a27      	ldr	r2, [pc, #156]	; (80035e0 <HAL_DMA_Init+0x15c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d11a      	bne.n	800357c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_DMA_Init+0x168>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f003 031c 	and.w	r3, r3, #28
 8003552:	210f      	movs	r1, #15
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	4924      	ldr	r1, [pc, #144]	; (80035ec <HAL_DMA_Init+0x168>)
 800355c:	4013      	ands	r3, r2
 800355e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003560:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_DMA_Init+0x168>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	f003 031c 	and.w	r3, r3, #28
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	491d      	ldr	r1, [pc, #116]	; (80035ec <HAL_DMA_Init+0x168>)
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
 800357a:	e019      	b.n	80035b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800357c:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <HAL_DMA_Init+0x16c>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	f003 031c 	and.w	r3, r3, #28
 8003588:	210f      	movs	r1, #15
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	4917      	ldr	r1, [pc, #92]	; (80035f0 <HAL_DMA_Init+0x16c>)
 8003592:	4013      	ands	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003596:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <HAL_DMA_Init+0x16c>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f003 031c 	and.w	r3, r3, #28
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	4911      	ldr	r1, [pc, #68]	; (80035f0 <HAL_DMA_Init+0x16c>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40020407 	.word	0x40020407
 80035d8:	bffdfff8 	.word	0xbffdfff8
 80035dc:	cccccccd 	.word	0xcccccccd
 80035e0:	40020000 	.word	0x40020000
 80035e4:	bffdfbf8 	.word	0xbffdfbf8
 80035e8:	40020400 	.word	0x40020400
 80035ec:	400200a8 	.word	0x400200a8
 80035f0:	400204a8 	.word	0x400204a8

080035f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_DMA_Start_IT+0x20>
 8003610:	2302      	movs	r3, #2
 8003612:	e04b      	b.n	80036ac <HAL_DMA_Start_IT+0xb8>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d13a      	bne.n	800369e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f8e0 	bl	8003812 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 020e 	orr.w	r2, r2, #14
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e00f      	b.n	800368c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 020a 	orr.w	r2, r2, #10
 800368a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e005      	b.n	80036aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
 80036a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	f003 031c 	and.w	r3, r3, #28
 80036d4:	2204      	movs	r2, #4
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d026      	beq.n	800372e <HAL_DMA_IRQHandler+0x7a>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d021      	beq.n	800372e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d107      	bne.n	8003708 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0204 	bic.w	r2, r2, #4
 8003706:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370c:	f003 021c 	and.w	r2, r3, #28
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	2104      	movs	r1, #4
 8003716:	fa01 f202 	lsl.w	r2, r1, r2
 800371a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	2b00      	cmp	r3, #0
 8003722:	d071      	beq.n	8003808 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800372c:	e06c      	b.n	8003808 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f003 031c 	and.w	r3, r3, #28
 8003736:	2202      	movs	r2, #2
 8003738:	409a      	lsls	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d02e      	beq.n	80037a0 <HAL_DMA_IRQHandler+0xec>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d029      	beq.n	80037a0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10b      	bne.n	8003772 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 020a 	bic.w	r2, r2, #10
 8003768:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f003 021c 	and.w	r2, r3, #28
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	2102      	movs	r1, #2
 8003780:	fa01 f202 	lsl.w	r2, r1, r2
 8003784:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d038      	beq.n	8003808 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800379e:	e033      	b.n	8003808 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a4:	f003 031c 	and.w	r3, r3, #28
 80037a8:	2208      	movs	r2, #8
 80037aa:	409a      	lsls	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d02a      	beq.n	800380a <HAL_DMA_IRQHandler+0x156>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d025      	beq.n	800380a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 020e 	bic.w	r2, r2, #14
 80037cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f003 021c 	and.w	r2, r3, #28
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	2101      	movs	r1, #1
 80037dc:	fa01 f202 	lsl.w	r2, r1, r2
 80037e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d004      	beq.n	800380a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003808:	bf00      	nop
 800380a:	bf00      	nop
}
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003812:	b480      	push	{r7}
 8003814:	b085      	sub	sp, #20
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f003 021c 	and.w	r2, r3, #28
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b10      	cmp	r3, #16
 8003842:	d108      	bne.n	8003856 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003854:	e007      	b.n	8003866 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	60da      	str	r2, [r3, #12]
}
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003882:	e17f      	b.n	8003b84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	2101      	movs	r1, #1
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	fa01 f303 	lsl.w	r3, r1, r3
 8003890:	4013      	ands	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8171 	beq.w	8003b7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d00b      	beq.n	80038bc <HAL_GPIO_Init+0x48>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d007      	beq.n	80038bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038b0:	2b11      	cmp	r3, #17
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b12      	cmp	r3, #18
 80038ba:	d130      	bne.n	800391e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	2203      	movs	r2, #3
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038f2:	2201      	movs	r2, #1
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	f003 0201 	and.w	r2, r3, #1
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b03      	cmp	r3, #3
 8003928:	d118      	bne.n	800395c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003930:	2201      	movs	r2, #1
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	08db      	lsrs	r3, r3, #3
 8003946:	f003 0201 	and.w	r2, r3, #1
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	2203      	movs	r2, #3
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d003      	beq.n	800399c <HAL_GPIO_Init+0x128>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b12      	cmp	r3, #18
 800399a:	d123      	bne.n	80039e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	08da      	lsrs	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3208      	adds	r2, #8
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	220f      	movs	r2, #15
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4013      	ands	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	08da      	lsrs	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	6939      	ldr	r1, [r7, #16]
 80039e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80ac 	beq.w	8003b7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a26:	4b5e      	ldr	r3, [pc, #376]	; (8003ba0 <HAL_GPIO_Init+0x32c>)
 8003a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2a:	4a5d      	ldr	r2, [pc, #372]	; (8003ba0 <HAL_GPIO_Init+0x32c>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	6613      	str	r3, [r2, #96]	; 0x60
 8003a32:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <HAL_GPIO_Init+0x32c>)
 8003a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a3e:	4a59      	ldr	r2, [pc, #356]	; (8003ba4 <HAL_GPIO_Init+0x330>)
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	089b      	lsrs	r3, r3, #2
 8003a44:	3302      	adds	r3, #2
 8003a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	220f      	movs	r2, #15
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a68:	d025      	beq.n	8003ab6 <HAL_GPIO_Init+0x242>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a4e      	ldr	r2, [pc, #312]	; (8003ba8 <HAL_GPIO_Init+0x334>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01f      	beq.n	8003ab2 <HAL_GPIO_Init+0x23e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a4d      	ldr	r2, [pc, #308]	; (8003bac <HAL_GPIO_Init+0x338>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d019      	beq.n	8003aae <HAL_GPIO_Init+0x23a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a4c      	ldr	r2, [pc, #304]	; (8003bb0 <HAL_GPIO_Init+0x33c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_GPIO_Init+0x236>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a4b      	ldr	r2, [pc, #300]	; (8003bb4 <HAL_GPIO_Init+0x340>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00d      	beq.n	8003aa6 <HAL_GPIO_Init+0x232>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a4a      	ldr	r2, [pc, #296]	; (8003bb8 <HAL_GPIO_Init+0x344>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d007      	beq.n	8003aa2 <HAL_GPIO_Init+0x22e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a49      	ldr	r2, [pc, #292]	; (8003bbc <HAL_GPIO_Init+0x348>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_GPIO_Init+0x22a>
 8003a9a:	2306      	movs	r3, #6
 8003a9c:	e00c      	b.n	8003ab8 <HAL_GPIO_Init+0x244>
 8003a9e:	2307      	movs	r3, #7
 8003aa0:	e00a      	b.n	8003ab8 <HAL_GPIO_Init+0x244>
 8003aa2:	2305      	movs	r3, #5
 8003aa4:	e008      	b.n	8003ab8 <HAL_GPIO_Init+0x244>
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	e006      	b.n	8003ab8 <HAL_GPIO_Init+0x244>
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e004      	b.n	8003ab8 <HAL_GPIO_Init+0x244>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e002      	b.n	8003ab8 <HAL_GPIO_Init+0x244>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <HAL_GPIO_Init+0x244>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	f002 0203 	and.w	r2, r2, #3
 8003abe:	0092      	lsls	r2, r2, #2
 8003ac0:	4093      	lsls	r3, r2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ac8:	4936      	ldr	r1, [pc, #216]	; (8003ba4 <HAL_GPIO_Init+0x330>)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	3302      	adds	r3, #2
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ad6:	4b3a      	ldr	r3, [pc, #232]	; (8003bc0 <HAL_GPIO_Init+0x34c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003afa:	4a31      	ldr	r2, [pc, #196]	; (8003bc0 <HAL_GPIO_Init+0x34c>)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003b00:	4b2f      	ldr	r3, [pc, #188]	; (8003bc0 <HAL_GPIO_Init+0x34c>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b24:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <HAL_GPIO_Init+0x34c>)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b2a:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_GPIO_Init+0x34c>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b4e:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <HAL_GPIO_Init+0x34c>)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b54:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <HAL_GPIO_Init+0x34c>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b78:	4a11      	ldr	r2, [pc, #68]	; (8003bc0 <HAL_GPIO_Init+0x34c>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	3301      	adds	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f47f ae78 	bne.w	8003884 <HAL_GPIO_Init+0x10>
  }
}
 8003b94:	bf00      	nop
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	48000400 	.word	0x48000400
 8003bac:	48000800 	.word	0x48000800
 8003bb0:	48000c00 	.word	0x48000c00
 8003bb4:	48001000 	.word	0x48001000
 8003bb8:	48001400 	.word	0x48001400
 8003bbc:	48001800 	.word	0x48001800
 8003bc0:	40010400 	.word	0x40010400

08003bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	807b      	strh	r3, [r7, #2]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd4:	787b      	ldrb	r3, [r7, #1]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003be0:	e002      	b.n	8003be8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <HAL_PWREx_GetVoltageRange+0x18>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40007000 	.word	0x40007000

08003c10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1e:	d130      	bne.n	8003c82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c20:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2c:	d038      	beq.n	8003ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c2e:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c36:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2232      	movs	r2, #50	; 0x32
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	0c9b      	lsrs	r3, r3, #18
 8003c50:	3301      	adds	r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c54:	e002      	b.n	8003c5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c68:	d102      	bne.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f2      	bne.n	8003c56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7c:	d110      	bne.n	8003ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e00f      	b.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8e:	d007      	beq.n	8003ca0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c98:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	431bde83 	.word	0x431bde83

08003cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e3d4      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cce:	4ba1      	ldr	r3, [pc, #644]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd8:	4b9e      	ldr	r3, [pc, #632]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80e4 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_RCC_OscConfig+0x4a>
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b0c      	cmp	r3, #12
 8003cfa:	f040 808b 	bne.w	8003e14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	f040 8087 	bne.w	8003e14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d06:	4b93      	ldr	r3, [pc, #588]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_RCC_OscConfig+0x62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e3ac      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1a      	ldr	r2, [r3, #32]
 8003d22:	4b8c      	ldr	r3, [pc, #560]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <HAL_RCC_OscConfig+0x7c>
 8003d2e:	4b89      	ldr	r3, [pc, #548]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d36:	e005      	b.n	8003d44 <HAL_RCC_OscConfig+0x88>
 8003d38:	4b86      	ldr	r3, [pc, #536]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d223      	bcs.n	8003d90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fd3f 	bl	80047d0 <RCC_SetFlashLatencyFromMSIRange>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e38d      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d5c:	4b7d      	ldr	r3, [pc, #500]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a7c      	ldr	r2, [pc, #496]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d62:	f043 0308 	orr.w	r3, r3, #8
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b7a      	ldr	r3, [pc, #488]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	4977      	ldr	r1, [pc, #476]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d7a:	4b76      	ldr	r3, [pc, #472]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	4972      	ldr	r1, [pc, #456]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	604b      	str	r3, [r1, #4]
 8003d8e:	e025      	b.n	8003ddc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d90:	4b70      	ldr	r3, [pc, #448]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a6f      	ldr	r2, [pc, #444]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d96:	f043 0308 	orr.w	r3, r3, #8
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	4b6d      	ldr	r3, [pc, #436]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	496a      	ldr	r1, [pc, #424]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dae:	4b69      	ldr	r3, [pc, #420]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	4965      	ldr	r1, [pc, #404]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fcff 	bl	80047d0 <RCC_SetFlashLatencyFromMSIRange>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e34d      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ddc:	f000 fc36 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8003de0:	4601      	mov	r1, r0
 8003de2:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	4a5a      	ldr	r2, [pc, #360]	; (8003f58 <HAL_RCC_OscConfig+0x29c>)
 8003dee:	5cd3      	ldrb	r3, [r2, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa21 f303 	lsr.w	r3, r1, r3
 8003df8:	4a58      	ldr	r2, [pc, #352]	; (8003f5c <HAL_RCC_OscConfig+0x2a0>)
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dfc:	4b58      	ldr	r3, [pc, #352]	; (8003f60 <HAL_RCC_OscConfig+0x2a4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fef3 	bl	8001bec <HAL_InitTick>
 8003e06:	4603      	mov	r3, r0
 8003e08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d052      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	e331      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d032      	beq.n	8003e82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e1c:	4b4d      	ldr	r3, [pc, #308]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a4c      	ldr	r2, [pc, #304]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e28:	f7fd ff2c 	bl	8001c84 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e30:	f7fd ff28 	bl	8001c84 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e31a      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e42:	4b44      	ldr	r3, [pc, #272]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e4e:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a40      	ldr	r2, [pc, #256]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003e54:	f043 0308 	orr.w	r3, r3, #8
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b3e      	ldr	r3, [pc, #248]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	493b      	ldr	r1, [pc, #236]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e6c:	4b39      	ldr	r3, [pc, #228]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	4936      	ldr	r1, [pc, #216]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	e01a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e82:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a33      	ldr	r2, [pc, #204]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e8e:	f7fd fef9 	bl	8001c84 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e96:	f7fd fef5 	bl	8001c84 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e2e7      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x1da>
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d074      	beq.n	8003fae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d005      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x21a>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b0c      	cmp	r3, #12
 8003ece:	d10e      	bne.n	8003eee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d10b      	bne.n	8003eee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed6:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d064      	beq.n	8003fac <HAL_RCC_OscConfig+0x2f0>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d160      	bne.n	8003fac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e2c4      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef6:	d106      	bne.n	8003f06 <HAL_RCC_OscConfig+0x24a>
 8003ef8:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e01d      	b.n	8003f42 <HAL_RCC_OscConfig+0x286>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCC_OscConfig+0x26e>
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0f      	ldr	r2, [pc, #60]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003f16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0c      	ldr	r2, [pc, #48]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e00b      	b.n	8003f42 <HAL_RCC_OscConfig+0x286>
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a09      	ldr	r2, [pc, #36]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a06      	ldr	r2, [pc, #24]	; (8003f54 <HAL_RCC_OscConfig+0x298>)
 8003f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01c      	beq.n	8003f84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fd fe9b 	bl	8001c84 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f50:	e011      	b.n	8003f76 <HAL_RCC_OscConfig+0x2ba>
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	08006e38 	.word	0x08006e38
 8003f5c:	20000000 	.word	0x20000000
 8003f60:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fd fe8e 	bl	8001c84 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	; 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e280      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f76:	4baf      	ldr	r3, [pc, #700]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x2a8>
 8003f82:	e014      	b.n	8003fae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd fe7e 	bl	8001c84 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fd fe7a 	bl	8001c84 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	; 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e26c      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f9e:	4ba5      	ldr	r3, [pc, #660]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x2d0>
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d060      	beq.n	800407c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_OscConfig+0x310>
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d119      	bne.n	8003ffa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d116      	bne.n	8003ffa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fcc:	4b99      	ldr	r3, [pc, #612]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x328>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e249      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe4:	4b93      	ldr	r3, [pc, #588]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	061b      	lsls	r3, r3, #24
 8003ff2:	4990      	ldr	r1, [pc, #576]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ff8:	e040      	b.n	800407c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d023      	beq.n	800404a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004002:	4b8c      	ldr	r3, [pc, #560]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a8b      	ldr	r2, [pc, #556]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fd fe39 	bl	8001c84 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004016:	f7fd fe35 	bl	8001c84 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e227      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004028:	4b82      	ldr	r3, [pc, #520]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004034:	4b7f      	ldr	r3, [pc, #508]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	497c      	ldr	r1, [pc, #496]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
 8004048:	e018      	b.n	800407c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404a:	4b7a      	ldr	r3, [pc, #488]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a79      	ldr	r2, [pc, #484]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fd fe15 	bl	8001c84 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405e:	f7fd fe11 	bl	8001c84 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e203      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004070:	4b70      	ldr	r3, [pc, #448]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f0      	bne.n	800405e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d03c      	beq.n	8004102 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01c      	beq.n	80040ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004090:	4b68      	ldr	r3, [pc, #416]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004096:	4a67      	ldr	r2, [pc, #412]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a0:	f7fd fdf0 	bl	8001c84 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a8:	f7fd fdec 	bl	8001c84 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e1de      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ba:	4b5e      	ldr	r3, [pc, #376]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 80040bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ef      	beq.n	80040a8 <HAL_RCC_OscConfig+0x3ec>
 80040c8:	e01b      	b.n	8004102 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ca:	4b5a      	ldr	r3, [pc, #360]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 80040cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d0:	4a58      	ldr	r2, [pc, #352]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040da:	f7fd fdd3 	bl	8001c84 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e2:	f7fd fdcf 	bl	8001c84 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1c1      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040f4:	4b4f      	ldr	r3, [pc, #316]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 80040f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1ef      	bne.n	80040e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80a6 	beq.w	800425c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004110:	2300      	movs	r3, #0
 8004112:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004114:	4b47      	ldr	r3, [pc, #284]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10d      	bne.n	800413c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004120:	4b44      	ldr	r3, [pc, #272]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	4a43      	ldr	r2, [pc, #268]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412a:	6593      	str	r3, [r2, #88]	; 0x58
 800412c:	4b41      	ldr	r3, [pc, #260]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004138:	2301      	movs	r3, #1
 800413a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413c:	4b3e      	ldr	r3, [pc, #248]	; (8004238 <HAL_RCC_OscConfig+0x57c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d118      	bne.n	800417a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004148:	4b3b      	ldr	r3, [pc, #236]	; (8004238 <HAL_RCC_OscConfig+0x57c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a3a      	ldr	r2, [pc, #232]	; (8004238 <HAL_RCC_OscConfig+0x57c>)
 800414e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004154:	f7fd fd96 	bl	8001c84 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415c:	f7fd fd92 	bl	8001c84 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e184      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800416e:	4b32      	ldr	r3, [pc, #200]	; (8004238 <HAL_RCC_OscConfig+0x57c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d108      	bne.n	8004194 <HAL_RCC_OscConfig+0x4d8>
 8004182:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	4a2a      	ldr	r2, [pc, #168]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004192:	e024      	b.n	80041de <HAL_RCC_OscConfig+0x522>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b05      	cmp	r3, #5
 800419a:	d110      	bne.n	80041be <HAL_RCC_OscConfig+0x502>
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a2:	4a24      	ldr	r2, [pc, #144]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 80041a4:	f043 0304 	orr.w	r3, r3, #4
 80041a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ac:	4b21      	ldr	r3, [pc, #132]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b2:	4a20      	ldr	r2, [pc, #128]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041bc:	e00f      	b.n	80041de <HAL_RCC_OscConfig+0x522>
 80041be:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ce:	4b19      	ldr	r3, [pc, #100]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	4a17      	ldr	r2, [pc, #92]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 80041d6:	f023 0304 	bic.w	r3, r3, #4
 80041da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e6:	f7fd fd4d 	bl	8001c84 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ec:	e00a      	b.n	8004204 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f7fd fd49 	bl	8001c84 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e139      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_OscConfig+0x578>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0ed      	beq.n	80041ee <HAL_RCC_OscConfig+0x532>
 8004212:	e01a      	b.n	800424a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fd fd36 	bl	8001c84 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800421a:	e00f      	b.n	800423c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421c:	f7fd fd32 	bl	8001c84 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	; 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d906      	bls.n	800423c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e122      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
 8004232:	bf00      	nop
 8004234:	40021000 	.word	0x40021000
 8004238:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800423c:	4b90      	ldr	r3, [pc, #576]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e8      	bne.n	800421c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424a:	7ffb      	ldrb	r3, [r7, #31]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004250:	4b8b      	ldr	r3, [pc, #556]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	4a8a      	ldr	r2, [pc, #552]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8108 	beq.w	8004476 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	2b02      	cmp	r3, #2
 800426c:	f040 80d0 	bne.w	8004410 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004270:	4b83      	ldr	r3, [pc, #524]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 0203 	and.w	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	429a      	cmp	r2, r3
 8004282:	d130      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	3b01      	subs	r3, #1
 8004290:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d127      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d11f      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042b0:	2a07      	cmp	r2, #7
 80042b2:	bf14      	ite	ne
 80042b4:	2201      	movne	r2, #1
 80042b6:	2200      	moveq	r2, #0
 80042b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d113      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	3b01      	subs	r3, #1
 80042cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d109      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	3b01      	subs	r3, #1
 80042e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d06e      	beq.n	80043c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b0c      	cmp	r3, #12
 80042ea:	d069      	beq.n	80043c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042ec:	4b64      	ldr	r3, [pc, #400]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042f8:	4b61      	ldr	r3, [pc, #388]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0b7      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004308:	4b5d      	ldr	r3, [pc, #372]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a5c      	ldr	r2, [pc, #368]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 800430e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004312:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004314:	f7fd fcb6 	bl	8001c84 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431c:	f7fd fcb2 	bl	8001c84 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e0a4      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800432e:	4b54      	ldr	r3, [pc, #336]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800433a:	4b51      	ldr	r3, [pc, #324]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	4b51      	ldr	r3, [pc, #324]	; (8004484 <HAL_RCC_OscConfig+0x7c8>)
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800434a:	3a01      	subs	r2, #1
 800434c:	0112      	lsls	r2, r2, #4
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004354:	0212      	lsls	r2, r2, #8
 8004356:	4311      	orrs	r1, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800435c:	0852      	lsrs	r2, r2, #1
 800435e:	3a01      	subs	r2, #1
 8004360:	0552      	lsls	r2, r2, #21
 8004362:	4311      	orrs	r1, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004368:	0852      	lsrs	r2, r2, #1
 800436a:	3a01      	subs	r2, #1
 800436c:	0652      	lsls	r2, r2, #25
 800436e:	4311      	orrs	r1, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004374:	0912      	lsrs	r2, r2, #4
 8004376:	0452      	lsls	r2, r2, #17
 8004378:	430a      	orrs	r2, r1
 800437a:	4941      	ldr	r1, [pc, #260]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004380:	4b3f      	ldr	r3, [pc, #252]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3e      	ldr	r2, [pc, #248]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800438c:	4b3c      	ldr	r3, [pc, #240]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a3b      	ldr	r2, [pc, #236]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004398:	f7fd fc74 	bl	8001c84 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd fc70 	bl	8001c84 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e062      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	4b33      	ldr	r3, [pc, #204]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043be:	e05a      	b.n	8004476 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e059      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c4:	4b2e      	ldr	r3, [pc, #184]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d152      	bne.n	8004476 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043d0:	4b2b      	ldr	r3, [pc, #172]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a2a      	ldr	r2, [pc, #168]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 80043d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043dc:	4b28      	ldr	r3, [pc, #160]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4a27      	ldr	r2, [pc, #156]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 80043e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043e8:	f7fd fc4c 	bl	8001c84 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fd fc48 	bl	8001c84 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e03a      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004402:	4b1f      	ldr	r3, [pc, #124]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x734>
 800440e:	e032      	b.n	8004476 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b0c      	cmp	r3, #12
 8004414:	d02d      	beq.n	8004472 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004416:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a19      	ldr	r2, [pc, #100]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 800441c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004420:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004422:	4b17      	ldr	r3, [pc, #92]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d105      	bne.n	800443a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800442e:	4b14      	ldr	r3, [pc, #80]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	4a13      	ldr	r2, [pc, #76]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004434:	f023 0303 	bic.w	r3, r3, #3
 8004438:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800443a:	4b11      	ldr	r3, [pc, #68]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	4a10      	ldr	r2, [pc, #64]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004440:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004448:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fd fc1b 	bl	8001c84 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004452:	f7fd fc17 	bl	8001c84 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e009      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_RCC_OscConfig+0x7c4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f0      	bne.n	8004452 <HAL_RCC_OscConfig+0x796>
 8004470:	e001      	b.n	8004476 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	f99d808c 	.word	0xf99d808c

08004488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0c8      	b.n	800462e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800449c:	4b66      	ldr	r3, [pc, #408]	; (8004638 <HAL_RCC_ClockConfig+0x1b0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d910      	bls.n	80044cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b63      	ldr	r3, [pc, #396]	; (8004638 <HAL_RCC_ClockConfig+0x1b0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 0207 	bic.w	r2, r3, #7
 80044b2:	4961      	ldr	r1, [pc, #388]	; (8004638 <HAL_RCC_ClockConfig+0x1b0>)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b5f      	ldr	r3, [pc, #380]	; (8004638 <HAL_RCC_ClockConfig+0x1b0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0b0      	b.n	800462e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d04c      	beq.n	8004572 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e0:	4b56      	ldr	r3, [pc, #344]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d121      	bne.n	8004530 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e09e      	b.n	800462e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f8:	4b50      	ldr	r3, [pc, #320]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d115      	bne.n	8004530 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e092      	b.n	800462e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d107      	bne.n	8004520 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004510:	4b4a      	ldr	r3, [pc, #296]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e086      	b.n	800462e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004520:	4b46      	ldr	r3, [pc, #280]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e07e      	b.n	800462e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004530:	4b42      	ldr	r3, [pc, #264]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f023 0203 	bic.w	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	493f      	ldr	r1, [pc, #252]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 800453e:	4313      	orrs	r3, r2
 8004540:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004542:	f7fd fb9f 	bl	8001c84 <HAL_GetTick>
 8004546:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004548:	e00a      	b.n	8004560 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454a:	f7fd fb9b 	bl	8001c84 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	; 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e066      	b.n	800462e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004560:	4b36      	ldr	r3, [pc, #216]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 020c 	and.w	r2, r3, #12
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	429a      	cmp	r2, r3
 8004570:	d1eb      	bne.n	800454a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457e:	4b2f      	ldr	r3, [pc, #188]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	492c      	ldr	r1, [pc, #176]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 800458c:	4313      	orrs	r3, r2
 800458e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004590:	4b29      	ldr	r3, [pc, #164]	; (8004638 <HAL_RCC_ClockConfig+0x1b0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d210      	bcs.n	80045c0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b26      	ldr	r3, [pc, #152]	; (8004638 <HAL_RCC_ClockConfig+0x1b0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 0207 	bic.w	r2, r3, #7
 80045a6:	4924      	ldr	r1, [pc, #144]	; (8004638 <HAL_RCC_ClockConfig+0x1b0>)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ae:	4b22      	ldr	r3, [pc, #136]	; (8004638 <HAL_RCC_ClockConfig+0x1b0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e036      	b.n	800462e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045cc:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	4918      	ldr	r1, [pc, #96]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4910      	ldr	r1, [pc, #64]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045fe:	f000 f825 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8004602:	4601      	mov	r1, r0
 8004604:	4b0d      	ldr	r3, [pc, #52]	; (800463c <HAL_RCC_ClockConfig+0x1b4>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	091b      	lsrs	r3, r3, #4
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	4a0c      	ldr	r2, [pc, #48]	; (8004640 <HAL_RCC_ClockConfig+0x1b8>)
 8004610:	5cd3      	ldrb	r3, [r2, r3]
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	fa21 f303 	lsr.w	r3, r1, r3
 800461a:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <HAL_RCC_ClockConfig+0x1c0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fd fae2 	bl	8001bec <HAL_InitTick>
 8004628:	4603      	mov	r3, r0
 800462a:	72fb      	strb	r3, [r7, #11]

  return status;
 800462c:	7afb      	ldrb	r3, [r7, #11]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40022000 	.word	0x40022000
 800463c:	40021000 	.word	0x40021000
 8004640:	08006e38 	.word	0x08006e38
 8004644:	20000000 	.word	0x20000000
 8004648:	20000004 	.word	0x20000004

0800464c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	; 0x24
 8004650:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800465a:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <HAL_RCC_GetSysClockFreq+0x104>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004664:	4b3a      	ldr	r3, [pc, #232]	; (8004750 <HAL_RCC_GetSysClockFreq+0x104>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x34>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d121      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d11e      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004680:	4b33      	ldr	r3, [pc, #204]	; (8004750 <HAL_RCC_GetSysClockFreq+0x104>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800468c:	4b30      	ldr	r3, [pc, #192]	; (8004750 <HAL_RCC_GetSysClockFreq+0x104>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e005      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800469c:	4b2c      	ldr	r3, [pc, #176]	; (8004750 <HAL_RCC_GetSysClockFreq+0x104>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046a8:	4a2a      	ldr	r2, [pc, #168]	; (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d102      	bne.n	80046ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046c4:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e004      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046d0:	4b22      	ldr	r3, [pc, #136]	; (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d133      	bne.n	8004742 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046da:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <HAL_RCC_GetSysClockFreq+0x104>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d002      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0xa4>
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d003      	beq.n	80046f6 <HAL_RCC_GetSysClockFreq+0xaa>
 80046ee:	e005      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046f0:	4b19      	ldr	r3, [pc, #100]	; (8004758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046f2:	617b      	str	r3, [r7, #20]
      break;
 80046f4:	e005      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046f6:	4b19      	ldr	r3, [pc, #100]	; (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046f8:	617b      	str	r3, [r7, #20]
      break;
 80046fa:	e002      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	617b      	str	r3, [r7, #20]
      break;
 8004700:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004702:	4b13      	ldr	r3, [pc, #76]	; (8004750 <HAL_RCC_GetSysClockFreq+0x104>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	3301      	adds	r3, #1
 800470e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004710:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <HAL_RCC_GetSysClockFreq+0x104>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	0a1b      	lsrs	r3, r3, #8
 8004716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	fb02 f203 	mul.w	r2, r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	fbb2 f3f3 	udiv	r3, r2, r3
 8004726:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004728:	4b09      	ldr	r3, [pc, #36]	; (8004750 <HAL_RCC_GetSysClockFreq+0x104>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	0e5b      	lsrs	r3, r3, #25
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	3301      	adds	r3, #1
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004740:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004742:	69bb      	ldr	r3, [r7, #24]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3724      	adds	r7, #36	; 0x24
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	40021000 	.word	0x40021000
 8004754:	08006e50 	.word	0x08006e50
 8004758:	00f42400 	.word	0x00f42400
 800475c:	007a1200 	.word	0x007a1200

08004760 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004764:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_RCC_GetHCLKFreq+0x14>)
 8004766:	681b      	ldr	r3, [r3, #0]
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000000 	.word	0x20000000

08004778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800477c:	f7ff fff0 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 8004780:	4601      	mov	r1, r0
 8004782:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	08006e48 	.word	0x08006e48

080047a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047a8:	f7ff ffda 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 80047ac:	4601      	mov	r1, r0
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	0adb      	lsrs	r3, r3, #11
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4a04      	ldr	r2, [pc, #16]	; (80047cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80047ba:	5cd3      	ldrb	r3, [r2, r3]
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	08006e48 	.word	0x08006e48

080047d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047dc:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047e8:	f7ff fa04 	bl	8003bf4 <HAL_PWREx_GetVoltageRange>
 80047ec:	6178      	str	r0, [r7, #20]
 80047ee:	e014      	b.n	800481a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047f0:	4b25      	ldr	r3, [pc, #148]	; (8004888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	4a24      	ldr	r2, [pc, #144]	; (8004888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6593      	str	r3, [r2, #88]	; 0x58
 80047fc:	4b22      	ldr	r3, [pc, #136]	; (8004888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004808:	f7ff f9f4 	bl	8003bf4 <HAL_PWREx_GetVoltageRange>
 800480c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800480e:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004812:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004818:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004820:	d10b      	bne.n	800483a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b80      	cmp	r3, #128	; 0x80
 8004826:	d919      	bls.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2ba0      	cmp	r3, #160	; 0xa0
 800482c:	d902      	bls.n	8004834 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800482e:	2302      	movs	r3, #2
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	e013      	b.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004834:	2301      	movs	r3, #1
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	e010      	b.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b80      	cmp	r3, #128	; 0x80
 800483e:	d902      	bls.n	8004846 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004840:	2303      	movs	r3, #3
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	e00a      	b.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b80      	cmp	r3, #128	; 0x80
 800484a:	d102      	bne.n	8004852 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800484c:	2302      	movs	r3, #2
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	e004      	b.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b70      	cmp	r3, #112	; 0x70
 8004856:	d101      	bne.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004858:	2301      	movs	r3, #1
 800485a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 0207 	bic.w	r2, r3, #7
 8004864:	4909      	ldr	r1, [pc, #36]	; (800488c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	429a      	cmp	r2, r3
 8004878:	d001      	beq.n	800487e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40021000 	.word	0x40021000
 800488c:	40022000 	.word	0x40022000

08004890 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004898:	2300      	movs	r3, #0
 800489a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800489c:	2300      	movs	r3, #0
 800489e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d03f      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b4:	d01c      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80048b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ba:	d802      	bhi.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00e      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80048c0:	e01f      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80048c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048c6:	d003      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80048c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048cc:	d01c      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80048ce:	e018      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048d0:	4b85      	ldr	r3, [pc, #532]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a84      	ldr	r2, [pc, #528]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048dc:	e015      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fab9 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048ee:	e00c      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3320      	adds	r3, #32
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fba0 	bl	800503c <RCCEx_PLLSAI2_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004900:	e003      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	74fb      	strb	r3, [r7, #19]
      break;
 8004906:	e000      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490a:	7cfb      	ldrb	r3, [r7, #19]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004910:	4b75      	ldr	r3, [pc, #468]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800491e:	4972      	ldr	r1, [pc, #456]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004926:	e001      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d03f      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800493c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004940:	d01c      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004942:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004946:	d802      	bhi.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00e      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800494c:	e01f      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800494e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004952:	d003      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004954:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004958:	d01c      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800495a:	e018      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800495c:	4b62      	ldr	r3, [pc, #392]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4a61      	ldr	r2, [pc, #388]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004966:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004968:	e015      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3304      	adds	r3, #4
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fa73 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800497a:	e00c      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3320      	adds	r3, #32
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fb5a 	bl	800503c <RCCEx_PLLSAI2_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800498c:	e003      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	74fb      	strb	r3, [r7, #19]
      break;
 8004992:	e000      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10b      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800499c:	4b52      	ldr	r3, [pc, #328]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049aa:	494f      	ldr	r1, [pc, #316]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049b2:	e001      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	7cfb      	ldrb	r3, [r7, #19]
 80049b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 80a0 	beq.w	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c6:	2300      	movs	r3, #0
 80049c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049ca:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e0:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	4a40      	ldr	r2, [pc, #256]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ea:	6593      	str	r3, [r2, #88]	; 0x58
 80049ec:	4b3e      	ldr	r3, [pc, #248]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f8:	2301      	movs	r3, #1
 80049fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049fc:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3a      	ldr	r2, [pc, #232]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a08:	f7fd f93c 	bl	8001c84 <HAL_GetTick>
 8004a0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a0e:	e009      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a10:	f7fd f938 	bl	8001c84 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d902      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	74fb      	strb	r3, [r7, #19]
        break;
 8004a22:	e005      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a24:	4b31      	ldr	r3, [pc, #196]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0ef      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d15c      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a36:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01f      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d019      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a54:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a60:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	4a20      	ldr	r2, [pc, #128]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	4a1c      	ldr	r2, [pc, #112]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a80:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fd f8f7 	bl	8001c84 <HAL_GetTick>
 8004a96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a98:	e00b      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7fd f8f3 	bl	8001c84 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d902      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	74fb      	strb	r3, [r7, #19]
            break;
 8004ab0:	e006      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0ec      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac6:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad6:	4904      	ldr	r1, [pc, #16]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ade:	e009      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	74bb      	strb	r3, [r7, #18]
 8004ae4:	e006      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af4:	7c7b      	ldrb	r3, [r7, #17]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afa:	4b9e      	ldr	r3, [pc, #632]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	4a9d      	ldr	r2, [pc, #628]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b12:	4b98      	ldr	r3, [pc, #608]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	f023 0203 	bic.w	r2, r3, #3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	4994      	ldr	r1, [pc, #592]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b34:	4b8f      	ldr	r3, [pc, #572]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f023 020c 	bic.w	r2, r3, #12
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	498c      	ldr	r1, [pc, #560]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b56:	4b87      	ldr	r3, [pc, #540]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	4983      	ldr	r1, [pc, #524]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b78:	4b7e      	ldr	r3, [pc, #504]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	497b      	ldr	r1, [pc, #492]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b9a:	4b76      	ldr	r3, [pc, #472]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba8:	4972      	ldr	r1, [pc, #456]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bbc:	4b6d      	ldr	r3, [pc, #436]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bca:	496a      	ldr	r1, [pc, #424]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bde:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	4961      	ldr	r1, [pc, #388]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c00:	4b5c      	ldr	r3, [pc, #368]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0e:	4959      	ldr	r1, [pc, #356]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c22:	4b54      	ldr	r3, [pc, #336]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	4950      	ldr	r1, [pc, #320]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c44:	4b4b      	ldr	r3, [pc, #300]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	4948      	ldr	r1, [pc, #288]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c66:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c74:	493f      	ldr	r1, [pc, #252]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d028      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c88:	4b3a      	ldr	r3, [pc, #232]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c96:	4937      	ldr	r1, [pc, #220]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca6:	d106      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca8:	4b32      	ldr	r3, [pc, #200]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a31      	ldr	r2, [pc, #196]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb2:	60d3      	str	r3, [r2, #12]
 8004cb4:	e011      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cbe:	d10c      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f8c8 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cd0:	7cfb      	ldrb	r3, [r7, #19]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004cd6:	7cfb      	ldrb	r3, [r7, #19]
 8004cd8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d028      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ce6:	4b23      	ldr	r3, [pc, #140]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	491f      	ldr	r1, [pc, #124]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d04:	d106      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d06:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	4a1a      	ldr	r2, [pc, #104]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d10:	60d3      	str	r3, [r2, #12]
 8004d12:	e011      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d1c:	d10c      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3304      	adds	r3, #4
 8004d22:	2101      	movs	r1, #1
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 f899 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004d34:	7cfb      	ldrb	r3, [r7, #19]
 8004d36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02b      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d44:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d52:	4908      	ldr	r1, [pc, #32]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d62:	d109      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d64:	4b03      	ldr	r3, [pc, #12]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4a02      	ldr	r2, [pc, #8]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d6e:	60d3      	str	r3, [r2, #12]
 8004d70:	e014      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d80:	d10c      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3304      	adds	r3, #4
 8004d86:	2101      	movs	r1, #1
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 f867 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d92:	7cfb      	ldrb	r3, [r7, #19]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004d98:	7cfb      	ldrb	r3, [r7, #19]
 8004d9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d02f      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004da8:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db6:	4928      	ldr	r1, [pc, #160]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dc6:	d10d      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	2102      	movs	r1, #2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f844 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d014      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	74bb      	strb	r3, [r7, #18]
 8004de2:	e011      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3320      	adds	r3, #32
 8004df2:	2102      	movs	r1, #2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 f921 	bl	800503c <RCCEx_PLLSAI2_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004e04:	7cfb      	ldrb	r3, [r7, #19]
 8004e06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e14:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e22:	490d      	ldr	r1, [pc, #52]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e36:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e46:	4904      	ldr	r1, [pc, #16]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40021000 	.word	0x40021000

08004e5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e6a:	4b73      	ldr	r3, [pc, #460]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e76:	4b70      	ldr	r3, [pc, #448]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0203 	and.w	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d10d      	bne.n	8004ea2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
       ||
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e8e:	4b6a      	ldr	r3, [pc, #424]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d044      	beq.n	8004f2c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	73fb      	strb	r3, [r7, #15]
 8004ea6:	e041      	b.n	8004f2c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d00c      	beq.n	8004eca <RCCEx_PLLSAI1_Config+0x6e>
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d013      	beq.n	8004edc <RCCEx_PLLSAI1_Config+0x80>
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d120      	bne.n	8004efa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eb8:	4b5f      	ldr	r3, [pc, #380]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d11d      	bne.n	8004f00 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec8:	e01a      	b.n	8004f00 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004eca:	4b5b      	ldr	r3, [pc, #364]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d116      	bne.n	8004f04 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eda:	e013      	b.n	8004f04 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004edc:	4b56      	ldr	r3, [pc, #344]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10f      	bne.n	8004f08 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ee8:	4b53      	ldr	r3, [pc, #332]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d109      	bne.n	8004f08 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ef8:	e006      	b.n	8004f08 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
      break;
 8004efe:	e004      	b.n	8004f0a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004f00:	bf00      	nop
 8004f02:	e002      	b.n	8004f0a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004f04:	bf00      	nop
 8004f06:	e000      	b.n	8004f0a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004f08:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10d      	bne.n	8004f2c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f10:	4b49      	ldr	r3, [pc, #292]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6819      	ldr	r1, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	430b      	orrs	r3, r1
 8004f26:	4944      	ldr	r1, [pc, #272]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d17d      	bne.n	800502e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f32:	4b41      	ldr	r3, [pc, #260]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a40      	ldr	r2, [pc, #256]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3e:	f7fc fea1 	bl	8001c84 <HAL_GetTick>
 8004f42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f44:	e009      	b.n	8004f5a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f46:	f7fc fe9d 	bl	8001c84 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d902      	bls.n	8004f5a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	73fb      	strb	r3, [r7, #15]
        break;
 8004f58:	e005      	b.n	8004f66 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f5a:	4b37      	ldr	r3, [pc, #220]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1ef      	bne.n	8004f46 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d160      	bne.n	800502e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d111      	bne.n	8004f96 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f72:	4b31      	ldr	r3, [pc, #196]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6892      	ldr	r2, [r2, #8]
 8004f82:	0211      	lsls	r1, r2, #8
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68d2      	ldr	r2, [r2, #12]
 8004f88:	0912      	lsrs	r2, r2, #4
 8004f8a:	0452      	lsls	r2, r2, #17
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	492a      	ldr	r1, [pc, #168]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	610b      	str	r3, [r1, #16]
 8004f94:	e027      	b.n	8004fe6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d112      	bne.n	8004fc2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f9c:	4b26      	ldr	r3, [pc, #152]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6892      	ldr	r2, [r2, #8]
 8004fac:	0211      	lsls	r1, r2, #8
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6912      	ldr	r2, [r2, #16]
 8004fb2:	0852      	lsrs	r2, r2, #1
 8004fb4:	3a01      	subs	r2, #1
 8004fb6:	0552      	lsls	r2, r2, #21
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	491f      	ldr	r1, [pc, #124]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	610b      	str	r3, [r1, #16]
 8004fc0:	e011      	b.n	8004fe6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc2:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6892      	ldr	r2, [r2, #8]
 8004fd2:	0211      	lsls	r1, r2, #8
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6952      	ldr	r2, [r2, #20]
 8004fd8:	0852      	lsrs	r2, r2, #1
 8004fda:	3a01      	subs	r2, #1
 8004fdc:	0652      	lsls	r2, r2, #25
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	4915      	ldr	r1, [pc, #84]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fe6:	4b14      	ldr	r3, [pc, #80]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a13      	ldr	r2, [pc, #76]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ff0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff2:	f7fc fe47 	bl	8001c84 <HAL_GetTick>
 8004ff6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ff8:	e009      	b.n	800500e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ffa:	f7fc fe43 	bl	8001c84 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d902      	bls.n	800500e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	73fb      	strb	r3, [r7, #15]
          break;
 800500c:	e005      	b.n	800501a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800500e:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0ef      	beq.n	8004ffa <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d106      	bne.n	800502e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	4903      	ldr	r1, [pc, #12]	; (8005038 <RCCEx_PLLSAI1_Config+0x1dc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800502e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000

0800503c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800504a:	4b68      	ldr	r3, [pc, #416]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d018      	beq.n	8005088 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005056:	4b65      	ldr	r3, [pc, #404]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0203 	and.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d10d      	bne.n	8005082 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
       ||
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800506e:	4b5f      	ldr	r3, [pc, #380]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
       ||
 800507e:	429a      	cmp	r2, r3
 8005080:	d044      	beq.n	800510c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
 8005086:	e041      	b.n	800510c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d00c      	beq.n	80050aa <RCCEx_PLLSAI2_Config+0x6e>
 8005090:	2b03      	cmp	r3, #3
 8005092:	d013      	beq.n	80050bc <RCCEx_PLLSAI2_Config+0x80>
 8005094:	2b01      	cmp	r3, #1
 8005096:	d120      	bne.n	80050da <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005098:	4b54      	ldr	r3, [pc, #336]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11d      	bne.n	80050e0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a8:	e01a      	b.n	80050e0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050aa:	4b50      	ldr	r3, [pc, #320]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d116      	bne.n	80050e4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ba:	e013      	b.n	80050e4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050bc:	4b4b      	ldr	r3, [pc, #300]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10f      	bne.n	80050e8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050c8:	4b48      	ldr	r3, [pc, #288]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050d8:	e006      	b.n	80050e8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
      break;
 80050de:	e004      	b.n	80050ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80050e0:	bf00      	nop
 80050e2:	e002      	b.n	80050ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80050e4:	bf00      	nop
 80050e6:	e000      	b.n	80050ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80050e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10d      	bne.n	800510c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050f0:	4b3e      	ldr	r3, [pc, #248]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	3b01      	subs	r3, #1
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	430b      	orrs	r3, r1
 8005106:	4939      	ldr	r1, [pc, #228]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8005108:	4313      	orrs	r3, r2
 800510a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d167      	bne.n	80051e2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005112:	4b36      	ldr	r3, [pc, #216]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a35      	ldr	r2, [pc, #212]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8005118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800511c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511e:	f7fc fdb1 	bl	8001c84 <HAL_GetTick>
 8005122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005124:	e009      	b.n	800513a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005126:	f7fc fdad 	bl	8001c84 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d902      	bls.n	800513a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	73fb      	strb	r3, [r7, #15]
        break;
 8005138:	e005      	b.n	8005146 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800513a:	4b2c      	ldr	r3, [pc, #176]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1ef      	bne.n	8005126 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d14a      	bne.n	80051e2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d111      	bne.n	8005176 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005152:	4b26      	ldr	r3, [pc, #152]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800515a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6892      	ldr	r2, [r2, #8]
 8005162:	0211      	lsls	r1, r2, #8
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	68d2      	ldr	r2, [r2, #12]
 8005168:	0912      	lsrs	r2, r2, #4
 800516a:	0452      	lsls	r2, r2, #17
 800516c:	430a      	orrs	r2, r1
 800516e:	491f      	ldr	r1, [pc, #124]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	614b      	str	r3, [r1, #20]
 8005174:	e011      	b.n	800519a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005176:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800517e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6892      	ldr	r2, [r2, #8]
 8005186:	0211      	lsls	r1, r2, #8
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6912      	ldr	r2, [r2, #16]
 800518c:	0852      	lsrs	r2, r2, #1
 800518e:	3a01      	subs	r2, #1
 8005190:	0652      	lsls	r2, r2, #25
 8005192:	430a      	orrs	r2, r1
 8005194:	4915      	ldr	r1, [pc, #84]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8005196:	4313      	orrs	r3, r2
 8005198:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800519a:	4b14      	ldr	r3, [pc, #80]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a13      	ldr	r2, [pc, #76]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a6:	f7fc fd6d 	bl	8001c84 <HAL_GetTick>
 80051aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051ac:	e009      	b.n	80051c2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051ae:	f7fc fd69 	bl	8001c84 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d902      	bls.n	80051c2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	73fb      	strb	r3, [r7, #15]
          break;
 80051c0:	e005      	b.n	80051ce <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0ef      	beq.n	80051ae <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d106      	bne.n	80051e2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	4903      	ldr	r1, [pc, #12]	; (80051ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40021000 	.word	0x40021000

080051f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e01d      	b.n	800523e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc fb7e 	bl	8001918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f000 fbd2 	bl	80059d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <HAL_TIM_Base_Start_IT+0x50>)
 8005268:	4013      	ands	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b06      	cmp	r3, #6
 8005270:	d00b      	beq.n	800528a <HAL_TIM_Base_Start_IT+0x42>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005278:	d007      	beq.n	800528a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0201 	orr.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	00010007 	.word	0x00010007

0800529c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e01d      	b.n	80052ea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fc fb0a 	bl	80018dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f000 fb7c 	bl	80059d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2201      	movs	r2, #1
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 ff70 	bl	80061ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1e      	ldr	r2, [pc, #120]	; (800538c <HAL_TIM_PWM_Start+0x98>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <HAL_TIM_PWM_Start+0x4a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1d      	ldr	r2, [pc, #116]	; (8005390 <HAL_TIM_PWM_Start+0x9c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d00e      	beq.n	800533e <HAL_TIM_PWM_Start+0x4a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <HAL_TIM_PWM_Start+0xa0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d009      	beq.n	800533e <HAL_TIM_PWM_Start+0x4a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1a      	ldr	r2, [pc, #104]	; (8005398 <HAL_TIM_PWM_Start+0xa4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d004      	beq.n	800533e <HAL_TIM_PWM_Start+0x4a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a18      	ldr	r2, [pc, #96]	; (800539c <HAL_TIM_PWM_Start+0xa8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d101      	bne.n	8005342 <HAL_TIM_PWM_Start+0x4e>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_TIM_PWM_Start+0x50>
 8005342:	2300      	movs	r3, #0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005356:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <HAL_TIM_PWM_Start+0xac>)
 8005360:	4013      	ands	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b06      	cmp	r3, #6
 8005368:	d00b      	beq.n	8005382 <HAL_TIM_PWM_Start+0x8e>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005370:	d007      	beq.n	8005382 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0201 	orr.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40012c00 	.word	0x40012c00
 8005390:	40013400 	.word	0x40013400
 8005394:	40014000 	.word	0x40014000
 8005398:	40014400 	.word	0x40014400
 800539c:	40014800 	.word	0x40014800
 80053a0:	00010007 	.word	0x00010007

080053a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d122      	bne.n	8005400 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d11b      	bne.n	8005400 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0202 	mvn.w	r2, #2
 80053d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fad7 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fac9 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fada 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b04      	cmp	r3, #4
 800540c:	d122      	bne.n	8005454 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b04      	cmp	r3, #4
 800541a:	d11b      	bne.n	8005454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0204 	mvn.w	r2, #4
 8005424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 faad 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 8005440:	e005      	b.n	800544e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fa9f 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fab0 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b08      	cmp	r3, #8
 8005460:	d122      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b08      	cmp	r3, #8
 800546e:	d11b      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0208 	mvn.w	r2, #8
 8005478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2204      	movs	r2, #4
 800547e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fa83 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 8005494:	e005      	b.n	80054a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fa75 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fa86 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d122      	bne.n	80054fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d11b      	bne.n	80054fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0210 	mvn.w	r2, #16
 80054cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2208      	movs	r2, #8
 80054d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa59 	bl	800599a <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa4b 	bl	8005986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fa5c 	bl	80059ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d10e      	bne.n	8005528 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d107      	bne.n	8005528 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0201 	mvn.w	r2, #1
 8005520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fb f85c 	bl	80005e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b80      	cmp	r3, #128	; 0x80
 8005534:	d10e      	bne.n	8005554 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005540:	2b80      	cmp	r3, #128	; 0x80
 8005542:	d107      	bne.n	8005554 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800554c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 ff04 	bl	800635c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005562:	d10e      	bne.n	8005582 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556e:	2b80      	cmp	r3, #128	; 0x80
 8005570:	d107      	bne.n	8005582 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800557a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fef7 	bl	8006370 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d10e      	bne.n	80055ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	2b40      	cmp	r3, #64	; 0x40
 800559c:	d107      	bne.n	80055ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fa0a 	bl	80059c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d10e      	bne.n	80055da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	d107      	bne.n	80055da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f06f 0220 	mvn.w	r2, #32
 80055d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 feb7 	bl	8006348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e105      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0x226>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b14      	cmp	r3, #20
 8005612:	f200 80f0 	bhi.w	80057f6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005616:	a201      	add	r2, pc, #4	; (adr r2, 800561c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561c:	08005671 	.word	0x08005671
 8005620:	080057f7 	.word	0x080057f7
 8005624:	080057f7 	.word	0x080057f7
 8005628:	080057f7 	.word	0x080057f7
 800562c:	080056b1 	.word	0x080056b1
 8005630:	080057f7 	.word	0x080057f7
 8005634:	080057f7 	.word	0x080057f7
 8005638:	080057f7 	.word	0x080057f7
 800563c:	080056f3 	.word	0x080056f3
 8005640:	080057f7 	.word	0x080057f7
 8005644:	080057f7 	.word	0x080057f7
 8005648:	080057f7 	.word	0x080057f7
 800564c:	08005733 	.word	0x08005733
 8005650:	080057f7 	.word	0x080057f7
 8005654:	080057f7 	.word	0x080057f7
 8005658:	080057f7 	.word	0x080057f7
 800565c:	08005775 	.word	0x08005775
 8005660:	080057f7 	.word	0x080057f7
 8005664:	080057f7 	.word	0x080057f7
 8005668:	080057f7 	.word	0x080057f7
 800566c:	080057b5 	.word	0x080057b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fa48 	bl	8005b0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0208 	orr.w	r2, r2, #8
 800568a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0204 	bic.w	r2, r2, #4
 800569a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6999      	ldr	r1, [r3, #24]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	619a      	str	r2, [r3, #24]
      break;
 80056ae:	e0a3      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fab8 	bl	8005c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6999      	ldr	r1, [r3, #24]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	619a      	str	r2, [r3, #24]
      break;
 80056f0:	e082      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fb21 	bl	8005d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69da      	ldr	r2, [r3, #28]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0208 	orr.w	r2, r2, #8
 800570c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0204 	bic.w	r2, r2, #4
 800571c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69d9      	ldr	r1, [r3, #28]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	61da      	str	r2, [r3, #28]
      break;
 8005730:	e062      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fb89 	bl	8005e50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800574c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69d9      	ldr	r1, [r3, #28]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	021a      	lsls	r2, r3, #8
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	61da      	str	r2, [r3, #28]
      break;
 8005772:	e041      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fbd2 	bl	8005f24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0208 	orr.w	r2, r2, #8
 800578e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0204 	bic.w	r2, r2, #4
 800579e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057b2:	e021      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fc16 	bl	8005fec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	021a      	lsls	r2, r3, #8
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057f4:	e000      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80057f6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop

08005814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIM_ConfigClockSource+0x18>
 8005828:	2302      	movs	r3, #2
 800582a:	e0a8      	b.n	800597e <HAL_TIM_ConfigClockSource+0x16a>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800584e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005856:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b40      	cmp	r3, #64	; 0x40
 8005866:	d067      	beq.n	8005938 <HAL_TIM_ConfigClockSource+0x124>
 8005868:	2b40      	cmp	r3, #64	; 0x40
 800586a:	d80b      	bhi.n	8005884 <HAL_TIM_ConfigClockSource+0x70>
 800586c:	2b10      	cmp	r3, #16
 800586e:	d073      	beq.n	8005958 <HAL_TIM_ConfigClockSource+0x144>
 8005870:	2b10      	cmp	r3, #16
 8005872:	d802      	bhi.n	800587a <HAL_TIM_ConfigClockSource+0x66>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d06f      	beq.n	8005958 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005878:	e078      	b.n	800596c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800587a:	2b20      	cmp	r3, #32
 800587c:	d06c      	beq.n	8005958 <HAL_TIM_ConfigClockSource+0x144>
 800587e:	2b30      	cmp	r3, #48	; 0x30
 8005880:	d06a      	beq.n	8005958 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005882:	e073      	b.n	800596c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005884:	2b70      	cmp	r3, #112	; 0x70
 8005886:	d00d      	beq.n	80058a4 <HAL_TIM_ConfigClockSource+0x90>
 8005888:	2b70      	cmp	r3, #112	; 0x70
 800588a:	d804      	bhi.n	8005896 <HAL_TIM_ConfigClockSource+0x82>
 800588c:	2b50      	cmp	r3, #80	; 0x50
 800588e:	d033      	beq.n	80058f8 <HAL_TIM_ConfigClockSource+0xe4>
 8005890:	2b60      	cmp	r3, #96	; 0x60
 8005892:	d041      	beq.n	8005918 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005894:	e06a      	b.n	800596c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589a:	d066      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x156>
 800589c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a0:	d017      	beq.n	80058d2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80058a2:	e063      	b.n	800596c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6899      	ldr	r1, [r3, #8]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f000 fc7a 	bl	80061ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	609a      	str	r2, [r3, #8]
      break;
 80058d0:	e04c      	b.n	800596c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	6899      	ldr	r1, [r3, #8]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f000 fc63 	bl	80061ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058f4:	609a      	str	r2, [r3, #8]
      break;
 80058f6:	e039      	b.n	800596c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6859      	ldr	r1, [r3, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	461a      	mov	r2, r3
 8005906:	f000 fbd7 	bl	80060b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2150      	movs	r1, #80	; 0x50
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fc30 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005916:	e029      	b.n	800596c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	6859      	ldr	r1, [r3, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	461a      	mov	r2, r3
 8005926:	f000 fbf6 	bl	8006116 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2160      	movs	r1, #96	; 0x60
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fc20 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005936:	e019      	b.n	800596c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	6859      	ldr	r1, [r3, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	461a      	mov	r2, r3
 8005946:	f000 fbb7 	bl	80060b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2140      	movs	r1, #64	; 0x40
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fc10 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005956:	e009      	b.n	800596c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f000 fc07 	bl	8006176 <TIM_ITRx_SetConfig>
      break;
 8005968:	e000      	b.n	800596c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800596a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a40      	ldr	r2, [pc, #256]	; (8005aec <TIM_Base_SetConfig+0x114>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d013      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f6:	d00f      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a3d      	ldr	r2, [pc, #244]	; (8005af0 <TIM_Base_SetConfig+0x118>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00b      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a3c      	ldr	r2, [pc, #240]	; (8005af4 <TIM_Base_SetConfig+0x11c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d007      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a3b      	ldr	r2, [pc, #236]	; (8005af8 <TIM_Base_SetConfig+0x120>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3a      	ldr	r2, [pc, #232]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d108      	bne.n	8005a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2f      	ldr	r2, [pc, #188]	; (8005aec <TIM_Base_SetConfig+0x114>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01f      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a38:	d01b      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2c      	ldr	r2, [pc, #176]	; (8005af0 <TIM_Base_SetConfig+0x118>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d017      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2b      	ldr	r2, [pc, #172]	; (8005af4 <TIM_Base_SetConfig+0x11c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <TIM_Base_SetConfig+0x120>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00f      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a29      	ldr	r2, [pc, #164]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a28      	ldr	r2, [pc, #160]	; (8005b00 <TIM_Base_SetConfig+0x128>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <TIM_Base_SetConfig+0x12c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_Base_SetConfig+0x9a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <TIM_Base_SetConfig+0x130>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d108      	bne.n	8005a84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a10      	ldr	r2, [pc, #64]	; (8005aec <TIM_Base_SetConfig+0x114>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00f      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a12      	ldr	r2, [pc, #72]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a11      	ldr	r2, [pc, #68]	; (8005b00 <TIM_Base_SetConfig+0x128>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a10      	ldr	r2, [pc, #64]	; (8005b04 <TIM_Base_SetConfig+0x12c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a0f      	ldr	r2, [pc, #60]	; (8005b08 <TIM_Base_SetConfig+0x130>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d103      	bne.n	8005ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	615a      	str	r2, [r3, #20]
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40000c00 	.word	0x40000c00
 8005afc:	40013400 	.word	0x40013400
 8005b00:	40014000 	.word	0x40014000
 8005b04:	40014400 	.word	0x40014400
 8005b08:	40014800 	.word	0x40014800

08005b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f023 0201 	bic.w	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 0302 	bic.w	r3, r3, #2
 8005b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a2c      	ldr	r2, [pc, #176]	; (8005c18 <TIM_OC1_SetConfig+0x10c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00f      	beq.n	8005b8c <TIM_OC1_SetConfig+0x80>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a2b      	ldr	r2, [pc, #172]	; (8005c1c <TIM_OC1_SetConfig+0x110>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_OC1_SetConfig+0x80>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a2a      	ldr	r2, [pc, #168]	; (8005c20 <TIM_OC1_SetConfig+0x114>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_OC1_SetConfig+0x80>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a29      	ldr	r2, [pc, #164]	; (8005c24 <TIM_OC1_SetConfig+0x118>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC1_SetConfig+0x80>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a28      	ldr	r2, [pc, #160]	; (8005c28 <TIM_OC1_SetConfig+0x11c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d10c      	bne.n	8005ba6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0308 	bic.w	r3, r3, #8
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f023 0304 	bic.w	r3, r3, #4
 8005ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <TIM_OC1_SetConfig+0x10c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00f      	beq.n	8005bce <TIM_OC1_SetConfig+0xc2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1a      	ldr	r2, [pc, #104]	; (8005c1c <TIM_OC1_SetConfig+0x110>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00b      	beq.n	8005bce <TIM_OC1_SetConfig+0xc2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <TIM_OC1_SetConfig+0x114>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d007      	beq.n	8005bce <TIM_OC1_SetConfig+0xc2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a18      	ldr	r2, [pc, #96]	; (8005c24 <TIM_OC1_SetConfig+0x118>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d003      	beq.n	8005bce <TIM_OC1_SetConfig+0xc2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <TIM_OC1_SetConfig+0x11c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d111      	bne.n	8005bf2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	621a      	str	r2, [r3, #32]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800

08005c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 0210 	bic.w	r2, r3, #16
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f023 0320 	bic.w	r3, r3, #32
 8005c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a28      	ldr	r2, [pc, #160]	; (8005d2c <TIM_OC2_SetConfig+0x100>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_OC2_SetConfig+0x6c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a27      	ldr	r2, [pc, #156]	; (8005d30 <TIM_OC2_SetConfig+0x104>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d10d      	bne.n	8005cb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a1d      	ldr	r2, [pc, #116]	; (8005d2c <TIM_OC2_SetConfig+0x100>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00f      	beq.n	8005cdc <TIM_OC2_SetConfig+0xb0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a1c      	ldr	r2, [pc, #112]	; (8005d30 <TIM_OC2_SetConfig+0x104>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <TIM_OC2_SetConfig+0xb0>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a1b      	ldr	r2, [pc, #108]	; (8005d34 <TIM_OC2_SetConfig+0x108>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_OC2_SetConfig+0xb0>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <TIM_OC2_SetConfig+0x10c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_OC2_SetConfig+0xb0>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a19      	ldr	r2, [pc, #100]	; (8005d3c <TIM_OC2_SetConfig+0x110>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d113      	bne.n	8005d04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40013400 	.word	0x40013400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800

08005d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a27      	ldr	r2, [pc, #156]	; (8005e3c <TIM_OC3_SetConfig+0xfc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_OC3_SetConfig+0x6a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a26      	ldr	r2, [pc, #152]	; (8005e40 <TIM_OC3_SetConfig+0x100>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d10d      	bne.n	8005dc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <TIM_OC3_SetConfig+0xfc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <TIM_OC3_SetConfig+0xae>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <TIM_OC3_SetConfig+0x100>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_OC3_SetConfig+0xae>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1a      	ldr	r2, [pc, #104]	; (8005e44 <TIM_OC3_SetConfig+0x104>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_OC3_SetConfig+0xae>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a19      	ldr	r2, [pc, #100]	; (8005e48 <TIM_OC3_SetConfig+0x108>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_OC3_SetConfig+0xae>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <TIM_OC3_SetConfig+0x10c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d113      	bne.n	8005e16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	621a      	str	r2, [r3, #32]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40013400 	.word	0x40013400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40014400 	.word	0x40014400
 8005e4c:	40014800 	.word	0x40014800

08005e50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	031b      	lsls	r3, r3, #12
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a18      	ldr	r2, [pc, #96]	; (8005f10 <TIM_OC4_SetConfig+0xc0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00f      	beq.n	8005ed4 <TIM_OC4_SetConfig+0x84>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <TIM_OC4_SetConfig+0xc4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00b      	beq.n	8005ed4 <TIM_OC4_SetConfig+0x84>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a16      	ldr	r2, [pc, #88]	; (8005f18 <TIM_OC4_SetConfig+0xc8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d007      	beq.n	8005ed4 <TIM_OC4_SetConfig+0x84>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a15      	ldr	r2, [pc, #84]	; (8005f1c <TIM_OC4_SetConfig+0xcc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_OC4_SetConfig+0x84>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <TIM_OC4_SetConfig+0xd0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d109      	bne.n	8005ee8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	019b      	lsls	r3, r3, #6
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40012c00 	.word	0x40012c00
 8005f14:	40013400 	.word	0x40013400
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40014400 	.word	0x40014400
 8005f20:	40014800 	.word	0x40014800

08005f24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a17      	ldr	r2, [pc, #92]	; (8005fd8 <TIM_OC5_SetConfig+0xb4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00f      	beq.n	8005f9e <TIM_OC5_SetConfig+0x7a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <TIM_OC5_SetConfig+0xb8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00b      	beq.n	8005f9e <TIM_OC5_SetConfig+0x7a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a15      	ldr	r2, [pc, #84]	; (8005fe0 <TIM_OC5_SetConfig+0xbc>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d007      	beq.n	8005f9e <TIM_OC5_SetConfig+0x7a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a14      	ldr	r2, [pc, #80]	; (8005fe4 <TIM_OC5_SetConfig+0xc0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d003      	beq.n	8005f9e <TIM_OC5_SetConfig+0x7a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <TIM_OC5_SetConfig+0xc4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d109      	bne.n	8005fb2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	621a      	str	r2, [r3, #32]
}
 8005fcc:	bf00      	nop
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40013400 	.word	0x40013400
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40014400 	.word	0x40014400
 8005fe8:	40014800 	.word	0x40014800

08005fec <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800601a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006032:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	051b      	lsls	r3, r3, #20
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <TIM_OC6_SetConfig+0xb8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00f      	beq.n	8006068 <TIM_OC6_SetConfig+0x7c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <TIM_OC6_SetConfig+0xbc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00b      	beq.n	8006068 <TIM_OC6_SetConfig+0x7c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a16      	ldr	r2, [pc, #88]	; (80060ac <TIM_OC6_SetConfig+0xc0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d007      	beq.n	8006068 <TIM_OC6_SetConfig+0x7c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a15      	ldr	r2, [pc, #84]	; (80060b0 <TIM_OC6_SetConfig+0xc4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_OC6_SetConfig+0x7c>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a14      	ldr	r2, [pc, #80]	; (80060b4 <TIM_OC6_SetConfig+0xc8>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d109      	bne.n	800607c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800606e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	029b      	lsls	r3, r3, #10
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40013400 	.word	0x40013400
 80060ac:	40014000 	.word	0x40014000
 80060b0:	40014400 	.word	0x40014400
 80060b4:	40014800 	.word	0x40014800

080060b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f023 0201 	bic.w	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 030a 	bic.w	r3, r3, #10
 80060f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006116:	b480      	push	{r7}
 8006118:	b087      	sub	sp, #28
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	60b9      	str	r1, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f023 0210 	bic.w	r2, r3, #16
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006140:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	031b      	lsls	r3, r3, #12
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006152:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	621a      	str	r2, [r3, #32]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	f043 0307 	orr.w	r3, r3, #7
 8006198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	609a      	str	r2, [r3, #8]
}
 80061a0:	bf00      	nop
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	021a      	lsls	r2, r3, #8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	609a      	str	r2, [r3, #8]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	2201      	movs	r2, #1
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1a      	ldr	r2, [r3, #32]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	43db      	mvns	r3, r3
 800620e:	401a      	ands	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1a      	ldr	r2, [r3, #32]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	fa01 f303 	lsl.w	r3, r1, r3
 8006224:	431a      	orrs	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	621a      	str	r2, [r3, #32]
}
 800622a:	bf00      	nop
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800624c:	2302      	movs	r3, #2
 800624e:	e068      	b.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2e      	ldr	r2, [pc, #184]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d004      	beq.n	8006284 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2d      	ldr	r2, [pc, #180]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d108      	bne.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800628a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01d      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c2:	d018      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1b      	ldr	r2, [pc, #108]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1a      	ldr	r2, [pc, #104]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00e      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a18      	ldr	r2, [pc, #96]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d009      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a13      	ldr	r2, [pc, #76]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a14      	ldr	r2, [pc, #80]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d10c      	bne.n	8006310 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	4313      	orrs	r3, r2
 8006306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40012c00 	.word	0x40012c00
 8006334:	40013400 	.word	0x40013400
 8006338:	40000400 	.word	0x40000400
 800633c:	40000800 	.word	0x40000800
 8006340:	40000c00 	.word	0x40000c00
 8006344:	40014000 	.word	0x40014000

08006348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e040      	b.n	8006418 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fb fb12 	bl	80019d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2224      	movs	r2, #36	; 0x24
 80063b0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0201 	bic.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f82c 	bl	8006420 <UART_SetConfig>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e022      	b.n	8006418 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fb92 	bl	8006b04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fc19 	bl	8006c48 <UART_CheckIdleState>
 8006416:	4603      	mov	r3, r0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006420:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006424:	b08a      	sub	sp, #40	; 0x28
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006432:	2300      	movs	r3, #0
 8006434:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	4313      	orrs	r3, r2
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	4bb8      	ldr	r3, [pc, #736]	; (8006738 <UART_SetConfig+0x318>)
 8006456:	4013      	ands	r3, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800645e:	430b      	orrs	r3, r1
 8006460:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4aae      	ldr	r2, [pc, #696]	; (800673c <UART_SetConfig+0x31c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648e:	4313      	orrs	r3, r2
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a2:	430a      	orrs	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4aa5      	ldr	r2, [pc, #660]	; (8006740 <UART_SetConfig+0x320>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d126      	bne.n	80064fe <UART_SetConfig+0xde>
 80064b0:	4ba4      	ldr	r3, [pc, #656]	; (8006744 <UART_SetConfig+0x324>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d81a      	bhi.n	80064f4 <UART_SetConfig+0xd4>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0xa4>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	080064ed 	.word	0x080064ed
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064da:	e105      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80064dc:	2302      	movs	r3, #2
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064e2:	e101      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80064e4:	2304      	movs	r3, #4
 80064e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ea:	e0fd      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80064ec:	2308      	movs	r3, #8
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064f2:	e0f9      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80064f4:	2310      	movs	r3, #16
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064fa:	bf00      	nop
 80064fc:	e0f4      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a91      	ldr	r2, [pc, #580]	; (8006748 <UART_SetConfig+0x328>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d138      	bne.n	800657a <UART_SetConfig+0x15a>
 8006508:	4b8e      	ldr	r3, [pc, #568]	; (8006744 <UART_SetConfig+0x324>)
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650e:	f003 030c 	and.w	r3, r3, #12
 8006512:	2b0c      	cmp	r3, #12
 8006514:	d82c      	bhi.n	8006570 <UART_SetConfig+0x150>
 8006516:	a201      	add	r2, pc, #4	; (adr r2, 800651c <UART_SetConfig+0xfc>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006551 	.word	0x08006551
 8006520:	08006571 	.word	0x08006571
 8006524:	08006571 	.word	0x08006571
 8006528:	08006571 	.word	0x08006571
 800652c:	08006561 	.word	0x08006561
 8006530:	08006571 	.word	0x08006571
 8006534:	08006571 	.word	0x08006571
 8006538:	08006571 	.word	0x08006571
 800653c:	08006559 	.word	0x08006559
 8006540:	08006571 	.word	0x08006571
 8006544:	08006571 	.word	0x08006571
 8006548:	08006571 	.word	0x08006571
 800654c:	08006569 	.word	0x08006569
 8006550:	2300      	movs	r3, #0
 8006552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006556:	e0c7      	b.n	80066e8 <UART_SetConfig+0x2c8>
 8006558:	2302      	movs	r3, #2
 800655a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800655e:	e0c3      	b.n	80066e8 <UART_SetConfig+0x2c8>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006566:	e0bf      	b.n	80066e8 <UART_SetConfig+0x2c8>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800656e:	e0bb      	b.n	80066e8 <UART_SetConfig+0x2c8>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006576:	bf00      	nop
 8006578:	e0b6      	b.n	80066e8 <UART_SetConfig+0x2c8>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a73      	ldr	r2, [pc, #460]	; (800674c <UART_SetConfig+0x32c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d125      	bne.n	80065d0 <UART_SetConfig+0x1b0>
 8006584:	4b6f      	ldr	r3, [pc, #444]	; (8006744 <UART_SetConfig+0x324>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800658e:	2b10      	cmp	r3, #16
 8006590:	d011      	beq.n	80065b6 <UART_SetConfig+0x196>
 8006592:	2b10      	cmp	r3, #16
 8006594:	d802      	bhi.n	800659c <UART_SetConfig+0x17c>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <UART_SetConfig+0x186>
 800659a:	e014      	b.n	80065c6 <UART_SetConfig+0x1a6>
 800659c:	2b20      	cmp	r3, #32
 800659e:	d006      	beq.n	80065ae <UART_SetConfig+0x18e>
 80065a0:	2b30      	cmp	r3, #48	; 0x30
 80065a2:	d00c      	beq.n	80065be <UART_SetConfig+0x19e>
 80065a4:	e00f      	b.n	80065c6 <UART_SetConfig+0x1a6>
 80065a6:	2300      	movs	r3, #0
 80065a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ac:	e09c      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80065ae:	2302      	movs	r3, #2
 80065b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b4:	e098      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80065b6:	2304      	movs	r3, #4
 80065b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065bc:	e094      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80065be:	2308      	movs	r3, #8
 80065c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065c4:	e090      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80065c6:	2310      	movs	r3, #16
 80065c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065cc:	bf00      	nop
 80065ce:	e08b      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a5e      	ldr	r2, [pc, #376]	; (8006750 <UART_SetConfig+0x330>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d125      	bne.n	8006626 <UART_SetConfig+0x206>
 80065da:	4b5a      	ldr	r3, [pc, #360]	; (8006744 <UART_SetConfig+0x324>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d011      	beq.n	800660c <UART_SetConfig+0x1ec>
 80065e8:	2b40      	cmp	r3, #64	; 0x40
 80065ea:	d802      	bhi.n	80065f2 <UART_SetConfig+0x1d2>
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <UART_SetConfig+0x1dc>
 80065f0:	e014      	b.n	800661c <UART_SetConfig+0x1fc>
 80065f2:	2b80      	cmp	r3, #128	; 0x80
 80065f4:	d006      	beq.n	8006604 <UART_SetConfig+0x1e4>
 80065f6:	2bc0      	cmp	r3, #192	; 0xc0
 80065f8:	d00c      	beq.n	8006614 <UART_SetConfig+0x1f4>
 80065fa:	e00f      	b.n	800661c <UART_SetConfig+0x1fc>
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006602:	e071      	b.n	80066e8 <UART_SetConfig+0x2c8>
 8006604:	2302      	movs	r3, #2
 8006606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660a:	e06d      	b.n	80066e8 <UART_SetConfig+0x2c8>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006612:	e069      	b.n	80066e8 <UART_SetConfig+0x2c8>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800661a:	e065      	b.n	80066e8 <UART_SetConfig+0x2c8>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006622:	bf00      	nop
 8006624:	e060      	b.n	80066e8 <UART_SetConfig+0x2c8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a4a      	ldr	r2, [pc, #296]	; (8006754 <UART_SetConfig+0x334>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d129      	bne.n	8006684 <UART_SetConfig+0x264>
 8006630:	4b44      	ldr	r3, [pc, #272]	; (8006744 <UART_SetConfig+0x324>)
 8006632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663e:	d014      	beq.n	800666a <UART_SetConfig+0x24a>
 8006640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006644:	d802      	bhi.n	800664c <UART_SetConfig+0x22c>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <UART_SetConfig+0x23a>
 800664a:	e016      	b.n	800667a <UART_SetConfig+0x25a>
 800664c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006650:	d007      	beq.n	8006662 <UART_SetConfig+0x242>
 8006652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006656:	d00c      	beq.n	8006672 <UART_SetConfig+0x252>
 8006658:	e00f      	b.n	800667a <UART_SetConfig+0x25a>
 800665a:	2300      	movs	r3, #0
 800665c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006660:	e042      	b.n	80066e8 <UART_SetConfig+0x2c8>
 8006662:	2302      	movs	r3, #2
 8006664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006668:	e03e      	b.n	80066e8 <UART_SetConfig+0x2c8>
 800666a:	2304      	movs	r3, #4
 800666c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006670:	e03a      	b.n	80066e8 <UART_SetConfig+0x2c8>
 8006672:	2308      	movs	r3, #8
 8006674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006678:	e036      	b.n	80066e8 <UART_SetConfig+0x2c8>
 800667a:	2310      	movs	r3, #16
 800667c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006680:	bf00      	nop
 8006682:	e031      	b.n	80066e8 <UART_SetConfig+0x2c8>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a2c      	ldr	r2, [pc, #176]	; (800673c <UART_SetConfig+0x31c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d129      	bne.n	80066e2 <UART_SetConfig+0x2c2>
 800668e:	4b2d      	ldr	r3, [pc, #180]	; (8006744 <UART_SetConfig+0x324>)
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006694:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800669c:	d014      	beq.n	80066c8 <UART_SetConfig+0x2a8>
 800669e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a2:	d802      	bhi.n	80066aa <UART_SetConfig+0x28a>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <UART_SetConfig+0x298>
 80066a8:	e016      	b.n	80066d8 <UART_SetConfig+0x2b8>
 80066aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ae:	d007      	beq.n	80066c0 <UART_SetConfig+0x2a0>
 80066b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066b4:	d00c      	beq.n	80066d0 <UART_SetConfig+0x2b0>
 80066b6:	e00f      	b.n	80066d8 <UART_SetConfig+0x2b8>
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066be:	e013      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80066c0:	2302      	movs	r3, #2
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c6:	e00f      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80066c8:	2304      	movs	r3, #4
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ce:	e00b      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d6:	e007      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80066d8:	2310      	movs	r3, #16
 80066da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066de:	bf00      	nop
 80066e0:	e002      	b.n	80066e8 <UART_SetConfig+0x2c8>
 80066e2:	2310      	movs	r3, #16
 80066e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a13      	ldr	r2, [pc, #76]	; (800673c <UART_SetConfig+0x31c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	f040 80fe 	bne.w	80068f0 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d837      	bhi.n	800676c <UART_SetConfig+0x34c>
 80066fc:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <UART_SetConfig+0x2e4>)
 80066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006702:	bf00      	nop
 8006704:	08006729 	.word	0x08006729
 8006708:	0800676d 	.word	0x0800676d
 800670c:	08006731 	.word	0x08006731
 8006710:	0800676d 	.word	0x0800676d
 8006714:	0800675d 	.word	0x0800675d
 8006718:	0800676d 	.word	0x0800676d
 800671c:	0800676d 	.word	0x0800676d
 8006720:	0800676d 	.word	0x0800676d
 8006724:	08006765 	.word	0x08006765
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006728:	f7fe f826 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 800672c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800672e:	e020      	b.n	8006772 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006730:	4b09      	ldr	r3, [pc, #36]	; (8006758 <UART_SetConfig+0x338>)
 8006732:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006734:	e01d      	b.n	8006772 <UART_SetConfig+0x352>
 8006736:	bf00      	nop
 8006738:	efff69f3 	.word	0xefff69f3
 800673c:	40008000 	.word	0x40008000
 8006740:	40013800 	.word	0x40013800
 8006744:	40021000 	.word	0x40021000
 8006748:	40004400 	.word	0x40004400
 800674c:	40004800 	.word	0x40004800
 8006750:	40004c00 	.word	0x40004c00
 8006754:	40005000 	.word	0x40005000
 8006758:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800675c:	f7fd ff76 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8006760:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006762:	e006      	b.n	8006772 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006768:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800676a:	e002      	b.n	8006772 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	76fb      	strb	r3, [r7, #27]
        break;
 8006770:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 81b9 	beq.w	8006aec <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	4413      	add	r3, r2
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	429a      	cmp	r2, r3
 8006788:	d305      	bcc.n	8006796 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	429a      	cmp	r2, r3
 8006794:	d902      	bls.n	800679c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	76fb      	strb	r3, [r7, #27]
 800679a:	e1a7      	b.n	8006aec <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800679c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	f200 8092 	bhi.w	80068ca <UART_SetConfig+0x4aa>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <UART_SetConfig+0x38c>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067d1 	.word	0x080067d1
 80067b0:	080068cb 	.word	0x080068cb
 80067b4:	0800681f 	.word	0x0800681f
 80067b8:	080068cb 	.word	0x080068cb
 80067bc:	08006853 	.word	0x08006853
 80067c0:	080068cb 	.word	0x080068cb
 80067c4:	080068cb 	.word	0x080068cb
 80067c8:	080068cb 	.word	0x080068cb
 80067cc:	080068a1 	.word	0x080068a1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80067d0:	f7fd ffd2 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 80067d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	4619      	mov	r1, r3
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	f04f 0300 	mov.w	r3, #0
 80067e2:	f04f 0400 	mov.w	r4, #0
 80067e6:	0214      	lsls	r4, r2, #8
 80067e8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80067ec:	020b      	lsls	r3, r1, #8
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6852      	ldr	r2, [r2, #4]
 80067f2:	0852      	lsrs	r2, r2, #1
 80067f4:	4611      	mov	r1, r2
 80067f6:	f04f 0200 	mov.w	r2, #0
 80067fa:	eb13 0b01 	adds.w	fp, r3, r1
 80067fe:	eb44 0c02 	adc.w	ip, r4, r2
 8006802:	4658      	mov	r0, fp
 8006804:	4661      	mov	r1, ip
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f04f 0400 	mov.w	r4, #0
 800680e:	461a      	mov	r2, r3
 8006810:	4623      	mov	r3, r4
 8006812:	f7f9 fcd9 	bl	80001c8 <__aeabi_uldivmod>
 8006816:	4603      	mov	r3, r0
 8006818:	460c      	mov	r4, r1
 800681a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800681c:	e058      	b.n	80068d0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	f04f 0400 	mov.w	r4, #0
 8006828:	49ae      	ldr	r1, [pc, #696]	; (8006ae4 <UART_SetConfig+0x6c4>)
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	eb13 0b01 	adds.w	fp, r3, r1
 8006832:	eb44 0c02 	adc.w	ip, r4, r2
 8006836:	4658      	mov	r0, fp
 8006838:	4661      	mov	r1, ip
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f04f 0400 	mov.w	r4, #0
 8006842:	461a      	mov	r2, r3
 8006844:	4623      	mov	r3, r4
 8006846:	f7f9 fcbf 	bl	80001c8 <__aeabi_uldivmod>
 800684a:	4603      	mov	r3, r0
 800684c:	460c      	mov	r4, r1
 800684e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006850:	e03e      	b.n	80068d0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006852:	f7fd fefb 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8006856:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	4619      	mov	r1, r3
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	f04f 0400 	mov.w	r4, #0
 8006868:	0214      	lsls	r4, r2, #8
 800686a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800686e:	020b      	lsls	r3, r1, #8
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6852      	ldr	r2, [r2, #4]
 8006874:	0852      	lsrs	r2, r2, #1
 8006876:	4611      	mov	r1, r2
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	eb13 0b01 	adds.w	fp, r3, r1
 8006880:	eb44 0c02 	adc.w	ip, r4, r2
 8006884:	4658      	mov	r0, fp
 8006886:	4661      	mov	r1, ip
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f04f 0400 	mov.w	r4, #0
 8006890:	461a      	mov	r2, r3
 8006892:	4623      	mov	r3, r4
 8006894:	f7f9 fc98 	bl	80001c8 <__aeabi_uldivmod>
 8006898:	4603      	mov	r3, r0
 800689a:	460c      	mov	r4, r1
 800689c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800689e:	e017      	b.n	80068d0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	f04f 0400 	mov.w	r4, #0
 80068aa:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80068ae:	f144 0100 	adc.w	r1, r4, #0
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f04f 0400 	mov.w	r4, #0
 80068ba:	461a      	mov	r2, r3
 80068bc:	4623      	mov	r3, r4
 80068be:	f7f9 fc83 	bl	80001c8 <__aeabi_uldivmod>
 80068c2:	4603      	mov	r3, r0
 80068c4:	460c      	mov	r4, r1
 80068c6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80068c8:	e002      	b.n	80068d0 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	76fb      	strb	r3, [r7, #27]
            break;
 80068ce:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068d6:	d308      	bcc.n	80068ea <UART_SetConfig+0x4ca>
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068de:	d204      	bcs.n	80068ea <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	e100      	b.n	8006aec <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	76fb      	strb	r3, [r7, #27]
 80068ee:	e0fd      	b.n	8006aec <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f8:	f040 8084 	bne.w	8006a04 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80068fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006900:	2b08      	cmp	r3, #8
 8006902:	d85f      	bhi.n	80069c4 <UART_SetConfig+0x5a4>
 8006904:	a201      	add	r2, pc, #4	; (adr r2, 800690c <UART_SetConfig+0x4ec>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006931 	.word	0x08006931
 8006910:	08006951 	.word	0x08006951
 8006914:	08006971 	.word	0x08006971
 8006918:	080069c5 	.word	0x080069c5
 800691c:	0800698d 	.word	0x0800698d
 8006920:	080069c5 	.word	0x080069c5
 8006924:	080069c5 	.word	0x080069c5
 8006928:	080069c5 	.word	0x080069c5
 800692c:	080069ad 	.word	0x080069ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006930:	f7fd ff22 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 8006934:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	005a      	lsls	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	085b      	lsrs	r3, r3, #1
 8006940:	441a      	add	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	fbb2 f3f3 	udiv	r3, r2, r3
 800694a:	b29b      	uxth	r3, r3
 800694c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800694e:	e03c      	b.n	80069ca <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006950:	f7fd ff28 	bl	80047a4 <HAL_RCC_GetPCLK2Freq>
 8006954:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	005a      	lsls	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	085b      	lsrs	r3, r3, #1
 8006960:	441a      	add	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	fbb2 f3f3 	udiv	r3, r2, r3
 800696a:	b29b      	uxth	r3, r3
 800696c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800696e:	e02c      	b.n	80069ca <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	085b      	lsrs	r3, r3, #1
 8006976:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800697a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6852      	ldr	r2, [r2, #4]
 8006982:	fbb3 f3f2 	udiv	r3, r3, r2
 8006986:	b29b      	uxth	r3, r3
 8006988:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800698a:	e01e      	b.n	80069ca <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698c:	f7fd fe5e 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8006990:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	005a      	lsls	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	085b      	lsrs	r3, r3, #1
 800699c:	441a      	add	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069aa:	e00e      	b.n	80069ca <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80069be:	b29b      	uxth	r3, r3
 80069c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069c2:	e002      	b.n	80069ca <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	76fb      	strb	r3, [r7, #27]
        break;
 80069c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	2b0f      	cmp	r3, #15
 80069ce:	d916      	bls.n	80069fe <UART_SetConfig+0x5de>
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d6:	d212      	bcs.n	80069fe <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f023 030f 	bic.w	r3, r3, #15
 80069e0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	085b      	lsrs	r3, r3, #1
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	89fb      	ldrh	r3, [r7, #14]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	89fa      	ldrh	r2, [r7, #14]
 80069fa:	60da      	str	r2, [r3, #12]
 80069fc:	e076      	b.n	8006aec <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	76fb      	strb	r3, [r7, #27]
 8006a02:	e073      	b.n	8006aec <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006a04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d85c      	bhi.n	8006ac6 <UART_SetConfig+0x6a6>
 8006a0c:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <UART_SetConfig+0x5f4>)
 8006a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006a39 	.word	0x08006a39
 8006a18:	08006a57 	.word	0x08006a57
 8006a1c:	08006a75 	.word	0x08006a75
 8006a20:	08006ac7 	.word	0x08006ac7
 8006a24:	08006a91 	.word	0x08006a91
 8006a28:	08006ac7 	.word	0x08006ac7
 8006a2c:	08006ac7 	.word	0x08006ac7
 8006a30:	08006ac7 	.word	0x08006ac7
 8006a34:	08006aaf 	.word	0x08006aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a38:	f7fd fe9e 	bl	8004778 <HAL_RCC_GetPCLK1Freq>
 8006a3c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	085a      	lsrs	r2, r3, #1
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	441a      	add	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a54:	e03a      	b.n	8006acc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a56:	f7fd fea5 	bl	80047a4 <HAL_RCC_GetPCLK2Freq>
 8006a5a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	085a      	lsrs	r2, r3, #1
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	441a      	add	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a72:	e02b      	b.n	8006acc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	085b      	lsrs	r3, r3, #1
 8006a7a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006a7e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6852      	ldr	r2, [r2, #4]
 8006a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a8e:	e01d      	b.n	8006acc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a90:	f7fd fddc 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8006a94:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	085a      	lsrs	r2, r3, #1
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	441a      	add	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006aac:	e00e      	b.n	8006acc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	085b      	lsrs	r3, r3, #1
 8006ab4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ac4:	e002      	b.n	8006acc <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	76fb      	strb	r3, [r7, #27]
        break;
 8006aca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	2b0f      	cmp	r3, #15
 8006ad0:	d90a      	bls.n	8006ae8 <UART_SetConfig+0x6c8>
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad8:	d206      	bcs.n	8006ae8 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	60da      	str	r2, [r3, #12]
 8006ae2:	e003      	b.n	8006aec <UART_SetConfig+0x6cc>
 8006ae4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006af8:	7efb      	ldrb	r3, [r7, #27]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3728      	adds	r7, #40	; 0x28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00a      	beq.n	8006b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	f003 0308 	and.w	r3, r3, #8
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01a      	beq.n	8006c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c02:	d10a      	bne.n	8006c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	605a      	str	r2, [r3, #4]
  }
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006c56:	f7fb f815 	bl	8001c84 <HAL_GetTick>
 8006c5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	2b08      	cmp	r3, #8
 8006c68:	d10e      	bne.n	8006c88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f82a 	bl	8006cd2 <UART_WaitOnFlagUntilTimeout>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e020      	b.n	8006cca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0304 	and.w	r3, r3, #4
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d10e      	bne.n	8006cb4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f814 	bl	8006cd2 <UART_WaitOnFlagUntilTimeout>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e00a      	b.n	8006cca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	60f8      	str	r0, [r7, #12]
 8006cda:	60b9      	str	r1, [r7, #8]
 8006cdc:	603b      	str	r3, [r7, #0]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ce2:	e05d      	b.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cea:	d059      	beq.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cec:	f7fa ffca 	bl	8001c84 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d302      	bcc.n	8006d02 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d11b      	bne.n	8006d3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d10:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0201 	bic.w	r2, r2, #1
 8006d20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2220      	movs	r2, #32
 8006d26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e042      	b.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d02b      	beq.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d56:	d123      	bne.n	8006da0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d60:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d70:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0201 	bic.w	r2, r2, #1
 8006d80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2220      	movs	r2, #32
 8006d86:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2220      	movs	r2, #32
 8006d92:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e00f      	b.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69da      	ldr	r2, [r3, #28]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	4013      	ands	r3, r2
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	bf0c      	ite	eq
 8006db0:	2301      	moveq	r3, #1
 8006db2:	2300      	movne	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d092      	beq.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <__libc_init_array>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	4e0d      	ldr	r6, [pc, #52]	; (8006e00 <__libc_init_array+0x38>)
 8006dcc:	4c0d      	ldr	r4, [pc, #52]	; (8006e04 <__libc_init_array+0x3c>)
 8006dce:	1ba4      	subs	r4, r4, r6
 8006dd0:	10a4      	asrs	r4, r4, #2
 8006dd2:	2500      	movs	r5, #0
 8006dd4:	42a5      	cmp	r5, r4
 8006dd6:	d109      	bne.n	8006dec <__libc_init_array+0x24>
 8006dd8:	4e0b      	ldr	r6, [pc, #44]	; (8006e08 <__libc_init_array+0x40>)
 8006dda:	4c0c      	ldr	r4, [pc, #48]	; (8006e0c <__libc_init_array+0x44>)
 8006ddc:	f000 f820 	bl	8006e20 <_init>
 8006de0:	1ba4      	subs	r4, r4, r6
 8006de2:	10a4      	asrs	r4, r4, #2
 8006de4:	2500      	movs	r5, #0
 8006de6:	42a5      	cmp	r5, r4
 8006de8:	d105      	bne.n	8006df6 <__libc_init_array+0x2e>
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006df0:	4798      	blx	r3
 8006df2:	3501      	adds	r5, #1
 8006df4:	e7ee      	b.n	8006dd4 <__libc_init_array+0xc>
 8006df6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dfa:	4798      	blx	r3
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	e7f2      	b.n	8006de6 <__libc_init_array+0x1e>
 8006e00:	08006e88 	.word	0x08006e88
 8006e04:	08006e88 	.word	0x08006e88
 8006e08:	08006e88 	.word	0x08006e88
 8006e0c:	08006e8c 	.word	0x08006e8c

08006e10 <memset>:
 8006e10:	4402      	add	r2, r0
 8006e12:	4603      	mov	r3, r0
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d100      	bne.n	8006e1a <memset+0xa>
 8006e18:	4770      	bx	lr
 8006e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1e:	e7f9      	b.n	8006e14 <memset+0x4>

08006e20 <_init>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr

08006e2c <_fini>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr
