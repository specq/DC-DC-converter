
empc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007928  08007928  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007930  08007930  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007934  08007934  00017934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000070  080079a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080079a8  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144af  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024fa  00000000  00000000  0003454f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  00036a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001240  00000000  00000000  00037db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000295b1  00000000  00000000  00038ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e540  00000000  00000000  000625a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107cc9  00000000  00000000  00070ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001787b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000567c  00000000  00000000  00178830  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007870 	.word	0x08007870

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007870 	.word	0x08007870

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <swap>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void swap(int* a, int* b)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	int t = *a;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	60fb      	str	r3, [r7, #12]
    *a = *b;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]
    *b = t;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <partition>:

int partition (int arr[], int low, int high)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b088      	sub	sp, #32
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	607a      	str	r2, [r7, #4]
	int pivot = arr[high];    // pivot
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	4413      	add	r3, r2
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	617b      	str	r3, [r7, #20]
	int i = (low - 1);  // Index of smaller element
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	61fb      	str	r3, [r7, #28]

    for (int j = low; j <= high- 1; j++)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	e018      	b.n	8000600 <partition+0x56>
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
 80005ce:	69bb      	ldr	r3, [r7, #24]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	4413      	add	r3, r2
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	429a      	cmp	r2, r3
 80005dc:	dd0d      	ble.n	80005fa <partition+0x50>
        {
            i++;    // increment index of smaller element
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	3301      	adds	r3, #1
 80005e2:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	18d0      	adds	r0, r2, r3
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	4619      	mov	r1, r3
 80005f6:	f7ff ffc3 	bl	8000580 <swap>
    for (int j = low; j <= high- 1; j++)
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	3301      	adds	r3, #1
 80005fe:	61bb      	str	r3, [r7, #24]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3b01      	subs	r3, #1
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	429a      	cmp	r2, r3
 8000608:	dde1      	ble.n	80005ce <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	3301      	adds	r3, #1
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	68fa      	ldr	r2, [r7, #12]
 8000612:	18d0      	adds	r0, r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	4619      	mov	r1, r3
 800061e:	f7ff ffaf 	bl	8000580 <swap>
    return (i + 1);
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	3301      	adds	r3, #1
}
 8000626:	4618      	mov	r0, r3
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <quickSort>:

void quickSort(int arr[], int low, int high)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b086      	sub	sp, #24
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
    if (low < high)
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	429a      	cmp	r2, r3
 8000640:	da13      	bge.n	800066a <quickSort+0x3c>
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
    	int pi = partition(arr, low, high);
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff ffaf 	bl	80005aa <partition>
 800064c:	6178      	str	r0, [r7, #20]

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3b01      	subs	r3, #1
 8000652:	461a      	mov	r2, r3
 8000654:	68b9      	ldr	r1, [r7, #8]
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f7ff ffe9 	bl	800062e <quickSort>
        quickSort(arr, pi + 1, high);
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	3301      	adds	r3, #1
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4619      	mov	r1, r3
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f7ff ffe2 	bl	800062e <quickSort>
    }
}
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <get_median>:

int get_median(int *values){
 8000672:	b580      	push	{r7, lr}
 8000674:	b084      	sub	sp, #16
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
	int n = sizeof(values)/sizeof(values[0]);
 800067a:	2301      	movs	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
    quickSort(values, 0, n-1);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3b01      	subs	r3, #1
 8000682:	461a      	mov	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ffd1 	bl	800062e <quickSort>
    return values[SIZE/2];
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68db      	ldr	r3, [r3, #12]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b0      	sub	sp, #192	; 0xc0
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
	if (htim->Instance == htim3.Instance)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	f040 8480 	bne.w	8000fae <HAL_TIM_PeriodElapsedCallback+0x916>
    {
		if(iter < 10000){
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d807      	bhi.n	80006ca <HAL_TIM_PeriodElapsedCallback+0x32>
			iter++;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006c4:	801a      	strh	r2, [r3, #0]
			htim2.Instance->CCR2 = input;
			u /= 1000;
			u += us;
		}
	}
}
 80006c6:	f000 bc72 	b.w	8000fae <HAL_TIM_PeriodElapsedCallback+0x916>
			for(uint8_t i = 0; i<SIZE; i++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80006d0:	e023      	b.n	800071a <HAL_TIM_PeriodElapsedCallback+0x82>
 80006d2:	bf00      	nop
 80006d4:	20000130 	.word	0x20000130
 80006d8:	2000008c 	.word	0x2000008c
				value0[i] = (int)adc_buf0[i];
 80006dc:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80006e0:	4ac6      	ldr	r2, [pc, #792]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x364>)
 80006e2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006e6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80006f0:	440b      	add	r3, r1
 80006f2:	f843 2c98 	str.w	r2, [r3, #-152]
				value1[i] = (int)adc_buf1[i];
 80006f6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80006fa:	4ac1      	ldr	r2, [pc, #772]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80006fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000700:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800070a:	440b      	add	r3, r1
 800070c:	f843 2cb4 	str.w	r2, [r3, #-180]
			for(uint8_t i = 0; i<SIZE; i++){
 8000710:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000714:	3301      	adds	r3, #1
 8000716:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800071a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800071e:	2b06      	cmp	r3, #6
 8000720:	d9dc      	bls.n	80006dc <HAL_TIM_PeriodElapsedCallback+0x44>
			y[0] = get_median(value0); y[0] *= 1075; y[0] /= 10000;
 8000722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffa3 	bl	8000672 <get_median>
 800072c:	4602      	mov	r2, r0
 800072e:	4bb5      	ldr	r3, [pc, #724]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	4bb4      	ldr	r3, [pc, #720]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f240 4233 	movw	r2, #1075	; 0x433
 800073a:	fb02 f303 	mul.w	r3, r2, r3
 800073e:	4ab1      	ldr	r2, [pc, #708]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000740:	6013      	str	r3, [r2, #0]
 8000742:	4bb0      	ldr	r3, [pc, #704]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4ab0      	ldr	r2, [pc, #704]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000748:	fb82 1203 	smull	r1, r2, r2, r3
 800074c:	1312      	asrs	r2, r2, #12
 800074e:	17db      	asrs	r3, r3, #31
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	4aac      	ldr	r2, [pc, #688]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000754:	6013      	str	r3, [r2, #0]
			y[1] = get_median(value1);   y[1] *= 28686; y[1] /= 10000;
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff89 	bl	8000672 <get_median>
 8000760:	4602      	mov	r2, r0
 8000762:	4ba8      	ldr	r3, [pc, #672]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	4ba7      	ldr	r3, [pc, #668]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f247 020e 	movw	r2, #28686	; 0x700e
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	4aa4      	ldr	r2, [pc, #656]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000774:	6053      	str	r3, [r2, #4]
 8000776:	4ba3      	ldr	r3, [pc, #652]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	4aa3      	ldr	r2, [pc, #652]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800077c:	fb82 1203 	smull	r1, r2, r2, r3
 8000780:	1312      	asrs	r2, r2, #12
 8000782:	17db      	asrs	r3, r3, #31
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	4a9f      	ldr	r2, [pc, #636]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000788:	6053      	str	r3, [r2, #4]
			int x0_prev = x[0];
 800078a:	4ba0      	ldr	r3, [pc, #640]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			int x1_prev = x[1];
 8000792:	4b9e      	ldr	r3, [pc, #632]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			x_est[0] = 97136*x0_prev - 978*x1_prev + 14878*u;    x_est[0] /= 100000;
 800079a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800079e:	4a9c      	ldr	r2, [pc, #624]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80007a0:	fb02 f203 	mul.w	r2, r2, r3
 80007a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80007a8:	499a      	ldr	r1, [pc, #616]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80007aa:	fb01 f303 	mul.w	r3, r1, r3
 80007ae:	441a      	add	r2, r3
 80007b0:	4b99      	ldr	r3, [pc, #612]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f643 211e 	movw	r1, #14878	; 0x3a1e
 80007b8:	fb01 f303 	mul.w	r3, r1, r3
 80007bc:	4413      	add	r3, r2
 80007be:	4a97      	ldr	r2, [pc, #604]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	4b96      	ldr	r3, [pc, #600]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a96      	ldr	r2, [pc, #600]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80007c8:	fb82 1203 	smull	r1, r2, r2, r3
 80007cc:	1352      	asrs	r2, r2, #13
 80007ce:	17db      	asrs	r3, r3, #31
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	4a92      	ldr	r2, [pc, #584]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80007d4:	6013      	str	r3, [r2, #0]
			x_est[1] = 173187*x0_prev + 97046*x1_prev + 18083*u; x_est[1] /= 100000;
 80007d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80007da:	4a92      	ldr	r2, [pc, #584]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80007dc:	fb02 f203 	mul.w	r2, r2, r3
 80007e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80007e4:	4990      	ldr	r1, [pc, #576]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80007e6:	fb01 f303 	mul.w	r3, r1, r3
 80007ea:	441a      	add	r2, r3
 80007ec:	4b8a      	ldr	r3, [pc, #552]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f244 61a3 	movw	r1, #18083	; 0x46a3
 80007f4:	fb01 f303 	mul.w	r3, r1, r3
 80007f8:	4413      	add	r3, r2
 80007fa:	4a88      	ldr	r2, [pc, #544]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80007fc:	6053      	str	r3, [r2, #4]
 80007fe:	4b87      	ldr	r3, [pc, #540]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4a87      	ldr	r2, [pc, #540]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000804:	fb82 1203 	smull	r1, r2, r2, r3
 8000808:	1352      	asrs	r2, r2, #13
 800080a:	17db      	asrs	r3, r3, #31
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	4a83      	ldr	r2, [pc, #524]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000810:	6053      	str	r3, [r2, #4]
			x[0] = 200*y[0] + 800*x_est[0]; x[0] /= 1000;
 8000812:	4b7c      	ldr	r3, [pc, #496]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	22c8      	movs	r2, #200	; 0xc8
 8000818:	fb02 f203 	mul.w	r2, r2, r3
 800081c:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000824:	fb01 f303 	mul.w	r3, r1, r3
 8000828:	4413      	add	r3, r2
 800082a:	4a78      	ldr	r2, [pc, #480]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	4b77      	ldr	r3, [pc, #476]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a7e      	ldr	r2, [pc, #504]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000834:	fb82 1203 	smull	r1, r2, r2, r3
 8000838:	1192      	asrs	r2, r2, #6
 800083a:	17db      	asrs	r3, r3, #31
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	4a73      	ldr	r2, [pc, #460]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000840:	6013      	str	r3, [r2, #0]
			x[1] = 200*y[1] + 800*x_est[1]; x[1] /= 1000;
 8000842:	4b70      	ldr	r3, [pc, #448]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	22c8      	movs	r2, #200	; 0xc8
 8000848:	fb02 f203 	mul.w	r2, r2, r3
 800084c:	4b73      	ldr	r3, [pc, #460]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000854:	fb01 f303 	mul.w	r3, r1, r3
 8000858:	4413      	add	r3, r2
 800085a:	4a6c      	ldr	r2, [pc, #432]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800085c:	6053      	str	r3, [r2, #4]
 800085e:	4b6b      	ldr	r3, [pc, #428]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	4a72      	ldr	r2, [pc, #456]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000864:	fb82 1203 	smull	r1, r2, r2, r3
 8000868:	1192      	asrs	r2, r2, #6
 800086a:	17db      	asrs	r3, r3, #31
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	4a67      	ldr	r2, [pc, #412]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000870:	6053      	str	r3, [r2, #4]
			int dx0 = x[0] - xs0;
 8000872:	4b66      	ldr	r3, [pc, #408]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2232      	movs	r2, #50	; 0x32
 8000878:	1a9b      	subs	r3, r3, r2
 800087a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			int dx1 = x[1] - xs1;
 800087e:	4b63      	ldr	r3, [pc, #396]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f241 3288 	movw	r2, #5000	; 0x1388
 8000886:	1a9b      	subs	r3, r3, r2
 8000888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			int H11 = -1000*dx0-49999;              H11 = H11<=0;
 800088c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000890:	4a67      	ldr	r2, [pc, #412]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000892:	fb02 f303 	mul.w	r3, r2, r3
 8000896:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800089a:	3b4f      	subs	r3, #79	; 0x4f
 800089c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80008a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bfd4      	ite	le
 80008a8:	2301      	movle	r3, #1
 80008aa:	2300      	movgt	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			int H12 = -948*dx0+317*dx1-246980;      H12 = H12<=0;
 80008b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80008b6:	4a5f      	ldr	r2, [pc, #380]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80008b8:	fb02 f203 	mul.w	r2, r2, r3
 80008bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008c0:	f240 113d 	movw	r1, #317	; 0x13d
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	f5a3 3371 	sub.w	r3, r3, #246784	; 0x3c400
 80008ce:	3bc4      	subs	r3, #196	; 0xc4
 80008d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80008d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bfd4      	ite	le
 80008dc:	2301      	movle	r3, #1
 80008de:	2300      	movgt	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			int H13 = 948*dx0-317*dx1-740942;       H13 = H13<=0;
 80008e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80008ea:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 80008ee:	fb02 f203 	mul.w	r2, r2, r3
 80008f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008f6:	f46f 719e 	mvn.w	r1, #316	; 0x13c
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	f5a3 2334 	sub.w	r3, r3, #737280	; 0xb4000
 8000904:	f6a3 634e 	subw	r3, r3, #3662	; 0xe4e
 8000908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800090c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000910:	2b00      	cmp	r3, #0
 8000912:	bfd4      	ite	le
 8000914:	2301      	movle	r3, #1
 8000916:	2300      	movgt	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			int H14 = 997*dx0+69*dx1-64337;         H14 = H14<=0;
 800091e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000922:	f240 32e5 	movw	r2, #997	; 0x3e5
 8000926:	fb02 f103 	mul.w	r1, r2, r3
 800092a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800092e:	4613      	mov	r3, r2
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	4413      	add	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	440b      	add	r3, r1
 800093a:	f5a3 437b 	sub.w	r3, r3, #64256	; 0xfb00
 800093e:	3b51      	subs	r3, #81	; 0x51
 8000940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000948:	2b00      	cmp	r3, #0
 800094a:	bfd4      	ite	le
 800094c:	2301      	movle	r3, #1
 800094e:	2300      	movgt	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			int H15 = -997*dx0-69*dx1-126088;       H15 = H15<=0;
 8000956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800095a:	f46f 7279 	mvn.w	r2, #996	; 0x3e4
 800095e:	fb02 f203 	mul.w	r2, r2, r3
 8000962:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000966:	f06f 0144 	mvn.w	r1, #68	; 0x44
 800096a:	fb01 f303 	mul.w	r3, r1, r3
 800096e:	4413      	add	r3, r2
 8000970:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8000974:	3b88      	subs	r3, #136	; 0x88
 8000976:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800097a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800097e:	2b00      	cmp	r3, #0
 8000980:	bfd4      	ite	le
 8000982:	2301      	movle	r3, #1
 8000984:	2300      	movgt	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			int H16 = 1000*dx0-150000;              H16 = H16<=0;
 800098c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 800099c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80009a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80009a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	bfd4      	ite	le
 80009ac:	2301      	movle	r3, #1
 80009ae:	2300      	movgt	r3, #0
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			if(H11 && H12 && H13 && H14 && H15 && H16){
 80009b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d04e      	beq.n	8000a5c <HAL_TIM_PeriodElapsedCallback+0x3c4>
 80009be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d04a      	beq.n	8000a5c <HAL_TIM_PeriodElapsedCallback+0x3c4>
 80009c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d046      	beq.n	8000a5c <HAL_TIM_PeriodElapsedCallback+0x3c4>
 80009ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d042      	beq.n	8000a5c <HAL_TIM_PeriodElapsedCallback+0x3c4>
 80009d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d03e      	beq.n	8000a5c <HAL_TIM_PeriodElapsedCallback+0x3c4>
 80009de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d03a      	beq.n	8000a5c <HAL_TIM_PeriodElapsedCallback+0x3c4>
				u = -5237*dx0; u -= 366*dx1;
 80009e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009f8:	e020      	b.n	8000a3c <HAL_TIM_PeriodElapsedCallback+0x3a4>
 80009fa:	bf00      	nop
 80009fc:	2000033c 	.word	0x2000033c
 8000a00:	20000170 	.word	0x20000170
 8000a04:	2000022c 	.word	0x2000022c
 8000a08:	68db8bad 	.word	0x68db8bad
 8000a0c:	20000090 	.word	0x20000090
 8000a10:	00017b70 	.word	0x00017b70
 8000a14:	fffffc2e 	.word	0xfffffc2e
 8000a18:	200000a0 	.word	0x200000a0
 8000a1c:	20000098 	.word	0x20000098
 8000a20:	14f8b589 	.word	0x14f8b589
 8000a24:	0002a483 	.word	0x0002a483
 8000a28:	00017b16 	.word	0x00017b16
 8000a2c:	10624dd3 	.word	0x10624dd3
 8000a30:	fffffc18 	.word	0xfffffc18
 8000a34:	fffffc4c 	.word	0xfffffc4c
 8000a38:	ffffeb8b 	.word	0xffffeb8b
 8000a3c:	4a81      	ldr	r2, [pc, #516]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000a3e:	fb02 f203 	mul.w	r2, r2, r3
 8000a42:	4b81      	ldr	r3, [pc, #516]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a7f      	ldr	r2, [pc, #508]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000a4a:	6013      	str	r3, [r2, #0]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0.5/3.3*4095);
 8000a4c:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	487d      	ldr	r0, [pc, #500]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000a56:	f002 fc5d 	bl	8003314 <HAL_DAC_SetValue>
 8000a5a:	e254      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x86e>
				int H51 = 998*dx0+70*dx1+126100;  H51 = H51<=0;
 8000a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a60:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000a64:	fb02 f203 	mul.w	r2, r2, r3
 8000a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a6c:	2146      	movs	r1, #70	; 0x46
 8000a6e:	fb01 f303 	mul.w	r3, r1, r3
 8000a72:	4413      	add	r3, r2
 8000a74:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8000a78:	3394      	adds	r3, #148	; 0x94
 8000a7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	bfd4      	ite	le
 8000a86:	2301      	movle	r3, #1
 8000a88:	2300      	movgt	r3, #0
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				int H52 = -1000*dx0-50000;       H52 = H52<=0;
 8000a90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a94:	4a6e      	ldr	r2, [pc, #440]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000a96:	fb02 f303 	mul.w	r3, r2, r3
 8000a9a:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000a9e:	3b50      	subs	r3, #80	; 0x50
 8000aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bfd4      	ite	le
 8000aac:	2301      	movle	r3, #1
 8000aae:	2300      	movgt	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				int H53 = -1000*dx1-5000000;     H53 = H53<=0;
 8000ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000aba:	4a65      	ldr	r2, [pc, #404]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000abc:	fb02 f203 	mul.w	r2, r2, r3
 8000ac0:	4b64      	ldr	r3, [pc, #400]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000ac2:	4413      	add	r3, r2
 8000ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	bfd4      	ite	le
 8000ad0:	2301      	movle	r3, #1
 8000ad2:	2300      	movgt	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				int H54 = 1000*dx0-10*dx1-53000;  H54 = H54<=0;
 8000ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ade:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae2:	fb02 f203 	mul.w	r2, r2, r3
 8000ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000aea:	f06f 0109 	mvn.w	r1, #9
 8000aee:	fb01 f303 	mul.w	r3, r1, r3
 8000af2:	4413      	add	r3, r2
 8000af4:	f5a3 434f 	sub.w	r3, r3, #52992	; 0xcf00
 8000af8:	3b08      	subs	r3, #8
 8000afa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bfd4      	ite	le
 8000b06:	2301      	movle	r3, #1
 8000b08:	2300      	movgt	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				if(H51 && H52 && H53 && H54){
 8000b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d016      	beq.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x4ae>
 8000b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d012      	beq.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x4ae>
 8000b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00e      	beq.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x4ae>
 8000b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00a      	beq.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x4ae>
					u = 662000;
 8000b30:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000b32:	4a49      	ldr	r2, [pc, #292]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8000b34:	601a      	str	r2, [r3, #0]
					HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2.5/3.3*4095);
 8000b36:	f640 431e 	movw	r3, #3102	; 0xc1e
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4843      	ldr	r0, [pc, #268]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000b40:	f002 fbe8 	bl	8003314 <HAL_DAC_SetValue>
 8000b44:	e1df      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x86e>
					int H31 = -1000*dx1-5000000;         H31 = H31<=0;
 8000b46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b4a:	4a41      	ldr	r2, [pc, #260]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000b4c:	fb02 f203 	mul.w	r2, r2, r3
 8000b50:	4b40      	ldr	r3, [pc, #256]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8000b52:	4413      	add	r3, r2
 8000b54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bfd4      	ite	le
 8000b5c:	2301      	movle	r3, #1
 8000b5e:	2300      	movgt	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	67fb      	str	r3, [r7, #124]	; 0x7c
					int H32 = -1000*dx0+10*dx1+53000;     H32 = H32<=0;
 8000b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b68:	4a39      	ldr	r2, [pc, #228]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8000b6a:	fb02 f103 	mul.w	r1, r2, r3
 8000b6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8000b80:	3308      	adds	r3, #8
 8000b82:	67bb      	str	r3, [r7, #120]	; 0x78
 8000b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bfd4      	ite	le
 8000b8a:	2301      	movle	r3, #1
 8000b8c:	2300      	movgt	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	67bb      	str	r3, [r7, #120]	; 0x78
					int H33 = -948*dx0+318*dx1+740900;    H33 = H33<=0;
 8000b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b96:	4a31      	ldr	r2, [pc, #196]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8000b98:	fb02 f203 	mul.w	r2, r2, r3
 8000b9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ba0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000ba4:	fb01 f303 	mul.w	r3, r1, r3
 8000ba8:	4413      	add	r3, r2
 8000baa:	f503 2334 	add.w	r3, r3, #737280	; 0xb4000
 8000bae:	f603 6324 	addw	r3, r3, #3620	; 0xe24
 8000bb2:	677b      	str	r3, [r7, #116]	; 0x74
 8000bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bfd4      	ite	le
 8000bba:	2301      	movle	r3, #1
 8000bbc:	2300      	movgt	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	677b      	str	r3, [r7, #116]	; 0x74
					int H34 = 1000*dx0-150000;           H34 = H34<=0;
 8000bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 8000bd2:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000bd6:	673b      	str	r3, [r7, #112]	; 0x70
 8000bd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bfd4      	ite	le
 8000bde:	2301      	movle	r3, #1
 8000be0:	2300      	movgt	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	673b      	str	r3, [r7, #112]	; 0x70
					if(H31 && H32 && H33 && H34){
 8000be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d03b      	beq.n	8000c64 <HAL_TIM_PeriodElapsedCallback+0x5cc>
 8000bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d038      	beq.n	8000c64 <HAL_TIM_PeriodElapsedCallback+0x5cc>
 8000bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d035      	beq.n	8000c64 <HAL_TIM_PeriodElapsedCallback+0x5cc>
 8000bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d032      	beq.n	8000c64 <HAL_TIM_PeriodElapsedCallback+0x5cc>
						u = -6528*dx0; u += 66*dx1; u += 1000000;
 8000bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000c10:	4613      	mov	r3, r2
 8000c12:	015b      	lsls	r3, r3, #5
 8000c14:	4413      	add	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 8000c2c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000c30:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000c32:	6013      	str	r3, [r2, #0]
						HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1.5/3.3*4095);
 8000c34:	f240 7345 	movw	r3, #1861	; 0x745
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000c3e:	f002 fb69 	bl	8003314 <HAL_DAC_SetValue>
 8000c42:	e160      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x86e>
 8000c44:	fffffe92 	.word	0xfffffe92
 8000c48:	200000a0 	.word	0x200000a0
 8000c4c:	200000b8 	.word	0x200000b8
 8000c50:	fffffc18 	.word	0xfffffc18
 8000c54:	ffb3b4c0 	.word	0xffb3b4c0
 8000c58:	000a19f0 	.word	0x000a19f0
 8000c5c:	fffffc4c 	.word	0xfffffc4c
 8000c60:	ffffe680 	.word	0xffffe680
						int H21 = -1000*dx0-50000;          H21 = H21<=0;
 8000c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c68:	4a94      	ldr	r2, [pc, #592]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x824>)
 8000c6a:	fb02 f303 	mul.w	r3, r2, r3
 8000c6e:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000c72:	3b50      	subs	r3, #80	; 0x50
 8000c74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bfd4      	ite	le
 8000c7c:	2301      	movle	r3, #1
 8000c7e:	2300      	movgt	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	66fb      	str	r3, [r7, #108]	; 0x6c
						int H22 = 489*dx0+872*dx1-1533900;  H22 = H22<=0;
 8000c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c88:	f240 12e9 	movw	r2, #489	; 0x1e9
 8000c8c:	fb02 f203 	mul.w	r2, r2, r3
 8000c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c94:	f44f 715a 	mov.w	r1, #872	; 0x368
 8000c98:	fb01 f303 	mul.w	r3, r1, r3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	f5a3 13bb 	sub.w	r3, r3, #1531904	; 0x176000
 8000ca2:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 8000ca6:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bfd4      	ite	le
 8000cae:	2301      	movle	r3, #1
 8000cb0:	2300      	movgt	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	66bb      	str	r3, [r7, #104]	; 0x68
						int H23 = 1000*dx0-10*dx1-300;      H23 = H23<=0;
 8000cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cbe:	fb02 f203 	mul.w	r2, r2, r3
 8000cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000cc6:	f06f 0109 	mvn.w	r1, #9
 8000cca:	fb01 f303 	mul.w	r3, r1, r3
 8000cce:	4413      	add	r3, r2
 8000cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cd4:	667b      	str	r3, [r7, #100]	; 0x64
 8000cd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	bfd4      	ite	le
 8000cdc:	2301      	movle	r3, #1
 8000cde:	2300      	movgt	r3, #0
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	667b      	str	r3, [r7, #100]	; 0x64
						int H24 = 948*dx0-318*dx1+247000;   H24 = H24<=0;
 8000ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ce8:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 8000cec:	fb02 f203 	mul.w	r2, r2, r3
 8000cf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000cf4:	4972      	ldr	r1, [pc, #456]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8000cf6:	fb01 f303 	mul.w	r3, r1, r3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	f503 3371 	add.w	r3, r3, #246784	; 0x3c400
 8000d00:	33d8      	adds	r3, #216	; 0xd8
 8000d02:	663b      	str	r3, [r7, #96]	; 0x60
 8000d04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	bfd4      	ite	le
 8000d0a:	2301      	movle	r3, #1
 8000d0c:	2300      	movgt	r3, #0
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	663b      	str	r3, [r7, #96]	; 0x60
						if(H21 && H22 && H23 && H24){
 8000d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d02b      	beq.n	8000d70 <HAL_TIM_PeriodElapsedCallback+0x6d8>
 8000d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d028      	beq.n	8000d70 <HAL_TIM_PeriodElapsedCallback+0x6d8>
 8000d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d025      	beq.n	8000d70 <HAL_TIM_PeriodElapsedCallback+0x6d8>
 8000d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d022      	beq.n	8000d70 <HAL_TIM_PeriodElapsedCallback+0x6d8>
							u = -6527*dx0; u += 66*dx1;  u -= 335700;
 8000d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d2e:	4a65      	ldr	r2, [pc, #404]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8000d30:	fb02 f303 	mul.w	r3, r2, r3
 8000d34:	4a64      	ldr	r2, [pc, #400]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	015b      	lsls	r3, r3, #5
 8000d40:	4413      	add	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b60      	ldr	r3, [pc, #384]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a5e      	ldr	r2, [pc, #376]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f5a3 23a3 	sub.w	r3, r3, #333824	; 0x51800
 8000d58:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 8000d5c:	4a5a      	ldr	r2, [pc, #360]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8000d5e:	6013      	str	r3, [r2, #0]
							HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1/3.3*4095);
 8000d60:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	4858      	ldr	r0, [pc, #352]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8000d6a:	f002 fad3 	bl	8003314 <HAL_DAC_SetValue>
 8000d6e:	e0ca      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x86e>
							int H41 = 921*dx0+390*dx1-698900;             H41 = H41<=0;
 8000d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d74:	f240 3299 	movw	r2, #921	; 0x399
 8000d78:	fb02 f203 	mul.w	r2, r2, r3
 8000d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d80:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8000d84:	fb01 f303 	mul.w	r3, r1, r3
 8000d88:	4413      	add	r3, r2
 8000d8a:	f5a3 232a 	sub.w	r3, r3, #696320	; 0xaa000
 8000d8e:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bfd4      	ite	le
 8000d9a:	2301      	movle	r3, #1
 8000d9c:	2300      	movgt	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	65fb      	str	r3, [r7, #92]	; 0x5c
							int H42 = 973*dx0+229*dx1-447200;             H42 = H42<=0;
 8000da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000da6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8000daa:	fb02 f203 	mul.w	r2, r2, r3
 8000dae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000db2:	21e5      	movs	r1, #229	; 0xe5
 8000db4:	fb01 f303 	mul.w	r3, r1, r3
 8000db8:	4413      	add	r3, r2
 8000dba:	f5a3 23da 	sub.w	r3, r3, #446464	; 0x6d000
 8000dbe:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8000dc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bfd4      	ite	le
 8000dca:	2301      	movle	r3, #1
 8000dcc:	2300      	movgt	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	65bb      	str	r3, [r7, #88]	; 0x58
							int H43 = 988*dx0+157*dx1-354000;             H43 = H43<=0;
 8000dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dd6:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 8000dda:	fb02 f203 	mul.w	r2, r2, r3
 8000dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000de2:	219d      	movs	r1, #157	; 0x9d
 8000de4:	fb01 f303 	mul.w	r3, r1, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	f5a3 23ac 	sub.w	r3, r3, #352256	; 0x56000
 8000dee:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8000df2:	657b      	str	r3, [r7, #84]	; 0x54
 8000df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bfd4      	ite	le
 8000dfa:	2301      	movle	r3, #1
 8000dfc:	2300      	movgt	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	657b      	str	r3, [r7, #84]	; 0x54
							int H44 = -1000*dx0+10*dx1+300;               H43 = H43<=0;
 8000e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e06:	4a2d      	ldr	r2, [pc, #180]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x824>)
 8000e08:	fb02 f103 	mul.w	r1, r2, r3
 8000e0c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	440b      	add	r3, r1
 8000e1a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8000e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bfd4      	ite	le
 8000e26:	2301      	movle	r3, #1
 8000e28:	2300      	movgt	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	657b      	str	r3, [r7, #84]	; 0x54
							int H45 = -998*dx0-70*dx1+64300;              H45 = H45<=0;
 8000e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e32:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8000e34:	fb02 f203 	mul.w	r2, r2, r3
 8000e38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000e3c:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8000e40:	fb01 f303 	mul.w	r3, r1, r3
 8000e44:	4413      	add	r3, r2
 8000e46:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8000e4a:	332c      	adds	r3, #44	; 0x2c
 8000e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bfd4      	ite	le
 8000e54:	2301      	movle	r3, #1
 8000e56:	2300      	movgt	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
							int H46 = 1000*dx0-150000;                    H46 = H46<=0;
 8000e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e64:	fb02 f303 	mul.w	r3, r2, r3
 8000e68:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 8000e6c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000e70:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bfd4      	ite	le
 8000e78:	2301      	movle	r3, #1
 8000e7a:	2300      	movgt	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	64bb      	str	r3, [r7, #72]	; 0x48
							if(H41 && H42 && H43 && H44 && H45 && H46){
 8000e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d028      	beq.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x840>
 8000e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d025      	beq.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x840>
 8000e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d022      	beq.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x840>
 8000e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d01f      	beq.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x840>
 8000e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d01c      	beq.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x840>
 8000e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d019      	beq.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0x840>
								u = -338000;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8000ea8:	601a      	str	r2, [r3, #0]
								HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2/3.3*4095);
 8000eaa:	f640 13b1 	movw	r3, #2481	; 0x9b1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x834>)
 8000eb4:	f002 fa2e 	bl	8003314 <HAL_DAC_SetValue>
 8000eb8:	e025      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x86e>
 8000eba:	bf00      	nop
 8000ebc:	fffffc18 	.word	0xfffffc18
 8000ec0:	fffffec2 	.word	0xfffffec2
 8000ec4:	ffffe681 	.word	0xffffe681
 8000ec8:	200000a0 	.word	0x200000a0
 8000ecc:	200000b8 	.word	0x200000b8
 8000ed0:	fffffc1a 	.word	0xfffffc1a
 8000ed4:	fffad7b0 	.word	0xfffad7b0
								u = -4854*dx0; u += 53*dx1;
 8000ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000edc:	4a36      	ldr	r2, [pc, #216]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	4a36      	ldr	r2, [pc, #216]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x924>)
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000eea:	2235      	movs	r2, #53	; 0x35
 8000eec:	fb02 f203 	mul.w	r2, r2, r3
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x924>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a31      	ldr	r2, [pc, #196]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x924>)
 8000ef8:	6013      	str	r3, [r2, #0]
								HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000efa:	2300      	movs	r3, #0
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	482f      	ldr	r0, [pc, #188]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x928>)
 8000f02:	f002 fa07 	bl	8003314 <HAL_DAC_SetValue>
			int error = 5000-y[1];
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000f0e:	3308      	adds	r3, #8
 8000f10:	647b      	str	r3, [r7, #68]	; 0x44
			if(error<600){
 8000f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f14:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000f18:	da0f      	bge.n	8000f3a <HAL_TIM_PeriodElapsedCallback+0x8a2>
				integral += error;
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f20:	4413      	add	r3, r2
 8000f22:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8000f24:	6013      	str	r3, [r2, #0]
				u += 5*integral;
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	441a      	add	r2, r3
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x924>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x924>)
 8000f38:	6013      	str	r3, [r2, #0]
			int input = u*1599/1000000; input += 500;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x924>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f240 623f 	movw	r2, #1599	; 0x63f
 8000f42:	fb02 f303 	mul.w	r3, r2, r3
 8000f46:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x934>)
 8000f48:	fb82 1203 	smull	r1, r2, r2, r3
 8000f4c:	1492      	asrs	r2, r2, #18
 8000f4e:	17db      	asrs	r3, r3, #31
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f5a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			if(input < 0) input = 0;
 8000f62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	da02      	bge.n	8000f70 <HAL_TIM_PeriodElapsedCallback+0x8d8>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			if(input > 1599) input = 1599;
 8000f70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000f74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000f78:	db03      	blt.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x8ea>
 8000f7a:	f240 633f 	movw	r3, #1599	; 0x63f
 8000f7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			htim2.Instance->CCR2 = input;
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000f8a:	639a      	str	r2, [r3, #56]	; 0x38
			u /= 1000;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x924>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000f92:	fb82 1203 	smull	r1, r2, r2, r3
 8000f96:	1192      	asrs	r2, r2, #6
 8000f98:	17db      	asrs	r3, r3, #31
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x924>)
 8000f9e:	6013      	str	r3, [r2, #0]
			u += us;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x924>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f240 1257 	movw	r2, #343	; 0x157
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x924>)
 8000fac:	6013      	str	r3, [r2, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	37c0      	adds	r7, #192	; 0xc0
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	ffffed0a 	.word	0xffffed0a
 8000fbc:	200000a0 	.word	0x200000a0
 8000fc0:	200000b8 	.word	0x200000b8
 8000fc4:	2000022c 	.word	0x2000022c
 8000fc8:	200000a4 	.word	0x200000a4
 8000fcc:	431bde83 	.word	0x431bde83
 8000fd0:	20000234 	.word	0x20000234
 8000fd4:	10624dd3 	.word	0x10624dd3

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f000 fe6d 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 f881 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f000 fb23 	bl	8001630 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fea:	f000 fafb 	bl	80015e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fee:	f000 fac9 	bl	8001584 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ff2:	f000 f901 	bl	80011f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ff6:	f000 f979 	bl	80012ec <MX_ADC2_Init>
  MX_DAC1_Init();
 8000ffa:	f000 f9dd 	bl	80013b8 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000ffe:	f000 fa19 	bl	8001434 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001002:	f000 fa71 	bl	80014e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001006:	2100      	movs	r1, #0
 8001008:	482a      	ldr	r0, [pc, #168]	; (80010b4 <main+0xdc>)
 800100a:	f002 f936 	bl	800327a <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800100e:	2110      	movs	r1, #16
 8001010:	4828      	ldr	r0, [pc, #160]	; (80010b4 <main+0xdc>)
 8001012:	f002 f932 	bl	800327a <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf0, SIZE);
 8001016:	2207      	movs	r2, #7
 8001018:	4927      	ldr	r1, [pc, #156]	; (80010b8 <main+0xe0>)
 800101a:	4828      	ldr	r0, [pc, #160]	; (80010bc <main+0xe4>)
 800101c:	f001 fa04 	bl	8002428 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf1, SIZE);
 8001020:	2207      	movs	r2, #7
 8001022:	4927      	ldr	r1, [pc, #156]	; (80010c0 <main+0xe8>)
 8001024:	4827      	ldr	r0, [pc, #156]	; (80010c4 <main+0xec>)
 8001026:	f001 f9ff 	bl	8002428 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 800102a:	4827      	ldr	r0, [pc, #156]	; (80010c8 <main+0xf0>)
 800102c:	f004 f994 	bl	8005358 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001030:	2104      	movs	r1, #4
 8001032:	4826      	ldr	r0, [pc, #152]	; (80010cc <main+0xf4>)
 8001034:	f004 f9e6 	bl	8005404 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <main+0xf4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char msg[20];
  while (1)
  {
	  sprintf(msg, "x0 = %d ",y[0]);
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <main+0xf8>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4923      	ldr	r1, [pc, #140]	; (80010d4 <main+0xfc>)
 8001048:	4618      	mov	r0, r3
 800104a:	f006 f80b 	bl	8007064 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff f8bd 	bl	80001d0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	1d39      	adds	r1, r7, #4
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	481d      	ldr	r0, [pc, #116]	; (80010d8 <main+0x100>)
 8001062:	f005 fa65 	bl	8006530 <HAL_UART_Transmit>
	  sprintf(msg, "x1 = %d ",y[1]);
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <main+0xf8>)
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	491b      	ldr	r1, [pc, #108]	; (80010dc <main+0x104>)
 800106e:	4618      	mov	r0, r3
 8001070:	f005 fff8 	bl	8007064 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f8aa 	bl	80001d0 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	b29a      	uxth	r2, r3
 8001080:	1d39      	adds	r1, r7, #4
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	4814      	ldr	r0, [pc, #80]	; (80010d8 <main+0x100>)
 8001088:	f005 fa52 	bl	8006530 <HAL_UART_Transmit>
	  sprintf(msg, "u = %d\r\n",integral);
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <main+0x108>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4914      	ldr	r1, [pc, #80]	; (80010e4 <main+0x10c>)
 8001094:	4618      	mov	r0, r3
 8001096:	f005 ffe5 	bl	8007064 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff f897 	bl	80001d0 <strlen>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	1d39      	adds	r1, r7, #4
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	480a      	ldr	r0, [pc, #40]	; (80010d8 <main+0x100>)
 80010ae:	f005 fa3f 	bl	8006530 <HAL_UART_Transmit>
	  sprintf(msg, "x0 = %d ",y[0]);
 80010b2:	e7c5      	b.n	8001040 <main+0x68>
 80010b4:	200000b8 	.word	0x200000b8
 80010b8:	2000033c 	.word	0x2000033c
 80010bc:	200000cc 	.word	0x200000cc
 80010c0:	20000170 	.word	0x20000170
 80010c4:	20000180 	.word	0x20000180
 80010c8:	20000130 	.word	0x20000130
 80010cc:	20000234 	.word	0x20000234
 80010d0:	2000022c 	.word	0x2000022c
 80010d4:	08007888 	.word	0x08007888
 80010d8:	20000274 	.word	0x20000274
 80010dc:	08007894 	.word	0x08007894
 80010e0:	200000a4 	.word	0x200000a4
 80010e4:	080078a0 	.word	0x080078a0

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b0b8      	sub	sp, #224	; 0xe0
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f2:	2244      	movs	r2, #68	; 0x44
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f005 ffac 	bl	8007054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2288      	movs	r2, #136	; 0x88
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f005 ff9e 	bl	8007054 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001122:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001126:	2310      	movs	r3, #16
 8001128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800113e:	230a      	movs	r3, #10
 8001140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001144:	2307      	movs	r3, #7
 8001146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fe36 	bl	8003dcc <HAL_RCC_OscConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001166:	f000 facd 	bl	8001704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116a:	230f      	movs	r3, #15
 800116c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2303      	movs	r3, #3
 8001172:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001188:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800118c:	2104      	movs	r1, #4
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fa02 	bl	8004598 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800119a:	f000 fab3 	bl	8001704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800119e:	f244 0302 	movw	r3, #16386	; 0x4002
 80011a2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011ac:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011ae:	2302      	movs	r3, #2
 80011b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011b6:	2308      	movs	r3, #8
 80011b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011ba:	2307      	movs	r3, #7
 80011bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011be:	2302      	movs	r3, #2
 80011c0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ca:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fbe6 	bl	80049a0 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80011da:	f000 fa93 	bl	8001704 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011e2:	f002 fd9d 	bl	8003d20 <HAL_PWREx_ControlVoltageScaling>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80011ec:	f000 fa8a 	bl	8001704 <Error_Handler>
  }
}
 80011f0:	bf00      	nop
 80011f2:	37e0      	adds	r7, #224	; 0xe0
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <MX_ADC1_Init+0xe8>)
 800121c:	4a31      	ldr	r2, [pc, #196]	; (80012e4 <MX_ADC1_Init+0xec>)
 800121e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <MX_ADC1_Init+0xe8>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <MX_ADC1_Init+0xe8>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122c:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <MX_ADC1_Init+0xe8>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <MX_ADC1_Init+0xe8>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001238:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MX_ADC1_Init+0xe8>)
 800123a:	2204      	movs	r2, #4
 800123c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <MX_ADC1_Init+0xe8>)
 8001240:	2200      	movs	r2, #0
 8001242:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <MX_ADC1_Init+0xe8>)
 8001246:	2201      	movs	r2, #1
 8001248:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <MX_ADC1_Init+0xe8>)
 800124c:	2201      	movs	r2, #1
 800124e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <MX_ADC1_Init+0xe8>)
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_ADC1_Init+0xe8>)
 800125a:	2201      	movs	r2, #1
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MX_ADC1_Init+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_ADC1_Init+0xe8>)
 8001266:	2200      	movs	r2, #0
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_ADC1_Init+0xe8>)
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_ADC1_Init+0xe8>)
 8001274:	2200      	movs	r2, #0
 8001276:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_ADC1_Init+0xe8>)
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001280:	4817      	ldr	r0, [pc, #92]	; (80012e0 <MX_ADC1_Init+0xe8>)
 8001282:	f000 ff7d 	bl	8002180 <HAL_ADC_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800128c:	f000 fa3a 	bl	8001704 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <MX_ADC1_Init+0xe8>)
 800129c:	f001 fe0e 	bl	8002ebc <HAL_ADCEx_MultiModeConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012a6:	f000 fa2d 	bl	8001704 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_ADC1_Init+0xf0>)
 80012ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ae:	2306      	movs	r3, #6
 80012b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80012b2:	2305      	movs	r3, #5
 80012b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b6:	237f      	movs	r3, #127	; 0x7f
 80012b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012ba:	2304      	movs	r3, #4
 80012bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_ADC1_Init+0xe8>)
 80012c8:	f001 f980 	bl	80025cc <HAL_ADC_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80012d2:	f000 fa17 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000180 	.word	0x20000180
 80012e4:	50040000 	.word	0x50040000
 80012e8:	14f00020 	.word	0x14f00020

080012ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001304:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <MX_ADC2_Init+0xc4>)
 8001306:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <MX_ADC2_Init+0xc0>)
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001314:	4b25      	ldr	r3, [pc, #148]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <MX_ADC2_Init+0xc0>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001322:	2204      	movs	r2, #4
 8001324:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001328:	2200      	movs	r2, #0
 800132a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_ADC2_Init+0xc0>)
 800132e:	2201      	movs	r2, #1
 8001330:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001334:	2201      	movs	r2, #1
 8001336:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_ADC2_Init+0xc0>)
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001342:	2201      	movs	r2, #1
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001348:	2200      	movs	r2, #0
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_ADC2_Init+0xc0>)
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_ADC2_Init+0xc0>)
 800135c:	2200      	movs	r2, #0
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001368:	4810      	ldr	r0, [pc, #64]	; (80013ac <MX_ADC2_Init+0xc0>)
 800136a:	f000 ff09 	bl	8002180 <HAL_ADC_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8001374:	f000 f9c6 	bl	8001704 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_ADC2_Init+0xc8>)
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137c:	2306      	movs	r3, #6
 800137e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001380:	2305      	movs	r3, #5
 8001382:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001384:	237f      	movs	r3, #127	; 0x7f
 8001386:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001388:	2304      	movs	r3, #4
 800138a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_ADC2_Init+0xc0>)
 8001396:	f001 f919 	bl	80025cc <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80013a0:	f000 f9b0 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200000cc 	.word	0x200000cc
 80013b0:	50040100 	.word	0x50040100
 80013b4:	19200040 	.word	0x19200040

080013b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2224      	movs	r2, #36	; 0x24
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f005 fe45 	bl	8007054 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_DAC1_Init+0x74>)
 80013cc:	4a18      	ldr	r2, [pc, #96]	; (8001430 <MX_DAC1_Init+0x78>)
 80013ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013d0:	4816      	ldr	r0, [pc, #88]	; (800142c <MX_DAC1_Init+0x74>)
 80013d2:	f001 ff30 	bl	8003236 <HAL_DAC_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013dc:	f000 f992 	bl	8001704 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_DAC1_Init+0x74>)
 80013fc:	f001 ffaf 	bl	800335e <HAL_DAC_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001406:	f000 f97d 	bl	8001704 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2210      	movs	r2, #16
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_DAC1_Init+0x74>)
 8001416:	f001 ffa2 	bl	800335e <HAL_DAC_ConfigChannel>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001420:	f000 f970 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200000b8 	.word	0x200000b8
 8001430:	40007400 	.word	0x40007400

08001434 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	463b      	mov	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <MX_TIM2_Init+0xb0>)
 800145a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <MX_TIM2_Init+0xb0>)
 8001462:	2200      	movs	r2, #0
 8001464:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_TIM2_Init+0xb0>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_TIM2_Init+0xb0>)
 800146e:	f240 623f 	movw	r2, #1599	; 0x63f
 8001472:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_TIM2_Init+0xb0>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_TIM2_Init+0xb0>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001480:	4818      	ldr	r0, [pc, #96]	; (80014e4 <MX_TIM2_Init+0xb0>)
 8001482:	f003 ff93 	bl	80053ac <HAL_TIM_PWM_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800148c:	f000 f93a 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4811      	ldr	r0, [pc, #68]	; (80014e4 <MX_TIM2_Init+0xb0>)
 80014a0:	f004 ff52 	bl	8006348 <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80014aa:	f000 f92b 	bl	8001704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ae:	2360      	movs	r3, #96	; 0x60
 80014b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	2204      	movs	r2, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <MX_TIM2_Init+0xb0>)
 80014c6:	f004 f915 	bl	80056f4 <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014d0:	f000 f918 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <MX_TIM2_Init+0xb0>)
 80014d6:	f000 faa1 	bl	8001a1c <HAL_TIM_MspPostInit>

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000234 	.word	0x20000234

080014e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_TIM3_Init+0x94>)
 8001508:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <MX_TIM3_Init+0x98>)
 800150a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_TIM3_Init+0x94>)
 800150e:	224f      	movs	r2, #79	; 0x4f
 8001510:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_TIM3_Init+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_TIM3_Init+0x94>)
 800151a:	2263      	movs	r2, #99	; 0x63
 800151c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_TIM3_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_TIM3_Init+0x94>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800152a:	4814      	ldr	r0, [pc, #80]	; (800157c <MX_TIM3_Init+0x94>)
 800152c:	f003 fee8 	bl	8005300 <HAL_TIM_Base_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001536:	f000 f8e5 	bl	8001704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4619      	mov	r1, r3
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_TIM3_Init+0x94>)
 8001548:	f004 f9ec 	bl	8005924 <HAL_TIM_ConfigClockSource>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001552:	f000 f8d7 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_TIM3_Init+0x94>)
 8001564:	f004 fef0 	bl	8006348 <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800156e:	f000 f8c9 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000130 	.word	0x20000130
 8001580:	40000400 	.word	0x40000400

08001584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_USART2_UART_Init+0x58>)
 800158a:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <MX_USART2_UART_Init+0x5c>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_USART2_UART_Init+0x58>)
 8001590:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_USART2_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015c8:	f004 ff64 	bl	8006494 <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015d2:	f000 f897 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000274 	.word	0x20000274
 80015e0:	40004400 	.word	0x40004400

080015e4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_DMA_Init+0x48>)
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <MX_DMA_Init+0x48>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6493      	str	r3, [r2, #72]	; 0x48
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <MX_DMA_Init+0x48>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	200b      	movs	r0, #11
 8001608:	f001 fddf 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800160c:	200b      	movs	r0, #11
 800160e:	f001 fdf8 	bl	8003202 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200c      	movs	r0, #12
 8001618:	f001 fdd7 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800161c:	200c      	movs	r0, #12
 800161e:	f001 fdf0 	bl	8003202 <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <MX_GPIO_Init+0xc8>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4a2b      	ldr	r2, [pc, #172]	; (80016f8 <MX_GPIO_Init+0xc8>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <MX_GPIO_Init+0xc8>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <MX_GPIO_Init+0xc8>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4a25      	ldr	r2, [pc, #148]	; (80016f8 <MX_GPIO_Init+0xc8>)
 8001664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <MX_GPIO_Init+0xc8>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <MX_GPIO_Init+0xc8>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <MX_GPIO_Init+0xc8>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_GPIO_Init+0xc8>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_GPIO_Init+0xc8>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <MX_GPIO_Init+0xc8>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_GPIO_Init+0xc8>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f002 fb10 	bl	8003cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <MX_GPIO_Init+0xcc>)
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_GPIO_Init+0xd0>)
 80016ca:	f002 f95b 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ea:	f002 f94b 	bl	8003984 <HAL_GPIO_Init>

}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	10210000 	.word	0x10210000
 8001700:	48000800 	.word	0x48000800

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_MspInit+0x44>)
 800171c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_MspInit+0x44>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6613      	str	r3, [r2, #96]	; 0x60
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_MspInit+0x44>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_MspInit+0x44>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_MspInit+0x44>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6593      	str	r3, [r2, #88]	; 0x58
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_MspInit+0x44>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a5f      	ldr	r2, [pc, #380]	; (80018f8 <HAL_ADC_MspInit+0x19c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d159      	bne.n	8001832 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800177e:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <HAL_ADC_MspInit+0x1a0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	4a5d      	ldr	r2, [pc, #372]	; (80018fc <HAL_ADC_MspInit+0x1a0>)
 8001786:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001788:	4b5c      	ldr	r3, [pc, #368]	; (80018fc <HAL_ADC_MspInit+0x1a0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d10b      	bne.n	80017a8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001790:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 8001796:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800179a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179c:	4b58      	ldr	r3, [pc, #352]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	4b55      	ldr	r3, [pc, #340]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ac:	4a54      	ldr	r2, [pc, #336]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b4:	4b52      	ldr	r3, [pc, #328]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017c4:	230b      	movs	r3, #11
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d6:	f002 f8d5 	bl	8003984 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80017da:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 80017dc:	4a4a      	ldr	r2, [pc, #296]	; (8001908 <HAL_ADC_MspInit+0x1ac>)
 80017de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80017e0:	4b48      	ldr	r3, [pc, #288]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ec:	4b45      	ldr	r3, [pc, #276]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017f8:	4b42      	ldr	r3, [pc, #264]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 80017fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001800:	4b40      	ldr	r3, [pc, #256]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 8001802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001806:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001808:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 800180a:	2220      	movs	r2, #32
 800180c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001814:	483b      	ldr	r0, [pc, #236]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 8001816:	f001 febd 	bl	8003594 <HAL_DMA_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001820:	f7ff ff70 	bl	8001704 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a37      	ldr	r2, [pc, #220]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 8001828:	64da      	str	r2, [r3, #76]	; 0x4c
 800182a:	4a36      	ldr	r2, [pc, #216]	; (8001904 <HAL_ADC_MspInit+0x1a8>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001830:	e05d      	b.n	80018ee <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a35      	ldr	r2, [pc, #212]	; (800190c <HAL_ADC_MspInit+0x1b0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d158      	bne.n	80018ee <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_ADC_MspInit+0x1a0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	4a2e      	ldr	r2, [pc, #184]	; (80018fc <HAL_ADC_MspInit+0x1a0>)
 8001844:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_ADC_MspInit+0x1a0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d10b      	bne.n	8001866 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a2b      	ldr	r2, [pc, #172]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 8001854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b29      	ldr	r3, [pc, #164]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	4a25      	ldr	r2, [pc, #148]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_ADC_MspInit+0x1a4>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800187e:	2302      	movs	r3, #2
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001882:	230b      	movs	r3, #11
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f002 f876 	bl	8003984 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <HAL_ADC_MspInit+0x1b8>)
 800189c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 80018b2:	2280      	movs	r2, #128	; 0x80
 80018b4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 80018b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018bc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 80018c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 80018c8:	2220      	movs	r2, #32
 80018ca:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80018d2:	480f      	ldr	r0, [pc, #60]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 80018d4:	f001 fe5e 	bl	8003594 <HAL_DMA_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_ADC_MspInit+0x186>
      Error_Handler();
 80018de:	f7ff ff11 	bl	8001704 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 80018e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80018e8:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_ADC_MspInit+0x1b4>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6293      	str	r3, [r2, #40]	; 0x28
}
 80018ee:	bf00      	nop
 80018f0:	3730      	adds	r7, #48	; 0x30
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	50040000 	.word	0x50040000
 80018fc:	200000a8 	.word	0x200000a8
 8001900:	40021000 	.word	0x40021000
 8001904:	200001e4 	.word	0x200001e4
 8001908:	40020008 	.word	0x40020008
 800190c:	50040100 	.word	0x50040100
 8001910:	200002f4 	.word	0x200002f4
 8001914:	4002001c 	.word	0x4002001c

08001918 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a15      	ldr	r2, [pc, #84]	; (800198c <HAL_DAC_MspInit+0x74>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d124      	bne.n	8001984 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_DAC_MspInit+0x78>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	4a14      	ldr	r2, [pc, #80]	; (8001990 <HAL_DAC_MspInit+0x78>)
 8001940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001944:	6593      	str	r3, [r2, #88]	; 0x58
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_DAC_MspInit+0x78>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_DAC_MspInit+0x78>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <HAL_DAC_MspInit+0x78>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_DAC_MspInit+0x78>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800196a:	2330      	movs	r3, #48	; 0x30
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196e:	2303      	movs	r3, #3
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f002 f800 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001984:	bf00      	nop
 8001986:	3728      	adds	r7, #40	; 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40007400 	.word	0x40007400
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a4:	d10b      	bne.n	80019be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_TIM_PWM_MspInit+0x38>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	4a08      	ldr	r2, [pc, #32]	; (80019cc <HAL_TIM_PWM_MspInit+0x38>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6593      	str	r3, [r2, #88]	; 0x58
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_TIM_PWM_MspInit+0x38>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_TIM_Base_MspInit+0x44>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d113      	bne.n	8001a0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_TIM_Base_MspInit+0x48>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <HAL_TIM_Base_MspInit+0x48>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	6593      	str	r3, [r2, #88]	; 0x58
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_TIM_Base_MspInit+0x48>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	201d      	movs	r0, #29
 8001a00:	f001 fbe3 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a04:	201d      	movs	r0, #29
 8001a06:	f001 fbfc 	bl	8003202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40000400 	.word	0x40000400
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3c:	d11b      	bne.n	8001a76 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_TIM_MspPostInit+0x64>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <HAL_TIM_MspPostInit+0x64>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <HAL_TIM_MspPostInit+0x64>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a56:	2308      	movs	r3, #8
 8001a58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	f107 030c 	add.w	r3, r7, #12
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <HAL_TIM_MspPostInit+0x68>)
 8001a72:	f001 ff87 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a76:	bf00      	nop
 8001a78:	3720      	adds	r7, #32
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000400 	.word	0x48000400

08001a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <HAL_UART_MspInit+0x7c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d128      	bne.n	8001afc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_UART_MspInit+0x80>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	4a16      	ldr	r2, [pc, #88]	; (8001b08 <HAL_UART_MspInit+0x80>)
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_UART_MspInit+0x80>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_UART_MspInit+0x80>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <HAL_UART_MspInit+0x80>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_UART_MspInit+0x80>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ada:	230c      	movs	r3, #12
 8001adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aea:	2307      	movs	r3, #7
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f001 ff44 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40004400 	.word	0x40004400
 8001b08:	40021000 	.word	0x40021000

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b60:	f000 f906 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <DMA1_Channel1_IRQHandler+0x10>)
 8001b6e:	f001 fe29 	bl	80037c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200001e4 	.word	0x200001e4

08001b7c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <DMA1_Channel2_IRQHandler+0x10>)
 8001b82:	f001 fe1f 	bl	80037c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200002f4 	.word	0x200002f4

08001b90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <TIM3_IRQHandler+0x10>)
 8001b96:	f003 fc8d 	bl	80054b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000130 	.word	0x20000130

08001ba4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <_sbrk+0x50>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <_sbrk+0x16>
		heap_end = &end;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <_sbrk+0x50>)
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <_sbrk+0x54>)
 8001bb8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <_sbrk+0x50>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <_sbrk+0x50>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	466a      	mov	r2, sp
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d907      	bls.n	8001bde <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001bce:	f005 fa17 	bl	8007000 <__errno>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	230c      	movs	r3, #12
 8001bd6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bdc:	e006      	b.n	8001bec <_sbrk+0x48>
	}

	heap_end += incr;
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <_sbrk+0x50>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <_sbrk+0x50>)
 8001be8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200000ac 	.word	0x200000ac
 8001bf8:	20000358 	.word	0x20000358

08001bfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <SystemInit+0x64>)
 8001c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c06:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <SystemInit+0x64>)
 8001c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <SystemInit+0x68>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <SystemInit+0x68>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <SystemInit+0x68>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <SystemInit+0x68>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <SystemInit+0x68>)
 8001c28:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c2c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <SystemInit+0x68>)
 8001c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c38:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <SystemInit+0x68>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <SystemInit+0x68>)
 8001c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c44:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <SystemInit+0x68>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SystemInit+0x64>)
 8001c4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c52:	609a      	str	r2, [r3, #8]
#endif
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00
 8001c64:	40021000 	.word	0x40021000

08001c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c6e:	e003      	b.n	8001c78 <LoopCopyDataInit>

08001c70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c76:	3104      	adds	r1, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c78:	480b      	ldr	r0, [pc, #44]	; (8001ca8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c80:	d3f6      	bcc.n	8001c70 <CopyDataInit>
	ldr	r2, =_sbss
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c84:	e002      	b.n	8001c8c <LoopFillZerobss>

08001c86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c88:	f842 3b04 	str.w	r3, [r2], #4

08001c8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <LoopForever+0x16>)
	cmp	r2, r3
 8001c8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c90:	d3f9      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c92:	f7ff ffb3 	bl	8001bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c96:	f005 f9b9 	bl	800700c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c9a:	f7ff f99d 	bl	8000fd8 <main>

08001c9e <LoopForever>:

LoopForever:
    b LoopForever
 8001c9e:	e7fe      	b.n	8001c9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ca0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ca4:	08007938 	.word	0x08007938
	ldr	r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cac:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001cb0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001cb4:	20000354 	.word	0x20000354

08001cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_2_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_Init+0x3c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_Init+0x3c>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f001 fa6e 	bl	80031b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f000 f80f 	bl	8001cfc <HAL_InitTick>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	e001      	b.n	8001cee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cea:	f7ff fd13 	bl	8001714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cee:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40022000 	.word	0x40022000

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_InitTick+0x68>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d022      	beq.n	8001d56 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_InitTick+0x6c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_InitTick+0x68>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 fa7a 	bl	800321e <HAL_SYSTICK_Config>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10f      	bne.n	8001d50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	d809      	bhi.n	8001d4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d36:	2200      	movs	r2, #0
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3e:	f001 fa44 	bl	80031ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_InitTick+0x70>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	e007      	b.n	8001d5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e004      	b.n	8001d5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
 8001d54:	e001      	b.n	8001d5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_IncTick+0x1c>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_IncTick+0x20>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <HAL_IncTick+0x1c>)
 8001d80:	6013      	str	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	2000034c 	.word	0x2000034c
 8001d90:	20000008 	.word	0x20000008

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_GetTick+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	2000034c 	.word	0x2000034c

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff ffee 	bl	8001d94 <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d004      	beq.n	8001dd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_Delay+0x40>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd0:	bf00      	nop
 8001dd2:	f7ff ffdf 	bl	8001d94 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d8f7      	bhi.n	8001dd2 <HAL_Delay+0x26>
  {
  }
}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008

08001df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	609a      	str	r2, [r3, #8]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e58:	b490      	push	{r4, r7}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3360      	adds	r3, #96	; 0x60
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e74:	6822      	ldr	r2, [r4, #0]
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <LL_ADC_SetOffset+0x40>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e8a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc90      	pop	{r4, r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	03fff000 	.word	0x03fff000

08001e9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e9c:	b490      	push	{r4, r7}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3360      	adds	r3, #96	; 0x60
 8001eaa:	461a      	mov	r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc90      	pop	{r4, r7}
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ec4:	b490      	push	{r4, r7}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3360      	adds	r3, #96	; 0x60
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc90      	pop	{r4, r7}
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f1a:	b490      	push	{r4, r7}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3330      	adds	r3, #48	; 0x30
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	4413      	add	r3, r2
 8001f38:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f3a:	6822      	ldr	r2, [r4, #0]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	211f      	movs	r1, #31
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	f003 011f 	and.w	r1, r3, #31
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc90      	pop	{r4, r7}
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f6c:	b490      	push	{r4, r7}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3314      	adds	r3, #20
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	0e5b      	lsrs	r3, r3, #25
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	4413      	add	r3, r2
 8001f8a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f8c:	6822      	ldr	r2, [r4, #0]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	0d1b      	lsrs	r3, r3, #20
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2107      	movs	r1, #7
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	0d1b      	lsrs	r3, r3, #20
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc90      	pop	{r4, r7}
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f003 0318 	and.w	r3, r3, #24
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fe0:	40d9      	lsrs	r1, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	400b      	ands	r3, r1
 8001fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fea:	431a      	orrs	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	0007ffff 	.word	0x0007ffff

08002004 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 031f 	and.w	r3, r3, #31
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6093      	str	r3, [r2, #8]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800207c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002080:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020a8:	d101      	bne.n	80020ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <LL_ADC_IsEnabled+0x18>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <LL_ADC_IsEnabled+0x1a>
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800211a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800211e:	f043 0204 	orr.w	r2, r3, #4
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d101      	bne.n	800214a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b08      	cmp	r3, #8
 800216a:	d101      	bne.n	8002170 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e134      	b.n	8002404 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fad7 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff3f 	bl	8002044 <LL_ADC_IsDeepPowerDownEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff25 	bl	8002020 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff5a 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d113      	bne.n	800220e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff3e 	bl	800206c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021f0:	4b86      	ldr	r3, [pc, #536]	; (800240c <HAL_ADC_Init+0x28c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	4a86      	ldr	r2, [pc, #536]	; (8002410 <HAL_ADC_Init+0x290>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	099b      	lsrs	r3, r3, #6
 80021fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002200:	e002      	b.n	8002208 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff3e 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10d      	bne.n	800223a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff77 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002244:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 80cf 	bne.w	80023f2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 80cb 	bne.w	80023f2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002264:	f043 0202 	orr.w	r2, r3, #2
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff37 	bl	80020e4 <LL_ADC_IsEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d115      	bne.n	80022a8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800227c:	4865      	ldr	r0, [pc, #404]	; (8002414 <HAL_ADC_Init+0x294>)
 800227e:	f7ff ff31 	bl	80020e4 <LL_ADC_IsEnabled>
 8002282:	4604      	mov	r4, r0
 8002284:	4864      	ldr	r0, [pc, #400]	; (8002418 <HAL_ADC_Init+0x298>)
 8002286:	f7ff ff2d 	bl	80020e4 <LL_ADC_IsEnabled>
 800228a:	4603      	mov	r3, r0
 800228c:	431c      	orrs	r4, r3
 800228e:	4863      	ldr	r0, [pc, #396]	; (800241c <HAL_ADC_Init+0x29c>)
 8002290:	f7ff ff28 	bl	80020e4 <LL_ADC_IsEnabled>
 8002294:	4603      	mov	r3, r0
 8002296:	4323      	orrs	r3, r4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4619      	mov	r1, r3
 80022a2:	485f      	ldr	r0, [pc, #380]	; (8002420 <HAL_ADC_Init+0x2a0>)
 80022a4:	f7ff fda4 	bl	8001df0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7e5b      	ldrb	r3, [r3, #25]
 80022ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d106      	bne.n	80022e4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	3b01      	subs	r3, #1
 80022dc:	045b      	lsls	r3, r3, #17
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d009      	beq.n	8002300 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_ADC_Init+0x2a4>)
 8002308:	4013      	ands	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	430b      	orrs	r3, r1
 8002312:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff0a 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 800231e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff17 	bl	8002158 <LL_ADC_INJ_IsConversionOngoing>
 800232a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d13d      	bne.n	80023ae <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d13a      	bne.n	80023ae <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800233c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002344:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002354:	f023 0302 	bic.w	r3, r3, #2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	69b9      	ldr	r1, [r7, #24]
 800235e:	430b      	orrs	r3, r1
 8002360:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002368:	2b01      	cmp	r3, #1
 800236a:	d118      	bne.n	800239e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002376:	f023 0304 	bic.w	r3, r3, #4
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002382:	4311      	orrs	r1, r2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002388:	4311      	orrs	r1, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800238e:	430a      	orrs	r2, r1
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	611a      	str	r2, [r3, #16]
 800239c:	e007      	b.n	80023ae <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d10c      	bne.n	80023d0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	f023 010f 	bic.w	r1, r3, #15
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	1e5a      	subs	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
 80023ce:	e007      	b.n	80023e0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 020f 	bic.w	r2, r2, #15
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	f023 0303 	bic.w	r3, r3, #3
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
 80023f0:	e007      	b.n	8002402 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f043 0210 	orr.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002402:	7ffb      	ldrb	r3, [r7, #31]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3724      	adds	r7, #36	; 0x24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}
 800240c:	20000000 	.word	0x20000000
 8002410:	053e2d63 	.word	0x053e2d63
 8002414:	50040000 	.word	0x50040000
 8002418:	50040100 	.word	0x50040100
 800241c:	50040200 	.word	0x50040200
 8002420:	50040300 	.word	0x50040300
 8002424:	fff0c007 	.word	0xfff0c007

08002428 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002434:	4850      	ldr	r0, [pc, #320]	; (8002578 <HAL_ADC_Start_DMA+0x150>)
 8002436:	f7ff fde5 	bl	8002004 <LL_ADC_GetMultimode>
 800243a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fe76 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 808e 	bne.w	800256a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_ADC_Start_DMA+0x34>
 8002458:	2302      	movs	r3, #2
 800245a:	e089      	b.n	8002570 <HAL_ADC_Start_DMA+0x148>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d002      	beq.n	8002476 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b09      	cmp	r3, #9
 8002474:	d172      	bne.n	800255c <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fc0c 	bl	8002c94 <ADC_Enable>
 800247c:	4603      	mov	r3, r0
 800247e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d165      	bne.n	8002552 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a37      	ldr	r2, [pc, #220]	; (800257c <HAL_ADC_Start_DMA+0x154>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d002      	beq.n	80024aa <HAL_ADC_Start_DMA+0x82>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	e000      	b.n	80024ac <HAL_ADC_Start_DMA+0x84>
 80024aa:	4b35      	ldr	r3, [pc, #212]	; (8002580 <HAL_ADC_Start_DMA+0x158>)
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d002      	beq.n	80024ba <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f023 0206 	bic.w	r2, r3, #6
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	659a      	str	r2, [r3, #88]	; 0x58
 80024de:	e002      	b.n	80024e6 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a26      	ldr	r2, [pc, #152]	; (8002584 <HAL_ADC_Start_DMA+0x15c>)
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	4a25      	ldr	r2, [pc, #148]	; (8002588 <HAL_ADC_Start_DMA+0x160>)
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a24      	ldr	r2, [pc, #144]	; (800258c <HAL_ADC_Start_DMA+0x164>)
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	221c      	movs	r2, #28
 8002504:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0210 	orr.w	r2, r2, #16
 800251c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3340      	adds	r3, #64	; 0x40
 8002538:	4619      	mov	r1, r3
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f001 f8e1 	bl	8003704 <HAL_DMA_Start_IT>
 8002542:	4603      	mov	r3, r0
 8002544:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fddd 	bl	800210a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002550:	e00d      	b.n	800256e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800255a:	e008      	b.n	800256e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002568:	e001      	b.n	800256e <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800256a:	2302      	movs	r3, #2
 800256c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800256e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	50040300 	.word	0x50040300
 800257c:	50040100 	.word	0x50040100
 8002580:	50040000 	.word	0x50040000
 8002584:	08002d49 	.word	0x08002d49
 8002588:	08002e21 	.word	0x08002e21
 800258c:	08002e3d 	.word	0x08002e3d

08002590 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b0a6      	sub	sp, #152	; 0x98
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x22>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e348      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x6b4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fd99 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 8329 	bne.w	8002c5a <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d824      	bhi.n	800265a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	3b02      	subs	r3, #2
 8002616:	2b03      	cmp	r3, #3
 8002618:	d81b      	bhi.n	8002652 <HAL_ADC_ConfigChannel+0x86>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <HAL_ADC_ConfigChannel+0x54>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002631 	.word	0x08002631
 8002624:	08002639 	.word	0x08002639
 8002628:	08002641 	.word	0x08002641
 800262c:	08002649 	.word	0x08002649
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	220c      	movs	r2, #12
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	e011      	b.n	800265c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2212      	movs	r2, #18
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	e00d      	b.n	800265c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2218      	movs	r2, #24
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	e009      	b.n	800265c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	e004      	b.n	800265c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2206      	movs	r2, #6
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	e000      	b.n	800265c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800265a:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	f7ff fc56 	bl	8001f1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fd5d 	bl	8002132 <LL_ADC_REG_IsConversionOngoing>
 8002678:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fd69 	bl	8002158 <LL_ADC_INJ_IsConversionOngoing>
 8002686:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800268a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 8148 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002694:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 8143 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f7ff fc5e 	bl	8001f6c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	08db      	lsrs	r3, r3, #3
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d00a      	beq.n	80026e8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	6919      	ldr	r1, [r3, #16]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026e2:	f7ff fbb9 	bl	8001e58 <LL_ADC_SetOffset>
 80026e6:	e11d      	b.n	8002924 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fbd4 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x148>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fbc9 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 800270a:	4603      	mov	r3, r0
 800270c:	0e9b      	lsrs	r3, r3, #26
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	e012      	b.n	800273a <HAL_ADC_ConfigChannel+0x16e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fbbe 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002730:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x186>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	e00a      	b.n	8002768 <HAL_ADC_ConfigChannel+0x19c>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	429a      	cmp	r2, r3
 800276a:	d106      	bne.n	800277a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fba5 	bl	8001ec4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2101      	movs	r1, #1
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fb8b 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x1da>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fb80 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	e010      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x1fc>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fb75 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x214>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	e00a      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x22a>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80027ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d106      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	2101      	movs	r1, #1
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fb5e 	bl	8001ec4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2102      	movs	r1, #2
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fb44 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x268>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2102      	movs	r1, #2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fb39 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	f003 021f 	and.w	r2, r3, #31
 8002832:	e010      	b.n	8002856 <HAL_ADC_ConfigChannel+0x28a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2102      	movs	r1, #2
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fb2e 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800284c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_ADC_ConfigChannel+0x2a2>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	e00a      	b.n	8002884 <HAL_ADC_ConfigChannel+0x2b8>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800287c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	429a      	cmp	r2, r3
 8002886:	d106      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2200      	movs	r2, #0
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fb17 	bl	8001ec4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2103      	movs	r1, #3
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fafd 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x2f6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2103      	movs	r1, #3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff faf2 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	e010      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x318>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2103      	movs	r1, #3
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fae7 	bl	8001e9c <LL_ADC_GetOffsetChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x330>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0e9b      	lsrs	r3, r3, #26
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	e00a      	b.n	8002912 <HAL_ADC_ConfigChannel+0x346>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800290a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	429a      	cmp	r2, r3
 8002914:	d106      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	2103      	movs	r1, #3
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fad0 	bl	8001ec4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fbdb 	bl	80020e4 <LL_ADC_IsEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 810c 	bne.w	8002b4e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6819      	ldr	r1, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	461a      	mov	r2, r3
 8002944:	f7ff fb3a 	bl	8001fbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4aad      	ldr	r2, [pc, #692]	; (8002c04 <HAL_ADC_ConfigChannel+0x638>)
 800294e:	4293      	cmp	r3, r2
 8002950:	f040 80fd 	bne.w	8002b4e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_ADC_ConfigChannel+0x3b0>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	3301      	adds	r3, #1
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	2b09      	cmp	r3, #9
 8002972:	bf94      	ite	ls
 8002974:	2301      	movls	r3, #1
 8002976:	2300      	movhi	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	e012      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x3d6>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800298a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3301      	adds	r3, #1
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2b09      	cmp	r3, #9
 800299a:	bf94      	ite	ls
 800299c:	2301      	movls	r3, #1
 800299e:	2300      	movhi	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d064      	beq.n	8002a70 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d107      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x3f6>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	3301      	adds	r3, #1
 80029ba:	069b      	lsls	r3, r3, #26
 80029bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c0:	e00e      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x414>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	069b      	lsls	r3, r3, #26
 80029dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x434>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	3301      	adds	r3, #1
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	e010      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x456>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	ea42 0103 	orr.w	r1, r2, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x47c>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f003 021f 	and.w	r2, r3, #31
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	051b      	lsls	r3, r3, #20
 8002a46:	e011      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x4a0>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	e069      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d107      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x4c0>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0e9b      	lsrs	r3, r3, #26
 8002a82:	3301      	adds	r3, #1
 8002a84:	069b      	lsls	r3, r3, #26
 8002a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a8a:	e00e      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x4de>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	61fb      	str	r3, [r7, #28]
  return result;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	069b      	lsls	r3, r3, #26
 8002aa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x4fe>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	0e9b      	lsrs	r3, r3, #26
 8002abc:	3301      	adds	r3, #1
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	e010      	b.n	8002aec <HAL_ADC_ConfigChannel+0x520>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	617b      	str	r3, [r7, #20]
  return result;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	ea42 0103 	orr.w	r1, r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10d      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x54c>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3b1e      	subs	r3, #30
 8002b10:	051b      	lsls	r3, r3, #20
 8002b12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b16:	e014      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x576>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	60fb      	str	r3, [r7, #12]
  return result;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	3b1e      	subs	r3, #30
 8002b3c:	051b      	lsls	r3, r3, #20
 8002b3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b42:	430b      	orrs	r3, r1
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	6892      	ldr	r2, [r2, #8]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7ff fa0f 	bl	8001f6c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <HAL_ADC_ConfigChannel+0x63c>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 808c 	beq.w	8002c74 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b5c:	482b      	ldr	r0, [pc, #172]	; (8002c0c <HAL_ADC_ConfigChannel+0x640>)
 8002b5e:	f7ff f96d 	bl	8001e3c <LL_ADC_GetCommonPathInternalCh>
 8002b62:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <HAL_ADC_ConfigChannel+0x644>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d12b      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x5fc>
 8002b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d125      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a24      	ldr	r2, [pc, #144]	; (8002c14 <HAL_ADC_ConfigChannel+0x648>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d004      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0x5c4>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <HAL_ADC_ConfigChannel+0x64c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d16e      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b98:	4619      	mov	r1, r3
 8002b9a:	481c      	ldr	r0, [pc, #112]	; (8002c0c <HAL_ADC_ConfigChannel+0x640>)
 8002b9c:	f7ff f93b 	bl	8001e16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_ADC_ConfigChannel+0x650>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <HAL_ADC_ConfigChannel+0x654>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	099a      	lsrs	r2, r3, #6
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bb8:	e002      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f9      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bc6:	e052      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <HAL_ADC_ConfigChannel+0x658>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d12a      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x65c>
 8002bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d124      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <HAL_ADC_ConfigChannel+0x648>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_ADC_ConfigChannel+0x626>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_ADC_ConfigChannel+0x64c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d13f      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4803      	ldr	r0, [pc, #12]	; (8002c0c <HAL_ADC_ConfigChannel+0x640>)
 8002bfe:	f7ff f90a 	bl	8001e16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c02:	e036      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x6a6>
 8002c04:	407f0000 	.word	0x407f0000
 8002c08:	80080000 	.word	0x80080000
 8002c0c:	50040300 	.word	0x50040300
 8002c10:	c7520000 	.word	0xc7520000
 8002c14:	50040000 	.word	0x50040000
 8002c18:	50040200 	.word	0x50040200
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	053e2d63 	.word	0x053e2d63
 8002c24:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <HAL_ADC_ConfigChannel+0x6bc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d120      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d11a      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <HAL_ADC_ConfigChannel+0x6c0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d115      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c50:	4619      	mov	r1, r3
 8002c52:	480f      	ldr	r0, [pc, #60]	; (8002c90 <HAL_ADC_ConfigChannel+0x6c4>)
 8002c54:	f7ff f8df 	bl	8001e16 <LL_ADC_SetCommonPathInternalCh>
 8002c58:	e00c      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	f043 0220 	orr.w	r2, r3, #32
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002c6c:	e002      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c6e:	bf00      	nop
 8002c70:	e000      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c72:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c7c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3798      	adds	r7, #152	; 0x98
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	80000001 	.word	0x80000001
 8002c8c:	50040000 	.word	0x50040000
 8002c90:	50040300 	.word	0x50040300

08002c94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fa1f 	bl	80020e4 <LL_ADC_IsEnabled>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d146      	bne.n	8002d3a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <ADC_Enable+0xb0>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00d      	beq.n	8002cd6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	f043 0210 	orr.w	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e032      	b.n	8002d3c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff f9ee 	bl	80020bc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ce0:	f7ff f858 	bl	8001d94 <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce6:	e021      	b.n	8002d2c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff f9f9 	bl	80020e4 <LL_ADC_IsEnabled>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d104      	bne.n	8002d02 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f9dd 	bl	80020bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d02:	f7ff f847 	bl	8001d94 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d90d      	bls.n	8002d2c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f043 0210 	orr.w	r2, r3, #16
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e007      	b.n	8002d3c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d1d6      	bne.n	8002ce8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	8000003f 	.word	0x8000003f

08002d48 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d14b      	bne.n	8002dfa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d021      	beq.n	8002dc0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff f8b7 	bl	8001ef4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d032      	beq.n	8002df2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d12b      	bne.n	8002df2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d11f      	bne.n	8002df2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
 8002dbe:	e018      	b.n	8002df2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d111      	bne.n	8002df2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7ff fbcc 	bl	8002590 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002df8:	e00e      	b.n	8002e18 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff fbd6 	bl	80025b8 <HAL_ADC_ErrorCallback>
}
 8002e0c:	e004      	b.n	8002e18 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff fbb8 	bl	80025a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7ff fba8 	bl	80025b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <LL_ADC_IsEnabled>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <LL_ADC_IsEnabled+0x18>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <LL_ADC_IsEnabled+0x1a>
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d101      	bne.n	8002eae <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b09f      	sub	sp, #124	; 0x7c
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e08f      	b.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a47      	ldr	r2, [pc, #284]	; (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d102      	bne.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002eec:	4b46      	ldr	r3, [pc, #280]	; (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	e001      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e072      	b.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ffbd 	bl	8002e96 <LL_ADC_REG_IsConversionOngoing>
 8002f1c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ffb7 	bl	8002e96 <LL_ADC_REG_IsConversionOngoing>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d154      	bne.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d151      	bne.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f34:	4b35      	ldr	r3, [pc, #212]	; (800300c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f36:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d02c      	beq.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f52:	035b      	lsls	r3, r3, #13
 8002f54:	430b      	orrs	r3, r1
 8002f56:	431a      	orrs	r2, r3
 8002f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f5c:	4829      	ldr	r0, [pc, #164]	; (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002f5e:	f7ff ff87 	bl	8002e70 <LL_ADC_IsEnabled>
 8002f62:	4604      	mov	r4, r0
 8002f64:	4828      	ldr	r0, [pc, #160]	; (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002f66:	f7ff ff83 	bl	8002e70 <LL_ADC_IsEnabled>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	431c      	orrs	r4, r3
 8002f6e:	4828      	ldr	r0, [pc, #160]	; (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f70:	f7ff ff7e 	bl	8002e70 <LL_ADC_IsEnabled>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4323      	orrs	r3, r4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d137      	bne.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f84:	f023 030f 	bic.w	r3, r3, #15
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	6811      	ldr	r1, [r2, #0]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	6892      	ldr	r2, [r2, #8]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	431a      	orrs	r2, r3
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f98:	e028      	b.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa6:	4817      	ldr	r0, [pc, #92]	; (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002fa8:	f7ff ff62 	bl	8002e70 <LL_ADC_IsEnabled>
 8002fac:	4604      	mov	r4, r0
 8002fae:	4816      	ldr	r0, [pc, #88]	; (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002fb0:	f7ff ff5e 	bl	8002e70 <LL_ADC_IsEnabled>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	431c      	orrs	r4, r3
 8002fb8:	4815      	ldr	r0, [pc, #84]	; (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fba:	f7ff ff59 	bl	8002e70 <LL_ADC_IsEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4323      	orrs	r3, r4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d112      	bne.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fce:	f023 030f 	bic.w	r3, r3, #15
 8002fd2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fd4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fd6:	e009      	b.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fea:	e000      	b.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ff6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	377c      	adds	r7, #124	; 0x7c
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd90      	pop	{r4, r7, pc}
 8003002:	bf00      	nop
 8003004:	50040000 	.word	0x50040000
 8003008:	50040100 	.word	0x50040100
 800300c:	50040300 	.word	0x50040300
 8003010:	50040200 	.word	0x50040200

08003014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003030:	4013      	ands	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800303c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003046:	4a04      	ldr	r2, [pc, #16]	; (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	60d3      	str	r3, [r2, #12]
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <__NVIC_GetPriorityGrouping+0x18>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 0307 	and.w	r3, r3, #7
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db0b      	blt.n	80030a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4907      	ldr	r1, [pc, #28]	; (80030b0 <__NVIC_EnableIRQ+0x38>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2001      	movs	r0, #1
 800309a:	fa00 f202 	lsl.w	r2, r0, r2
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db0a      	blt.n	80030de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	490c      	ldr	r1, [pc, #48]	; (8003100 <__NVIC_SetPriority+0x4c>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	440b      	add	r3, r1
 80030d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030dc:	e00a      	b.n	80030f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4908      	ldr	r1, [pc, #32]	; (8003104 <__NVIC_SetPriority+0x50>)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3b04      	subs	r3, #4
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	440b      	add	r3, r1
 80030f2:	761a      	strb	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	; 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3304      	adds	r3, #4
 800312e:	2b06      	cmp	r3, #6
 8003130:	d902      	bls.n	8003138 <NVIC_EncodePriority+0x30>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3b03      	subs	r3, #3
 8003136:	e000      	b.n	800313a <NVIC_EncodePriority+0x32>
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	43d9      	mvns	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	4313      	orrs	r3, r2
         );
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	; 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003180:	d301      	bcc.n	8003186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003182:	2301      	movs	r3, #1
 8003184:	e00f      	b.n	80031a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003186:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <SysTick_Config+0x40>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318e:	210f      	movs	r1, #15
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	f7ff ff8e 	bl	80030b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <SysTick_Config+0x40>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319e:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <SysTick_Config+0x40>)
 80031a0:	2207      	movs	r2, #7
 80031a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	e000e010 	.word	0xe000e010

080031b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ff29 	bl	8003014 <__NVIC_SetPriorityGrouping>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031dc:	f7ff ff3e 	bl	800305c <__NVIC_GetPriorityGrouping>
 80031e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	6978      	ldr	r0, [r7, #20]
 80031e8:	f7ff ff8e 	bl	8003108 <NVIC_EncodePriority>
 80031ec:	4602      	mov	r2, r0
 80031ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff5d 	bl	80030b4 <__NVIC_SetPriority>
}
 80031fa:	bf00      	nop
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800320c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff31 	bl	8003078 <__NVIC_EnableIRQ>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ffa2 	bl	8003170 <SysTick_Config>
 800322c:	4603      	mov	r3, r0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e014      	b.n	8003272 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	791b      	ldrb	r3, [r3, #4]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d105      	bne.n	800325e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fe fb5d 	bl	8001918 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	795b      	ldrb	r3, [r3, #5]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_DAC_Start+0x16>
 800328c:	2302      	movs	r3, #2
 800328e:	e03b      	b.n	8003308 <HAL_DAC_Start+0x8e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2201      	movs	r2, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d118      	bne.n	80032fa <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	e00f      	b.n	80032fa <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032e8:	d107      	bne.n	80032fa <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0202 	orr.w	r2, r2, #2
 80032f8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	3308      	adds	r3, #8
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	e004      	b.n	8003348 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4413      	add	r3, r2
 8003344:	3314      	adds	r3, #20
 8003346:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	461a      	mov	r2, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b088      	sub	sp, #32
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	795b      	ldrb	r3, [r3, #5]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_DAC_ConfigChannel+0x1c>
 8003376:	2302      	movs	r3, #2
 8003378:	e107      	b.n	800358a <HAL_DAC_ConfigChannel+0x22c>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2202      	movs	r2, #2
 8003384:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b04      	cmp	r3, #4
 800338c:	d174      	bne.n	8003478 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d137      	bne.n	8003404 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003394:	f7fe fcfe 	bl	8001d94 <HAL_GetTick>
 8003398:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800339a:	e011      	b.n	80033c0 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800339c:	f7fe fcfa 	bl	8001d94 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d90a      	bls.n	80033c0 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f043 0208 	orr.w	r2, r3, #8
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2203      	movs	r2, #3
 80033ba:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e0e4      	b.n	800358a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e6      	bne.n	800339c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80033ce:	2001      	movs	r0, #1
 80033d0:	f7fe fcec 	bl	8001dac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	6992      	ldr	r2, [r2, #24]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
 80033de:	e01e      	b.n	800341e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80033e0:	f7fe fcd8 	bl	8001d94 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d90a      	bls.n	8003404 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f043 0208 	orr.w	r2, r3, #8
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2203      	movs	r2, #3
 80033fe:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e0c2      	b.n	800358a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	dbe8      	blt.n	80033e0 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800340e:	2001      	movs	r0, #1
 8003410:	f7fe fccc 	bl	8001dac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	6992      	ldr	r2, [r2, #24]
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	ea02 0103 	and.w	r1, r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	409a      	lsls	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	21ff      	movs	r1, #255	; 0xff
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	ea02 0103 	and.w	r1, r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	409a      	lsls	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d11d      	bne.n	80034bc <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	221f      	movs	r2, #31
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2207      	movs	r2, #7
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43da      	mvns	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	400a      	ands	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6819      	ldr	r1, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	22c0      	movs	r2, #192	; 0xc0
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	400a      	ands	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e098      	b.n	80036d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4b4d      	ldr	r3, [pc, #308]	; (80036e4 <HAL_DMA_Init+0x150>)
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d80f      	bhi.n	80035d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_DMA_Init+0x154>)
 80035ba:	4413      	add	r3, r2
 80035bc:	4a4b      	ldr	r2, [pc, #300]	; (80036ec <HAL_DMA_Init+0x158>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	009a      	lsls	r2, r3, #2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a48      	ldr	r2, [pc, #288]	; (80036f0 <HAL_DMA_Init+0x15c>)
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
 80035d0:	e00e      	b.n	80035f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b46      	ldr	r3, [pc, #280]	; (80036f4 <HAL_DMA_Init+0x160>)
 80035da:	4413      	add	r3, r2
 80035dc:	4a43      	ldr	r2, [pc, #268]	; (80036ec <HAL_DMA_Init+0x158>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	009a      	lsls	r2, r3, #2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a42      	ldr	r2, [pc, #264]	; (80036f8 <HAL_DMA_Init+0x164>)
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800364a:	d039      	beq.n	80036c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <HAL_DMA_Init+0x15c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d11a      	bne.n	800368c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_DMA_Init+0x168>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f003 031c 	and.w	r3, r3, #28
 8003662:	210f      	movs	r1, #15
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	4924      	ldr	r1, [pc, #144]	; (80036fc <HAL_DMA_Init+0x168>)
 800366c:	4013      	ands	r3, r2
 800366e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <HAL_DMA_Init+0x168>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	f003 031c 	and.w	r3, r3, #28
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	491d      	ldr	r1, [pc, #116]	; (80036fc <HAL_DMA_Init+0x168>)
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]
 800368a:	e019      	b.n	80036c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800368c:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <HAL_DMA_Init+0x16c>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	f003 031c 	and.w	r3, r3, #28
 8003698:	210f      	movs	r1, #15
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	4917      	ldr	r1, [pc, #92]	; (8003700 <HAL_DMA_Init+0x16c>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_DMA_Init+0x16c>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6859      	ldr	r1, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f003 031c 	and.w	r3, r3, #28
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	4911      	ldr	r1, [pc, #68]	; (8003700 <HAL_DMA_Init+0x16c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40020407 	.word	0x40020407
 80036e8:	bffdfff8 	.word	0xbffdfff8
 80036ec:	cccccccd 	.word	0xcccccccd
 80036f0:	40020000 	.word	0x40020000
 80036f4:	bffdfbf8 	.word	0xbffdfbf8
 80036f8:	40020400 	.word	0x40020400
 80036fc:	400200a8 	.word	0x400200a8
 8003700:	400204a8 	.word	0x400204a8

08003704 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_DMA_Start_IT+0x20>
 8003720:	2302      	movs	r3, #2
 8003722:	e04b      	b.n	80037bc <HAL_DMA_Start_IT+0xb8>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d13a      	bne.n	80037ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f8e0 	bl	8003922 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 020e 	orr.w	r2, r2, #14
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e00f      	b.n	800379c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0204 	bic.w	r2, r2, #4
 800378a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 020a 	orr.w	r2, r2, #10
 800379a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e005      	b.n	80037ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	f003 031c 	and.w	r3, r3, #28
 80037e4:	2204      	movs	r2, #4
 80037e6:	409a      	lsls	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d026      	beq.n	800383e <HAL_DMA_IRQHandler+0x7a>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d021      	beq.n	800383e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d107      	bne.n	8003818 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0204 	bic.w	r2, r2, #4
 8003816:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381c:	f003 021c 	and.w	r2, r3, #28
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	2104      	movs	r1, #4
 8003826:	fa01 f202 	lsl.w	r2, r1, r2
 800382a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	2b00      	cmp	r3, #0
 8003832:	d071      	beq.n	8003918 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800383c:	e06c      	b.n	8003918 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f003 031c 	and.w	r3, r3, #28
 8003846:	2202      	movs	r2, #2
 8003848:	409a      	lsls	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d02e      	beq.n	80038b0 <HAL_DMA_IRQHandler+0xec>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d029      	beq.n	80038b0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10b      	bne.n	8003882 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 020a 	bic.w	r2, r2, #10
 8003878:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f003 021c 	and.w	r2, r3, #28
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2102      	movs	r1, #2
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d038      	beq.n	8003918 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038ae:	e033      	b.n	8003918 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f003 031c 	and.w	r3, r3, #28
 80038b8:	2208      	movs	r2, #8
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02a      	beq.n	800391a <HAL_DMA_IRQHandler+0x156>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d025      	beq.n	800391a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 020e 	bic.w	r2, r2, #14
 80038dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f003 021c 	and.w	r2, r3, #28
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003918:	bf00      	nop
 800391a:	bf00      	nop
}
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	f003 021c 	and.w	r2, r3, #28
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2101      	movs	r1, #1
 800393e:	fa01 f202 	lsl.w	r2, r1, r2
 8003942:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b10      	cmp	r3, #16
 8003952:	d108      	bne.n	8003966 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003964:	e007      	b.n	8003976 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	60da      	str	r2, [r3, #12]
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003992:	e17f      	b.n	8003c94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	4013      	ands	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8171 	beq.w	8003c8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d00b      	beq.n	80039cc <HAL_GPIO_Init+0x48>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d007      	beq.n	80039cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039c0:	2b11      	cmp	r3, #17
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b12      	cmp	r3, #18
 80039ca:	d130      	bne.n	8003a2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2203      	movs	r2, #3
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a02:	2201      	movs	r2, #1
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 0201 	and.w	r2, r3, #1
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d118      	bne.n	8003a6c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a40:	2201      	movs	r2, #1
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	08db      	lsrs	r3, r3, #3
 8003a56:	f003 0201 	and.w	r2, r3, #1
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	2203      	movs	r2, #3
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x128>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b12      	cmp	r3, #18
 8003aaa:	d123      	bne.n	8003af4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	08da      	lsrs	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3208      	adds	r2, #8
 8003ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	08da      	lsrs	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3208      	adds	r2, #8
 8003aee:	6939      	ldr	r1, [r7, #16]
 8003af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0203 	and.w	r2, r3, #3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80ac 	beq.w	8003c8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b36:	4b5e      	ldr	r3, [pc, #376]	; (8003cb0 <HAL_GPIO_Init+0x32c>)
 8003b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3a:	4a5d      	ldr	r2, [pc, #372]	; (8003cb0 <HAL_GPIO_Init+0x32c>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6613      	str	r3, [r2, #96]	; 0x60
 8003b42:	4b5b      	ldr	r3, [pc, #364]	; (8003cb0 <HAL_GPIO_Init+0x32c>)
 8003b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b4e:	4a59      	ldr	r2, [pc, #356]	; (8003cb4 <HAL_GPIO_Init+0x330>)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	3302      	adds	r3, #2
 8003b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	220f      	movs	r2, #15
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b78:	d025      	beq.n	8003bc6 <HAL_GPIO_Init+0x242>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4e      	ldr	r2, [pc, #312]	; (8003cb8 <HAL_GPIO_Init+0x334>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01f      	beq.n	8003bc2 <HAL_GPIO_Init+0x23e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4d      	ldr	r2, [pc, #308]	; (8003cbc <HAL_GPIO_Init+0x338>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d019      	beq.n	8003bbe <HAL_GPIO_Init+0x23a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4c      	ldr	r2, [pc, #304]	; (8003cc0 <HAL_GPIO_Init+0x33c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <HAL_GPIO_Init+0x236>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4b      	ldr	r2, [pc, #300]	; (8003cc4 <HAL_GPIO_Init+0x340>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00d      	beq.n	8003bb6 <HAL_GPIO_Init+0x232>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4a      	ldr	r2, [pc, #296]	; (8003cc8 <HAL_GPIO_Init+0x344>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <HAL_GPIO_Init+0x22e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a49      	ldr	r2, [pc, #292]	; (8003ccc <HAL_GPIO_Init+0x348>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <HAL_GPIO_Init+0x22a>
 8003baa:	2306      	movs	r3, #6
 8003bac:	e00c      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bae:	2307      	movs	r3, #7
 8003bb0:	e00a      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bb2:	2305      	movs	r3, #5
 8003bb4:	e008      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	e006      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e004      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e002      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <HAL_GPIO_Init+0x244>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	f002 0203 	and.w	r2, r2, #3
 8003bce:	0092      	lsls	r2, r2, #2
 8003bd0:	4093      	lsls	r3, r2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bd8:	4936      	ldr	r1, [pc, #216]	; (8003cb4 <HAL_GPIO_Init+0x330>)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	3302      	adds	r3, #2
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003be6:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <HAL_GPIO_Init+0x34c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c0a:	4a31      	ldr	r2, [pc, #196]	; (8003cd0 <HAL_GPIO_Init+0x34c>)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c10:	4b2f      	ldr	r3, [pc, #188]	; (8003cd0 <HAL_GPIO_Init+0x34c>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c34:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <HAL_GPIO_Init+0x34c>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c3a:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <HAL_GPIO_Init+0x34c>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c5e:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <HAL_GPIO_Init+0x34c>)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c64:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <HAL_GPIO_Init+0x34c>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4013      	ands	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c88:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <HAL_GPIO_Init+0x34c>)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	3301      	adds	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f47f ae78 	bne.w	8003994 <HAL_GPIO_Init+0x10>
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	48000400 	.word	0x48000400
 8003cbc:	48000800 	.word	0x48000800
 8003cc0:	48000c00 	.word	0x48000c00
 8003cc4:	48001000 	.word	0x48001000
 8003cc8:	48001400 	.word	0x48001400
 8003ccc:	48001800 	.word	0x48001800
 8003cd0:	40010400 	.word	0x40010400

08003cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	807b      	strh	r3, [r7, #2]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ce4:	787b      	ldrb	r3, [r7, #1]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cf0:	e002      	b.n	8003cf8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cf2:	887a      	ldrh	r2, [r7, #2]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <HAL_PWREx_GetVoltageRange+0x18>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40007000 	.word	0x40007000

08003d20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2e:	d130      	bne.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d30:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3c:	d038      	beq.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d46:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2232      	movs	r2, #50	; 0x32
 8003d54:	fb02 f303 	mul.w	r3, r2, r3
 8003d58:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	0c9b      	lsrs	r3, r3, #18
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d64:	e002      	b.n	8003d6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d78:	d102      	bne.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f2      	bne.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8c:	d110      	bne.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e00f      	b.n	8003db2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d007      	beq.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003da8:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	431bde83 	.word	0x431bde83

08003dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e3d4      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dde:	4ba1      	ldr	r3, [pc, #644]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003de8:	4b9e      	ldr	r3, [pc, #632]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80e4 	beq.w	8003fc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d007      	beq.n	8003e16 <HAL_RCC_OscConfig+0x4a>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b0c      	cmp	r3, #12
 8003e0a:	f040 808b 	bne.w	8003f24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f040 8087 	bne.w	8003f24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e16:	4b93      	ldr	r3, [pc, #588]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_RCC_OscConfig+0x62>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e3ac      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	4b8c      	ldr	r3, [pc, #560]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_RCC_OscConfig+0x7c>
 8003e3e:	4b89      	ldr	r3, [pc, #548]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e46:	e005      	b.n	8003e54 <HAL_RCC_OscConfig+0x88>
 8003e48:	4b86      	ldr	r3, [pc, #536]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d223      	bcs.n	8003ea0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fd3f 	bl	80048e0 <RCC_SetFlashLatencyFromMSIRange>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e38d      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e6c:	4b7d      	ldr	r3, [pc, #500]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a7c      	ldr	r2, [pc, #496]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003e72:	f043 0308 	orr.w	r3, r3, #8
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	4b7a      	ldr	r3, [pc, #488]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4977      	ldr	r1, [pc, #476]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e8a:	4b76      	ldr	r3, [pc, #472]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	4972      	ldr	r1, [pc, #456]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	604b      	str	r3, [r1, #4]
 8003e9e:	e025      	b.n	8003eec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea0:	4b70      	ldr	r3, [pc, #448]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a6f      	ldr	r2, [pc, #444]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003ea6:	f043 0308 	orr.w	r3, r3, #8
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b6d      	ldr	r3, [pc, #436]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	496a      	ldr	r1, [pc, #424]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ebe:	4b69      	ldr	r3, [pc, #420]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	4965      	ldr	r1, [pc, #404]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fcff 	bl	80048e0 <RCC_SetFlashLatencyFromMSIRange>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e34d      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eec:	f000 fc36 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8003ef0:	4601      	mov	r1, r0
 8003ef2:	4b5c      	ldr	r3, [pc, #368]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	4a5a      	ldr	r2, [pc, #360]	; (8004068 <HAL_RCC_OscConfig+0x29c>)
 8003efe:	5cd3      	ldrb	r3, [r2, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	fa21 f303 	lsr.w	r3, r1, r3
 8003f08:	4a58      	ldr	r2, [pc, #352]	; (800406c <HAL_RCC_OscConfig+0x2a0>)
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f0c:	4b58      	ldr	r3, [pc, #352]	; (8004070 <HAL_RCC_OscConfig+0x2a4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fd fef3 	bl	8001cfc <HAL_InitTick>
 8003f16:	4603      	mov	r3, r0
 8003f18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d052      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	e331      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d032      	beq.n	8003f92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f2c:	4b4d      	ldr	r3, [pc, #308]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a4c      	ldr	r2, [pc, #304]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f38:	f7fd ff2c 	bl	8001d94 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f40:	f7fd ff28 	bl	8001d94 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e31a      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f52:	4b44      	ldr	r3, [pc, #272]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f5e:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a40      	ldr	r2, [pc, #256]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003f64:	f043 0308 	orr.w	r3, r3, #8
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b3e      	ldr	r3, [pc, #248]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	493b      	ldr	r1, [pc, #236]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f7c:	4b39      	ldr	r3, [pc, #228]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	021b      	lsls	r3, r3, #8
 8003f8a:	4936      	ldr	r1, [pc, #216]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]
 8003f90:	e01a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f92:	4b34      	ldr	r3, [pc, #208]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a33      	ldr	r2, [pc, #204]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f9e:	f7fd fef9 	bl	8001d94 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fa6:	f7fd fef5 	bl	8001d94 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e2e7      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fb8:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f0      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x1da>
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d074      	beq.n	80040be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d005      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x21a>
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b0c      	cmp	r3, #12
 8003fde:	d10e      	bne.n	8003ffe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d10b      	bne.n	8003ffe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d064      	beq.n	80040bc <HAL_RCC_OscConfig+0x2f0>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d160      	bne.n	80040bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e2c4      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004006:	d106      	bne.n	8004016 <HAL_RCC_OscConfig+0x24a>
 8004008:	4b16      	ldr	r3, [pc, #88]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a15      	ldr	r2, [pc, #84]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 800400e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	e01d      	b.n	8004052 <HAL_RCC_OscConfig+0x286>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800401e:	d10c      	bne.n	800403a <HAL_RCC_OscConfig+0x26e>
 8004020:	4b10      	ldr	r3, [pc, #64]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a0f      	ldr	r2, [pc, #60]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8004026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8004032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	e00b      	b.n	8004052 <HAL_RCC_OscConfig+0x286>
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8004040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4b07      	ldr	r3, [pc, #28]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a06      	ldr	r2, [pc, #24]	; (8004064 <HAL_RCC_OscConfig+0x298>)
 800404c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004050:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01c      	beq.n	8004094 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fd fe9b 	bl	8001d94 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004060:	e011      	b.n	8004086 <HAL_RCC_OscConfig+0x2ba>
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	080078ac 	.word	0x080078ac
 800406c:	20000000 	.word	0x20000000
 8004070:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004074:	f7fd fe8e 	bl	8001d94 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e280      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004086:	4baf      	ldr	r3, [pc, #700]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x2a8>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fd fe7e 	bl	8001d94 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fd fe7a 	bl	8001d94 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e26c      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ae:	4ba5      	ldr	r3, [pc, #660]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x2d0>
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d060      	beq.n	800418c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_OscConfig+0x310>
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d119      	bne.n	800410a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d116      	bne.n	800410a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040dc:	4b99      	ldr	r3, [pc, #612]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_OscConfig+0x328>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e249      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f4:	4b93      	ldr	r3, [pc, #588]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	061b      	lsls	r3, r3, #24
 8004102:	4990      	ldr	r1, [pc, #576]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004108:	e040      	b.n	800418c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d023      	beq.n	800415a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004112:	4b8c      	ldr	r3, [pc, #560]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a8b      	ldr	r2, [pc, #556]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411e:	f7fd fe39 	bl	8001d94 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004126:	f7fd fe35 	bl	8001d94 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e227      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004138:	4b82      	ldr	r3, [pc, #520]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b7f      	ldr	r3, [pc, #508]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	497c      	ldr	r1, [pc, #496]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]
 8004158:	e018      	b.n	800418c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415a:	4b7a      	ldr	r3, [pc, #488]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a79      	ldr	r2, [pc, #484]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fd fe15 	bl	8001d94 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416e:	f7fd fe11 	bl	8001d94 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e203      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004180:	4b70      	ldr	r3, [pc, #448]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f0      	bne.n	800416e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d03c      	beq.n	8004212 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01c      	beq.n	80041da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a0:	4b68      	ldr	r3, [pc, #416]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80041a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a6:	4a67      	ldr	r2, [pc, #412]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fd fdf0 	bl	8001d94 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b8:	f7fd fdec 	bl	8001d94 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1de      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ca:	4b5e      	ldr	r3, [pc, #376]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80041cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0ef      	beq.n	80041b8 <HAL_RCC_OscConfig+0x3ec>
 80041d8:	e01b      	b.n	8004212 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041da:	4b5a      	ldr	r3, [pc, #360]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80041dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e0:	4a58      	ldr	r2, [pc, #352]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7fd fdd3 	bl	8001d94 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f2:	f7fd fdcf 	bl	8001d94 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e1c1      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004204:	4b4f      	ldr	r3, [pc, #316]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1ef      	bne.n	80041f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80a6 	beq.w	800436c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004220:	2300      	movs	r3, #0
 8004222:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004224:	4b47      	ldr	r3, [pc, #284]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10d      	bne.n	800424c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004230:	4b44      	ldr	r3, [pc, #272]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	4a43      	ldr	r2, [pc, #268]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423a:	6593      	str	r3, [r2, #88]	; 0x58
 800423c:	4b41      	ldr	r3, [pc, #260]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004248:	2301      	movs	r3, #1
 800424a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424c:	4b3e      	ldr	r3, [pc, #248]	; (8004348 <HAL_RCC_OscConfig+0x57c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d118      	bne.n	800428a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004258:	4b3b      	ldr	r3, [pc, #236]	; (8004348 <HAL_RCC_OscConfig+0x57c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a3a      	ldr	r2, [pc, #232]	; (8004348 <HAL_RCC_OscConfig+0x57c>)
 800425e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004262:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004264:	f7fd fd96 	bl	8001d94 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426c:	f7fd fd92 	bl	8001d94 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e184      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800427e:	4b32      	ldr	r3, [pc, #200]	; (8004348 <HAL_RCC_OscConfig+0x57c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d108      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4d8>
 8004292:	4b2c      	ldr	r3, [pc, #176]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	4a2a      	ldr	r2, [pc, #168]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042a2:	e024      	b.n	80042ee <HAL_RCC_OscConfig+0x522>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b05      	cmp	r3, #5
 80042aa:	d110      	bne.n	80042ce <HAL_RCC_OscConfig+0x502>
 80042ac:	4b25      	ldr	r3, [pc, #148]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	4a24      	ldr	r2, [pc, #144]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042bc:	4b21      	ldr	r3, [pc, #132]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	4a20      	ldr	r2, [pc, #128]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042cc:	e00f      	b.n	80042ee <HAL_RCC_OscConfig+0x522>
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d4:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042de:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80042e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e4:	4a17      	ldr	r2, [pc, #92]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 80042e6:	f023 0304 	bic.w	r3, r3, #4
 80042ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d016      	beq.n	8004324 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f6:	f7fd fd4d 	bl	8001d94 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fc:	e00a      	b.n	8004314 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fd fd49 	bl	8001d94 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	; 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e139      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004314:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_RCC_OscConfig+0x578>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0ed      	beq.n	80042fe <HAL_RCC_OscConfig+0x532>
 8004322:	e01a      	b.n	800435a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fd fd36 	bl	8001d94 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800432a:	e00f      	b.n	800434c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7fd fd32 	bl	8001d94 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d906      	bls.n	800434c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e122      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
 8004342:	bf00      	nop
 8004344:	40021000 	.word	0x40021000
 8004348:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800434c:	4b90      	ldr	r3, [pc, #576]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e8      	bne.n	800432c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800435a:	7ffb      	ldrb	r3, [r7, #31]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d105      	bne.n	800436c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004360:	4b8b      	ldr	r3, [pc, #556]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	4a8a      	ldr	r2, [pc, #552]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8108 	beq.w	8004586 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	2b02      	cmp	r3, #2
 800437c:	f040 80d0 	bne.w	8004520 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004380:	4b83      	ldr	r3, [pc, #524]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f003 0203 	and.w	r2, r3, #3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	429a      	cmp	r2, r3
 8004392:	d130      	bne.n	80043f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	3b01      	subs	r3, #1
 80043a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d127      	bne.n	80043f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d11f      	bne.n	80043f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043c0:	2a07      	cmp	r2, #7
 80043c2:	bf14      	ite	ne
 80043c4:	2201      	movne	r2, #1
 80043c6:	2200      	moveq	r2, #0
 80043c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d113      	bne.n	80043f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	3b01      	subs	r3, #1
 80043dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d109      	bne.n	80043f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	3b01      	subs	r3, #1
 80043f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d06e      	beq.n	80044d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d069      	beq.n	80044d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043fc:	4b64      	ldr	r3, [pc, #400]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004408:	4b61      	ldr	r3, [pc, #388]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0b7      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004418:	4b5d      	ldr	r3, [pc, #372]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a5c      	ldr	r2, [pc, #368]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 800441e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004422:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004424:	f7fd fcb6 	bl	8001d94 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442c:	f7fd fcb2 	bl	8001d94 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e0a4      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800443e:	4b54      	ldr	r3, [pc, #336]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800444a:	4b51      	ldr	r3, [pc, #324]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	4b51      	ldr	r3, [pc, #324]	; (8004594 <HAL_RCC_OscConfig+0x7c8>)
 8004450:	4013      	ands	r3, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800445a:	3a01      	subs	r2, #1
 800445c:	0112      	lsls	r2, r2, #4
 800445e:	4311      	orrs	r1, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004464:	0212      	lsls	r2, r2, #8
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800446c:	0852      	lsrs	r2, r2, #1
 800446e:	3a01      	subs	r2, #1
 8004470:	0552      	lsls	r2, r2, #21
 8004472:	4311      	orrs	r1, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004478:	0852      	lsrs	r2, r2, #1
 800447a:	3a01      	subs	r2, #1
 800447c:	0652      	lsls	r2, r2, #25
 800447e:	4311      	orrs	r1, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004484:	0912      	lsrs	r2, r2, #4
 8004486:	0452      	lsls	r2, r2, #17
 8004488:	430a      	orrs	r2, r1
 800448a:	4941      	ldr	r1, [pc, #260]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 800448c:	4313      	orrs	r3, r2
 800448e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004490:	4b3f      	ldr	r3, [pc, #252]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a3e      	ldr	r2, [pc, #248]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800449c:	4b3c      	ldr	r3, [pc, #240]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a3b      	ldr	r2, [pc, #236]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 80044a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044a8:	f7fd fc74 	bl	8001d94 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fd fc70 	bl	8001d94 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e062      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c2:	4b33      	ldr	r3, [pc, #204]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044ce:	e05a      	b.n	8004586 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e059      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d4:	4b2e      	ldr	r3, [pc, #184]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d152      	bne.n	8004586 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044e0:	4b2b      	ldr	r3, [pc, #172]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 80044e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044ec:	4b28      	ldr	r3, [pc, #160]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a27      	ldr	r2, [pc, #156]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 80044f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044f8:	f7fd fc4c 	bl	8001d94 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004500:	f7fd fc48 	bl	8001d94 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e03a      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004512:	4b1f      	ldr	r3, [pc, #124]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x734>
 800451e:	e032      	b.n	8004586 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b0c      	cmp	r3, #12
 8004524:	d02d      	beq.n	8004582 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a19      	ldr	r2, [pc, #100]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 800452c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004530:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d105      	bne.n	800454a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	4a13      	ldr	r2, [pc, #76]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004544:	f023 0303 	bic.w	r3, r3, #3
 8004548:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800454a:	4b11      	ldr	r3, [pc, #68]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	4a10      	ldr	r2, [pc, #64]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004550:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004558:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fd fc1b 	bl	8001d94 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004562:	f7fd fc17 	bl	8001d94 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e009      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004574:	4b06      	ldr	r3, [pc, #24]	; (8004590 <HAL_RCC_OscConfig+0x7c4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f0      	bne.n	8004562 <HAL_RCC_OscConfig+0x796>
 8004580:	e001      	b.n	8004586 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000
 8004594:	f99d808c 	.word	0xf99d808c

08004598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0c8      	b.n	800473e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045ac:	4b66      	ldr	r3, [pc, #408]	; (8004748 <HAL_RCC_ClockConfig+0x1b0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d910      	bls.n	80045dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b63      	ldr	r3, [pc, #396]	; (8004748 <HAL_RCC_ClockConfig+0x1b0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 0207 	bic.w	r2, r3, #7
 80045c2:	4961      	ldr	r1, [pc, #388]	; (8004748 <HAL_RCC_ClockConfig+0x1b0>)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b5f      	ldr	r3, [pc, #380]	; (8004748 <HAL_RCC_ClockConfig+0x1b0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0b0      	b.n	800473e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d04c      	beq.n	8004682 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f0:	4b56      	ldr	r3, [pc, #344]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d121      	bne.n	8004640 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e09e      	b.n	800473e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d107      	bne.n	8004618 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004608:	4b50      	ldr	r3, [pc, #320]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d115      	bne.n	8004640 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e092      	b.n	800473e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d107      	bne.n	8004630 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004620:	4b4a      	ldr	r3, [pc, #296]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e086      	b.n	800473e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004630:	4b46      	ldr	r3, [pc, #280]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e07e      	b.n	800473e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004640:	4b42      	ldr	r3, [pc, #264]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f023 0203 	bic.w	r2, r3, #3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	493f      	ldr	r1, [pc, #252]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004652:	f7fd fb9f 	bl	8001d94 <HAL_GetTick>
 8004656:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004658:	e00a      	b.n	8004670 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465a:	f7fd fb9b 	bl	8001d94 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e066      	b.n	800473e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004670:	4b36      	ldr	r3, [pc, #216]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 020c 	and.w	r2, r3, #12
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	429a      	cmp	r2, r3
 8004680:	d1eb      	bne.n	800465a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800468e:	4b2f      	ldr	r3, [pc, #188]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	492c      	ldr	r1, [pc, #176]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 800469c:	4313      	orrs	r3, r2
 800469e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a0:	4b29      	ldr	r3, [pc, #164]	; (8004748 <HAL_RCC_ClockConfig+0x1b0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d210      	bcs.n	80046d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b26      	ldr	r3, [pc, #152]	; (8004748 <HAL_RCC_ClockConfig+0x1b0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 0207 	bic.w	r2, r3, #7
 80046b6:	4924      	ldr	r1, [pc, #144]	; (8004748 <HAL_RCC_ClockConfig+0x1b0>)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_RCC_ClockConfig+0x1b0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e036      	b.n	800473e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046dc:	4b1b      	ldr	r3, [pc, #108]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4918      	ldr	r1, [pc, #96]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046fa:	4b14      	ldr	r3, [pc, #80]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4910      	ldr	r1, [pc, #64]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800470e:	f000 f825 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8004712:	4601      	mov	r1, r0
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <HAL_RCC_ClockConfig+0x1b4>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	4a0c      	ldr	r2, [pc, #48]	; (8004750 <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	5cd3      	ldrb	r3, [r2, r3]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	fa21 f303 	lsr.w	r3, r1, r3
 800472a:	4a0a      	ldr	r2, [pc, #40]	; (8004754 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800472e:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <HAL_RCC_ClockConfig+0x1c0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fd fae2 	bl	8001cfc <HAL_InitTick>
 8004738:	4603      	mov	r3, r0
 800473a:	72fb      	strb	r3, [r7, #11]

  return status;
 800473c:	7afb      	ldrb	r3, [r7, #11]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40022000 	.word	0x40022000
 800474c:	40021000 	.word	0x40021000
 8004750:	080078ac 	.word	0x080078ac
 8004754:	20000000 	.word	0x20000000
 8004758:	20000004 	.word	0x20000004

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800476a:	4b3d      	ldr	r3, [pc, #244]	; (8004860 <HAL_RCC_GetSysClockFreq+0x104>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004774:	4b3a      	ldr	r3, [pc, #232]	; (8004860 <HAL_RCC_GetSysClockFreq+0x104>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x34>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d121      	bne.n	80047ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d11e      	bne.n	80047ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004790:	4b33      	ldr	r3, [pc, #204]	; (8004860 <HAL_RCC_GetSysClockFreq+0x104>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d107      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800479c:	4b30      	ldr	r3, [pc, #192]	; (8004860 <HAL_RCC_GetSysClockFreq+0x104>)
 800479e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e005      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <HAL_RCC_GetSysClockFreq+0x104>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	091b      	lsrs	r3, r3, #4
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047b8:	4a2a      	ldr	r2, [pc, #168]	; (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10d      	bne.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047cc:	e00a      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d102      	bne.n	80047da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	e004      	b.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047e0:	4b22      	ldr	r3, [pc, #136]	; (800486c <HAL_RCC_GetSysClockFreq+0x110>)
 80047e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	d133      	bne.n	8004852 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ea:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <HAL_RCC_GetSysClockFreq+0x104>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d002      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0xa4>
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d003      	beq.n	8004806 <HAL_RCC_GetSysClockFreq+0xaa>
 80047fe:	e005      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004802:	617b      	str	r3, [r7, #20]
      break;
 8004804:	e005      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004806:	4b19      	ldr	r3, [pc, #100]	; (800486c <HAL_RCC_GetSysClockFreq+0x110>)
 8004808:	617b      	str	r3, [r7, #20]
      break;
 800480a:	e002      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	617b      	str	r3, [r7, #20]
      break;
 8004810:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004812:	4b13      	ldr	r3, [pc, #76]	; (8004860 <HAL_RCC_GetSysClockFreq+0x104>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	3301      	adds	r3, #1
 800481e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004820:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <HAL_RCC_GetSysClockFreq+0x104>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	0a1b      	lsrs	r3, r3, #8
 8004826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	fb02 f203 	mul.w	r2, r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004838:	4b09      	ldr	r3, [pc, #36]	; (8004860 <HAL_RCC_GetSysClockFreq+0x104>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	0e5b      	lsrs	r3, r3, #25
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	3301      	adds	r3, #1
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004852:	69bb      	ldr	r3, [r7, #24]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3724      	adds	r7, #36	; 0x24
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	40021000 	.word	0x40021000
 8004864:	080078c4 	.word	0x080078c4
 8004868:	00f42400 	.word	0x00f42400
 800486c:	007a1200 	.word	0x007a1200

08004870 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <HAL_RCC_GetHCLKFreq+0x14>)
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000000 	.word	0x20000000

08004888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800488c:	f7ff fff0 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 8004890:	4601      	mov	r1, r0
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	0a1b      	lsrs	r3, r3, #8
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800489e:	5cd3      	ldrb	r3, [r2, r3]
 80048a0:	f003 031f 	and.w	r3, r3, #31
 80048a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000
 80048b0:	080078bc 	.word	0x080078bc

080048b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048b8:	f7ff ffda 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 80048bc:	4601      	mov	r1, r0
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	0adb      	lsrs	r3, r3, #11
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	4a04      	ldr	r2, [pc, #16]	; (80048dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ca:	5cd3      	ldrb	r3, [r2, r3]
 80048cc:	f003 031f 	and.w	r3, r3, #31
 80048d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40021000 	.word	0x40021000
 80048dc:	080078bc 	.word	0x080078bc

080048e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048e8:	2300      	movs	r3, #0
 80048ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048f8:	f7ff fa04 	bl	8003d04 <HAL_PWREx_GetVoltageRange>
 80048fc:	6178      	str	r0, [r7, #20]
 80048fe:	e014      	b.n	800492a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004900:	4b25      	ldr	r3, [pc, #148]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	4a24      	ldr	r2, [pc, #144]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490a:	6593      	str	r3, [r2, #88]	; 0x58
 800490c:	4b22      	ldr	r3, [pc, #136]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004918:	f7ff f9f4 	bl	8003d04 <HAL_PWREx_GetVoltageRange>
 800491c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004928:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004930:	d10b      	bne.n	800494a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b80      	cmp	r3, #128	; 0x80
 8004936:	d919      	bls.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2ba0      	cmp	r3, #160	; 0xa0
 800493c:	d902      	bls.n	8004944 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800493e:	2302      	movs	r3, #2
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	e013      	b.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004944:	2301      	movs	r3, #1
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	e010      	b.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b80      	cmp	r3, #128	; 0x80
 800494e:	d902      	bls.n	8004956 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004950:	2303      	movs	r3, #3
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	e00a      	b.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b80      	cmp	r3, #128	; 0x80
 800495a:	d102      	bne.n	8004962 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800495c:	2302      	movs	r3, #2
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	e004      	b.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b70      	cmp	r3, #112	; 0x70
 8004966:	d101      	bne.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004968:	2301      	movs	r3, #1
 800496a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f023 0207 	bic.w	r2, r3, #7
 8004974:	4909      	ldr	r1, [pc, #36]	; (800499c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800497c:	4b07      	ldr	r3, [pc, #28]	; (800499c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	429a      	cmp	r2, r3
 8004988:	d001      	beq.n	800498e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40021000 	.word	0x40021000
 800499c:	40022000 	.word	0x40022000

080049a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a8:	2300      	movs	r3, #0
 80049aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049ac:	2300      	movs	r3, #0
 80049ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d03f      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c4:	d01c      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80049c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ca:	d802      	bhi.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00e      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80049d0:	e01f      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80049d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049d6:	d003      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80049d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049dc:	d01c      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80049de:	e018      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049e0:	4b85      	ldr	r3, [pc, #532]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a84      	ldr	r2, [pc, #528]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80049e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ec:	e015      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fab9 	bl	8004f6c <RCCEx_PLLSAI1_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049fe:	e00c      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3320      	adds	r3, #32
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fba0 	bl	800514c <RCCEx_PLLSAI2_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a10:	e003      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	74fb      	strb	r3, [r7, #19]
      break;
 8004a16:	e000      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1a:	7cfb      	ldrb	r3, [r7, #19]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a20:	4b75      	ldr	r3, [pc, #468]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a2e:	4972      	ldr	r1, [pc, #456]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a36:	e001      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d03f      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a50:	d01c      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a56:	d802      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00e      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004a5c:	e01f      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a62:	d003      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004a64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a68:	d01c      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004a6a:	e018      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a6c:	4b62      	ldr	r3, [pc, #392]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4a61      	ldr	r2, [pc, #388]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a78:	e015      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fa73 	bl	8004f6c <RCCEx_PLLSAI1_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a8a:	e00c      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3320      	adds	r3, #32
 8004a90:	2100      	movs	r1, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fb5a 	bl	800514c <RCCEx_PLLSAI2_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a9c:	e003      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	74fb      	strb	r3, [r7, #19]
      break;
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aa6:	7cfb      	ldrb	r3, [r7, #19]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004aac:	4b52      	ldr	r3, [pc, #328]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aba:	494f      	ldr	r1, [pc, #316]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ac2:	e001      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80a0 	beq.w	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ada:	4b47      	ldr	r3, [pc, #284]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004aea:	2300      	movs	r3, #0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00d      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af0:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af4:	4a40      	ldr	r2, [pc, #256]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afa:	6593      	str	r3, [r2, #88]	; 0x58
 8004afc:	4b3e      	ldr	r3, [pc, #248]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b0c:	4b3b      	ldr	r3, [pc, #236]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a3a      	ldr	r2, [pc, #232]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b18:	f7fd f93c 	bl	8001d94 <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b1e:	e009      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b20:	f7fd f938 	bl	8001d94 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d902      	bls.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	74fb      	strb	r3, [r7, #19]
        break;
 8004b32:	e005      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b34:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0ef      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004b40:	7cfb      	ldrb	r3, [r7, #19]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d15c      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b46:	4b2c      	ldr	r3, [pc, #176]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01f      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d019      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b64:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b70:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	4a20      	ldr	r2, [pc, #128]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b90:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d016      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba2:	f7fd f8f7 	bl	8001d94 <HAL_GetTick>
 8004ba6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba8:	e00b      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fd f8f3 	bl	8001d94 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d902      	bls.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	74fb      	strb	r3, [r7, #19]
            break;
 8004bc0:	e006      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0ec      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be6:	4904      	ldr	r1, [pc, #16]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bee:	e009      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	74bb      	strb	r3, [r7, #18]
 8004bf4:	e006      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c04:	7c7b      	ldrb	r3, [r7, #17]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d105      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c0a:	4b9e      	ldr	r3, [pc, #632]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	4a9d      	ldr	r2, [pc, #628]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c22:	4b98      	ldr	r3, [pc, #608]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f023 0203 	bic.w	r2, r3, #3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	4994      	ldr	r1, [pc, #592]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c44:	4b8f      	ldr	r3, [pc, #572]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f023 020c 	bic.w	r2, r3, #12
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	498c      	ldr	r1, [pc, #560]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c66:	4b87      	ldr	r3, [pc, #540]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	4983      	ldr	r1, [pc, #524]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c88:	4b7e      	ldr	r3, [pc, #504]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c96:	497b      	ldr	r1, [pc, #492]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004caa:	4b76      	ldr	r3, [pc, #472]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb8:	4972      	ldr	r1, [pc, #456]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ccc:	4b6d      	ldr	r3, [pc, #436]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cda:	496a      	ldr	r1, [pc, #424]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cee:	4b65      	ldr	r3, [pc, #404]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfc:	4961      	ldr	r1, [pc, #388]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d10:	4b5c      	ldr	r3, [pc, #368]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1e:	4959      	ldr	r1, [pc, #356]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d32:	4b54      	ldr	r3, [pc, #336]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d40:	4950      	ldr	r1, [pc, #320]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d54:	4b4b      	ldr	r3, [pc, #300]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	4948      	ldr	r1, [pc, #288]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d76:	4b43      	ldr	r3, [pc, #268]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d84:	493f      	ldr	r1, [pc, #252]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d028      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d98:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da6:	4937      	ldr	r1, [pc, #220]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db8:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4a31      	ldr	r2, [pc, #196]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc2:	60d3      	str	r3, [r2, #12]
 8004dc4:	e011      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dce:	d10c      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f8c8 	bl	8004f6c <RCCEx_PLLSAI1_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004de0:	7cfb      	ldrb	r3, [r7, #19]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d028      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004df6:	4b23      	ldr	r3, [pc, #140]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e04:	491f      	ldr	r1, [pc, #124]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e14:	d106      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e16:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e20:	60d3      	str	r3, [r2, #12]
 8004e22:	e011      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e2c:	d10c      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3304      	adds	r3, #4
 8004e32:	2101      	movs	r1, #1
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 f899 	bl	8004f6c <RCCEx_PLLSAI1_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e3e:	7cfb      	ldrb	r3, [r7, #19]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d02b      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e62:	4908      	ldr	r1, [pc, #32]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e72:	d109      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e74:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4a02      	ldr	r2, [pc, #8]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e7e:	60d3      	str	r3, [r2, #12]
 8004e80:	e014      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e90:	d10c      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3304      	adds	r3, #4
 8004e96:	2101      	movs	r1, #1
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 f867 	bl	8004f6c <RCCEx_PLLSAI1_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea2:	7cfb      	ldrb	r3, [r7, #19]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d02f      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec6:	4928      	ldr	r1, [pc, #160]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ed6:	d10d      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	2102      	movs	r1, #2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 f844 	bl	8004f6c <RCCEx_PLLSAI1_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d014      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004eee:	7cfb      	ldrb	r3, [r7, #19]
 8004ef0:	74bb      	strb	r3, [r7, #18]
 8004ef2:	e011      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3320      	adds	r3, #32
 8004f02:	2102      	movs	r1, #2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 f921 	bl	800514c <RCCEx_PLLSAI2_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f0e:	7cfb      	ldrb	r3, [r7, #19]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004f14:	7cfb      	ldrb	r3, [r7, #19]
 8004f16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f24:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f32:	490d      	ldr	r1, [pc, #52]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f56:	4904      	ldr	r1, [pc, #16]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40021000 	.word	0x40021000

08004f6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f7a:	4b73      	ldr	r3, [pc, #460]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d018      	beq.n	8004fb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f86:	4b70      	ldr	r3, [pc, #448]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0203 	and.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d10d      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
       ||
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f9e:	4b6a      	ldr	r3, [pc, #424]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
       ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d044      	beq.n	800503c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
 8004fb6:	e041      	b.n	800503c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d00c      	beq.n	8004fda <RCCEx_PLLSAI1_Config+0x6e>
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d013      	beq.n	8004fec <RCCEx_PLLSAI1_Config+0x80>
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d120      	bne.n	800500a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fc8:	4b5f      	ldr	r3, [pc, #380]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d11d      	bne.n	8005010 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd8:	e01a      	b.n	8005010 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fda:	4b5b      	ldr	r3, [pc, #364]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d116      	bne.n	8005014 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fea:	e013      	b.n	8005014 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fec:	4b56      	ldr	r3, [pc, #344]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10f      	bne.n	8005018 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ff8:	4b53      	ldr	r3, [pc, #332]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005008:	e006      	b.n	8005018 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
      break;
 800500e:	e004      	b.n	800501a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005010:	bf00      	nop
 8005012:	e002      	b.n	800501a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005014:	bf00      	nop
 8005016:	e000      	b.n	800501a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005018:	bf00      	nop
    }

    if(status == HAL_OK)
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10d      	bne.n	800503c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005020:	4b49      	ldr	r3, [pc, #292]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6819      	ldr	r1, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	3b01      	subs	r3, #1
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	430b      	orrs	r3, r1
 8005036:	4944      	ldr	r1, [pc, #272]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005038:	4313      	orrs	r3, r2
 800503a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d17d      	bne.n	800513e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005042:	4b41      	ldr	r3, [pc, #260]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a40      	ldr	r2, [pc, #256]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005048:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800504c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504e:	f7fc fea1 	bl	8001d94 <HAL_GetTick>
 8005052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005054:	e009      	b.n	800506a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005056:	f7fc fe9d 	bl	8001d94 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d902      	bls.n	800506a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	73fb      	strb	r3, [r7, #15]
        break;
 8005068:	e005      	b.n	8005076 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800506a:	4b37      	ldr	r3, [pc, #220]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1ef      	bne.n	8005056 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d160      	bne.n	800513e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d111      	bne.n	80050a6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005082:	4b31      	ldr	r3, [pc, #196]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800508a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6892      	ldr	r2, [r2, #8]
 8005092:	0211      	lsls	r1, r2, #8
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	68d2      	ldr	r2, [r2, #12]
 8005098:	0912      	lsrs	r2, r2, #4
 800509a:	0452      	lsls	r2, r2, #17
 800509c:	430a      	orrs	r2, r1
 800509e:	492a      	ldr	r1, [pc, #168]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	610b      	str	r3, [r1, #16]
 80050a4:	e027      	b.n	80050f6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d112      	bne.n	80050d2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050ac:	4b26      	ldr	r3, [pc, #152]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6892      	ldr	r2, [r2, #8]
 80050bc:	0211      	lsls	r1, r2, #8
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6912      	ldr	r2, [r2, #16]
 80050c2:	0852      	lsrs	r2, r2, #1
 80050c4:	3a01      	subs	r2, #1
 80050c6:	0552      	lsls	r2, r2, #21
 80050c8:	430a      	orrs	r2, r1
 80050ca:	491f      	ldr	r1, [pc, #124]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	610b      	str	r3, [r1, #16]
 80050d0:	e011      	b.n	80050f6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050d2:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6892      	ldr	r2, [r2, #8]
 80050e2:	0211      	lsls	r1, r2, #8
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6952      	ldr	r2, [r2, #20]
 80050e8:	0852      	lsrs	r2, r2, #1
 80050ea:	3a01      	subs	r2, #1
 80050ec:	0652      	lsls	r2, r2, #25
 80050ee:	430a      	orrs	r2, r1
 80050f0:	4915      	ldr	r1, [pc, #84]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050f6:	4b14      	ldr	r3, [pc, #80]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a13      	ldr	r2, [pc, #76]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005100:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7fc fe47 	bl	8001d94 <HAL_GetTick>
 8005106:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005108:	e009      	b.n	800511e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800510a:	f7fc fe43 	bl	8001d94 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d902      	bls.n	800511e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	73fb      	strb	r3, [r7, #15]
          break;
 800511c:	e005      	b.n	800512a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800511e:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ef      	beq.n	800510a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	4903      	ldr	r1, [pc, #12]	; (8005148 <RCCEx_PLLSAI1_Config+0x1dc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40021000 	.word	0x40021000

0800514c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800515a:	4b68      	ldr	r3, [pc, #416]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d018      	beq.n	8005198 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005166:	4b65      	ldr	r3, [pc, #404]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0203 	and.w	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d10d      	bne.n	8005192 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
       ||
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800517e:	4b5f      	ldr	r3, [pc, #380]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
       ||
 800518e:	429a      	cmp	r2, r3
 8005190:	d044      	beq.n	800521c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
 8005196:	e041      	b.n	800521c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b02      	cmp	r3, #2
 800519e:	d00c      	beq.n	80051ba <RCCEx_PLLSAI2_Config+0x6e>
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d013      	beq.n	80051cc <RCCEx_PLLSAI2_Config+0x80>
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d120      	bne.n	80051ea <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051a8:	4b54      	ldr	r3, [pc, #336]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11d      	bne.n	80051f0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b8:	e01a      	b.n	80051f0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051ba:	4b50      	ldr	r3, [pc, #320]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d116      	bne.n	80051f4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051ca:	e013      	b.n	80051f4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051cc:	4b4b      	ldr	r3, [pc, #300]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10f      	bne.n	80051f8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051d8:	4b48      	ldr	r3, [pc, #288]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d109      	bne.n	80051f8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051e8:	e006      	b.n	80051f8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	73fb      	strb	r3, [r7, #15]
      break;
 80051ee:	e004      	b.n	80051fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051f0:	bf00      	nop
 80051f2:	e002      	b.n	80051fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051f4:	bf00      	nop
 80051f6:	e000      	b.n	80051fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80051f8:	bf00      	nop
    }

    if(status == HAL_OK)
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10d      	bne.n	800521c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005200:	4b3e      	ldr	r3, [pc, #248]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6819      	ldr	r1, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	3b01      	subs	r3, #1
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	430b      	orrs	r3, r1
 8005216:	4939      	ldr	r1, [pc, #228]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005218:	4313      	orrs	r3, r2
 800521a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d167      	bne.n	80052f2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005222:	4b36      	ldr	r3, [pc, #216]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a35      	ldr	r2, [pc, #212]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800522c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522e:	f7fc fdb1 	bl	8001d94 <HAL_GetTick>
 8005232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005234:	e009      	b.n	800524a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005236:	f7fc fdad 	bl	8001d94 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d902      	bls.n	800524a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	73fb      	strb	r3, [r7, #15]
        break;
 8005248:	e005      	b.n	8005256 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800524a:	4b2c      	ldr	r3, [pc, #176]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1ef      	bne.n	8005236 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d14a      	bne.n	80052f2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d111      	bne.n	8005286 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800526a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6892      	ldr	r2, [r2, #8]
 8005272:	0211      	lsls	r1, r2, #8
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	68d2      	ldr	r2, [r2, #12]
 8005278:	0912      	lsrs	r2, r2, #4
 800527a:	0452      	lsls	r2, r2, #17
 800527c:	430a      	orrs	r2, r1
 800527e:	491f      	ldr	r1, [pc, #124]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005280:	4313      	orrs	r3, r2
 8005282:	614b      	str	r3, [r1, #20]
 8005284:	e011      	b.n	80052aa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005286:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800528e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6892      	ldr	r2, [r2, #8]
 8005296:	0211      	lsls	r1, r2, #8
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6912      	ldr	r2, [r2, #16]
 800529c:	0852      	lsrs	r2, r2, #1
 800529e:	3a01      	subs	r2, #1
 80052a0:	0652      	lsls	r2, r2, #25
 80052a2:	430a      	orrs	r2, r1
 80052a4:	4915      	ldr	r1, [pc, #84]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a13      	ldr	r2, [pc, #76]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b6:	f7fc fd6d 	bl	8001d94 <HAL_GetTick>
 80052ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052bc:	e009      	b.n	80052d2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052be:	f7fc fd69 	bl	8001d94 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d902      	bls.n	80052d2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	73fb      	strb	r3, [r7, #15]
          break;
 80052d0:	e005      	b.n	80052de <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052d2:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0ef      	beq.n	80052be <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	4903      	ldr	r1, [pc, #12]	; (80052fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40021000 	.word	0x40021000

08005300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e01d      	b.n	800534e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc fb52 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	4619      	mov	r1, r3
 800533e:	4610      	mov	r0, r2
 8005340:	f000 fbd2 	bl	8005ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <HAL_TIM_Base_Start_IT+0x50>)
 8005378:	4013      	ands	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b06      	cmp	r3, #6
 8005380:	d00b      	beq.n	800539a <HAL_TIM_Base_Start_IT+0x42>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005388:	d007      	beq.n	800539a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	00010007 	.word	0x00010007

080053ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e01d      	b.n	80053fa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fc fade 	bl	8001994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f000 fb7c 	bl	8005ae8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2201      	movs	r2, #1
 8005414:	6839      	ldr	r1, [r7, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 ff70 	bl	80062fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1e      	ldr	r2, [pc, #120]	; (800549c <HAL_TIM_PWM_Start+0x98>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <HAL_TIM_PWM_Start+0x4a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1d      	ldr	r2, [pc, #116]	; (80054a0 <HAL_TIM_PWM_Start+0x9c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00e      	beq.n	800544e <HAL_TIM_PWM_Start+0x4a>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <HAL_TIM_PWM_Start+0xa0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_TIM_PWM_Start+0x4a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1a      	ldr	r2, [pc, #104]	; (80054a8 <HAL_TIM_PWM_Start+0xa4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_TIM_PWM_Start+0x4a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a18      	ldr	r2, [pc, #96]	; (80054ac <HAL_TIM_PWM_Start+0xa8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d101      	bne.n	8005452 <HAL_TIM_PWM_Start+0x4e>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_TIM_PWM_Start+0x50>
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d007      	beq.n	8005468 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005466:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <HAL_TIM_PWM_Start+0xac>)
 8005470:	4013      	ands	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b06      	cmp	r3, #6
 8005478:	d00b      	beq.n	8005492 <HAL_TIM_PWM_Start+0x8e>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005480:	d007      	beq.n	8005492 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40013400 	.word	0x40013400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800
 80054b0:	00010007 	.word	0x00010007

080054b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d122      	bne.n	8005510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d11b      	bne.n	8005510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0202 	mvn.w	r2, #2
 80054e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fad7 	bl	8005aaa <HAL_TIM_IC_CaptureCallback>
 80054fc:	e005      	b.n	800550a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fac9 	bl	8005a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fada 	bl	8005abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b04      	cmp	r3, #4
 800551c:	d122      	bne.n	8005564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b04      	cmp	r3, #4
 800552a:	d11b      	bne.n	8005564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0204 	mvn.w	r2, #4
 8005534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 faad 	bl	8005aaa <HAL_TIM_IC_CaptureCallback>
 8005550:	e005      	b.n	800555e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fa9f 	bl	8005a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fab0 	bl	8005abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b08      	cmp	r3, #8
 8005570:	d122      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b08      	cmp	r3, #8
 800557e:	d11b      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0208 	mvn.w	r2, #8
 8005588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2204      	movs	r2, #4
 800558e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fa83 	bl	8005aaa <HAL_TIM_IC_CaptureCallback>
 80055a4:	e005      	b.n	80055b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fa75 	bl	8005a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fa86 	bl	8005abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d122      	bne.n	800560c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d11b      	bne.n	800560c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0210 	mvn.w	r2, #16
 80055dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2208      	movs	r2, #8
 80055e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fa59 	bl	8005aaa <HAL_TIM_IC_CaptureCallback>
 80055f8:	e005      	b.n	8005606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fa4b 	bl	8005a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fa5c 	bl	8005abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d10e      	bne.n	8005638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b01      	cmp	r3, #1
 8005626:	d107      	bne.n	8005638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0201 	mvn.w	r2, #1
 8005630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fb f830 	bl	8000698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005642:	2b80      	cmp	r3, #128	; 0x80
 8005644:	d10e      	bne.n	8005664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005650:	2b80      	cmp	r3, #128	; 0x80
 8005652:	d107      	bne.n	8005664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800565c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 ff04 	bl	800646c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005672:	d10e      	bne.n	8005692 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567e:	2b80      	cmp	r3, #128	; 0x80
 8005680:	d107      	bne.n	8005692 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800568a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fef7 	bl	8006480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	2b40      	cmp	r3, #64	; 0x40
 800569e:	d10e      	bne.n	80056be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d107      	bne.n	80056be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fa0a 	bl	8005ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d10e      	bne.n	80056ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d107      	bne.n	80056ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f06f 0220 	mvn.w	r2, #32
 80056e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 feb7 	bl	8006458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800570a:	2302      	movs	r3, #2
 800570c:	e105      	b.n	800591a <HAL_TIM_PWM_ConfigChannel+0x226>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b14      	cmp	r3, #20
 8005722:	f200 80f0 	bhi.w	8005906 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005726:	a201      	add	r2, pc, #4	; (adr r2, 800572c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	08005781 	.word	0x08005781
 8005730:	08005907 	.word	0x08005907
 8005734:	08005907 	.word	0x08005907
 8005738:	08005907 	.word	0x08005907
 800573c:	080057c1 	.word	0x080057c1
 8005740:	08005907 	.word	0x08005907
 8005744:	08005907 	.word	0x08005907
 8005748:	08005907 	.word	0x08005907
 800574c:	08005803 	.word	0x08005803
 8005750:	08005907 	.word	0x08005907
 8005754:	08005907 	.word	0x08005907
 8005758:	08005907 	.word	0x08005907
 800575c:	08005843 	.word	0x08005843
 8005760:	08005907 	.word	0x08005907
 8005764:	08005907 	.word	0x08005907
 8005768:	08005907 	.word	0x08005907
 800576c:	08005885 	.word	0x08005885
 8005770:	08005907 	.word	0x08005907
 8005774:	08005907 	.word	0x08005907
 8005778:	08005907 	.word	0x08005907
 800577c:	080058c5 	.word	0x080058c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fa48 	bl	8005c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0208 	orr.w	r2, r2, #8
 800579a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0204 	bic.w	r2, r2, #4
 80057aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6999      	ldr	r1, [r3, #24]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	619a      	str	r2, [r3, #24]
      break;
 80057be:	e0a3      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fab8 	bl	8005d3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6999      	ldr	r1, [r3, #24]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	021a      	lsls	r2, r3, #8
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	619a      	str	r2, [r3, #24]
      break;
 8005800:	e082      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68b9      	ldr	r1, [r7, #8]
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fb21 	bl	8005e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0208 	orr.w	r2, r2, #8
 800581c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 0204 	bic.w	r2, r2, #4
 800582c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69d9      	ldr	r1, [r3, #28]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	61da      	str	r2, [r3, #28]
      break;
 8005840:	e062      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fb89 	bl	8005f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800585c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69d9      	ldr	r1, [r3, #28]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	021a      	lsls	r2, r3, #8
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	61da      	str	r2, [r3, #28]
      break;
 8005882:	e041      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fbd2 	bl	8006034 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0208 	orr.w	r2, r2, #8
 800589e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0204 	bic.w	r2, r2, #4
 80058ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058c2:	e021      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fc16 	bl	80060fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	021a      	lsls	r2, r3, #8
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005904:	e000      	b.n	8005908 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005906:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop

08005924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_TIM_ConfigClockSource+0x18>
 8005938:	2302      	movs	r3, #2
 800593a:	e0a8      	b.n	8005a8e <HAL_TIM_ConfigClockSource+0x16a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800595e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005966:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d067      	beq.n	8005a48 <HAL_TIM_ConfigClockSource+0x124>
 8005978:	2b40      	cmp	r3, #64	; 0x40
 800597a:	d80b      	bhi.n	8005994 <HAL_TIM_ConfigClockSource+0x70>
 800597c:	2b10      	cmp	r3, #16
 800597e:	d073      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x144>
 8005980:	2b10      	cmp	r3, #16
 8005982:	d802      	bhi.n	800598a <HAL_TIM_ConfigClockSource+0x66>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d06f      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005988:	e078      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800598a:	2b20      	cmp	r3, #32
 800598c:	d06c      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x144>
 800598e:	2b30      	cmp	r3, #48	; 0x30
 8005990:	d06a      	beq.n	8005a68 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005992:	e073      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005994:	2b70      	cmp	r3, #112	; 0x70
 8005996:	d00d      	beq.n	80059b4 <HAL_TIM_ConfigClockSource+0x90>
 8005998:	2b70      	cmp	r3, #112	; 0x70
 800599a:	d804      	bhi.n	80059a6 <HAL_TIM_ConfigClockSource+0x82>
 800599c:	2b50      	cmp	r3, #80	; 0x50
 800599e:	d033      	beq.n	8005a08 <HAL_TIM_ConfigClockSource+0xe4>
 80059a0:	2b60      	cmp	r3, #96	; 0x60
 80059a2:	d041      	beq.n	8005a28 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80059a4:	e06a      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059aa:	d066      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x156>
 80059ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b0:	d017      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80059b2:	e063      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6899      	ldr	r1, [r3, #8]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f000 fc7a 	bl	80062bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]
      break;
 80059e0:	e04c      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f000 fc63 	bl	80062bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a04:	609a      	str	r2, [r3, #8]
      break;
 8005a06:	e039      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	461a      	mov	r2, r3
 8005a16:	f000 fbd7 	bl	80061c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2150      	movs	r1, #80	; 0x50
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fc30 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005a26:	e029      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	6859      	ldr	r1, [r3, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f000 fbf6 	bl	8006226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2160      	movs	r1, #96	; 0x60
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fc20 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005a46:	e019      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	461a      	mov	r2, r3
 8005a56:	f000 fbb7 	bl	80061c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2140      	movs	r1, #64	; 0x40
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fc10 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005a66:	e009      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 fc07 	bl	8006286 <TIM_ITRx_SetConfig>
      break;
 8005a78:	e000      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a40      	ldr	r2, [pc, #256]	; (8005bfc <TIM_Base_SetConfig+0x114>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d013      	beq.n	8005b28 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b06:	d00f      	beq.n	8005b28 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a3d      	ldr	r2, [pc, #244]	; (8005c00 <TIM_Base_SetConfig+0x118>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00b      	beq.n	8005b28 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a3c      	ldr	r2, [pc, #240]	; (8005c04 <TIM_Base_SetConfig+0x11c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d007      	beq.n	8005b28 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a3b      	ldr	r2, [pc, #236]	; (8005c08 <TIM_Base_SetConfig+0x120>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a3a      	ldr	r2, [pc, #232]	; (8005c0c <TIM_Base_SetConfig+0x124>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d108      	bne.n	8005b3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2f      	ldr	r2, [pc, #188]	; (8005bfc <TIM_Base_SetConfig+0x114>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01f      	beq.n	8005b82 <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b48:	d01b      	beq.n	8005b82 <TIM_Base_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a2c      	ldr	r2, [pc, #176]	; (8005c00 <TIM_Base_SetConfig+0x118>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d017      	beq.n	8005b82 <TIM_Base_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2b      	ldr	r2, [pc, #172]	; (8005c04 <TIM_Base_SetConfig+0x11c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <TIM_Base_SetConfig+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2a      	ldr	r2, [pc, #168]	; (8005c08 <TIM_Base_SetConfig+0x120>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00f      	beq.n	8005b82 <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a29      	ldr	r2, [pc, #164]	; (8005c0c <TIM_Base_SetConfig+0x124>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00b      	beq.n	8005b82 <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a28      	ldr	r2, [pc, #160]	; (8005c10 <TIM_Base_SetConfig+0x128>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d007      	beq.n	8005b82 <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a27      	ldr	r2, [pc, #156]	; (8005c14 <TIM_Base_SetConfig+0x12c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a26      	ldr	r2, [pc, #152]	; (8005c18 <TIM_Base_SetConfig+0x130>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d108      	bne.n	8005b94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a10      	ldr	r2, [pc, #64]	; (8005bfc <TIM_Base_SetConfig+0x114>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00f      	beq.n	8005be0 <TIM_Base_SetConfig+0xf8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a12      	ldr	r2, [pc, #72]	; (8005c0c <TIM_Base_SetConfig+0x124>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00b      	beq.n	8005be0 <TIM_Base_SetConfig+0xf8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a11      	ldr	r2, [pc, #68]	; (8005c10 <TIM_Base_SetConfig+0x128>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d007      	beq.n	8005be0 <TIM_Base_SetConfig+0xf8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a10      	ldr	r2, [pc, #64]	; (8005c14 <TIM_Base_SetConfig+0x12c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_Base_SetConfig+0xf8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a0f      	ldr	r2, [pc, #60]	; (8005c18 <TIM_Base_SetConfig+0x130>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d103      	bne.n	8005be8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	615a      	str	r2, [r3, #20]
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40012c00 	.word	0x40012c00
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40013400 	.word	0x40013400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800

08005c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0201 	bic.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f023 0302 	bic.w	r3, r3, #2
 8005c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a2c      	ldr	r2, [pc, #176]	; (8005d28 <TIM_OC1_SetConfig+0x10c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d00f      	beq.n	8005c9c <TIM_OC1_SetConfig+0x80>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a2b      	ldr	r2, [pc, #172]	; (8005d2c <TIM_OC1_SetConfig+0x110>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <TIM_OC1_SetConfig+0x80>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a2a      	ldr	r2, [pc, #168]	; (8005d30 <TIM_OC1_SetConfig+0x114>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d007      	beq.n	8005c9c <TIM_OC1_SetConfig+0x80>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a29      	ldr	r2, [pc, #164]	; (8005d34 <TIM_OC1_SetConfig+0x118>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_OC1_SetConfig+0x80>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a28      	ldr	r2, [pc, #160]	; (8005d38 <TIM_OC1_SetConfig+0x11c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d10c      	bne.n	8005cb6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0308 	bic.w	r3, r3, #8
 8005ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f023 0304 	bic.w	r3, r3, #4
 8005cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1b      	ldr	r2, [pc, #108]	; (8005d28 <TIM_OC1_SetConfig+0x10c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00f      	beq.n	8005cde <TIM_OC1_SetConfig+0xc2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a1a      	ldr	r2, [pc, #104]	; (8005d2c <TIM_OC1_SetConfig+0x110>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00b      	beq.n	8005cde <TIM_OC1_SetConfig+0xc2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a19      	ldr	r2, [pc, #100]	; (8005d30 <TIM_OC1_SetConfig+0x114>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d007      	beq.n	8005cde <TIM_OC1_SetConfig+0xc2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <TIM_OC1_SetConfig+0x118>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_OC1_SetConfig+0xc2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <TIM_OC1_SetConfig+0x11c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d111      	bne.n	8005d02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40012c00 	.word	0x40012c00
 8005d2c:	40013400 	.word	0x40013400
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800

08005d3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f023 0210 	bic.w	r2, r3, #16
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 0320 	bic.w	r3, r3, #32
 8005d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a28      	ldr	r2, [pc, #160]	; (8005e3c <TIM_OC2_SetConfig+0x100>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d003      	beq.n	8005da8 <TIM_OC2_SetConfig+0x6c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a27      	ldr	r2, [pc, #156]	; (8005e40 <TIM_OC2_SetConfig+0x104>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d10d      	bne.n	8005dc4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a1d      	ldr	r2, [pc, #116]	; (8005e3c <TIM_OC2_SetConfig+0x100>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00f      	beq.n	8005dec <TIM_OC2_SetConfig+0xb0>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a1c      	ldr	r2, [pc, #112]	; (8005e40 <TIM_OC2_SetConfig+0x104>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00b      	beq.n	8005dec <TIM_OC2_SetConfig+0xb0>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a1b      	ldr	r2, [pc, #108]	; (8005e44 <TIM_OC2_SetConfig+0x108>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d007      	beq.n	8005dec <TIM_OC2_SetConfig+0xb0>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a1a      	ldr	r2, [pc, #104]	; (8005e48 <TIM_OC2_SetConfig+0x10c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_OC2_SetConfig+0xb0>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <TIM_OC2_SetConfig+0x110>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d113      	bne.n	8005e14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40013400 	.word	0x40013400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40014400 	.word	0x40014400
 8005e4c:	40014800 	.word	0x40014800

08005e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a27      	ldr	r2, [pc, #156]	; (8005f4c <TIM_OC3_SetConfig+0xfc>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_OC3_SetConfig+0x6a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a26      	ldr	r2, [pc, #152]	; (8005f50 <TIM_OC3_SetConfig+0x100>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d10d      	bne.n	8005ed6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1c      	ldr	r2, [pc, #112]	; (8005f4c <TIM_OC3_SetConfig+0xfc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00f      	beq.n	8005efe <TIM_OC3_SetConfig+0xae>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a1b      	ldr	r2, [pc, #108]	; (8005f50 <TIM_OC3_SetConfig+0x100>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00b      	beq.n	8005efe <TIM_OC3_SetConfig+0xae>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a1a      	ldr	r2, [pc, #104]	; (8005f54 <TIM_OC3_SetConfig+0x104>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d007      	beq.n	8005efe <TIM_OC3_SetConfig+0xae>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a19      	ldr	r2, [pc, #100]	; (8005f58 <TIM_OC3_SetConfig+0x108>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d003      	beq.n	8005efe <TIM_OC3_SetConfig+0xae>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a18      	ldr	r2, [pc, #96]	; (8005f5c <TIM_OC3_SetConfig+0x10c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d113      	bne.n	8005f26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40013400 	.word	0x40013400
 8005f54:	40014000 	.word	0x40014000
 8005f58:	40014400 	.word	0x40014400
 8005f5c:	40014800 	.word	0x40014800

08005f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	031b      	lsls	r3, r3, #12
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a18      	ldr	r2, [pc, #96]	; (8006020 <TIM_OC4_SetConfig+0xc0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00f      	beq.n	8005fe4 <TIM_OC4_SetConfig+0x84>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a17      	ldr	r2, [pc, #92]	; (8006024 <TIM_OC4_SetConfig+0xc4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d00b      	beq.n	8005fe4 <TIM_OC4_SetConfig+0x84>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a16      	ldr	r2, [pc, #88]	; (8006028 <TIM_OC4_SetConfig+0xc8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d007      	beq.n	8005fe4 <TIM_OC4_SetConfig+0x84>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a15      	ldr	r2, [pc, #84]	; (800602c <TIM_OC4_SetConfig+0xcc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_OC4_SetConfig+0x84>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a14      	ldr	r2, [pc, #80]	; (8006030 <TIM_OC4_SetConfig+0xd0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d109      	bne.n	8005ff8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	019b      	lsls	r3, r3, #6
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40013400 	.word	0x40013400
 8006028:	40014000 	.word	0x40014000
 800602c:	40014400 	.word	0x40014400
 8006030:	40014800 	.word	0x40014800

08006034 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006078:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	041b      	lsls	r3, r3, #16
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <TIM_OC5_SetConfig+0xb4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00f      	beq.n	80060ae <TIM_OC5_SetConfig+0x7a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a16      	ldr	r2, [pc, #88]	; (80060ec <TIM_OC5_SetConfig+0xb8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00b      	beq.n	80060ae <TIM_OC5_SetConfig+0x7a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <TIM_OC5_SetConfig+0xbc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d007      	beq.n	80060ae <TIM_OC5_SetConfig+0x7a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a14      	ldr	r2, [pc, #80]	; (80060f4 <TIM_OC5_SetConfig+0xc0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d003      	beq.n	80060ae <TIM_OC5_SetConfig+0x7a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a13      	ldr	r2, [pc, #76]	; (80060f8 <TIM_OC5_SetConfig+0xc4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d109      	bne.n	80060c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	621a      	str	r2, [r3, #32]
}
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40014400 	.word	0x40014400
 80060f8:	40014800 	.word	0x40014800

080060fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800612a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	051b      	lsls	r3, r3, #20
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a18      	ldr	r2, [pc, #96]	; (80061b4 <TIM_OC6_SetConfig+0xb8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00f      	beq.n	8006178 <TIM_OC6_SetConfig+0x7c>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <TIM_OC6_SetConfig+0xbc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00b      	beq.n	8006178 <TIM_OC6_SetConfig+0x7c>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a16      	ldr	r2, [pc, #88]	; (80061bc <TIM_OC6_SetConfig+0xc0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d007      	beq.n	8006178 <TIM_OC6_SetConfig+0x7c>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a15      	ldr	r2, [pc, #84]	; (80061c0 <TIM_OC6_SetConfig+0xc4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_OC6_SetConfig+0x7c>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <TIM_OC6_SetConfig+0xc8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d109      	bne.n	800618c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800617e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	029b      	lsls	r3, r3, #10
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	621a      	str	r2, [r3, #32]
}
 80061a6:	bf00      	nop
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40013400 	.word	0x40013400
 80061bc:	40014000 	.word	0x40014000
 80061c0:	40014400 	.word	0x40014400
 80061c4:	40014800 	.word	0x40014800

080061c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f023 0201 	bic.w	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f023 030a 	bic.w	r3, r3, #10
 8006204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006226:	b480      	push	{r7}
 8006228:	b087      	sub	sp, #28
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f023 0210 	bic.w	r2, r3, #16
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	031b      	lsls	r3, r3, #12
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006262:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f043 0307 	orr.w	r3, r3, #7
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	021a      	lsls	r2, r3, #8
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	431a      	orrs	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	609a      	str	r2, [r3, #8]
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2201      	movs	r2, #1
 8006310:	fa02 f303 	lsl.w	r3, r2, r3
 8006314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1a      	ldr	r2, [r3, #32]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	43db      	mvns	r3, r3
 800631e:	401a      	ands	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a1a      	ldr	r2, [r3, #32]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	fa01 f303 	lsl.w	r3, r1, r3
 8006334:	431a      	orrs	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
	...

08006348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800635c:	2302      	movs	r3, #2
 800635e:	e068      	b.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2e      	ldr	r2, [pc, #184]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2d      	ldr	r2, [pc, #180]	; (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d108      	bne.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800639a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a1e      	ldr	r2, [pc, #120]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d01d      	beq.n	8006406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d2:	d018      	beq.n	8006406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a1b      	ldr	r2, [pc, #108]	; (8006448 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1a      	ldr	r2, [pc, #104]	; (800644c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00e      	beq.n	8006406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a18      	ldr	r2, [pc, #96]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d009      	beq.n	8006406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a13      	ldr	r2, [pc, #76]	; (8006444 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d004      	beq.n	8006406 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a14      	ldr	r2, [pc, #80]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d10c      	bne.n	8006420 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800640c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	4313      	orrs	r3, r2
 8006416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40012c00 	.word	0x40012c00
 8006444:	40013400 	.word	0x40013400
 8006448:	40000400 	.word	0x40000400
 800644c:	40000800 	.word	0x40000800
 8006450:	40000c00 	.word	0x40000c00
 8006454:	40014000 	.word	0x40014000

08006458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e040      	b.n	8006528 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fb fae6 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2224      	movs	r2, #36	; 0x24
 80064c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0201 	bic.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f8c0 	bl	8006658 <UART_SetConfig>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e022      	b.n	8006528 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fc26 	bl	8006d3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800650e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fcad 	bl	8006e80 <UART_CheckIdleState>
 8006526:	4603      	mov	r3, r0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08a      	sub	sp, #40	; 0x28
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006544:	2b20      	cmp	r3, #32
 8006546:	f040 8081 	bne.w	800664c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <HAL_UART_Transmit+0x26>
 8006550:	88fb      	ldrh	r3, [r7, #6]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e079      	b.n	800664e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_UART_Transmit+0x38>
 8006564:	2302      	movs	r3, #2
 8006566:	e072      	b.n	800664e <HAL_UART_Transmit+0x11e>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2221      	movs	r2, #33	; 0x21
 800657a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800657c:	f7fb fc0a 	bl	8001d94 <HAL_GetTick>
 8006580:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	88fa      	ldrh	r2, [r7, #6]
 8006586:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	88fa      	ldrh	r2, [r7, #6]
 800658e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659a:	d108      	bne.n	80065ae <HAL_UART_Transmit+0x7e>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	e003      	b.n	80065b6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80065be:	e02d      	b.n	800661c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2200      	movs	r2, #0
 80065c8:	2180      	movs	r1, #128	; 0x80
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fc9d 	bl	8006f0a <UART_WaitOnFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e039      	b.n	800664e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10b      	bne.n	80065f8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	881a      	ldrh	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ec:	b292      	uxth	r2, r2
 80065ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	3302      	adds	r3, #2
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	e008      	b.n	800660a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	781a      	ldrb	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	b292      	uxth	r2, r2
 8006602:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	3301      	adds	r3, #1
 8006608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1cb      	bne.n	80065c0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2200      	movs	r2, #0
 8006630:	2140      	movs	r1, #64	; 0x40
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 fc69 	bl	8006f0a <UART_WaitOnFlagUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e005      	b.n	800664e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	e000      	b.n	800664e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800664c:	2302      	movs	r3, #2
  }
}
 800664e:	4618      	mov	r0, r3
 8006650:	3720      	adds	r7, #32
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006658:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800665c:	b08a      	sub	sp, #40	; 0x28
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800666a:	2300      	movs	r3, #0
 800666c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	4313      	orrs	r3, r2
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4bb8      	ldr	r3, [pc, #736]	; (8006970 <UART_SetConfig+0x318>)
 800668e:	4013      	ands	r3, r2
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006696:	430b      	orrs	r3, r1
 8006698:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4aae      	ldr	r2, [pc, #696]	; (8006974 <UART_SetConfig+0x31c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c6:	4313      	orrs	r3, r2
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066da:	430a      	orrs	r2, r1
 80066dc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4aa5      	ldr	r2, [pc, #660]	; (8006978 <UART_SetConfig+0x320>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d126      	bne.n	8006736 <UART_SetConfig+0xde>
 80066e8:	4ba4      	ldr	r3, [pc, #656]	; (800697c <UART_SetConfig+0x324>)
 80066ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d81a      	bhi.n	800672c <UART_SetConfig+0xd4>
 80066f6:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <UART_SetConfig+0xa4>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	0800670d 	.word	0x0800670d
 8006700:	0800671d 	.word	0x0800671d
 8006704:	08006715 	.word	0x08006715
 8006708:	08006725 	.word	0x08006725
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006712:	e105      	b.n	8006920 <UART_SetConfig+0x2c8>
 8006714:	2302      	movs	r3, #2
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671a:	e101      	b.n	8006920 <UART_SetConfig+0x2c8>
 800671c:	2304      	movs	r3, #4
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006722:	e0fd      	b.n	8006920 <UART_SetConfig+0x2c8>
 8006724:	2308      	movs	r3, #8
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672a:	e0f9      	b.n	8006920 <UART_SetConfig+0x2c8>
 800672c:	2310      	movs	r3, #16
 800672e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006732:	bf00      	nop
 8006734:	e0f4      	b.n	8006920 <UART_SetConfig+0x2c8>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a91      	ldr	r2, [pc, #580]	; (8006980 <UART_SetConfig+0x328>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d138      	bne.n	80067b2 <UART_SetConfig+0x15a>
 8006740:	4b8e      	ldr	r3, [pc, #568]	; (800697c <UART_SetConfig+0x324>)
 8006742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006746:	f003 030c 	and.w	r3, r3, #12
 800674a:	2b0c      	cmp	r3, #12
 800674c:	d82c      	bhi.n	80067a8 <UART_SetConfig+0x150>
 800674e:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <UART_SetConfig+0xfc>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	08006789 	.word	0x08006789
 8006758:	080067a9 	.word	0x080067a9
 800675c:	080067a9 	.word	0x080067a9
 8006760:	080067a9 	.word	0x080067a9
 8006764:	08006799 	.word	0x08006799
 8006768:	080067a9 	.word	0x080067a9
 800676c:	080067a9 	.word	0x080067a9
 8006770:	080067a9 	.word	0x080067a9
 8006774:	08006791 	.word	0x08006791
 8006778:	080067a9 	.word	0x080067a9
 800677c:	080067a9 	.word	0x080067a9
 8006780:	080067a9 	.word	0x080067a9
 8006784:	080067a1 	.word	0x080067a1
 8006788:	2300      	movs	r3, #0
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678e:	e0c7      	b.n	8006920 <UART_SetConfig+0x2c8>
 8006790:	2302      	movs	r3, #2
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006796:	e0c3      	b.n	8006920 <UART_SetConfig+0x2c8>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679e:	e0bf      	b.n	8006920 <UART_SetConfig+0x2c8>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a6:	e0bb      	b.n	8006920 <UART_SetConfig+0x2c8>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ae:	bf00      	nop
 80067b0:	e0b6      	b.n	8006920 <UART_SetConfig+0x2c8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a73      	ldr	r2, [pc, #460]	; (8006984 <UART_SetConfig+0x32c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d125      	bne.n	8006808 <UART_SetConfig+0x1b0>
 80067bc:	4b6f      	ldr	r3, [pc, #444]	; (800697c <UART_SetConfig+0x324>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067c6:	2b10      	cmp	r3, #16
 80067c8:	d011      	beq.n	80067ee <UART_SetConfig+0x196>
 80067ca:	2b10      	cmp	r3, #16
 80067cc:	d802      	bhi.n	80067d4 <UART_SetConfig+0x17c>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <UART_SetConfig+0x186>
 80067d2:	e014      	b.n	80067fe <UART_SetConfig+0x1a6>
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	d006      	beq.n	80067e6 <UART_SetConfig+0x18e>
 80067d8:	2b30      	cmp	r3, #48	; 0x30
 80067da:	d00c      	beq.n	80067f6 <UART_SetConfig+0x19e>
 80067dc:	e00f      	b.n	80067fe <UART_SetConfig+0x1a6>
 80067de:	2300      	movs	r3, #0
 80067e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e4:	e09c      	b.n	8006920 <UART_SetConfig+0x2c8>
 80067e6:	2302      	movs	r3, #2
 80067e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ec:	e098      	b.n	8006920 <UART_SetConfig+0x2c8>
 80067ee:	2304      	movs	r3, #4
 80067f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f4:	e094      	b.n	8006920 <UART_SetConfig+0x2c8>
 80067f6:	2308      	movs	r3, #8
 80067f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fc:	e090      	b.n	8006920 <UART_SetConfig+0x2c8>
 80067fe:	2310      	movs	r3, #16
 8006800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006804:	bf00      	nop
 8006806:	e08b      	b.n	8006920 <UART_SetConfig+0x2c8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a5e      	ldr	r2, [pc, #376]	; (8006988 <UART_SetConfig+0x330>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d125      	bne.n	800685e <UART_SetConfig+0x206>
 8006812:	4b5a      	ldr	r3, [pc, #360]	; (800697c <UART_SetConfig+0x324>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006818:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d011      	beq.n	8006844 <UART_SetConfig+0x1ec>
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d802      	bhi.n	800682a <UART_SetConfig+0x1d2>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <UART_SetConfig+0x1dc>
 8006828:	e014      	b.n	8006854 <UART_SetConfig+0x1fc>
 800682a:	2b80      	cmp	r3, #128	; 0x80
 800682c:	d006      	beq.n	800683c <UART_SetConfig+0x1e4>
 800682e:	2bc0      	cmp	r3, #192	; 0xc0
 8006830:	d00c      	beq.n	800684c <UART_SetConfig+0x1f4>
 8006832:	e00f      	b.n	8006854 <UART_SetConfig+0x1fc>
 8006834:	2300      	movs	r3, #0
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683a:	e071      	b.n	8006920 <UART_SetConfig+0x2c8>
 800683c:	2302      	movs	r3, #2
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006842:	e06d      	b.n	8006920 <UART_SetConfig+0x2c8>
 8006844:	2304      	movs	r3, #4
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684a:	e069      	b.n	8006920 <UART_SetConfig+0x2c8>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006852:	e065      	b.n	8006920 <UART_SetConfig+0x2c8>
 8006854:	2310      	movs	r3, #16
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685a:	bf00      	nop
 800685c:	e060      	b.n	8006920 <UART_SetConfig+0x2c8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a4a      	ldr	r2, [pc, #296]	; (800698c <UART_SetConfig+0x334>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d129      	bne.n	80068bc <UART_SetConfig+0x264>
 8006868:	4b44      	ldr	r3, [pc, #272]	; (800697c <UART_SetConfig+0x324>)
 800686a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006876:	d014      	beq.n	80068a2 <UART_SetConfig+0x24a>
 8006878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687c:	d802      	bhi.n	8006884 <UART_SetConfig+0x22c>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <UART_SetConfig+0x23a>
 8006882:	e016      	b.n	80068b2 <UART_SetConfig+0x25a>
 8006884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006888:	d007      	beq.n	800689a <UART_SetConfig+0x242>
 800688a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800688e:	d00c      	beq.n	80068aa <UART_SetConfig+0x252>
 8006890:	e00f      	b.n	80068b2 <UART_SetConfig+0x25a>
 8006892:	2300      	movs	r3, #0
 8006894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006898:	e042      	b.n	8006920 <UART_SetConfig+0x2c8>
 800689a:	2302      	movs	r3, #2
 800689c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a0:	e03e      	b.n	8006920 <UART_SetConfig+0x2c8>
 80068a2:	2304      	movs	r3, #4
 80068a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a8:	e03a      	b.n	8006920 <UART_SetConfig+0x2c8>
 80068aa:	2308      	movs	r3, #8
 80068ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b0:	e036      	b.n	8006920 <UART_SetConfig+0x2c8>
 80068b2:	2310      	movs	r3, #16
 80068b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b8:	bf00      	nop
 80068ba:	e031      	b.n	8006920 <UART_SetConfig+0x2c8>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a2c      	ldr	r2, [pc, #176]	; (8006974 <UART_SetConfig+0x31c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d129      	bne.n	800691a <UART_SetConfig+0x2c2>
 80068c6:	4b2d      	ldr	r3, [pc, #180]	; (800697c <UART_SetConfig+0x324>)
 80068c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d4:	d014      	beq.n	8006900 <UART_SetConfig+0x2a8>
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068da:	d802      	bhi.n	80068e2 <UART_SetConfig+0x28a>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d007      	beq.n	80068f0 <UART_SetConfig+0x298>
 80068e0:	e016      	b.n	8006910 <UART_SetConfig+0x2b8>
 80068e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e6:	d007      	beq.n	80068f8 <UART_SetConfig+0x2a0>
 80068e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ec:	d00c      	beq.n	8006908 <UART_SetConfig+0x2b0>
 80068ee:	e00f      	b.n	8006910 <UART_SetConfig+0x2b8>
 80068f0:	2300      	movs	r3, #0
 80068f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f6:	e013      	b.n	8006920 <UART_SetConfig+0x2c8>
 80068f8:	2302      	movs	r3, #2
 80068fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fe:	e00f      	b.n	8006920 <UART_SetConfig+0x2c8>
 8006900:	2304      	movs	r3, #4
 8006902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006906:	e00b      	b.n	8006920 <UART_SetConfig+0x2c8>
 8006908:	2308      	movs	r3, #8
 800690a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690e:	e007      	b.n	8006920 <UART_SetConfig+0x2c8>
 8006910:	2310      	movs	r3, #16
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006916:	bf00      	nop
 8006918:	e002      	b.n	8006920 <UART_SetConfig+0x2c8>
 800691a:	2310      	movs	r3, #16
 800691c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <UART_SetConfig+0x31c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	f040 80fe 	bne.w	8006b28 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800692c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006930:	2b08      	cmp	r3, #8
 8006932:	d837      	bhi.n	80069a4 <UART_SetConfig+0x34c>
 8006934:	a201      	add	r2, pc, #4	; (adr r2, 800693c <UART_SetConfig+0x2e4>)
 8006936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693a:	bf00      	nop
 800693c:	08006961 	.word	0x08006961
 8006940:	080069a5 	.word	0x080069a5
 8006944:	08006969 	.word	0x08006969
 8006948:	080069a5 	.word	0x080069a5
 800694c:	08006995 	.word	0x08006995
 8006950:	080069a5 	.word	0x080069a5
 8006954:	080069a5 	.word	0x080069a5
 8006958:	080069a5 	.word	0x080069a5
 800695c:	0800699d 	.word	0x0800699d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006960:	f7fd ff92 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006964:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006966:	e020      	b.n	80069aa <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006968:	4b09      	ldr	r3, [pc, #36]	; (8006990 <UART_SetConfig+0x338>)
 800696a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800696c:	e01d      	b.n	80069aa <UART_SetConfig+0x352>
 800696e:	bf00      	nop
 8006970:	efff69f3 	.word	0xefff69f3
 8006974:	40008000 	.word	0x40008000
 8006978:	40013800 	.word	0x40013800
 800697c:	40021000 	.word	0x40021000
 8006980:	40004400 	.word	0x40004400
 8006984:	40004800 	.word	0x40004800
 8006988:	40004c00 	.word	0x40004c00
 800698c:	40005000 	.word	0x40005000
 8006990:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006994:	f7fd fee2 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8006998:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800699a:	e006      	b.n	80069aa <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800699c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069a2:	e002      	b.n	80069aa <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	76fb      	strb	r3, [r7, #27]
        break;
 80069a8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 81b9 	beq.w	8006d24 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	4413      	add	r3, r2
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d305      	bcc.n	80069ce <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d902      	bls.n	80069d4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	76fb      	strb	r3, [r7, #27]
 80069d2:	e1a7      	b.n	8006d24 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80069d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069d8:	2b08      	cmp	r3, #8
 80069da:	f200 8092 	bhi.w	8006b02 <UART_SetConfig+0x4aa>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <UART_SetConfig+0x38c>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a09 	.word	0x08006a09
 80069e8:	08006b03 	.word	0x08006b03
 80069ec:	08006a57 	.word	0x08006a57
 80069f0:	08006b03 	.word	0x08006b03
 80069f4:	08006a8b 	.word	0x08006a8b
 80069f8:	08006b03 	.word	0x08006b03
 80069fc:	08006b03 	.word	0x08006b03
 8006a00:	08006b03 	.word	0x08006b03
 8006a04:	08006ad9 	.word	0x08006ad9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006a08:	f7fd ff3e 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006a0c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	4619      	mov	r1, r3
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	f04f 0400 	mov.w	r4, #0
 8006a1e:	0214      	lsls	r4, r2, #8
 8006a20:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006a24:	020b      	lsls	r3, r1, #8
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6852      	ldr	r2, [r2, #4]
 8006a2a:	0852      	lsrs	r2, r2, #1
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	eb13 0b01 	adds.w	fp, r3, r1
 8006a36:	eb44 0c02 	adc.w	ip, r4, r2
 8006a3a:	4658      	mov	r0, fp
 8006a3c:	4661      	mov	r1, ip
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f04f 0400 	mov.w	r4, #0
 8006a46:	461a      	mov	r2, r3
 8006a48:	4623      	mov	r3, r4
 8006a4a:	f7f9 fc19 	bl	8000280 <__aeabi_uldivmod>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	460c      	mov	r4, r1
 8006a52:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a54:	e058      	b.n	8006b08 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	f04f 0400 	mov.w	r4, #0
 8006a60:	49ae      	ldr	r1, [pc, #696]	; (8006d1c <UART_SetConfig+0x6c4>)
 8006a62:	f04f 0200 	mov.w	r2, #0
 8006a66:	eb13 0b01 	adds.w	fp, r3, r1
 8006a6a:	eb44 0c02 	adc.w	ip, r4, r2
 8006a6e:	4658      	mov	r0, fp
 8006a70:	4661      	mov	r1, ip
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f04f 0400 	mov.w	r4, #0
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	4623      	mov	r3, r4
 8006a7e:	f7f9 fbff 	bl	8000280 <__aeabi_uldivmod>
 8006a82:	4603      	mov	r3, r0
 8006a84:	460c      	mov	r4, r1
 8006a86:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a88:	e03e      	b.n	8006b08 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006a8a:	f7fd fe67 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8006a8e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	4619      	mov	r1, r3
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	f04f 0400 	mov.w	r4, #0
 8006aa0:	0214      	lsls	r4, r2, #8
 8006aa2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006aa6:	020b      	lsls	r3, r1, #8
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6852      	ldr	r2, [r2, #4]
 8006aac:	0852      	lsrs	r2, r2, #1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	eb13 0b01 	adds.w	fp, r3, r1
 8006ab8:	eb44 0c02 	adc.w	ip, r4, r2
 8006abc:	4658      	mov	r0, fp
 8006abe:	4661      	mov	r1, ip
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f04f 0400 	mov.w	r4, #0
 8006ac8:	461a      	mov	r2, r3
 8006aca:	4623      	mov	r3, r4
 8006acc:	f7f9 fbd8 	bl	8000280 <__aeabi_uldivmod>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ad6:	e017      	b.n	8006b08 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	f04f 0400 	mov.w	r4, #0
 8006ae2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006ae6:	f144 0100 	adc.w	r1, r4, #0
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f04f 0400 	mov.w	r4, #0
 8006af2:	461a      	mov	r2, r3
 8006af4:	4623      	mov	r3, r4
 8006af6:	f7f9 fbc3 	bl	8000280 <__aeabi_uldivmod>
 8006afa:	4603      	mov	r3, r0
 8006afc:	460c      	mov	r4, r1
 8006afe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006b00:	e002      	b.n	8006b08 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	76fb      	strb	r3, [r7, #27]
            break;
 8006b06:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0e:	d308      	bcc.n	8006b22 <UART_SetConfig+0x4ca>
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b16:	d204      	bcs.n	8006b22 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69fa      	ldr	r2, [r7, #28]
 8006b1e:	60da      	str	r2, [r3, #12]
 8006b20:	e100      	b.n	8006d24 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	76fb      	strb	r3, [r7, #27]
 8006b26:	e0fd      	b.n	8006d24 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b30:	f040 8084 	bne.w	8006c3c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d85f      	bhi.n	8006bfc <UART_SetConfig+0x5a4>
 8006b3c:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <UART_SetConfig+0x4ec>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006b69 	.word	0x08006b69
 8006b48:	08006b89 	.word	0x08006b89
 8006b4c:	08006ba9 	.word	0x08006ba9
 8006b50:	08006bfd 	.word	0x08006bfd
 8006b54:	08006bc5 	.word	0x08006bc5
 8006b58:	08006bfd 	.word	0x08006bfd
 8006b5c:	08006bfd 	.word	0x08006bfd
 8006b60:	08006bfd 	.word	0x08006bfd
 8006b64:	08006be5 	.word	0x08006be5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b68:	f7fd fe8e 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006b6c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	005a      	lsls	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	085b      	lsrs	r3, r3, #1
 8006b78:	441a      	add	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b86:	e03c      	b.n	8006c02 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b88:	f7fd fe94 	bl	80048b4 <HAL_RCC_GetPCLK2Freq>
 8006b8c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	005a      	lsls	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	441a      	add	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ba6:	e02c      	b.n	8006c02 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	085b      	lsrs	r3, r3, #1
 8006bae:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006bb2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6852      	ldr	r2, [r2, #4]
 8006bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bc2:	e01e      	b.n	8006c02 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc4:	f7fd fdca 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8006bc8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	005a      	lsls	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	441a      	add	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006be2:	e00e      	b.n	8006c02 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	085b      	lsrs	r3, r3, #1
 8006bea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bfa:	e002      	b.n	8006c02 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	76fb      	strb	r3, [r7, #27]
        break;
 8006c00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	2b0f      	cmp	r3, #15
 8006c06:	d916      	bls.n	8006c36 <UART_SetConfig+0x5de>
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0e:	d212      	bcs.n	8006c36 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f023 030f 	bic.w	r3, r3, #15
 8006c18:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	89fb      	ldrh	r3, [r7, #14]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	89fa      	ldrh	r2, [r7, #14]
 8006c32:	60da      	str	r2, [r3, #12]
 8006c34:	e076      	b.n	8006d24 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	76fb      	strb	r3, [r7, #27]
 8006c3a:	e073      	b.n	8006d24 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d85c      	bhi.n	8006cfe <UART_SetConfig+0x6a6>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <UART_SetConfig+0x5f4>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c8f 	.word	0x08006c8f
 8006c54:	08006cad 	.word	0x08006cad
 8006c58:	08006cff 	.word	0x08006cff
 8006c5c:	08006cc9 	.word	0x08006cc9
 8006c60:	08006cff 	.word	0x08006cff
 8006c64:	08006cff 	.word	0x08006cff
 8006c68:	08006cff 	.word	0x08006cff
 8006c6c:	08006ce7 	.word	0x08006ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c70:	f7fd fe0a 	bl	8004888 <HAL_RCC_GetPCLK1Freq>
 8006c74:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	085a      	lsrs	r2, r3, #1
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	441a      	add	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c8c:	e03a      	b.n	8006d04 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c8e:	f7fd fe11 	bl	80048b4 <HAL_RCC_GetPCLK2Freq>
 8006c92:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	085a      	lsrs	r2, r3, #1
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	441a      	add	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006caa:	e02b      	b.n	8006d04 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006cb6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	6852      	ldr	r2, [r2, #4]
 8006cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cc6:	e01d      	b.n	8006d04 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc8:	f7fd fd48 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8006ccc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	085a      	lsrs	r2, r3, #1
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	441a      	add	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ce4:	e00e      	b.n	8006d04 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cfc:	e002      	b.n	8006d04 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	76fb      	strb	r3, [r7, #27]
        break;
 8006d02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	d90a      	bls.n	8006d20 <UART_SetConfig+0x6c8>
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d10:	d206      	bcs.n	8006d20 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	e003      	b.n	8006d24 <UART_SetConfig+0x6cc>
 8006d1c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006d30:	7efb      	ldrb	r3, [r7, #27]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3728      	adds	r7, #40	; 0x28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00a      	beq.n	8006d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	f003 0310 	and.w	r3, r3, #16
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01a      	beq.n	8006e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e3a:	d10a      	bne.n	8006e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	605a      	str	r2, [r3, #4]
  }
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006e8e:	f7fa ff81 	bl	8001d94 <HAL_GetTick>
 8006e92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0308 	and.w	r3, r3, #8
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	d10e      	bne.n	8006ec0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f82a 	bl	8006f0a <UART_WaitOnFlagUntilTimeout>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e020      	b.n	8006f02 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d10e      	bne.n	8006eec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ece:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f814 	bl	8006f0a <UART_WaitOnFlagUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e00a      	b.n	8006f02 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	603b      	str	r3, [r7, #0]
 8006f16:	4613      	mov	r3, r2
 8006f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1a:	e05d      	b.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f22:	d059      	beq.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f24:	f7fa ff36 	bl	8001d94 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d302      	bcc.n	8006f3a <UART_WaitOnFlagUntilTimeout+0x30>
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d11b      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f48:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0201 	bic.w	r2, r2, #1
 8006f58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e042      	b.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d02b      	beq.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f8e:	d123      	bne.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f98:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006fa8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0201 	bic.w	r2, r2, #1
 8006fb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e00f      	b.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69da      	ldr	r2, [r3, #28]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	bf0c      	ite	eq
 8006fe8:	2301      	moveq	r3, #1
 8006fea:	2300      	movne	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d092      	beq.n	8006f1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <__errno>:
 8007000:	4b01      	ldr	r3, [pc, #4]	; (8007008 <__errno+0x8>)
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	2000000c 	.word	0x2000000c

0800700c <__libc_init_array>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4e0d      	ldr	r6, [pc, #52]	; (8007044 <__libc_init_array+0x38>)
 8007010:	4c0d      	ldr	r4, [pc, #52]	; (8007048 <__libc_init_array+0x3c>)
 8007012:	1ba4      	subs	r4, r4, r6
 8007014:	10a4      	asrs	r4, r4, #2
 8007016:	2500      	movs	r5, #0
 8007018:	42a5      	cmp	r5, r4
 800701a:	d109      	bne.n	8007030 <__libc_init_array+0x24>
 800701c:	4e0b      	ldr	r6, [pc, #44]	; (800704c <__libc_init_array+0x40>)
 800701e:	4c0c      	ldr	r4, [pc, #48]	; (8007050 <__libc_init_array+0x44>)
 8007020:	f000 fc26 	bl	8007870 <_init>
 8007024:	1ba4      	subs	r4, r4, r6
 8007026:	10a4      	asrs	r4, r4, #2
 8007028:	2500      	movs	r5, #0
 800702a:	42a5      	cmp	r5, r4
 800702c:	d105      	bne.n	800703a <__libc_init_array+0x2e>
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007034:	4798      	blx	r3
 8007036:	3501      	adds	r5, #1
 8007038:	e7ee      	b.n	8007018 <__libc_init_array+0xc>
 800703a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800703e:	4798      	blx	r3
 8007040:	3501      	adds	r5, #1
 8007042:	e7f2      	b.n	800702a <__libc_init_array+0x1e>
 8007044:	08007930 	.word	0x08007930
 8007048:	08007930 	.word	0x08007930
 800704c:	08007930 	.word	0x08007930
 8007050:	08007934 	.word	0x08007934

08007054 <memset>:
 8007054:	4402      	add	r2, r0
 8007056:	4603      	mov	r3, r0
 8007058:	4293      	cmp	r3, r2
 800705a:	d100      	bne.n	800705e <memset+0xa>
 800705c:	4770      	bx	lr
 800705e:	f803 1b01 	strb.w	r1, [r3], #1
 8007062:	e7f9      	b.n	8007058 <memset+0x4>

08007064 <siprintf>:
 8007064:	b40e      	push	{r1, r2, r3}
 8007066:	b500      	push	{lr}
 8007068:	b09c      	sub	sp, #112	; 0x70
 800706a:	ab1d      	add	r3, sp, #116	; 0x74
 800706c:	9002      	str	r0, [sp, #8]
 800706e:	9006      	str	r0, [sp, #24]
 8007070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007074:	4809      	ldr	r0, [pc, #36]	; (800709c <siprintf+0x38>)
 8007076:	9107      	str	r1, [sp, #28]
 8007078:	9104      	str	r1, [sp, #16]
 800707a:	4909      	ldr	r1, [pc, #36]	; (80070a0 <siprintf+0x3c>)
 800707c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007080:	9105      	str	r1, [sp, #20]
 8007082:	6800      	ldr	r0, [r0, #0]
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	a902      	add	r1, sp, #8
 8007088:	f000 f866 	bl	8007158 <_svfiprintf_r>
 800708c:	9b02      	ldr	r3, [sp, #8]
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	b01c      	add	sp, #112	; 0x70
 8007094:	f85d eb04 	ldr.w	lr, [sp], #4
 8007098:	b003      	add	sp, #12
 800709a:	4770      	bx	lr
 800709c:	2000000c 	.word	0x2000000c
 80070a0:	ffff0208 	.word	0xffff0208

080070a4 <__ssputs_r>:
 80070a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a8:	688e      	ldr	r6, [r1, #8]
 80070aa:	429e      	cmp	r6, r3
 80070ac:	4682      	mov	sl, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	4690      	mov	r8, r2
 80070b2:	4699      	mov	r9, r3
 80070b4:	d837      	bhi.n	8007126 <__ssputs_r+0x82>
 80070b6:	898a      	ldrh	r2, [r1, #12]
 80070b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070bc:	d031      	beq.n	8007122 <__ssputs_r+0x7e>
 80070be:	6825      	ldr	r5, [r4, #0]
 80070c0:	6909      	ldr	r1, [r1, #16]
 80070c2:	1a6f      	subs	r7, r5, r1
 80070c4:	6965      	ldr	r5, [r4, #20]
 80070c6:	2302      	movs	r3, #2
 80070c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80070d0:	f109 0301 	add.w	r3, r9, #1
 80070d4:	443b      	add	r3, r7
 80070d6:	429d      	cmp	r5, r3
 80070d8:	bf38      	it	cc
 80070da:	461d      	movcc	r5, r3
 80070dc:	0553      	lsls	r3, r2, #21
 80070de:	d530      	bpl.n	8007142 <__ssputs_r+0x9e>
 80070e0:	4629      	mov	r1, r5
 80070e2:	f000 fb2b 	bl	800773c <_malloc_r>
 80070e6:	4606      	mov	r6, r0
 80070e8:	b950      	cbnz	r0, 8007100 <__ssputs_r+0x5c>
 80070ea:	230c      	movs	r3, #12
 80070ec:	f8ca 3000 	str.w	r3, [sl]
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f6:	81a3      	strh	r3, [r4, #12]
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295
 80070fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007100:	463a      	mov	r2, r7
 8007102:	6921      	ldr	r1, [r4, #16]
 8007104:	f000 faa8 	bl	8007658 <memcpy>
 8007108:	89a3      	ldrh	r3, [r4, #12]
 800710a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800710e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007112:	81a3      	strh	r3, [r4, #12]
 8007114:	6126      	str	r6, [r4, #16]
 8007116:	6165      	str	r5, [r4, #20]
 8007118:	443e      	add	r6, r7
 800711a:	1bed      	subs	r5, r5, r7
 800711c:	6026      	str	r6, [r4, #0]
 800711e:	60a5      	str	r5, [r4, #8]
 8007120:	464e      	mov	r6, r9
 8007122:	454e      	cmp	r6, r9
 8007124:	d900      	bls.n	8007128 <__ssputs_r+0x84>
 8007126:	464e      	mov	r6, r9
 8007128:	4632      	mov	r2, r6
 800712a:	4641      	mov	r1, r8
 800712c:	6820      	ldr	r0, [r4, #0]
 800712e:	f000 fa9e 	bl	800766e <memmove>
 8007132:	68a3      	ldr	r3, [r4, #8]
 8007134:	1b9b      	subs	r3, r3, r6
 8007136:	60a3      	str	r3, [r4, #8]
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	441e      	add	r6, r3
 800713c:	6026      	str	r6, [r4, #0]
 800713e:	2000      	movs	r0, #0
 8007140:	e7dc      	b.n	80070fc <__ssputs_r+0x58>
 8007142:	462a      	mov	r2, r5
 8007144:	f000 fb54 	bl	80077f0 <_realloc_r>
 8007148:	4606      	mov	r6, r0
 800714a:	2800      	cmp	r0, #0
 800714c:	d1e2      	bne.n	8007114 <__ssputs_r+0x70>
 800714e:	6921      	ldr	r1, [r4, #16]
 8007150:	4650      	mov	r0, sl
 8007152:	f000 faa5 	bl	80076a0 <_free_r>
 8007156:	e7c8      	b.n	80070ea <__ssputs_r+0x46>

08007158 <_svfiprintf_r>:
 8007158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	461d      	mov	r5, r3
 800715e:	898b      	ldrh	r3, [r1, #12]
 8007160:	061f      	lsls	r7, r3, #24
 8007162:	b09d      	sub	sp, #116	; 0x74
 8007164:	4680      	mov	r8, r0
 8007166:	460c      	mov	r4, r1
 8007168:	4616      	mov	r6, r2
 800716a:	d50f      	bpl.n	800718c <_svfiprintf_r+0x34>
 800716c:	690b      	ldr	r3, [r1, #16]
 800716e:	b96b      	cbnz	r3, 800718c <_svfiprintf_r+0x34>
 8007170:	2140      	movs	r1, #64	; 0x40
 8007172:	f000 fae3 	bl	800773c <_malloc_r>
 8007176:	6020      	str	r0, [r4, #0]
 8007178:	6120      	str	r0, [r4, #16]
 800717a:	b928      	cbnz	r0, 8007188 <_svfiprintf_r+0x30>
 800717c:	230c      	movs	r3, #12
 800717e:	f8c8 3000 	str.w	r3, [r8]
 8007182:	f04f 30ff 	mov.w	r0, #4294967295
 8007186:	e0c8      	b.n	800731a <_svfiprintf_r+0x1c2>
 8007188:	2340      	movs	r3, #64	; 0x40
 800718a:	6163      	str	r3, [r4, #20]
 800718c:	2300      	movs	r3, #0
 800718e:	9309      	str	r3, [sp, #36]	; 0x24
 8007190:	2320      	movs	r3, #32
 8007192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007196:	2330      	movs	r3, #48	; 0x30
 8007198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800719c:	9503      	str	r5, [sp, #12]
 800719e:	f04f 0b01 	mov.w	fp, #1
 80071a2:	4637      	mov	r7, r6
 80071a4:	463d      	mov	r5, r7
 80071a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80071aa:	b10b      	cbz	r3, 80071b0 <_svfiprintf_r+0x58>
 80071ac:	2b25      	cmp	r3, #37	; 0x25
 80071ae:	d13e      	bne.n	800722e <_svfiprintf_r+0xd6>
 80071b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80071b4:	d00b      	beq.n	80071ce <_svfiprintf_r+0x76>
 80071b6:	4653      	mov	r3, sl
 80071b8:	4632      	mov	r2, r6
 80071ba:	4621      	mov	r1, r4
 80071bc:	4640      	mov	r0, r8
 80071be:	f7ff ff71 	bl	80070a4 <__ssputs_r>
 80071c2:	3001      	adds	r0, #1
 80071c4:	f000 80a4 	beq.w	8007310 <_svfiprintf_r+0x1b8>
 80071c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ca:	4453      	add	r3, sl
 80071cc:	9309      	str	r3, [sp, #36]	; 0x24
 80071ce:	783b      	ldrb	r3, [r7, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 809d 	beq.w	8007310 <_svfiprintf_r+0x1b8>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295
 80071dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	9307      	str	r3, [sp, #28]
 80071e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071e8:	931a      	str	r3, [sp, #104]	; 0x68
 80071ea:	462f      	mov	r7, r5
 80071ec:	2205      	movs	r2, #5
 80071ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80071f2:	4850      	ldr	r0, [pc, #320]	; (8007334 <_svfiprintf_r+0x1dc>)
 80071f4:	f7f8 fff4 	bl	80001e0 <memchr>
 80071f8:	9b04      	ldr	r3, [sp, #16]
 80071fa:	b9d0      	cbnz	r0, 8007232 <_svfiprintf_r+0xda>
 80071fc:	06d9      	lsls	r1, r3, #27
 80071fe:	bf44      	itt	mi
 8007200:	2220      	movmi	r2, #32
 8007202:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007206:	071a      	lsls	r2, r3, #28
 8007208:	bf44      	itt	mi
 800720a:	222b      	movmi	r2, #43	; 0x2b
 800720c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007210:	782a      	ldrb	r2, [r5, #0]
 8007212:	2a2a      	cmp	r2, #42	; 0x2a
 8007214:	d015      	beq.n	8007242 <_svfiprintf_r+0xea>
 8007216:	9a07      	ldr	r2, [sp, #28]
 8007218:	462f      	mov	r7, r5
 800721a:	2000      	movs	r0, #0
 800721c:	250a      	movs	r5, #10
 800721e:	4639      	mov	r1, r7
 8007220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007224:	3b30      	subs	r3, #48	; 0x30
 8007226:	2b09      	cmp	r3, #9
 8007228:	d94d      	bls.n	80072c6 <_svfiprintf_r+0x16e>
 800722a:	b1b8      	cbz	r0, 800725c <_svfiprintf_r+0x104>
 800722c:	e00f      	b.n	800724e <_svfiprintf_r+0xf6>
 800722e:	462f      	mov	r7, r5
 8007230:	e7b8      	b.n	80071a4 <_svfiprintf_r+0x4c>
 8007232:	4a40      	ldr	r2, [pc, #256]	; (8007334 <_svfiprintf_r+0x1dc>)
 8007234:	1a80      	subs	r0, r0, r2
 8007236:	fa0b f000 	lsl.w	r0, fp, r0
 800723a:	4318      	orrs	r0, r3
 800723c:	9004      	str	r0, [sp, #16]
 800723e:	463d      	mov	r5, r7
 8007240:	e7d3      	b.n	80071ea <_svfiprintf_r+0x92>
 8007242:	9a03      	ldr	r2, [sp, #12]
 8007244:	1d11      	adds	r1, r2, #4
 8007246:	6812      	ldr	r2, [r2, #0]
 8007248:	9103      	str	r1, [sp, #12]
 800724a:	2a00      	cmp	r2, #0
 800724c:	db01      	blt.n	8007252 <_svfiprintf_r+0xfa>
 800724e:	9207      	str	r2, [sp, #28]
 8007250:	e004      	b.n	800725c <_svfiprintf_r+0x104>
 8007252:	4252      	negs	r2, r2
 8007254:	f043 0302 	orr.w	r3, r3, #2
 8007258:	9207      	str	r2, [sp, #28]
 800725a:	9304      	str	r3, [sp, #16]
 800725c:	783b      	ldrb	r3, [r7, #0]
 800725e:	2b2e      	cmp	r3, #46	; 0x2e
 8007260:	d10c      	bne.n	800727c <_svfiprintf_r+0x124>
 8007262:	787b      	ldrb	r3, [r7, #1]
 8007264:	2b2a      	cmp	r3, #42	; 0x2a
 8007266:	d133      	bne.n	80072d0 <_svfiprintf_r+0x178>
 8007268:	9b03      	ldr	r3, [sp, #12]
 800726a:	1d1a      	adds	r2, r3, #4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	9203      	str	r2, [sp, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	bfb8      	it	lt
 8007274:	f04f 33ff 	movlt.w	r3, #4294967295
 8007278:	3702      	adds	r7, #2
 800727a:	9305      	str	r3, [sp, #20]
 800727c:	4d2e      	ldr	r5, [pc, #184]	; (8007338 <_svfiprintf_r+0x1e0>)
 800727e:	7839      	ldrb	r1, [r7, #0]
 8007280:	2203      	movs	r2, #3
 8007282:	4628      	mov	r0, r5
 8007284:	f7f8 ffac 	bl	80001e0 <memchr>
 8007288:	b138      	cbz	r0, 800729a <_svfiprintf_r+0x142>
 800728a:	2340      	movs	r3, #64	; 0x40
 800728c:	1b40      	subs	r0, r0, r5
 800728e:	fa03 f000 	lsl.w	r0, r3, r0
 8007292:	9b04      	ldr	r3, [sp, #16]
 8007294:	4303      	orrs	r3, r0
 8007296:	3701      	adds	r7, #1
 8007298:	9304      	str	r3, [sp, #16]
 800729a:	7839      	ldrb	r1, [r7, #0]
 800729c:	4827      	ldr	r0, [pc, #156]	; (800733c <_svfiprintf_r+0x1e4>)
 800729e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072a2:	2206      	movs	r2, #6
 80072a4:	1c7e      	adds	r6, r7, #1
 80072a6:	f7f8 ff9b 	bl	80001e0 <memchr>
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d038      	beq.n	8007320 <_svfiprintf_r+0x1c8>
 80072ae:	4b24      	ldr	r3, [pc, #144]	; (8007340 <_svfiprintf_r+0x1e8>)
 80072b0:	bb13      	cbnz	r3, 80072f8 <_svfiprintf_r+0x1a0>
 80072b2:	9b03      	ldr	r3, [sp, #12]
 80072b4:	3307      	adds	r3, #7
 80072b6:	f023 0307 	bic.w	r3, r3, #7
 80072ba:	3308      	adds	r3, #8
 80072bc:	9303      	str	r3, [sp, #12]
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	444b      	add	r3, r9
 80072c2:	9309      	str	r3, [sp, #36]	; 0x24
 80072c4:	e76d      	b.n	80071a2 <_svfiprintf_r+0x4a>
 80072c6:	fb05 3202 	mla	r2, r5, r2, r3
 80072ca:	2001      	movs	r0, #1
 80072cc:	460f      	mov	r7, r1
 80072ce:	e7a6      	b.n	800721e <_svfiprintf_r+0xc6>
 80072d0:	2300      	movs	r3, #0
 80072d2:	3701      	adds	r7, #1
 80072d4:	9305      	str	r3, [sp, #20]
 80072d6:	4619      	mov	r1, r3
 80072d8:	250a      	movs	r5, #10
 80072da:	4638      	mov	r0, r7
 80072dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e0:	3a30      	subs	r2, #48	; 0x30
 80072e2:	2a09      	cmp	r2, #9
 80072e4:	d903      	bls.n	80072ee <_svfiprintf_r+0x196>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0c8      	beq.n	800727c <_svfiprintf_r+0x124>
 80072ea:	9105      	str	r1, [sp, #20]
 80072ec:	e7c6      	b.n	800727c <_svfiprintf_r+0x124>
 80072ee:	fb05 2101 	mla	r1, r5, r1, r2
 80072f2:	2301      	movs	r3, #1
 80072f4:	4607      	mov	r7, r0
 80072f6:	e7f0      	b.n	80072da <_svfiprintf_r+0x182>
 80072f8:	ab03      	add	r3, sp, #12
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4622      	mov	r2, r4
 80072fe:	4b11      	ldr	r3, [pc, #68]	; (8007344 <_svfiprintf_r+0x1ec>)
 8007300:	a904      	add	r1, sp, #16
 8007302:	4640      	mov	r0, r8
 8007304:	f3af 8000 	nop.w
 8007308:	f1b0 3fff 	cmp.w	r0, #4294967295
 800730c:	4681      	mov	r9, r0
 800730e:	d1d6      	bne.n	80072be <_svfiprintf_r+0x166>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	065b      	lsls	r3, r3, #25
 8007314:	f53f af35 	bmi.w	8007182 <_svfiprintf_r+0x2a>
 8007318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800731a:	b01d      	add	sp, #116	; 0x74
 800731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007320:	ab03      	add	r3, sp, #12
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	4622      	mov	r2, r4
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <_svfiprintf_r+0x1ec>)
 8007328:	a904      	add	r1, sp, #16
 800732a:	4640      	mov	r0, r8
 800732c:	f000 f882 	bl	8007434 <_printf_i>
 8007330:	e7ea      	b.n	8007308 <_svfiprintf_r+0x1b0>
 8007332:	bf00      	nop
 8007334:	080078f4 	.word	0x080078f4
 8007338:	080078fa 	.word	0x080078fa
 800733c:	080078fe 	.word	0x080078fe
 8007340:	00000000 	.word	0x00000000
 8007344:	080070a5 	.word	0x080070a5

08007348 <_printf_common>:
 8007348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	4691      	mov	r9, r2
 800734e:	461f      	mov	r7, r3
 8007350:	688a      	ldr	r2, [r1, #8]
 8007352:	690b      	ldr	r3, [r1, #16]
 8007354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007358:	4293      	cmp	r3, r2
 800735a:	bfb8      	it	lt
 800735c:	4613      	movlt	r3, r2
 800735e:	f8c9 3000 	str.w	r3, [r9]
 8007362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007366:	4606      	mov	r6, r0
 8007368:	460c      	mov	r4, r1
 800736a:	b112      	cbz	r2, 8007372 <_printf_common+0x2a>
 800736c:	3301      	adds	r3, #1
 800736e:	f8c9 3000 	str.w	r3, [r9]
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	0699      	lsls	r1, r3, #26
 8007376:	bf42      	ittt	mi
 8007378:	f8d9 3000 	ldrmi.w	r3, [r9]
 800737c:	3302      	addmi	r3, #2
 800737e:	f8c9 3000 	strmi.w	r3, [r9]
 8007382:	6825      	ldr	r5, [r4, #0]
 8007384:	f015 0506 	ands.w	r5, r5, #6
 8007388:	d107      	bne.n	800739a <_printf_common+0x52>
 800738a:	f104 0a19 	add.w	sl, r4, #25
 800738e:	68e3      	ldr	r3, [r4, #12]
 8007390:	f8d9 2000 	ldr.w	r2, [r9]
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	42ab      	cmp	r3, r5
 8007398:	dc28      	bgt.n	80073ec <_printf_common+0xa4>
 800739a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	3300      	adds	r3, #0
 80073a2:	bf18      	it	ne
 80073a4:	2301      	movne	r3, #1
 80073a6:	0692      	lsls	r2, r2, #26
 80073a8:	d42d      	bmi.n	8007406 <_printf_common+0xbe>
 80073aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073ae:	4639      	mov	r1, r7
 80073b0:	4630      	mov	r0, r6
 80073b2:	47c0      	blx	r8
 80073b4:	3001      	adds	r0, #1
 80073b6:	d020      	beq.n	80073fa <_printf_common+0xb2>
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	68e5      	ldr	r5, [r4, #12]
 80073bc:	f8d9 2000 	ldr.w	r2, [r9]
 80073c0:	f003 0306 	and.w	r3, r3, #6
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	bf08      	it	eq
 80073c8:	1aad      	subeq	r5, r5, r2
 80073ca:	68a3      	ldr	r3, [r4, #8]
 80073cc:	6922      	ldr	r2, [r4, #16]
 80073ce:	bf0c      	ite	eq
 80073d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073d4:	2500      	movne	r5, #0
 80073d6:	4293      	cmp	r3, r2
 80073d8:	bfc4      	itt	gt
 80073da:	1a9b      	subgt	r3, r3, r2
 80073dc:	18ed      	addgt	r5, r5, r3
 80073de:	f04f 0900 	mov.w	r9, #0
 80073e2:	341a      	adds	r4, #26
 80073e4:	454d      	cmp	r5, r9
 80073e6:	d11a      	bne.n	800741e <_printf_common+0xd6>
 80073e8:	2000      	movs	r0, #0
 80073ea:	e008      	b.n	80073fe <_printf_common+0xb6>
 80073ec:	2301      	movs	r3, #1
 80073ee:	4652      	mov	r2, sl
 80073f0:	4639      	mov	r1, r7
 80073f2:	4630      	mov	r0, r6
 80073f4:	47c0      	blx	r8
 80073f6:	3001      	adds	r0, #1
 80073f8:	d103      	bne.n	8007402 <_printf_common+0xba>
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007402:	3501      	adds	r5, #1
 8007404:	e7c3      	b.n	800738e <_printf_common+0x46>
 8007406:	18e1      	adds	r1, r4, r3
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	2030      	movs	r0, #48	; 0x30
 800740c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007410:	4422      	add	r2, r4
 8007412:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800741a:	3302      	adds	r3, #2
 800741c:	e7c5      	b.n	80073aa <_printf_common+0x62>
 800741e:	2301      	movs	r3, #1
 8007420:	4622      	mov	r2, r4
 8007422:	4639      	mov	r1, r7
 8007424:	4630      	mov	r0, r6
 8007426:	47c0      	blx	r8
 8007428:	3001      	adds	r0, #1
 800742a:	d0e6      	beq.n	80073fa <_printf_common+0xb2>
 800742c:	f109 0901 	add.w	r9, r9, #1
 8007430:	e7d8      	b.n	80073e4 <_printf_common+0x9c>
	...

08007434 <_printf_i>:
 8007434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007438:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800743c:	460c      	mov	r4, r1
 800743e:	7e09      	ldrb	r1, [r1, #24]
 8007440:	b085      	sub	sp, #20
 8007442:	296e      	cmp	r1, #110	; 0x6e
 8007444:	4617      	mov	r7, r2
 8007446:	4606      	mov	r6, r0
 8007448:	4698      	mov	r8, r3
 800744a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800744c:	f000 80b3 	beq.w	80075b6 <_printf_i+0x182>
 8007450:	d822      	bhi.n	8007498 <_printf_i+0x64>
 8007452:	2963      	cmp	r1, #99	; 0x63
 8007454:	d036      	beq.n	80074c4 <_printf_i+0x90>
 8007456:	d80a      	bhi.n	800746e <_printf_i+0x3a>
 8007458:	2900      	cmp	r1, #0
 800745a:	f000 80b9 	beq.w	80075d0 <_printf_i+0x19c>
 800745e:	2958      	cmp	r1, #88	; 0x58
 8007460:	f000 8083 	beq.w	800756a <_printf_i+0x136>
 8007464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007468:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800746c:	e032      	b.n	80074d4 <_printf_i+0xa0>
 800746e:	2964      	cmp	r1, #100	; 0x64
 8007470:	d001      	beq.n	8007476 <_printf_i+0x42>
 8007472:	2969      	cmp	r1, #105	; 0x69
 8007474:	d1f6      	bne.n	8007464 <_printf_i+0x30>
 8007476:	6820      	ldr	r0, [r4, #0]
 8007478:	6813      	ldr	r3, [r2, #0]
 800747a:	0605      	lsls	r5, r0, #24
 800747c:	f103 0104 	add.w	r1, r3, #4
 8007480:	d52a      	bpl.n	80074d8 <_printf_i+0xa4>
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6011      	str	r1, [r2, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	da03      	bge.n	8007492 <_printf_i+0x5e>
 800748a:	222d      	movs	r2, #45	; 0x2d
 800748c:	425b      	negs	r3, r3
 800748e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007492:	486f      	ldr	r0, [pc, #444]	; (8007650 <_printf_i+0x21c>)
 8007494:	220a      	movs	r2, #10
 8007496:	e039      	b.n	800750c <_printf_i+0xd8>
 8007498:	2973      	cmp	r1, #115	; 0x73
 800749a:	f000 809d 	beq.w	80075d8 <_printf_i+0x1a4>
 800749e:	d808      	bhi.n	80074b2 <_printf_i+0x7e>
 80074a0:	296f      	cmp	r1, #111	; 0x6f
 80074a2:	d020      	beq.n	80074e6 <_printf_i+0xb2>
 80074a4:	2970      	cmp	r1, #112	; 0x70
 80074a6:	d1dd      	bne.n	8007464 <_printf_i+0x30>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	f043 0320 	orr.w	r3, r3, #32
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	e003      	b.n	80074ba <_printf_i+0x86>
 80074b2:	2975      	cmp	r1, #117	; 0x75
 80074b4:	d017      	beq.n	80074e6 <_printf_i+0xb2>
 80074b6:	2978      	cmp	r1, #120	; 0x78
 80074b8:	d1d4      	bne.n	8007464 <_printf_i+0x30>
 80074ba:	2378      	movs	r3, #120	; 0x78
 80074bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074c0:	4864      	ldr	r0, [pc, #400]	; (8007654 <_printf_i+0x220>)
 80074c2:	e055      	b.n	8007570 <_printf_i+0x13c>
 80074c4:	6813      	ldr	r3, [r2, #0]
 80074c6:	1d19      	adds	r1, r3, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6011      	str	r1, [r2, #0]
 80074cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074d4:	2301      	movs	r3, #1
 80074d6:	e08c      	b.n	80075f2 <_printf_i+0x1be>
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6011      	str	r1, [r2, #0]
 80074dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074e0:	bf18      	it	ne
 80074e2:	b21b      	sxthne	r3, r3
 80074e4:	e7cf      	b.n	8007486 <_printf_i+0x52>
 80074e6:	6813      	ldr	r3, [r2, #0]
 80074e8:	6825      	ldr	r5, [r4, #0]
 80074ea:	1d18      	adds	r0, r3, #4
 80074ec:	6010      	str	r0, [r2, #0]
 80074ee:	0628      	lsls	r0, r5, #24
 80074f0:	d501      	bpl.n	80074f6 <_printf_i+0xc2>
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	e002      	b.n	80074fc <_printf_i+0xc8>
 80074f6:	0668      	lsls	r0, r5, #25
 80074f8:	d5fb      	bpl.n	80074f2 <_printf_i+0xbe>
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	4854      	ldr	r0, [pc, #336]	; (8007650 <_printf_i+0x21c>)
 80074fe:	296f      	cmp	r1, #111	; 0x6f
 8007500:	bf14      	ite	ne
 8007502:	220a      	movne	r2, #10
 8007504:	2208      	moveq	r2, #8
 8007506:	2100      	movs	r1, #0
 8007508:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800750c:	6865      	ldr	r5, [r4, #4]
 800750e:	60a5      	str	r5, [r4, #8]
 8007510:	2d00      	cmp	r5, #0
 8007512:	f2c0 8095 	blt.w	8007640 <_printf_i+0x20c>
 8007516:	6821      	ldr	r1, [r4, #0]
 8007518:	f021 0104 	bic.w	r1, r1, #4
 800751c:	6021      	str	r1, [r4, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d13d      	bne.n	800759e <_printf_i+0x16a>
 8007522:	2d00      	cmp	r5, #0
 8007524:	f040 808e 	bne.w	8007644 <_printf_i+0x210>
 8007528:	4665      	mov	r5, ip
 800752a:	2a08      	cmp	r2, #8
 800752c:	d10b      	bne.n	8007546 <_printf_i+0x112>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	07db      	lsls	r3, r3, #31
 8007532:	d508      	bpl.n	8007546 <_printf_i+0x112>
 8007534:	6923      	ldr	r3, [r4, #16]
 8007536:	6862      	ldr	r2, [r4, #4]
 8007538:	429a      	cmp	r2, r3
 800753a:	bfde      	ittt	le
 800753c:	2330      	movle	r3, #48	; 0x30
 800753e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007542:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007546:	ebac 0305 	sub.w	r3, ip, r5
 800754a:	6123      	str	r3, [r4, #16]
 800754c:	f8cd 8000 	str.w	r8, [sp]
 8007550:	463b      	mov	r3, r7
 8007552:	aa03      	add	r2, sp, #12
 8007554:	4621      	mov	r1, r4
 8007556:	4630      	mov	r0, r6
 8007558:	f7ff fef6 	bl	8007348 <_printf_common>
 800755c:	3001      	adds	r0, #1
 800755e:	d14d      	bne.n	80075fc <_printf_i+0x1c8>
 8007560:	f04f 30ff 	mov.w	r0, #4294967295
 8007564:	b005      	add	sp, #20
 8007566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800756a:	4839      	ldr	r0, [pc, #228]	; (8007650 <_printf_i+0x21c>)
 800756c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007570:	6813      	ldr	r3, [r2, #0]
 8007572:	6821      	ldr	r1, [r4, #0]
 8007574:	1d1d      	adds	r5, r3, #4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6015      	str	r5, [r2, #0]
 800757a:	060a      	lsls	r2, r1, #24
 800757c:	d50b      	bpl.n	8007596 <_printf_i+0x162>
 800757e:	07ca      	lsls	r2, r1, #31
 8007580:	bf44      	itt	mi
 8007582:	f041 0120 	orrmi.w	r1, r1, #32
 8007586:	6021      	strmi	r1, [r4, #0]
 8007588:	b91b      	cbnz	r3, 8007592 <_printf_i+0x15e>
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	f022 0220 	bic.w	r2, r2, #32
 8007590:	6022      	str	r2, [r4, #0]
 8007592:	2210      	movs	r2, #16
 8007594:	e7b7      	b.n	8007506 <_printf_i+0xd2>
 8007596:	064d      	lsls	r5, r1, #25
 8007598:	bf48      	it	mi
 800759a:	b29b      	uxthmi	r3, r3
 800759c:	e7ef      	b.n	800757e <_printf_i+0x14a>
 800759e:	4665      	mov	r5, ip
 80075a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80075a4:	fb02 3311 	mls	r3, r2, r1, r3
 80075a8:	5cc3      	ldrb	r3, [r0, r3]
 80075aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80075ae:	460b      	mov	r3, r1
 80075b0:	2900      	cmp	r1, #0
 80075b2:	d1f5      	bne.n	80075a0 <_printf_i+0x16c>
 80075b4:	e7b9      	b.n	800752a <_printf_i+0xf6>
 80075b6:	6813      	ldr	r3, [r2, #0]
 80075b8:	6825      	ldr	r5, [r4, #0]
 80075ba:	6961      	ldr	r1, [r4, #20]
 80075bc:	1d18      	adds	r0, r3, #4
 80075be:	6010      	str	r0, [r2, #0]
 80075c0:	0628      	lsls	r0, r5, #24
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	d501      	bpl.n	80075ca <_printf_i+0x196>
 80075c6:	6019      	str	r1, [r3, #0]
 80075c8:	e002      	b.n	80075d0 <_printf_i+0x19c>
 80075ca:	066a      	lsls	r2, r5, #25
 80075cc:	d5fb      	bpl.n	80075c6 <_printf_i+0x192>
 80075ce:	8019      	strh	r1, [r3, #0]
 80075d0:	2300      	movs	r3, #0
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	4665      	mov	r5, ip
 80075d6:	e7b9      	b.n	800754c <_printf_i+0x118>
 80075d8:	6813      	ldr	r3, [r2, #0]
 80075da:	1d19      	adds	r1, r3, #4
 80075dc:	6011      	str	r1, [r2, #0]
 80075de:	681d      	ldr	r5, [r3, #0]
 80075e0:	6862      	ldr	r2, [r4, #4]
 80075e2:	2100      	movs	r1, #0
 80075e4:	4628      	mov	r0, r5
 80075e6:	f7f8 fdfb 	bl	80001e0 <memchr>
 80075ea:	b108      	cbz	r0, 80075f0 <_printf_i+0x1bc>
 80075ec:	1b40      	subs	r0, r0, r5
 80075ee:	6060      	str	r0, [r4, #4]
 80075f0:	6863      	ldr	r3, [r4, #4]
 80075f2:	6123      	str	r3, [r4, #16]
 80075f4:	2300      	movs	r3, #0
 80075f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075fa:	e7a7      	b.n	800754c <_printf_i+0x118>
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	462a      	mov	r2, r5
 8007600:	4639      	mov	r1, r7
 8007602:	4630      	mov	r0, r6
 8007604:	47c0      	blx	r8
 8007606:	3001      	adds	r0, #1
 8007608:	d0aa      	beq.n	8007560 <_printf_i+0x12c>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	079b      	lsls	r3, r3, #30
 800760e:	d413      	bmi.n	8007638 <_printf_i+0x204>
 8007610:	68e0      	ldr	r0, [r4, #12]
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	4298      	cmp	r0, r3
 8007616:	bfb8      	it	lt
 8007618:	4618      	movlt	r0, r3
 800761a:	e7a3      	b.n	8007564 <_printf_i+0x130>
 800761c:	2301      	movs	r3, #1
 800761e:	464a      	mov	r2, r9
 8007620:	4639      	mov	r1, r7
 8007622:	4630      	mov	r0, r6
 8007624:	47c0      	blx	r8
 8007626:	3001      	adds	r0, #1
 8007628:	d09a      	beq.n	8007560 <_printf_i+0x12c>
 800762a:	3501      	adds	r5, #1
 800762c:	68e3      	ldr	r3, [r4, #12]
 800762e:	9a03      	ldr	r2, [sp, #12]
 8007630:	1a9b      	subs	r3, r3, r2
 8007632:	42ab      	cmp	r3, r5
 8007634:	dcf2      	bgt.n	800761c <_printf_i+0x1e8>
 8007636:	e7eb      	b.n	8007610 <_printf_i+0x1dc>
 8007638:	2500      	movs	r5, #0
 800763a:	f104 0919 	add.w	r9, r4, #25
 800763e:	e7f5      	b.n	800762c <_printf_i+0x1f8>
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1ac      	bne.n	800759e <_printf_i+0x16a>
 8007644:	7803      	ldrb	r3, [r0, #0]
 8007646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800764a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800764e:	e76c      	b.n	800752a <_printf_i+0xf6>
 8007650:	08007905 	.word	0x08007905
 8007654:	08007916 	.word	0x08007916

08007658 <memcpy>:
 8007658:	b510      	push	{r4, lr}
 800765a:	1e43      	subs	r3, r0, #1
 800765c:	440a      	add	r2, r1
 800765e:	4291      	cmp	r1, r2
 8007660:	d100      	bne.n	8007664 <memcpy+0xc>
 8007662:	bd10      	pop	{r4, pc}
 8007664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800766c:	e7f7      	b.n	800765e <memcpy+0x6>

0800766e <memmove>:
 800766e:	4288      	cmp	r0, r1
 8007670:	b510      	push	{r4, lr}
 8007672:	eb01 0302 	add.w	r3, r1, r2
 8007676:	d807      	bhi.n	8007688 <memmove+0x1a>
 8007678:	1e42      	subs	r2, r0, #1
 800767a:	4299      	cmp	r1, r3
 800767c:	d00a      	beq.n	8007694 <memmove+0x26>
 800767e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007682:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007686:	e7f8      	b.n	800767a <memmove+0xc>
 8007688:	4283      	cmp	r3, r0
 800768a:	d9f5      	bls.n	8007678 <memmove+0xa>
 800768c:	1881      	adds	r1, r0, r2
 800768e:	1ad2      	subs	r2, r2, r3
 8007690:	42d3      	cmn	r3, r2
 8007692:	d100      	bne.n	8007696 <memmove+0x28>
 8007694:	bd10      	pop	{r4, pc}
 8007696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800769a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800769e:	e7f7      	b.n	8007690 <memmove+0x22>

080076a0 <_free_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4605      	mov	r5, r0
 80076a4:	2900      	cmp	r1, #0
 80076a6:	d045      	beq.n	8007734 <_free_r+0x94>
 80076a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ac:	1f0c      	subs	r4, r1, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	bfb8      	it	lt
 80076b2:	18e4      	addlt	r4, r4, r3
 80076b4:	f000 f8d2 	bl	800785c <__malloc_lock>
 80076b8:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <_free_r+0x98>)
 80076ba:	6813      	ldr	r3, [r2, #0]
 80076bc:	4610      	mov	r0, r2
 80076be:	b933      	cbnz	r3, 80076ce <_free_r+0x2e>
 80076c0:	6063      	str	r3, [r4, #4]
 80076c2:	6014      	str	r4, [r2, #0]
 80076c4:	4628      	mov	r0, r5
 80076c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076ca:	f000 b8c8 	b.w	800785e <__malloc_unlock>
 80076ce:	42a3      	cmp	r3, r4
 80076d0:	d90c      	bls.n	80076ec <_free_r+0x4c>
 80076d2:	6821      	ldr	r1, [r4, #0]
 80076d4:	1862      	adds	r2, r4, r1
 80076d6:	4293      	cmp	r3, r2
 80076d8:	bf04      	itt	eq
 80076da:	681a      	ldreq	r2, [r3, #0]
 80076dc:	685b      	ldreq	r3, [r3, #4]
 80076de:	6063      	str	r3, [r4, #4]
 80076e0:	bf04      	itt	eq
 80076e2:	1852      	addeq	r2, r2, r1
 80076e4:	6022      	streq	r2, [r4, #0]
 80076e6:	6004      	str	r4, [r0, #0]
 80076e8:	e7ec      	b.n	80076c4 <_free_r+0x24>
 80076ea:	4613      	mov	r3, r2
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	b10a      	cbz	r2, 80076f4 <_free_r+0x54>
 80076f0:	42a2      	cmp	r2, r4
 80076f2:	d9fa      	bls.n	80076ea <_free_r+0x4a>
 80076f4:	6819      	ldr	r1, [r3, #0]
 80076f6:	1858      	adds	r0, r3, r1
 80076f8:	42a0      	cmp	r0, r4
 80076fa:	d10b      	bne.n	8007714 <_free_r+0x74>
 80076fc:	6820      	ldr	r0, [r4, #0]
 80076fe:	4401      	add	r1, r0
 8007700:	1858      	adds	r0, r3, r1
 8007702:	4282      	cmp	r2, r0
 8007704:	6019      	str	r1, [r3, #0]
 8007706:	d1dd      	bne.n	80076c4 <_free_r+0x24>
 8007708:	6810      	ldr	r0, [r2, #0]
 800770a:	6852      	ldr	r2, [r2, #4]
 800770c:	605a      	str	r2, [r3, #4]
 800770e:	4401      	add	r1, r0
 8007710:	6019      	str	r1, [r3, #0]
 8007712:	e7d7      	b.n	80076c4 <_free_r+0x24>
 8007714:	d902      	bls.n	800771c <_free_r+0x7c>
 8007716:	230c      	movs	r3, #12
 8007718:	602b      	str	r3, [r5, #0]
 800771a:	e7d3      	b.n	80076c4 <_free_r+0x24>
 800771c:	6820      	ldr	r0, [r4, #0]
 800771e:	1821      	adds	r1, r4, r0
 8007720:	428a      	cmp	r2, r1
 8007722:	bf04      	itt	eq
 8007724:	6811      	ldreq	r1, [r2, #0]
 8007726:	6852      	ldreq	r2, [r2, #4]
 8007728:	6062      	str	r2, [r4, #4]
 800772a:	bf04      	itt	eq
 800772c:	1809      	addeq	r1, r1, r0
 800772e:	6021      	streq	r1, [r4, #0]
 8007730:	605c      	str	r4, [r3, #4]
 8007732:	e7c7      	b.n	80076c4 <_free_r+0x24>
 8007734:	bd38      	pop	{r3, r4, r5, pc}
 8007736:	bf00      	nop
 8007738:	200000b0 	.word	0x200000b0

0800773c <_malloc_r>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	1ccd      	adds	r5, r1, #3
 8007740:	f025 0503 	bic.w	r5, r5, #3
 8007744:	3508      	adds	r5, #8
 8007746:	2d0c      	cmp	r5, #12
 8007748:	bf38      	it	cc
 800774a:	250c      	movcc	r5, #12
 800774c:	2d00      	cmp	r5, #0
 800774e:	4606      	mov	r6, r0
 8007750:	db01      	blt.n	8007756 <_malloc_r+0x1a>
 8007752:	42a9      	cmp	r1, r5
 8007754:	d903      	bls.n	800775e <_malloc_r+0x22>
 8007756:	230c      	movs	r3, #12
 8007758:	6033      	str	r3, [r6, #0]
 800775a:	2000      	movs	r0, #0
 800775c:	bd70      	pop	{r4, r5, r6, pc}
 800775e:	f000 f87d 	bl	800785c <__malloc_lock>
 8007762:	4a21      	ldr	r2, [pc, #132]	; (80077e8 <_malloc_r+0xac>)
 8007764:	6814      	ldr	r4, [r2, #0]
 8007766:	4621      	mov	r1, r4
 8007768:	b991      	cbnz	r1, 8007790 <_malloc_r+0x54>
 800776a:	4c20      	ldr	r4, [pc, #128]	; (80077ec <_malloc_r+0xb0>)
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	b91b      	cbnz	r3, 8007778 <_malloc_r+0x3c>
 8007770:	4630      	mov	r0, r6
 8007772:	f000 f863 	bl	800783c <_sbrk_r>
 8007776:	6020      	str	r0, [r4, #0]
 8007778:	4629      	mov	r1, r5
 800777a:	4630      	mov	r0, r6
 800777c:	f000 f85e 	bl	800783c <_sbrk_r>
 8007780:	1c43      	adds	r3, r0, #1
 8007782:	d124      	bne.n	80077ce <_malloc_r+0x92>
 8007784:	230c      	movs	r3, #12
 8007786:	6033      	str	r3, [r6, #0]
 8007788:	4630      	mov	r0, r6
 800778a:	f000 f868 	bl	800785e <__malloc_unlock>
 800778e:	e7e4      	b.n	800775a <_malloc_r+0x1e>
 8007790:	680b      	ldr	r3, [r1, #0]
 8007792:	1b5b      	subs	r3, r3, r5
 8007794:	d418      	bmi.n	80077c8 <_malloc_r+0x8c>
 8007796:	2b0b      	cmp	r3, #11
 8007798:	d90f      	bls.n	80077ba <_malloc_r+0x7e>
 800779a:	600b      	str	r3, [r1, #0]
 800779c:	50cd      	str	r5, [r1, r3]
 800779e:	18cc      	adds	r4, r1, r3
 80077a0:	4630      	mov	r0, r6
 80077a2:	f000 f85c 	bl	800785e <__malloc_unlock>
 80077a6:	f104 000b 	add.w	r0, r4, #11
 80077aa:	1d23      	adds	r3, r4, #4
 80077ac:	f020 0007 	bic.w	r0, r0, #7
 80077b0:	1ac3      	subs	r3, r0, r3
 80077b2:	d0d3      	beq.n	800775c <_malloc_r+0x20>
 80077b4:	425a      	negs	r2, r3
 80077b6:	50e2      	str	r2, [r4, r3]
 80077b8:	e7d0      	b.n	800775c <_malloc_r+0x20>
 80077ba:	428c      	cmp	r4, r1
 80077bc:	684b      	ldr	r3, [r1, #4]
 80077be:	bf16      	itet	ne
 80077c0:	6063      	strne	r3, [r4, #4]
 80077c2:	6013      	streq	r3, [r2, #0]
 80077c4:	460c      	movne	r4, r1
 80077c6:	e7eb      	b.n	80077a0 <_malloc_r+0x64>
 80077c8:	460c      	mov	r4, r1
 80077ca:	6849      	ldr	r1, [r1, #4]
 80077cc:	e7cc      	b.n	8007768 <_malloc_r+0x2c>
 80077ce:	1cc4      	adds	r4, r0, #3
 80077d0:	f024 0403 	bic.w	r4, r4, #3
 80077d4:	42a0      	cmp	r0, r4
 80077d6:	d005      	beq.n	80077e4 <_malloc_r+0xa8>
 80077d8:	1a21      	subs	r1, r4, r0
 80077da:	4630      	mov	r0, r6
 80077dc:	f000 f82e 	bl	800783c <_sbrk_r>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d0cf      	beq.n	8007784 <_malloc_r+0x48>
 80077e4:	6025      	str	r5, [r4, #0]
 80077e6:	e7db      	b.n	80077a0 <_malloc_r+0x64>
 80077e8:	200000b0 	.word	0x200000b0
 80077ec:	200000b4 	.word	0x200000b4

080077f0 <_realloc_r>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	4607      	mov	r7, r0
 80077f4:	4614      	mov	r4, r2
 80077f6:	460e      	mov	r6, r1
 80077f8:	b921      	cbnz	r1, 8007804 <_realloc_r+0x14>
 80077fa:	4611      	mov	r1, r2
 80077fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007800:	f7ff bf9c 	b.w	800773c <_malloc_r>
 8007804:	b922      	cbnz	r2, 8007810 <_realloc_r+0x20>
 8007806:	f7ff ff4b 	bl	80076a0 <_free_r>
 800780a:	4625      	mov	r5, r4
 800780c:	4628      	mov	r0, r5
 800780e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007810:	f000 f826 	bl	8007860 <_malloc_usable_size_r>
 8007814:	42a0      	cmp	r0, r4
 8007816:	d20f      	bcs.n	8007838 <_realloc_r+0x48>
 8007818:	4621      	mov	r1, r4
 800781a:	4638      	mov	r0, r7
 800781c:	f7ff ff8e 	bl	800773c <_malloc_r>
 8007820:	4605      	mov	r5, r0
 8007822:	2800      	cmp	r0, #0
 8007824:	d0f2      	beq.n	800780c <_realloc_r+0x1c>
 8007826:	4631      	mov	r1, r6
 8007828:	4622      	mov	r2, r4
 800782a:	f7ff ff15 	bl	8007658 <memcpy>
 800782e:	4631      	mov	r1, r6
 8007830:	4638      	mov	r0, r7
 8007832:	f7ff ff35 	bl	80076a0 <_free_r>
 8007836:	e7e9      	b.n	800780c <_realloc_r+0x1c>
 8007838:	4635      	mov	r5, r6
 800783a:	e7e7      	b.n	800780c <_realloc_r+0x1c>

0800783c <_sbrk_r>:
 800783c:	b538      	push	{r3, r4, r5, lr}
 800783e:	4c06      	ldr	r4, [pc, #24]	; (8007858 <_sbrk_r+0x1c>)
 8007840:	2300      	movs	r3, #0
 8007842:	4605      	mov	r5, r0
 8007844:	4608      	mov	r0, r1
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	f7fa f9ac 	bl	8001ba4 <_sbrk>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d102      	bne.n	8007856 <_sbrk_r+0x1a>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	b103      	cbz	r3, 8007856 <_sbrk_r+0x1a>
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	bd38      	pop	{r3, r4, r5, pc}
 8007858:	20000350 	.word	0x20000350

0800785c <__malloc_lock>:
 800785c:	4770      	bx	lr

0800785e <__malloc_unlock>:
 800785e:	4770      	bx	lr

08007860 <_malloc_usable_size_r>:
 8007860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007864:	1f18      	subs	r0, r3, #4
 8007866:	2b00      	cmp	r3, #0
 8007868:	bfbc      	itt	lt
 800786a:	580b      	ldrlt	r3, [r1, r0]
 800786c:	18c0      	addlt	r0, r0, r3
 800786e:	4770      	bx	lr

08007870 <_init>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr

0800787c <_fini>:
 800787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787e:	bf00      	nop
 8007880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007882:	bc08      	pop	{r3}
 8007884:	469e      	mov	lr, r3
 8007886:	4770      	bx	lr
