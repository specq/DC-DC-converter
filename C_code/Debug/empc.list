
empc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005170  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005338  08005338  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08005338  08005338  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005338  08005338  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08005340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000054  08005394  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08005394  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011184  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020a4  00000000  00000000  00031208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  000332b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  000343a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c1a  00000000  00000000  00035388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c56f  00000000  00000000  0005cfa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe6b5  00000000  00000000  00069511  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167bc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f4  00000000  00000000  00167c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052e0 	.word	0x080052e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	080052e0 	.word	0x080052e0

080001c8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b0a6      	sub	sp, #152	; 0x98
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001da:	f002 fcad 	bl	8002b38 <HAL_GPIO_WritePin>
	if (htim->Instance == htim3.Instance)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b09      	ldr	r3, [pc, #36]	; (8000208 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	f040 82a3 	bne.w	8000732 <HAL_TIM_PeriodElapsedCallback+0x56a>
    {
		if(iter < 10000){
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80001ee:	881b      	ldrh	r3, [r3, #0]
 80001f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d80b      	bhi.n	8000210 <HAL_TIM_PeriodElapsedCallback+0x48>
			iter++;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80001fa:	881b      	ldrh	r3, [r3, #0]
 80001fc:	3301      	adds	r3, #1
 80001fe:	b29a      	uxth	r2, r3
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000202:	801a      	strh	r2, [r3, #0]
 8000204:	e295      	b.n	8000732 <HAL_TIM_PeriodElapsedCallback+0x56a>
 8000206:	bf00      	nop
 8000208:	20000098 	.word	0x20000098
 800020c:	20000070 	.word	0x20000070
		}
		else{
			int y0 = 3300*adc_buf[0]/29500;
 8000210:	4ba3      	ldr	r3, [pc, #652]	; (80004a0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	461a      	mov	r2, r3
 8000216:	f640 43e4 	movw	r3, #3300	; 0xce4
 800021a:	fb03 f302 	mul.w	r3, r3, r2
 800021e:	4aa1      	ldr	r2, [pc, #644]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000220:	fb82 1203 	smull	r1, r2, r2, r3
 8000224:	441a      	add	r2, r3
 8000226:	1392      	asrs	r2, r2, #14
 8000228:	17db      	asrs	r3, r3, #31
 800022a:	1ad3      	subs	r3, r2, r3
 800022c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			int y1 = 3300*adc_buf[1]/1155;
 8000230:	4b9b      	ldr	r3, [pc, #620]	; (80004a0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000232:	885b      	ldrh	r3, [r3, #2]
 8000234:	461a      	mov	r2, r3
 8000236:	f640 43e4 	movw	r3, #3300	; 0xce4
 800023a:	fb03 f302 	mul.w	r3, r3, r2
 800023e:	4a9a      	ldr	r2, [pc, #616]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000240:	fb82 1203 	smull	r1, r2, r2, r3
 8000244:	1252      	asrs	r2, r2, #9
 8000246:	17db      	asrs	r3, r3, #31
 8000248:	1ad3      	subs	r3, r2, r3
 800024a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

			// A priori state estimate
			int x0_prev = x[0];
 800024e:	4b97      	ldr	r3, [pc, #604]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			int x1_prev = x[1];
 8000256:	4b95      	ldr	r3, [pc, #596]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			x[0] = B[0]*u;  x[0] /= 1000; x[0] += A[0]*x0_prev;  x[0] += A[1]*x1_prev;  x[0] /= 1000;
 800025e:	4b94      	ldr	r3, [pc, #592]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a94      	ldr	r2, [pc, #592]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000264:	6812      	ldr	r2, [r2, #0]
 8000266:	fb02 f303 	mul.w	r3, r2, r3
 800026a:	4a90      	ldr	r2, [pc, #576]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800026c:	6013      	str	r3, [r2, #0]
 800026e:	4b8f      	ldr	r3, [pc, #572]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a91      	ldr	r2, [pc, #580]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000274:	fb82 1203 	smull	r1, r2, r2, r3
 8000278:	1192      	asrs	r2, r2, #6
 800027a:	17db      	asrs	r3, r3, #31
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	4a8b      	ldr	r2, [pc, #556]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000280:	6013      	str	r3, [r2, #0]
 8000282:	4b8a      	ldr	r3, [pc, #552]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b8d      	ldr	r3, [pc, #564]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800028e:	fb01 f303 	mul.w	r3, r1, r3
 8000292:	4413      	add	r3, r2
 8000294:	4a85      	ldr	r2, [pc, #532]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000296:	6013      	str	r3, [r2, #0]
 8000298:	4b84      	ldr	r3, [pc, #528]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	4b87      	ldr	r3, [pc, #540]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80002a4:	fb01 f303 	mul.w	r3, r1, r3
 80002a8:	4413      	add	r3, r2
 80002aa:	4a80      	ldr	r2, [pc, #512]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80002ac:	6013      	str	r3, [r2, #0]
 80002ae:	4b7f      	ldr	r3, [pc, #508]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a81      	ldr	r2, [pc, #516]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80002b4:	fb82 1203 	smull	r1, r2, r2, r3
 80002b8:	1192      	asrs	r2, r2, #6
 80002ba:	17db      	asrs	r3, r3, #31
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	4a7b      	ldr	r2, [pc, #492]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80002c0:	6013      	str	r3, [r2, #0]
			x[1] = B[1]*u;  x[1] /= 1000; x[1] += A[2]*x0_prev;  x[1] += A[3]*x1_prev;  x[1] /= 1000;
 80002c2:	4b7b      	ldr	r3, [pc, #492]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	4a7b      	ldr	r2, [pc, #492]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80002c8:	6812      	ldr	r2, [r2, #0]
 80002ca:	fb02 f303 	mul.w	r3, r2, r3
 80002ce:	4a77      	ldr	r2, [pc, #476]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80002d0:	6053      	str	r3, [r2, #4]
 80002d2:	4b76      	ldr	r3, [pc, #472]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	4a78      	ldr	r2, [pc, #480]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80002d8:	fb82 1203 	smull	r1, r2, r2, r3
 80002dc:	1192      	asrs	r2, r2, #6
 80002de:	17db      	asrs	r3, r3, #31
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	4a72      	ldr	r2, [pc, #456]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80002e4:	6053      	str	r3, [r2, #4]
 80002e6:	4b71      	ldr	r3, [pc, #452]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	4b74      	ldr	r3, [pc, #464]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80002f2:	fb01 f303 	mul.w	r3, r1, r3
 80002f6:	4413      	add	r3, r2
 80002f8:	4a6c      	ldr	r2, [pc, #432]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80002fa:	6053      	str	r3, [r2, #4]
 80002fc:	4b6b      	ldr	r3, [pc, #428]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80002fe:	685a      	ldr	r2, [r3, #4]
 8000300:	4b6e      	ldr	r3, [pc, #440]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000308:	fb01 f303 	mul.w	r3, r1, r3
 800030c:	4413      	add	r3, r2
 800030e:	4a67      	ldr	r2, [pc, #412]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000310:	6053      	str	r3, [r2, #4]
 8000312:	4b66      	ldr	r3, [pc, #408]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	4a68      	ldr	r2, [pc, #416]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000318:	fb82 1203 	smull	r1, r2, r2, r3
 800031c:	1192      	asrs	r2, r2, #6
 800031e:	17db      	asrs	r3, r3, #31
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	4a62      	ldr	r2, [pc, #392]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000324:	6053      	str	r3, [r2, #4]

			// A priori covariance
			int AP[4];
			int APAt[4];
			int P_pri[4];
			AP[0] = A[0]*P[0];   AP[0] += A[1]*P[2];
 8000326:	4b65      	ldr	r3, [pc, #404]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a65      	ldr	r2, [pc, #404]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800032c:	6812      	ldr	r2, [r2, #0]
 800032e:	fb02 f303 	mul.w	r3, r2, r3
 8000332:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000334:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000336:	4b61      	ldr	r3, [pc, #388]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	4961      	ldr	r1, [pc, #388]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800033c:	6889      	ldr	r1, [r1, #8]
 800033e:	fb01 f303 	mul.w	r3, r1, r3
 8000342:	4413      	add	r3, r2
 8000344:	66fb      	str	r3, [r7, #108]	; 0x6c
			AP[1] = A[0]*P[1];   AP[1] += A[1]*P[3];
 8000346:	4b5d      	ldr	r3, [pc, #372]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a5d      	ldr	r2, [pc, #372]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800034c:	6852      	ldr	r2, [r2, #4]
 800034e:	fb02 f303 	mul.w	r3, r2, r3
 8000352:	673b      	str	r3, [r7, #112]	; 0x70
 8000354:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000356:	4b59      	ldr	r3, [pc, #356]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	4959      	ldr	r1, [pc, #356]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800035c:	68c9      	ldr	r1, [r1, #12]
 800035e:	fb01 f303 	mul.w	r3, r1, r3
 8000362:	4413      	add	r3, r2
 8000364:	673b      	str	r3, [r7, #112]	; 0x70
			AP[2] = A[2]*P[0];   AP[2] += A[3]*P[2];
 8000366:	4b55      	ldr	r3, [pc, #340]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	4a55      	ldr	r2, [pc, #340]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800036c:	6812      	ldr	r2, [r2, #0]
 800036e:	fb02 f303 	mul.w	r3, r2, r3
 8000372:	677b      	str	r3, [r7, #116]	; 0x74
 8000374:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000376:	4b51      	ldr	r3, [pc, #324]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	4951      	ldr	r1, [pc, #324]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800037c:	6889      	ldr	r1, [r1, #8]
 800037e:	fb01 f303 	mul.w	r3, r1, r3
 8000382:	4413      	add	r3, r2
 8000384:	677b      	str	r3, [r7, #116]	; 0x74
			AP[3] = A[2]*P[1];   AP[3] += A[3]*P[3];
 8000386:	4b4d      	ldr	r3, [pc, #308]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	4a4d      	ldr	r2, [pc, #308]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800038c:	6852      	ldr	r2, [r2, #4]
 800038e:	fb02 f303 	mul.w	r3, r2, r3
 8000392:	67bb      	str	r3, [r7, #120]	; 0x78
 8000394:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000396:	4b49      	ldr	r3, [pc, #292]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	4949      	ldr	r1, [pc, #292]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800039c:	68c9      	ldr	r1, [r1, #12]
 800039e:	fb01 f303 	mul.w	r3, r1, r3
 80003a2:	4413      	add	r3, r2
 80003a4:	67bb      	str	r3, [r7, #120]	; 0x78
			APAt[0] = AP[0]*At[0];   APAt[0] += AP[1]*At[2];
 80003a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80003a8:	4a46      	ldr	r2, [pc, #280]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80003aa:	6812      	ldr	r2, [r2, #0]
 80003ac:	fb02 f303 	mul.w	r3, r2, r3
 80003b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80003b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80003b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80003b6:	4943      	ldr	r1, [pc, #268]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80003b8:	6889      	ldr	r1, [r1, #8]
 80003ba:	fb01 f303 	mul.w	r3, r1, r3
 80003be:	4413      	add	r3, r2
 80003c0:	65fb      	str	r3, [r7, #92]	; 0x5c
			APAt[1] = AP[0]*At[1];   APAt[1] += AP[1]*At[3];
 80003c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80003c4:	4a3f      	ldr	r2, [pc, #252]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80003c6:	6852      	ldr	r2, [r2, #4]
 80003c8:	fb02 f303 	mul.w	r3, r2, r3
 80003cc:	663b      	str	r3, [r7, #96]	; 0x60
 80003ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80003d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80003d2:	493c      	ldr	r1, [pc, #240]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80003d4:	68c9      	ldr	r1, [r1, #12]
 80003d6:	fb01 f303 	mul.w	r3, r1, r3
 80003da:	4413      	add	r3, r2
 80003dc:	663b      	str	r3, [r7, #96]	; 0x60
			APAt[2] = AP[2]*At[0];   APAt[2] += AP[3]*At[2];
 80003de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80003e0:	4a38      	ldr	r2, [pc, #224]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80003e2:	6812      	ldr	r2, [r2, #0]
 80003e4:	fb02 f303 	mul.w	r3, r2, r3
 80003e8:	667b      	str	r3, [r7, #100]	; 0x64
 80003ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80003ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80003ee:	4935      	ldr	r1, [pc, #212]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80003f0:	6889      	ldr	r1, [r1, #8]
 80003f2:	fb01 f303 	mul.w	r3, r1, r3
 80003f6:	4413      	add	r3, r2
 80003f8:	667b      	str	r3, [r7, #100]	; 0x64
			APAt[3] = AP[2]*At[1];   APAt[3] += AP[3]*At[3];
 80003fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80003fc:	4a31      	ldr	r2, [pc, #196]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80003fe:	6852      	ldr	r2, [r2, #4]
 8000400:	fb02 f303 	mul.w	r3, r2, r3
 8000404:	66bb      	str	r3, [r7, #104]	; 0x68
 8000406:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800040a:	492e      	ldr	r1, [pc, #184]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800040c:	68c9      	ldr	r1, [r1, #12]
 800040e:	fb01 f303 	mul.w	r3, r1, r3
 8000412:	4413      	add	r3, r2
 8000414:	66bb      	str	r3, [r7, #104]	; 0x68
			P_pri[0] = APAt[0];   P_pri[0] /= 1000000;  P_pri[0] += Q0;
 8000416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800041a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800041c:	4a2a      	ldr	r2, [pc, #168]	; (80004c8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800041e:	fb82 1203 	smull	r1, r2, r2, r3
 8000422:	1492      	asrs	r2, r2, #18
 8000424:	17db      	asrs	r3, r3, #31
 8000426:	1ad3      	subs	r3, r2, r3
 8000428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800042a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800042c:	4b27      	ldr	r3, [pc, #156]	; (80004cc <HAL_TIM_PeriodElapsedCallback+0x304>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4413      	add	r3, r2
 8000432:	64fb      	str	r3, [r7, #76]	; 0x4c
			P_pri[1] = APAt[1];   P_pri[1] /= 1000000;
 8000434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000436:	653b      	str	r3, [r7, #80]	; 0x50
 8000438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800043a:	4a23      	ldr	r2, [pc, #140]	; (80004c8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800043c:	fb82 1203 	smull	r1, r2, r2, r3
 8000440:	1492      	asrs	r2, r2, #18
 8000442:	17db      	asrs	r3, r3, #31
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	653b      	str	r3, [r7, #80]	; 0x50
			P_pri[2] = APAt[2];   P_pri[2] /= 1000000;
 8000448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800044a:	657b      	str	r3, [r7, #84]	; 0x54
 800044c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800044e:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000450:	fb82 1203 	smull	r1, r2, r2, r3
 8000454:	1492      	asrs	r2, r2, #18
 8000456:	17db      	asrs	r3, r3, #31
 8000458:	1ad3      	subs	r3, r2, r3
 800045a:	657b      	str	r3, [r7, #84]	; 0x54
			P_pri[3] = APAt[3];   P_pri[3] /= 1000000;  P_pri[3] += Q3;
 800045c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800045e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000462:	4a19      	ldr	r2, [pc, #100]	; (80004c8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000464:	fb82 1203 	smull	r1, r2, r2, r3
 8000468:	1492      	asrs	r2, r2, #18
 800046a:	17db      	asrs	r3, r3, #31
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4413      	add	r3, r2
 8000478:	65bb      	str	r3, [r7, #88]	; 0x58

			// Update
			int res0 = y0 - x[0];
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			int res1 = y1 - x[1];
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000490:	1ad3      	subs	r3, r2, r3
 8000492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			// Compute the inverse of S = P+R
			int S[4] = {P_pri[0]+R0, P_pri[1], P_pri[2], P_pri[3]+R3};
 8000496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000498:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4413      	add	r3, r2
 800049e:	e01b      	b.n	80004d8 <HAL_TIM_PeriodElapsedCallback+0x310>
 80004a0:	20000080 	.word	0x20000080
 80004a4:	8e2e0727 	.word	0x8e2e0727
 80004a8:	717b74cf 	.word	0x717b74cf
 80004ac:	20000074 	.word	0x20000074
 80004b0:	20000040 	.word	0x20000040
 80004b4:	2000007c 	.word	0x2000007c
 80004b8:	10624dd3 	.word	0x10624dd3
 80004bc:	20000020 	.word	0x20000020
 80004c0:	20000010 	.word	0x20000010
 80004c4:	20000030 	.word	0x20000030
 80004c8:	431bde83 	.word	0x431bde83
 80004cc:	20000000 	.word	0x20000000
 80004d0:	20000004 	.word	0x20000004
 80004d4:	20000008 	.word	0x20000008
 80004d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80004da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004dc:	643b      	str	r3, [r7, #64]	; 0x40
 80004de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004e0:	647b      	str	r3, [r7, #68]	; 0x44
 80004e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80004e4:	4b98      	ldr	r3, [pc, #608]	; (8000748 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4413      	add	r3, r2
 80004ea:	64bb      	str	r3, [r7, #72]	; 0x48
			int S_inv[4] = {S[3], -S[1], -S[2], S[0]};
 80004ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004f2:	425b      	negs	r3, r3
 80004f4:	633b      	str	r3, [r7, #48]	; 0x30
 80004f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004f8:	425b      	negs	r3, r3
 80004fa:	637b      	str	r3, [r7, #52]	; 0x34
 80004fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004fe:	63bb      	str	r3, [r7, #56]	; 0x38
			int det_S = S[0]*S[3] - S[1]*S[2];
 8000500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000504:	fb02 f203 	mul.w	r2, r2, r3
 8000508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800050a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800050c:	fb01 f303 	mul.w	r3, r1, r3
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	67fb      	str	r3, [r7, #124]	; 0x7c

			// K = P*inv(S), Kalman gain
			int K[4];
			K[0] = P_pri[0]*S_inv[0]; K[0] += P_pri[1]*S_inv[2]; K[0] *= 1000; K[0] /= det_S;
 8000514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000518:	fb02 f303 	mul.w	r3, r2, r3
 800051c:	61fb      	str	r3, [r7, #28]
 800051e:	69fa      	ldr	r2, [r7, #28]
 8000520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000522:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000524:	fb01 f303 	mul.w	r3, r1, r3
 8000528:	4413      	add	r3, r2
 800052a:	61fb      	str	r3, [r7, #28]
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000532:	fb02 f303 	mul.w	r3, r2, r3
 8000536:	61fb      	str	r3, [r7, #28]
 8000538:	69fa      	ldr	r2, [r7, #28]
 800053a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800053c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000540:	61fb      	str	r3, [r7, #28]
			K[1] = P_pri[0]*S_inv[1]; K[1] += P_pri[1]*S_inv[3]; K[1] *= 1000; K[1] /= det_S;
 8000542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000546:	fb02 f303 	mul.w	r3, r2, r3
 800054a:	623b      	str	r3, [r7, #32]
 800054c:	6a3a      	ldr	r2, [r7, #32]
 800054e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000550:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000552:	fb01 f303 	mul.w	r3, r1, r3
 8000556:	4413      	add	r3, r2
 8000558:	623b      	str	r3, [r7, #32]
 800055a:	6a3b      	ldr	r3, [r7, #32]
 800055c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000560:	fb02 f303 	mul.w	r3, r2, r3
 8000564:	623b      	str	r3, [r7, #32]
 8000566:	6a3a      	ldr	r2, [r7, #32]
 8000568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800056a:	fb92 f3f3 	sdiv	r3, r2, r3
 800056e:	623b      	str	r3, [r7, #32]
			K[2] = P_pri[2]*S_inv[0]; K[2] += P_pri[3]*S_inv[2]; K[2] *= 1000; K[2] /= det_S;
 8000570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000574:	fb02 f303 	mul.w	r3, r2, r3
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
 800057a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800057c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800057e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000580:	fb01 f303 	mul.w	r3, r1, r3
 8000584:	4413      	add	r3, r2
 8000586:	627b      	str	r3, [r7, #36]	; 0x24
 8000588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
 8000594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000596:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000598:	fb92 f3f3 	sdiv	r3, r2, r3
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
			K[3] = P_pri[2]*S_inv[1]; K[3] += P_pri[3]*S_inv[3]; K[3] *= 1000; K[3] /= det_S;
 800059e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005a2:	fb02 f303 	mul.w	r3, r2, r3
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80005ae:	fb01 f303 	mul.w	r3, r1, r3
 80005b2:	4413      	add	r3, r2
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80005b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80005c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28


			// Update state
			x[0] += K[0]*res0; x[0] += K[1]*res1; x[0] /= 1000;
 80005cc:	4b5f      	ldr	r3, [pc, #380]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80005d6:	fb01 f303 	mul.w	r3, r1, r3
 80005da:	4413      	add	r3, r2
 80005dc:	4a5b      	ldr	r2, [pc, #364]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b5a      	ldr	r3, [pc, #360]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	6a3b      	ldr	r3, [r7, #32]
 80005e6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80005ea:	fb01 f303 	mul.w	r3, r1, r3
 80005ee:	4413      	add	r3, r2
 80005f0:	4a56      	ldr	r2, [pc, #344]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b55      	ldr	r3, [pc, #340]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a55      	ldr	r2, [pc, #340]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80005fa:	fb82 1203 	smull	r1, r2, r2, r3
 80005fe:	1192      	asrs	r2, r2, #6
 8000600:	17db      	asrs	r3, r3, #31
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	4a51      	ldr	r2, [pc, #324]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000606:	6013      	str	r3, [r2, #0]
			x[1] += K[2]*res0; x[1] += K[3]*res1; x[1] /= 1000;
 8000608:	4b50      	ldr	r3, [pc, #320]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000612:	fb01 f303 	mul.w	r3, r1, r3
 8000616:	4413      	add	r3, r2
 8000618:	4a4c      	ldr	r2, [pc, #304]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 800061a:	6053      	str	r3, [r2, #4]
 800061c:	4b4b      	ldr	r3, [pc, #300]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000622:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000626:	fb01 f303 	mul.w	r3, r1, r3
 800062a:	4413      	add	r3, r2
 800062c:	4a47      	ldr	r2, [pc, #284]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 800062e:	6053      	str	r3, [r2, #4]
 8000630:	4b46      	ldr	r3, [pc, #280]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	4a46      	ldr	r2, [pc, #280]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000636:	fb82 1203 	smull	r1, r2, r2, r3
 800063a:	1192      	asrs	r2, r2, #6
 800063c:	17db      	asrs	r3, r3, #31
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	4a42      	ldr	r2, [pc, #264]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8000642:	6053      	str	r3, [r2, #4]

			// Update covariance
			int IminusKC[4];
			IminusKC[0] = 1000-K[0];
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800064a:	60fb      	str	r3, [r7, #12]
			IminusKC[1] = -K[1];
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	425b      	negs	r3, r3
 8000650:	613b      	str	r3, [r7, #16]
			IminusKC[2] = -K[2];
 8000652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000654:	425b      	negs	r3, r3
 8000656:	617b      	str	r3, [r7, #20]
			IminusKC[3] = 1000-K[3];
 8000658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800065e:	61bb      	str	r3, [r7, #24]

			P[0] = IminusKC[0]*P_pri[0]; P[0] += IminusKC[1]*P_pri[2]; P[0] /= 1000;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000664:	fb02 f303 	mul.w	r3, r2, r3
 8000668:	4a3a      	ldr	r2, [pc, #232]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b39      	ldr	r3, [pc, #228]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000674:	fb01 f303 	mul.w	r3, r1, r3
 8000678:	4413      	add	r3, r2
 800067a:	4a36      	ldr	r2, [pc, #216]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	4b35      	ldr	r3, [pc, #212]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a33      	ldr	r2, [pc, #204]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8000684:	fb82 1203 	smull	r1, r2, r2, r3
 8000688:	1192      	asrs	r2, r2, #6
 800068a:	17db      	asrs	r3, r3, #31
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	4a31      	ldr	r2, [pc, #196]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000690:	6013      	str	r3, [r2, #0]
			P[1] = IminusKC[0]*P_pri[1]; P[1] += IminusKC[1]*P_pri[3]; P[1] /= 1000;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000696:	fb02 f303 	mul.w	r3, r2, r3
 800069a:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800069c:	6053      	str	r3, [r2, #4]
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80006a0:	685a      	ldr	r2, [r3, #4]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80006a6:	fb01 f303 	mul.w	r3, r1, r3
 80006aa:	4413      	add	r3, r2
 80006ac:	4a29      	ldr	r2, [pc, #164]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80006ae:	6053      	str	r3, [r2, #4]
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a26      	ldr	r2, [pc, #152]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80006b6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ba:	1192      	asrs	r2, r2, #6
 80006bc:	17db      	asrs	r3, r3, #31
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	4a24      	ldr	r2, [pc, #144]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80006c2:	6053      	str	r3, [r2, #4]
			P[2] = IminusKC[2]*P_pri[0]; P[2] += IminusKC[3]*P_pri[2]; P[3] /= 1000;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80006c8:	fb02 f303 	mul.w	r3, r2, r3
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80006ce:	6093      	str	r3, [r2, #8]
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80006d8:	fb01 f303 	mul.w	r3, r1, r3
 80006dc:	4413      	add	r3, r2
 80006de:	4a1d      	ldr	r2, [pc, #116]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80006e0:	6093      	str	r3, [r2, #8]
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80006e8:	fb82 1203 	smull	r1, r2, r2, r3
 80006ec:	1192      	asrs	r2, r2, #6
 80006ee:	17db      	asrs	r3, r3, #31
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	4a18      	ldr	r2, [pc, #96]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80006f4:	60d3      	str	r3, [r2, #12]
			P[3] = IminusKC[2]*P_pri[1]; P[3] += IminusKC[3]*P_pri[3]; P[4] /= 1000;
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000700:	60d3      	str	r3, [r2, #12]
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000704:	68da      	ldr	r2, [r3, #12]
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	4413      	add	r3, r2
 8000710:	4a10      	ldr	r2, [pc, #64]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000712:	60d3      	str	r3, [r2, #12]
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000716:	691b      	ldr	r3, [r3, #16]
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800071a:	fb82 1203 	smull	r1, r2, r2, r3
 800071e:	1192      	asrs	r2, r2, #6
 8000720:	17db      	asrs	r3, r3, #31
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8000726:	6113      	str	r3, [r2, #16]
			htim2.Instance->CCR2 = 500;
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000730:	639a      	str	r2, [r3, #56]	; 0x38
			htim2.Instance->CCR2 = u*htim2.Init.Period/1000000;
			//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, htim2.Instance->CCR2*4095/htim2.Init.Period/3.3);
			*/
		}
	}
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f002 f9fc 	bl	8002b38 <HAL_GPIO_WritePin>
}
 8000740:	bf00      	nop
 8000742:	3798      	adds	r7, #152	; 0x98
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000000c 	.word	0x2000000c
 800074c:	20000074 	.word	0x20000074
 8000750:	10624dd3 	.word	0x10624dd3
 8000754:	20000010 	.word	0x20000010
 8000758:	20000184 	.word	0x20000184

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 fc9c 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f828 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 fa3a 	bl	8000be0 <MX_GPIO_Init>
  MX_DMA_Init();
 800076c:	f000 fa1a 	bl	8000ba4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000770:	f000 f8a8 	bl	80008c4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000774:	f000 f930 	bl	80009d8 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000778:	f000 f96c 	bl	8000a54 <MX_TIM2_Init>
  MX_TIM3_Init();
 800077c:	f000 f9c4 	bl	8000b08 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000780:	2100      	movs	r1, #0
 8000782:	480a      	ldr	r0, [pc, #40]	; (80007ac <main+0x50>)
 8000784:	f001 fd61 	bl	800224a <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000788:	2110      	movs	r1, #16
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <main+0x50>)
 800078c:	f001 fd5d 	bl	800224a <HAL_DAC_Start>
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 2);
  HAL_TIM_Base_Start_IT(&htim3);
 8000790:	4807      	ldr	r0, [pc, #28]	; (80007b0 <main+0x54>)
 8000792:	f003 fcdb 	bl	800414c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000796:	2104      	movs	r1, #4
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <main+0x58>)
 800079a:	f003 fd2d 	bl	80041f8 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 500;
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <main+0x58>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007a6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x4c>
 80007aa:	bf00      	nop
 80007ac:	20000084 	.word	0x20000084
 80007b0:	20000098 	.word	0x20000098
 80007b4:	20000184 	.word	0x20000184

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0b8      	sub	sp, #224	; 0xe0
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007c2:	2244      	movs	r2, #68	; 0x44
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f004 fd82 	bl	80052d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2288      	movs	r2, #136	; 0x88
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 fd74 	bl	80052d0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f6:	2310      	movs	r3, #16
 80007f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000808:	2301      	movs	r3, #1
 800080a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800080e:	230a      	movs	r3, #10
 8000810:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000814:	2307      	movs	r3, #7
 8000816:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fa00 	bl	8002c30 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000836:	f000 fa3d 	bl	8000cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2303      	movs	r3, #3
 8000842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000858:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800085c:	2104      	movs	r1, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f002 fdcc 	bl	80033fc <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800086a:	f000 fa23 	bl	8000cb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800086e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000872:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000878:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800087a:	2302      	movs	r3, #2
 800087c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000882:	2308      	movs	r3, #8
 8000884:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000886:	2307      	movs	r3, #7
 8000888:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000892:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000896:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4618      	mov	r0, r3
 800089c:	f002 ff7a 	bl	8003794 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80008a6:	f000 fa05 	bl	8000cb4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ae:	f002 f969 	bl	8002b84 <HAL_PWREx_ControlVoltageScaling>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x104>
  {
    Error_Handler();
 80008b8:	f000 f9fc 	bl	8000cb4 <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	37e0      	adds	r7, #224	; 0xe0
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80008e6:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <MX_ADC1_Init+0x104>)
 80008e8:	4a38      	ldr	r2, [pc, #224]	; (80009cc <MX_ADC1_Init+0x108>)
 80008ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008ec:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <MX_ADC1_Init+0x104>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008f2:	4b35      	ldr	r3, [pc, #212]	; (80009c8 <MX_ADC1_Init+0x104>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f8:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <MX_ADC1_Init+0x104>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008fe:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <MX_ADC1_Init+0x104>)
 8000900:	2201      	movs	r2, #1
 8000902:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000904:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MX_ADC1_Init+0x104>)
 8000906:	2204      	movs	r2, #4
 8000908:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800090a:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <MX_ADC1_Init+0x104>)
 800090c:	2200      	movs	r2, #0
 800090e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000910:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_ADC1_Init+0x104>)
 8000912:	2201      	movs	r2, #1
 8000914:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000916:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <MX_ADC1_Init+0x104>)
 8000918:	2202      	movs	r2, #2
 800091a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800091c:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <MX_ADC1_Init+0x104>)
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_ADC1_Init+0x104>)
 8000926:	2201      	movs	r2, #1
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <MX_ADC1_Init+0x104>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000930:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <MX_ADC1_Init+0x104>)
 8000932:	2200      	movs	r2, #0
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_ADC1_Init+0x104>)
 8000938:	2201      	movs	r2, #1
 800093a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_ADC1_Init+0x104>)
 8000940:	2200      	movs	r2, #0
 8000942:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_ADC1_Init+0x104>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094c:	481e      	ldr	r0, [pc, #120]	; (80009c8 <MX_ADC1_Init+0x104>)
 800094e:	f000 fdbf 	bl	80014d0 <HAL_ADC_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000958:	f000 f9ac 	bl	8000cb4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <MX_ADC1_Init+0x104>)
 8000968:	f001 fa90 	bl	8001e8c <HAL_ADCEx_MultiModeConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000972:	f000 f99f 	bl	8000cb4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_ADC1_Init+0x10c>)
 8000978:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097a:	2306      	movs	r3, #6
 800097c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800097e:	2307      	movs	r3, #7
 8000980:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000982:	237f      	movs	r3, #127	; 0x7f
 8000984:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000986:	2304      	movs	r3, #4
 8000988:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_ADC1_Init+0x104>)
 8000994:	f000 fef0 	bl	8001778 <HAL_ADC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800099e:	f000 f989 	bl	8000cb4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_ADC1_Init+0x110>)
 80009a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009a6:	230c      	movs	r3, #12
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_ADC1_Init+0x104>)
 80009b0:	f000 fee2 	bl	8001778 <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80009ba:	f000 f97b 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000d8 	.word	0x200000d8
 80009cc:	50040000 	.word	0x50040000
 80009d0:	14f00020 	.word	0x14f00020
 80009d4:	19200040 	.word	0x19200040

080009d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2224      	movs	r2, #36	; 0x24
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f004 fc73 	bl	80052d0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_DAC1_Init+0x74>)
 80009ec:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_DAC1_Init+0x78>)
 80009ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009f0:	4816      	ldr	r0, [pc, #88]	; (8000a4c <MX_DAC1_Init+0x74>)
 80009f2:	f001 fc08 	bl	8002206 <HAL_DAC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009fc:	f000 f95a 	bl	8000cb4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_DAC1_Init+0x74>)
 8000a1c:	f001 fc62 	bl	80022e4 <HAL_DAC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 f945 	bl	8000cb4 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2210      	movs	r2, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_DAC1_Init+0x74>)
 8000a36:	f001 fc55 	bl	80022e4 <HAL_DAC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8000a40:	f000 f938 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000084 	.word	0x20000084
 8000a50:	40007400 	.word	0x40007400

08000a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a8e:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aa0:	4818      	ldr	r0, [pc, #96]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000aa2:	f003 fb7d 	bl	80041a0 <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000aac:	f000 f902 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000ac0:	f004 fb3c 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000aca:	f000 f8f3 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ace:	2360      	movs	r3, #96	; 0x60
 8000ad0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000ae6:	f003 fcff 	bl	80044e8 <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000af0:	f000 f8e0 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM2_Init+0xb0>)
 8000af6:	f000 f9f9 	bl	8000eec <HAL_TIM_MspPostInit>

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000184 	.word	0x20000184

08000b08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_TIM3_Init+0x94>)
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <MX_TIM3_Init+0x98>)
 8000b2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_TIM3_Init+0x94>)
 8000b2e:	224f      	movs	r2, #79	; 0x4f
 8000b30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_TIM3_Init+0x94>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_TIM3_Init+0x94>)
 8000b3a:	2263      	movs	r2, #99	; 0x63
 8000b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_TIM3_Init+0x94>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_TIM3_Init+0x94>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b4a:	4814      	ldr	r0, [pc, #80]	; (8000b9c <MX_TIM3_Init+0x94>)
 8000b4c:	f003 fad2 	bl	80040f4 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b56:	f000 f8ad 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_TIM3_Init+0x94>)
 8000b68:	f003 fdd6 	bl	8004718 <HAL_TIM_ConfigClockSource>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000b72:	f000 f89f 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_TIM3_Init+0x94>)
 8000b84:	f004 fada 	bl	800513c <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000b8e:	f000 f891 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000098 	.word	0x20000098
 8000ba0:	40000400 	.word	0x40000400

08000ba4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <MX_DMA_Init+0x38>)
 8000bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <MX_DMA_Init+0x38>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6493      	str	r3, [r2, #72]	; 0x48
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_DMA_Init+0x38>)
 8000bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200b      	movs	r0, #11
 8000bc8:	f001 fae7 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bcc:	200b      	movs	r0, #11
 8000bce:	f001 fb00 	bl	80021d2 <HAL_NVIC_EnableIRQ>

}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a25      	ldr	r2, [pc, #148]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <MX_GPIO_Init+0xc8>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f001 ff6a 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_GPIO_Init+0xcc>)
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c7a:	f001 fdb5 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9a:	f001 fda5 	bl	80027e8 <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	10210000 	.word	0x10210000
 8000cb0:	48000800 	.word	0x48000800

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x44>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6593      	str	r3, [r2, #88]	; 0x58
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_MspInit+0x44>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a2b      	ldr	r2, [pc, #172]	; (8000dd8 <HAL_ADC_MspInit+0xcc>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d14f      	bne.n	8000dce <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	4a24      	ldr	r2, [pc, #144]	; (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <HAL_ADC_MspInit+0xd0>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d62:	230b      	movs	r3, #11
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d74:	f001 fd38 	bl	80027e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000d7a:	4a1a      	ldr	r2, [pc, #104]	; (8000de4 <HAL_ADC_MspInit+0xd8>)
 8000d7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000da8:	2220      	movs	r2, #32
 8000daa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000db4:	f001 fbb0 	bl	8002518 <HAL_DMA_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000dbe:	f7ff ff79 	bl	8000cb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000dc6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dc8:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <HAL_ADC_MspInit+0xd4>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	50040000 	.word	0x50040000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	2000013c 	.word	0x2000013c
 8000de4:	40020008 	.word	0x40020008

08000de8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <HAL_DAC_MspInit+0x74>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d124      	bne.n	8000e54 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_DAC_MspInit+0x78>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <HAL_DAC_MspInit+0x78>)
 8000e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_DAC_MspInit+0x78>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_DAC_MspInit+0x78>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_DAC_MspInit+0x78>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_DAC_MspInit+0x78>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e3a:	2330      	movs	r3, #48	; 0x30
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f001 fcca 	bl	80027e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40007400 	.word	0x40007400
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e74:	d10b      	bne.n	8000e8e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_TIM_PWM_MspInit+0x38>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_TIM_PWM_MspInit+0x38>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6593      	str	r3, [r2, #88]	; 0x58
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_TIM_PWM_MspInit+0x38>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d113      	bne.n	8000eda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_TIM_Base_MspInit+0x48>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <HAL_TIM_Base_MspInit+0x48>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_TIM_Base_MspInit+0x48>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	201d      	movs	r0, #29
 8000ed0:	f001 f963 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ed4:	201d      	movs	r0, #29
 8000ed6:	f001 f97c 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40000400 	.word	0x40000400
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f0c:	d11b      	bne.n	8000f46 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_TIM_MspPostInit+0x64>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <HAL_TIM_MspPostInit+0x64>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_TIM_MspPostInit+0x64>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f26:	2308      	movs	r3, #8
 8000f28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <HAL_TIM_MspPostInit+0x68>)
 8000f42:	f001 fc51 	bl	80027e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000
 8000f54:	48000400 	.word	0x48000400

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f8d0 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <DMA1_Channel1_IRQHandler+0x10>)
 8000fba:	f001 fb65 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000013c 	.word	0x2000013c

08000fc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <TIM3_IRQHandler+0x10>)
 8000fce:	f003 f96b 	bl	80042a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000098 	.word	0x20000098

08000fdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <SystemInit+0x64>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a16      	ldr	r2, [pc, #88]	; (8001040 <SystemInit+0x64>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <SystemInit+0x68>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a13      	ldr	r2, [pc, #76]	; (8001044 <SystemInit+0x68>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <SystemInit+0x68>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <SystemInit+0x68>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <SystemInit+0x68>)
 8001008:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800100c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001010:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <SystemInit+0x68>)
 8001014:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001018:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <SystemInit+0x68>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <SystemInit+0x68>)
 8001020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001024:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <SystemInit+0x68>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SystemInit+0x64>)
 800102e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001032:	609a      	str	r2, [r3, #8]
#endif
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00
 8001044:	40021000 	.word	0x40021000

08001048 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800104c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800104e:	e003      	b.n	8001058 <LoopCopyDataInit>

08001050 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001052:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001054:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001056:	3104      	adds	r1, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <LoopForever+0xa>)
	ldr	r3, =_edata
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <LoopForever+0xe>)
	adds	r2, r0, r1
 800105c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800105e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001060:	d3f6      	bcc.n	8001050 <CopyDataInit>
	ldr	r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001064:	e002      	b.n	800106c <LoopFillZerobss>

08001066 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001066:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001068:	f842 3b04 	str.w	r3, [r2], #4

0800106c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <LoopForever+0x16>)
	cmp	r2, r3
 800106e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001070:	d3f9      	bcc.n	8001066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001072:	f7ff ffb3 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f004 f907 	bl	8005288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800107a:	f7ff fb6f 	bl	800075c <main>

0800107e <LoopForever>:

LoopForever:
    b LoopForever
 800107e:	e7fe      	b.n	800107e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001080:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001084:	08005340 	.word	0x08005340
	ldr	r0, =_sdata
 8001088:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800108c:	20000054 	.word	0x20000054
	ldr	r2, =_sbss
 8001090:	20000054 	.word	0x20000054
	ldr	r3, = _ebss
 8001094:	200001c8 	.word	0x200001c8

08001098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_2_IRQHandler>
	...

0800109c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_Init+0x3c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <HAL_Init+0x3c>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b2:	2003      	movs	r0, #3
 80010b4:	f001 f866 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 f80f 	bl	80010dc <HAL_InitTick>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	e001      	b.n	80010ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ca:	f7ff fdfb 	bl	8000cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40022000 	.word	0x40022000

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <HAL_InitTick+0x68>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d022      	beq.n	8001136 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_InitTick+0x6c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_InitTick+0x68>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001100:	fbb2 f3f3 	udiv	r3, r2, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f001 f872 	bl	80021ee <HAL_SYSTICK_Config>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10f      	bne.n	8001130 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	d809      	bhi.n	800112a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001116:	2200      	movs	r2, #0
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	f04f 30ff 	mov.w	r0, #4294967295
 800111e:	f001 f83c 	bl	800219a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_InitTick+0x70>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	e007      	b.n	800113a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e004      	b.n	800113a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e001      	b.n	800113a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000050 	.word	0x20000050
 8001148:	20000048 	.word	0x20000048
 800114c:	2000004c 	.word	0x2000004c

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x1c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_IncTick+0x20>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4413      	add	r3, r2
 800115e:	4a03      	ldr	r2, [pc, #12]	; (800116c <HAL_IncTick+0x1c>)
 8001160:	6013      	str	r3, [r2, #0]
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	200001c4 	.word	0x200001c4
 8001170:	20000050 	.word	0x20000050

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200001c4 	.word	0x200001c4

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d004      	beq.n	80011b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_Delay+0x40>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	4413      	add	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b0:	bf00      	nop
 80011b2:	f7ff ffdf 	bl	8001174 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d8f7      	bhi.n	80011b2 <HAL_Delay+0x26>
  {
  }
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000050 	.word	0x20000050

080011d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	609a      	str	r2, [r3, #8]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001238:	b490      	push	{r4, r7}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3360      	adds	r3, #96	; 0x60
 800124a:	461a      	mov	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001254:	6822      	ldr	r2, [r4, #0]
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <LL_ADC_SetOffset+0x40>)
 8001258:	4013      	ands	r3, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	4313      	orrs	r3, r2
 8001266:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800126a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bc90      	pop	{r4, r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	03fff000 	.word	0x03fff000

0800127c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800127c:	b490      	push	{r4, r7}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3360      	adds	r3, #96	; 0x60
 800128a:	461a      	mov	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc90      	pop	{r4, r7}
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012a4:	b490      	push	{r4, r7}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3360      	adds	r3, #96	; 0x60
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc90      	pop	{r4, r7}
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012d4:	b490      	push	{r4, r7}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3330      	adds	r3, #48	; 0x30
 80012e4:	461a      	mov	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	4413      	add	r3, r2
 80012f2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80012f4:	6822      	ldr	r2, [r4, #0]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	211f      	movs	r1, #31
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	401a      	ands	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	0e9b      	lsrs	r3, r3, #26
 800130a:	f003 011f 	and.w	r1, r3, #31
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bc90      	pop	{r4, r7}
 8001324:	4770      	bx	lr

08001326 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001326:	b490      	push	{r4, r7}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3314      	adds	r3, #20
 8001336:	461a      	mov	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	0e5b      	lsrs	r3, r3, #25
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	4413      	add	r3, r2
 8001344:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001346:	6822      	ldr	r2, [r4, #0]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	0d1b      	lsrs	r3, r3, #20
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	2107      	movs	r1, #7
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	401a      	ands	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	0d1b      	lsrs	r3, r3, #20
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr
	...

08001378 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001390:	43db      	mvns	r3, r3
 8001392:	401a      	ands	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0318 	and.w	r3, r3, #24
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800139c:	40d9      	lsrs	r1, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	400b      	ands	r3, r1
 80013a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a6:	431a      	orrs	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	0007ffff 	.word	0x0007ffff

080013c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6093      	str	r3, [r2, #8]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f8:	d101      	bne.n	80013fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800141c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001420:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001448:	d101      	bne.n	800144e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <LL_ADC_IsEnabled+0x18>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <LL_ADC_IsEnabled+0x1a>
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b04      	cmp	r3, #4
 8001494:	d101      	bne.n	800149a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d101      	bne.n	80014c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e134      	b.n	8001754 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d109      	bne.n	800150c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fc07 	bl	8000d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff67 	bl	80013e4 <LL_ADC_IsDeepPowerDownEnabled>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff4d 	bl	80013c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff82 	bl	8001434 <LL_ADC_IsInternalRegulatorEnabled>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d113      	bne.n	800155e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff66 	bl	800140c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001540:	4b86      	ldr	r3, [pc, #536]	; (800175c <HAL_ADC_Init+0x28c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	4a86      	ldr	r2, [pc, #536]	; (8001760 <HAL_ADC_Init+0x290>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001550:	e002      	b.n	8001558 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3b01      	subs	r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f9      	bne.n	8001552 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff66 	bl	8001434 <LL_ADC_IsInternalRegulatorEnabled>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10d      	bne.n	800158a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	f043 0210 	orr.w	r2, r3, #16
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	f043 0201 	orr.w	r2, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff77 	bl	8001482 <LL_ADC_REG_IsConversionOngoing>
 8001594:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 80cf 	bne.w	8001742 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 80cb 	bne.w	8001742 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015b4:	f043 0202 	orr.w	r2, r3, #2
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff4b 	bl	800145c <LL_ADC_IsEnabled>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d115      	bne.n	80015f8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015cc:	4865      	ldr	r0, [pc, #404]	; (8001764 <HAL_ADC_Init+0x294>)
 80015ce:	f7ff ff45 	bl	800145c <LL_ADC_IsEnabled>
 80015d2:	4604      	mov	r4, r0
 80015d4:	4864      	ldr	r0, [pc, #400]	; (8001768 <HAL_ADC_Init+0x298>)
 80015d6:	f7ff ff41 	bl	800145c <LL_ADC_IsEnabled>
 80015da:	4603      	mov	r3, r0
 80015dc:	431c      	orrs	r4, r3
 80015de:	4863      	ldr	r0, [pc, #396]	; (800176c <HAL_ADC_Init+0x29c>)
 80015e0:	f7ff ff3c 	bl	800145c <LL_ADC_IsEnabled>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4323      	orrs	r3, r4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d105      	bne.n	80015f8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4619      	mov	r1, r3
 80015f2:	485f      	ldr	r0, [pc, #380]	; (8001770 <HAL_ADC_Init+0x2a0>)
 80015f4:	f7ff fdec 	bl	80011d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7e5b      	ldrb	r3, [r3, #25]
 80015fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001602:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001608:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800160e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001616:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d106      	bne.n	8001634 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	3b01      	subs	r3, #1
 800162c:	045b      	lsls	r3, r3, #17
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	2b00      	cmp	r3, #0
 800163a:	d009      	beq.n	8001650 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_ADC_Init+0x2a4>)
 8001658:	4013      	ands	r3, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	69b9      	ldr	r1, [r7, #24]
 8001660:	430b      	orrs	r3, r1
 8001662:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff0a 	bl	8001482 <LL_ADC_REG_IsConversionOngoing>
 800166e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff17 	bl	80014a8 <LL_ADC_INJ_IsConversionOngoing>
 800167a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d13d      	bne.n	80016fe <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d13a      	bne.n	80016fe <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800168c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001694:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016a4:	f023 0302 	bic.w	r3, r3, #2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	69b9      	ldr	r1, [r7, #24]
 80016ae:	430b      	orrs	r3, r1
 80016b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d118      	bne.n	80016ee <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016d2:	4311      	orrs	r1, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016d8:	4311      	orrs	r1, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016de:	430a      	orrs	r2, r1
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	611a      	str	r2, [r3, #16]
 80016ec:	e007      	b.n	80016fe <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0201 	bic.w	r2, r2, #1
 80016fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d10c      	bne.n	8001720 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f023 010f 	bic.w	r1, r3, #15
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	631a      	str	r2, [r3, #48]	; 0x30
 800171e:	e007      	b.n	8001730 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 020f 	bic.w	r2, r2, #15
 800172e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	f023 0303 	bic.w	r3, r3, #3
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
 8001740:	e007      	b.n	8001752 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	f043 0210 	orr.w	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001752:	7ffb      	ldrb	r3, [r7, #31]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3724      	adds	r7, #36	; 0x24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	20000048 	.word	0x20000048
 8001760:	053e2d63 	.word	0x053e2d63
 8001764:	50040000 	.word	0x50040000
 8001768:	50040100 	.word	0x50040100
 800176c:	50040200 	.word	0x50040200
 8001770:	50040300 	.word	0x50040300
 8001774:	fff0c007 	.word	0xfff0c007

08001778 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b0a6      	sub	sp, #152	; 0x98
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <HAL_ADC_ConfigChannel+0x22>
 8001796:	2302      	movs	r3, #2
 8001798:	e348      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x6b4>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fe6b 	bl	8001482 <LL_ADC_REG_IsConversionOngoing>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 8329 	bne.w	8001e06 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b05      	cmp	r3, #5
 80017ba:	d824      	bhi.n	8001806 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	3b02      	subs	r3, #2
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d81b      	bhi.n	80017fe <HAL_ADC_ConfigChannel+0x86>
 80017c6:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <HAL_ADC_ConfigChannel+0x54>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	080017e5 	.word	0x080017e5
 80017d4:	080017ed 	.word	0x080017ed
 80017d8:	080017f5 	.word	0x080017f5
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	220c      	movs	r2, #12
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	e011      	b.n	8001808 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2212      	movs	r2, #18
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	e00d      	b.n	8001808 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	2218      	movs	r2, #24
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	e009      	b.n	8001808 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	e004      	b.n	8001808 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2206      	movs	r2, #6
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	e000      	b.n	8001808 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001806:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	f7ff fd5d 	bl	80012d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fe2f 	bl	8001482 <LL_ADC_REG_IsConversionOngoing>
 8001824:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fe3b 	bl	80014a8 <LL_ADC_INJ_IsConversionOngoing>
 8001832:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001836:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800183a:	2b00      	cmp	r3, #0
 800183c:	f040 8148 	bne.w	8001ad0 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001840:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001844:	2b00      	cmp	r3, #0
 8001846:	f040 8143 	bne.w	8001ad0 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	6819      	ldr	r1, [r3, #0]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	461a      	mov	r2, r3
 8001858:	f7ff fd65 	bl	8001326 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b04      	cmp	r3, #4
 800187c:	d00a      	beq.n	8001894 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6919      	ldr	r1, [r3, #16]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800188e:	f7ff fcd3 	bl	8001238 <LL_ADC_SetOffset>
 8001892:	e11d      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fcee 	bl	800127c <LL_ADC_GetOffsetChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10a      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x148>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fce3 	bl	800127c <LL_ADC_GetOffsetChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	0e9b      	lsrs	r3, r3, #26
 80018ba:	f003 021f 	and.w	r2, r3, #31
 80018be:	e012      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x16e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fcd8 	bl	800127c <LL_ADC_GetOffsetChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d105      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x186>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	0e9b      	lsrs	r3, r3, #26
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	e00a      	b.n	8001914 <HAL_ADC_ConfigChannel+0x19c>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800190c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	429a      	cmp	r2, r3
 8001916:	d106      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fcbf 	bl	80012a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2101      	movs	r1, #1
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fca5 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10a      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x1da>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fc9a 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	0e9b      	lsrs	r3, r3, #26
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	e010      	b.n	8001974 <HAL_ADC_ConfigChannel+0x1fc>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2101      	movs	r1, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fc8f 	bl	800127c <LL_ADC_GetOffsetChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800196a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <HAL_ADC_ConfigChannel+0x214>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0e9b      	lsrs	r3, r3, #26
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	e00a      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x22a>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800199a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d106      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2200      	movs	r2, #0
 80019ac:	2101      	movs	r1, #1
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fc78 	bl	80012a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2102      	movs	r1, #2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fc5e 	bl	800127c <LL_ADC_GetOffsetChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x268>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2102      	movs	r1, #2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fc53 	bl	800127c <LL_ADC_GetOffsetChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	0e9b      	lsrs	r3, r3, #26
 80019da:	f003 021f 	and.w	r2, r3, #31
 80019de:	e010      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x28a>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2102      	movs	r1, #2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fc48 	bl	800127c <LL_ADC_GetOffsetChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80019f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d105      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x2a2>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0e9b      	lsrs	r3, r3, #26
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	e00a      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x2b8>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d106      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fc31 	bl	80012a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2103      	movs	r1, #3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fc17 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10a      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x2f6>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fc0c 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	0e9b      	lsrs	r3, r3, #26
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	e010      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x318>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2103      	movs	r1, #3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fc01 	bl	800127c <LL_ADC_GetOffsetChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d105      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x330>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0e9b      	lsrs	r3, r3, #26
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	e00a      	b.n	8001abe <HAL_ADC_ConfigChannel+0x346>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d106      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2103      	movs	r1, #3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fbea 	bl	80012a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fcc1 	bl	800145c <LL_ADC_IsEnabled>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 810c 	bne.w	8001cfa <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f7ff fc42 	bl	8001378 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4aad      	ldr	r2, [pc, #692]	; (8001db0 <HAL_ADC_ConfigChannel+0x638>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	f040 80fd 	bne.w	8001cfa <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10b      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x3b0>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0e9b      	lsrs	r3, r3, #26
 8001b16:	3301      	adds	r3, #1
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	bf94      	ite	ls
 8001b20:	2301      	movls	r3, #1
 8001b22:	2300      	movhi	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	e012      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x3d6>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	2b09      	cmp	r3, #9
 8001b46:	bf94      	ite	ls
 8001b48:	2301      	movls	r3, #1
 8001b4a:	2300      	movhi	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d064      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d107      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x3f6>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0e9b      	lsrs	r3, r3, #26
 8001b64:	3301      	adds	r3, #1
 8001b66:	069b      	lsls	r3, r3, #26
 8001b68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b6c:	e00e      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x414>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	069b      	lsls	r3, r3, #26
 8001b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x434>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	e010      	b.n	8001bce <HAL_ADC_ConfigChannel+0x456>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	ea42 0103 	orr.w	r1, r2, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10a      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x47c>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	3301      	adds	r3, #1
 8001be6:	f003 021f 	and.w	r2, r3, #31
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	051b      	lsls	r3, r3, #20
 8001bf2:	e011      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x4a0>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	e069      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d107      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x4c0>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0e9b      	lsrs	r3, r3, #26
 8001c2e:	3301      	adds	r3, #1
 8001c30:	069b      	lsls	r3, r3, #26
 8001c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c36:	e00e      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x4de>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	61fb      	str	r3, [r7, #28]
  return result;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	069b      	lsls	r3, r3, #26
 8001c52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x4fe>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	0e9b      	lsrs	r3, r3, #26
 8001c68:	3301      	adds	r3, #1
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	e010      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x520>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	617b      	str	r3, [r7, #20]
  return result;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	ea42 0103 	orr.w	r1, r2, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10d      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x54c>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0e9b      	lsrs	r3, r3, #26
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f003 021f 	and.w	r2, r3, #31
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b1e      	subs	r3, #30
 8001cbc:	051b      	lsls	r3, r3, #20
 8001cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	e014      	b.n	8001cee <HAL_ADC_ConfigChannel+0x576>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	60fb      	str	r3, [r7, #12]
  return result;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3b1e      	subs	r3, #30
 8001ce8:	051b      	lsls	r3, r3, #20
 8001cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	6892      	ldr	r2, [r2, #8]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7ff fb16 	bl	8001326 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_ADC_ConfigChannel+0x63c>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 808c 	beq.w	8001e20 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d08:	482b      	ldr	r0, [pc, #172]	; (8001db8 <HAL_ADC_ConfigChannel+0x640>)
 8001d0a:	f7ff fa87 	bl	800121c <LL_ADC_GetCommonPathInternalCh>
 8001d0e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <HAL_ADC_ConfigChannel+0x644>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d12b      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x5fc>
 8001d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d125      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <HAL_ADC_ConfigChannel+0x648>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d004      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x5c4>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <HAL_ADC_ConfigChannel+0x64c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d16e      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d44:	4619      	mov	r1, r3
 8001d46:	481c      	ldr	r0, [pc, #112]	; (8001db8 <HAL_ADC_ConfigChannel+0x640>)
 8001d48:	f7ff fa55 	bl	80011f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_ADC_ConfigChannel+0x650>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	099b      	lsrs	r3, r3, #6
 8001d52:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <HAL_ADC_ConfigChannel+0x654>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	099a      	lsrs	r2, r3, #6
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d72:	e052      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <HAL_ADC_ConfigChannel+0x658>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d12a      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x65c>
 8001d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d124      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <HAL_ADC_ConfigChannel+0x648>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d004      	beq.n	8001d9e <HAL_ADC_ConfigChannel+0x626>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_ADC_ConfigChannel+0x64c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d13f      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da6:	4619      	mov	r1, r3
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <HAL_ADC_ConfigChannel+0x640>)
 8001daa:	f7ff fa24 	bl	80011f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dae:	e036      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x6a6>
 8001db0:	407f0000 	.word	0x407f0000
 8001db4:	80080000 	.word	0x80080000
 8001db8:	50040300 	.word	0x50040300
 8001dbc:	c7520000 	.word	0xc7520000
 8001dc0:	50040000 	.word	0x50040000
 8001dc4:	50040200 	.word	0x50040200
 8001dc8:	20000048 	.word	0x20000048
 8001dcc:	053e2d63 	.word	0x053e2d63
 8001dd0:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <HAL_ADC_ConfigChannel+0x6bc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d120      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d11a      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_ADC_ConfigChannel+0x6c0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d115      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001df8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480f      	ldr	r0, [pc, #60]	; (8001e3c <HAL_ADC_ConfigChannel+0x6c4>)
 8001e00:	f7ff f9f9 	bl	80011f6 <LL_ADC_SetCommonPathInternalCh>
 8001e04:	e00c      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f043 0220 	orr.w	r2, r3, #32
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e1a:	bf00      	nop
 8001e1c:	e000      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e1e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e28:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3798      	adds	r7, #152	; 0x98
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	80000001 	.word	0x80000001
 8001e38:	50040000 	.word	0x50040000
 8001e3c:	50040300 	.word	0x50040300

08001e40 <LL_ADC_IsEnabled>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <LL_ADC_IsEnabled+0x18>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_ADC_IsEnabled+0x1a>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_REG_IsConversionOngoing>:
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d101      	bne.n	8001e7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b09f      	sub	sp, #124	; 0x7c
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e08f      	b.n	8001fca <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a47      	ldr	r2, [pc, #284]	; (8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d102      	bne.n	8001ec2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001ebc:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	e001      	b.n	8001ec6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10b      	bne.n	8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed0:	f043 0220 	orr.w	r2, r3, #32
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e072      	b.n	8001fca <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ffbd 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 8001eec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ffb7 	bl	8001e66 <LL_ADC_REG_IsConversionOngoing>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d154      	bne.n	8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d151      	bne.n	8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f04:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f06:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d02c      	beq.n	8001f6a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f22:	035b      	lsls	r3, r3, #13
 8001f24:	430b      	orrs	r3, r1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f2c:	4829      	ldr	r0, [pc, #164]	; (8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001f2e:	f7ff ff87 	bl	8001e40 <LL_ADC_IsEnabled>
 8001f32:	4604      	mov	r4, r0
 8001f34:	4828      	ldr	r0, [pc, #160]	; (8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001f36:	f7ff ff83 	bl	8001e40 <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	431c      	orrs	r4, r3
 8001f3e:	4828      	ldr	r0, [pc, #160]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f40:	f7ff ff7e 	bl	8001e40 <LL_ADC_IsEnabled>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4323      	orrs	r3, r4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d137      	bne.n	8001fbc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f54:	f023 030f 	bic.w	r3, r3, #15
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	6811      	ldr	r1, [r2, #0]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	6892      	ldr	r2, [r2, #8]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	431a      	orrs	r2, r3
 8001f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f66:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f68:	e028      	b.n	8001fbc <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f76:	4817      	ldr	r0, [pc, #92]	; (8001fd4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001f78:	f7ff ff62 	bl	8001e40 <LL_ADC_IsEnabled>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	4816      	ldr	r0, [pc, #88]	; (8001fd8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001f80:	f7ff ff5e 	bl	8001e40 <LL_ADC_IsEnabled>
 8001f84:	4603      	mov	r3, r0
 8001f86:	431c      	orrs	r4, r3
 8001f88:	4815      	ldr	r0, [pc, #84]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f8a:	f7ff ff59 	bl	8001e40 <LL_ADC_IsEnabled>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4323      	orrs	r3, r4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d112      	bne.n	8001fbc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f9e:	f023 030f 	bic.w	r3, r3, #15
 8001fa2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001fa4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fa6:	e009      	b.n	8001fbc <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	f043 0220 	orr.w	r2, r3, #32
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001fba:	e000      	b.n	8001fbe <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fc6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	377c      	adds	r7, #124	; 0x7c
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	50040000 	.word	0x50040000
 8001fd8:	50040100 	.word	0x50040100
 8001fdc:	50040300 	.word	0x50040300
 8001fe0:	50040200 	.word	0x50040200

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff3e 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff31 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa2 	bl	8002140 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e014      	b.n	8002242 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	791b      	ldrb	r3, [r3, #4]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d105      	bne.n	800222e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe fddd 	bl	8000de8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	795b      	ldrb	r3, [r3, #5]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_DAC_Start+0x16>
 800225c:	2302      	movs	r3, #2
 800225e:	e03b      	b.n	80022d8 <HAL_DAC_Start+0x8e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2202      	movs	r2, #2
 800226a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6819      	ldr	r1, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2201      	movs	r2, #1
 800227a:	409a      	lsls	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10f      	bne.n	80022aa <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002294:	2b04      	cmp	r3, #4
 8002296:	d118      	bne.n	80022ca <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	e00f      	b.n	80022ca <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022b8:	d107      	bne.n	80022ca <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0202 	orr.w	r2, r2, #2
 80022c8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	795b      	ldrb	r3, [r3, #5]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_DAC_ConfigChannel+0x1c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e107      	b.n	8002510 <HAL_DAC_ConfigChannel+0x22c>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2201      	movs	r2, #1
 8002304:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2202      	movs	r2, #2
 800230a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d174      	bne.n	80023fe <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d137      	bne.n	800238a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800231a:	f7fe ff2b 	bl	8001174 <HAL_GetTick>
 800231e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002320:	e011      	b.n	8002346 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002322:	f7fe ff27 	bl	8001174 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d90a      	bls.n	8002346 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	f043 0208 	orr.w	r2, r3, #8
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2203      	movs	r2, #3
 8002340:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0e4      	b.n	8002510 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e6      	bne.n	8002322 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002354:	2001      	movs	r0, #1
 8002356:	f7fe ff19 	bl	800118c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	6992      	ldr	r2, [r2, #24]
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
 8002364:	e01e      	b.n	80023a4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002366:	f7fe ff05 	bl	8001174 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d90a      	bls.n	800238a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f043 0208 	orr.w	r2, r3, #8
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2203      	movs	r2, #3
 8002384:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e0c2      	b.n	8002510 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002390:	2b00      	cmp	r3, #0
 8002392:	dbe8      	blt.n	8002366 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002394:	2001      	movs	r0, #1
 8002396:	f7fe fef9 	bl	800118c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	6992      	ldr	r2, [r2, #24]
 80023a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	ea02 0103 	and.w	r1, r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	409a      	lsls	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	21ff      	movs	r1, #255	; 0xff
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	ea02 0103 	and.w	r1, r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d11d      	bne.n	8002442 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	221f      	movs	r2, #31
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2207      	movs	r2, #7
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	431a      	orrs	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	400a      	ands	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	f640 72fc 	movw	r2, #4092	; 0xffc
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	22c0      	movs	r2, #192	; 0xc0
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43da      	mvns	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	400a      	ands	r2, r1
 8002500:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3720      	adds	r7, #32
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e098      	b.n	800265c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	4b4d      	ldr	r3, [pc, #308]	; (8002668 <HAL_DMA_Init+0x150>)
 8002532:	429a      	cmp	r2, r3
 8002534:	d80f      	bhi.n	8002556 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	4b4b      	ldr	r3, [pc, #300]	; (800266c <HAL_DMA_Init+0x154>)
 800253e:	4413      	add	r3, r2
 8002540:	4a4b      	ldr	r2, [pc, #300]	; (8002670 <HAL_DMA_Init+0x158>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	009a      	lsls	r2, r3, #2
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a48      	ldr	r2, [pc, #288]	; (8002674 <HAL_DMA_Init+0x15c>)
 8002552:	641a      	str	r2, [r3, #64]	; 0x40
 8002554:	e00e      	b.n	8002574 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	4b46      	ldr	r3, [pc, #280]	; (8002678 <HAL_DMA_Init+0x160>)
 800255e:	4413      	add	r3, r2
 8002560:	4a43      	ldr	r2, [pc, #268]	; (8002670 <HAL_DMA_Init+0x158>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	009a      	lsls	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a42      	ldr	r2, [pc, #264]	; (800267c <HAL_DMA_Init+0x164>)
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ce:	d039      	beq.n	8002644 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	4a27      	ldr	r2, [pc, #156]	; (8002674 <HAL_DMA_Init+0x15c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d11a      	bne.n	8002610 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_DMA_Init+0x168>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f003 031c 	and.w	r3, r3, #28
 80025e6:	210f      	movs	r1, #15
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	4924      	ldr	r1, [pc, #144]	; (8002680 <HAL_DMA_Init+0x168>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_DMA_Init+0x168>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	f003 031c 	and.w	r3, r3, #28
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	491d      	ldr	r1, [pc, #116]	; (8002680 <HAL_DMA_Init+0x168>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
 800260e:	e019      	b.n	8002644 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002610:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <HAL_DMA_Init+0x16c>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	f003 031c 	and.w	r3, r3, #28
 800261c:	210f      	movs	r1, #15
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	4917      	ldr	r1, [pc, #92]	; (8002684 <HAL_DMA_Init+0x16c>)
 8002626:	4013      	ands	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800262a:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_DMA_Init+0x16c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f003 031c 	and.w	r3, r3, #28
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	4911      	ldr	r1, [pc, #68]	; (8002684 <HAL_DMA_Init+0x16c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40020407 	.word	0x40020407
 800266c:	bffdfff8 	.word	0xbffdfff8
 8002670:	cccccccd 	.word	0xcccccccd
 8002674:	40020000 	.word	0x40020000
 8002678:	bffdfbf8 	.word	0xbffdfbf8
 800267c:	40020400 	.word	0x40020400
 8002680:	400200a8 	.word	0x400200a8
 8002684:	400204a8 	.word	0x400204a8

08002688 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	f003 031c 	and.w	r3, r3, #28
 80026a8:	2204      	movs	r2, #4
 80026aa:	409a      	lsls	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d026      	beq.n	8002702 <HAL_DMA_IRQHandler+0x7a>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d021      	beq.n	8002702 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d107      	bne.n	80026dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0204 	bic.w	r2, r2, #4
 80026da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f003 021c 	and.w	r2, r3, #28
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	2104      	movs	r1, #4
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d071      	beq.n	80027dc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002700:	e06c      	b.n	80027dc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f003 031c 	and.w	r3, r3, #28
 800270a:	2202      	movs	r2, #2
 800270c:	409a      	lsls	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02e      	beq.n	8002774 <HAL_DMA_IRQHandler+0xec>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d029      	beq.n	8002774 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 020a 	bic.w	r2, r2, #10
 800273c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f003 021c 	and.w	r2, r3, #28
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2102      	movs	r1, #2
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d038      	beq.n	80027dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002772:	e033      	b.n	80027dc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f003 031c 	and.w	r3, r3, #28
 800277c:	2208      	movs	r2, #8
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d02a      	beq.n	80027de <HAL_DMA_IRQHandler+0x156>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d025      	beq.n	80027de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 020e 	bic.w	r2, r2, #14
 80027a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f003 021c 	and.w	r2, r3, #28
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f202 	lsl.w	r2, r1, r2
 80027b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
}
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f6:	e17f      	b.n	8002af8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8171 	beq.w	8002af2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d00b      	beq.n	8002830 <HAL_GPIO_Init+0x48>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002824:	2b11      	cmp	r3, #17
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b12      	cmp	r3, #18
 800282e:	d130      	bne.n	8002892 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002866:	2201      	movs	r2, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0201 	and.w	r2, r3, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b03      	cmp	r3, #3
 800289c:	d118      	bne.n	80028d0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	08db      	lsrs	r3, r3, #3
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x128>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b12      	cmp	r3, #18
 800290e:	d123      	bne.n	8002958 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	08da      	lsrs	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3208      	adds	r2, #8
 8002918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	220f      	movs	r2, #15
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	08da      	lsrs	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3208      	adds	r2, #8
 8002952:	6939      	ldr	r1, [r7, #16]
 8002954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0203 	and.w	r2, r3, #3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80ac 	beq.w	8002af2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299a:	4b5e      	ldr	r3, [pc, #376]	; (8002b14 <HAL_GPIO_Init+0x32c>)
 800299c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299e:	4a5d      	ldr	r2, [pc, #372]	; (8002b14 <HAL_GPIO_Init+0x32c>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6613      	str	r3, [r2, #96]	; 0x60
 80029a6:	4b5b      	ldr	r3, [pc, #364]	; (8002b14 <HAL_GPIO_Init+0x32c>)
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029b2:	4a59      	ldr	r2, [pc, #356]	; (8002b18 <HAL_GPIO_Init+0x330>)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029dc:	d025      	beq.n	8002a2a <HAL_GPIO_Init+0x242>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4e      	ldr	r2, [pc, #312]	; (8002b1c <HAL_GPIO_Init+0x334>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01f      	beq.n	8002a26 <HAL_GPIO_Init+0x23e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4d      	ldr	r2, [pc, #308]	; (8002b20 <HAL_GPIO_Init+0x338>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d019      	beq.n	8002a22 <HAL_GPIO_Init+0x23a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4c      	ldr	r2, [pc, #304]	; (8002b24 <HAL_GPIO_Init+0x33c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d013      	beq.n	8002a1e <HAL_GPIO_Init+0x236>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4b      	ldr	r2, [pc, #300]	; (8002b28 <HAL_GPIO_Init+0x340>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00d      	beq.n	8002a1a <HAL_GPIO_Init+0x232>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4a      	ldr	r2, [pc, #296]	; (8002b2c <HAL_GPIO_Init+0x344>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d007      	beq.n	8002a16 <HAL_GPIO_Init+0x22e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a49      	ldr	r2, [pc, #292]	; (8002b30 <HAL_GPIO_Init+0x348>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_GPIO_Init+0x22a>
 8002a0e:	2306      	movs	r3, #6
 8002a10:	e00c      	b.n	8002a2c <HAL_GPIO_Init+0x244>
 8002a12:	2307      	movs	r3, #7
 8002a14:	e00a      	b.n	8002a2c <HAL_GPIO_Init+0x244>
 8002a16:	2305      	movs	r3, #5
 8002a18:	e008      	b.n	8002a2c <HAL_GPIO_Init+0x244>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x244>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e004      	b.n	8002a2c <HAL_GPIO_Init+0x244>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e002      	b.n	8002a2c <HAL_GPIO_Init+0x244>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_GPIO_Init+0x244>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	f002 0203 	and.w	r2, r2, #3
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	4093      	lsls	r3, r2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a3c:	4936      	ldr	r1, [pc, #216]	; (8002b18 <HAL_GPIO_Init+0x330>)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	089b      	lsrs	r3, r3, #2
 8002a42:	3302      	adds	r3, #2
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a4a:	4b3a      	ldr	r3, [pc, #232]	; (8002b34 <HAL_GPIO_Init+0x34c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a6e:	4a31      	ldr	r2, [pc, #196]	; (8002b34 <HAL_GPIO_Init+0x34c>)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002a74:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <HAL_GPIO_Init+0x34c>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a98:	4a26      	ldr	r2, [pc, #152]	; (8002b34 <HAL_GPIO_Init+0x34c>)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a9e:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <HAL_GPIO_Init+0x34c>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ac2:	4a1c      	ldr	r2, [pc, #112]	; (8002b34 <HAL_GPIO_Init+0x34c>)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_GPIO_Init+0x34c>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aec:	4a11      	ldr	r2, [pc, #68]	; (8002b34 <HAL_GPIO_Init+0x34c>)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f47f ae78 	bne.w	80027f8 <HAL_GPIO_Init+0x10>
  }
}
 8002b08:	bf00      	nop
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40010000 	.word	0x40010000
 8002b1c:	48000400 	.word	0x48000400
 8002b20:	48000800 	.word	0x48000800
 8002b24:	48000c00 	.word	0x48000c00
 8002b28:	48001000 	.word	0x48001000
 8002b2c:	48001400 	.word	0x48001400
 8002b30:	48001800 	.word	0x48001800
 8002b34:	40010400 	.word	0x40010400

08002b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b48:	787b      	ldrb	r3, [r7, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40007000 	.word	0x40007000

08002b84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b92:	d130      	bne.n	8002bf6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b94:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba0:	d038      	beq.n	8002c14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002baa:	4a1e      	ldr	r2, [pc, #120]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bb2:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2232      	movs	r2, #50	; 0x32
 8002bb8:	fb02 f303 	mul.w	r3, r2, r3
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0c9b      	lsrs	r3, r3, #18
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc8:	e002      	b.n	8002bd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bdc:	d102      	bne.n	8002be4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f2      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf0:	d110      	bne.n	8002c14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e00f      	b.n	8002c16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c02:	d007      	beq.n	8002c14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c04:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c0c:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40007000 	.word	0x40007000
 8002c28:	20000048 	.word	0x20000048
 8002c2c:	431bde83 	.word	0x431bde83

08002c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e3d4      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c42:	4ba1      	ldr	r3, [pc, #644]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c4c:	4b9e      	ldr	r3, [pc, #632]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80e4 	beq.w	8002e2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <HAL_RCC_OscConfig+0x4a>
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	f040 808b 	bne.w	8002d88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	f040 8087 	bne.w	8002d88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c7a:	4b93      	ldr	r3, [pc, #588]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_RCC_OscConfig+0x62>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e3ac      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	4b8c      	ldr	r3, [pc, #560]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <HAL_RCC_OscConfig+0x7c>
 8002ca2:	4b89      	ldr	r3, [pc, #548]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002caa:	e005      	b.n	8002cb8 <HAL_RCC_OscConfig+0x88>
 8002cac:	4b86      	ldr	r3, [pc, #536]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d223      	bcs.n	8002d04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fd07 	bl	80036d4 <RCC_SetFlashLatencyFromMSIRange>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e38d      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cd0:	4b7d      	ldr	r3, [pc, #500]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a7c      	ldr	r2, [pc, #496]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002cd6:	f043 0308 	orr.w	r3, r3, #8
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b7a      	ldr	r3, [pc, #488]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4977      	ldr	r1, [pc, #476]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cee:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	4972      	ldr	r1, [pc, #456]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
 8002d02:	e025      	b.n	8002d50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d04:	4b70      	ldr	r3, [pc, #448]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a6f      	ldr	r2, [pc, #444]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002d0a:	f043 0308 	orr.w	r3, r3, #8
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	496a      	ldr	r1, [pc, #424]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d22:	4b69      	ldr	r3, [pc, #420]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	4965      	ldr	r1, [pc, #404]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fcc7 	bl	80036d4 <RCC_SetFlashLatencyFromMSIRange>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e34d      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d50:	f000 fc36 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 8002d54:	4601      	mov	r1, r0
 8002d56:	4b5c      	ldr	r3, [pc, #368]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	4a5a      	ldr	r2, [pc, #360]	; (8002ecc <HAL_RCC_OscConfig+0x29c>)
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa21 f303 	lsr.w	r3, r1, r3
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_RCC_OscConfig+0x2a0>)
 8002d6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d70:	4b58      	ldr	r3, [pc, #352]	; (8002ed4 <HAL_RCC_OscConfig+0x2a4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe f9b1 	bl	80010dc <HAL_InitTick>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d052      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	e331      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d032      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d90:	4b4d      	ldr	r3, [pc, #308]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a4c      	ldr	r2, [pc, #304]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f9ea 	bl	8001174 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002da4:	f7fe f9e6 	bl	8001174 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e31a      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002db6:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dc2:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a40      	ldr	r2, [pc, #256]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b3e      	ldr	r3, [pc, #248]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	493b      	ldr	r1, [pc, #236]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de0:	4b39      	ldr	r3, [pc, #228]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	4936      	ldr	r1, [pc, #216]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
 8002df4:	e01a      	b.n	8002e2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002df6:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a33      	ldr	r2, [pc, #204]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e02:	f7fe f9b7 	bl	8001174 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e0a:	f7fe f9b3 	bl	8001174 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e2e7      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x1da>
 8002e28:	e000      	b.n	8002e2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d074      	beq.n	8002f22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d005      	beq.n	8002e4a <HAL_RCC_OscConfig+0x21a>
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	d10e      	bne.n	8002e62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d10b      	bne.n	8002e62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4a:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d064      	beq.n	8002f20 <HAL_RCC_OscConfig+0x2f0>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d160      	bne.n	8002f20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e2c4      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCC_OscConfig+0x24a>
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e01d      	b.n	8002eb6 <HAL_RCC_OscConfig+0x286>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e82:	d10c      	bne.n	8002e9e <HAL_RCC_OscConfig+0x26e>
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0f      	ldr	r2, [pc, #60]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0c      	ldr	r2, [pc, #48]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	e00b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x286>
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <HAL_RCC_OscConfig+0x298>)
 8002eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eb4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d01c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebe:	f7fe f959 	bl	8001174 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec4:	e011      	b.n	8002eea <HAL_RCC_OscConfig+0x2ba>
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	080052f8 	.word	0x080052f8
 8002ed0:	20000048 	.word	0x20000048
 8002ed4:	2000004c 	.word	0x2000004c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe f94c 	bl	8001174 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e280      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eea:	4baf      	ldr	r3, [pc, #700]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x2a8>
 8002ef6:	e014      	b.n	8002f22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe f93c 	bl	8001174 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fe f938 	bl	8001174 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e26c      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f12:	4ba5      	ldr	r3, [pc, #660]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x2d0>
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d060      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_OscConfig+0x310>
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d119      	bne.n	8002f6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d116      	bne.n	8002f6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f40:	4b99      	ldr	r3, [pc, #612]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_OscConfig+0x328>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e249      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f58:	4b93      	ldr	r3, [pc, #588]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	4990      	ldr	r1, [pc, #576]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f6c:	e040      	b.n	8002ff0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d023      	beq.n	8002fbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f76:	4b8c      	ldr	r3, [pc, #560]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a8b      	ldr	r2, [pc, #556]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe f8f7 	bl	8001174 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fe f8f3 	bl	8001174 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e227      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f9c:	4b82      	ldr	r3, [pc, #520]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b7f      	ldr	r3, [pc, #508]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	497c      	ldr	r1, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
 8002fbc:	e018      	b.n	8002ff0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbe:	4b7a      	ldr	r3, [pc, #488]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a79      	ldr	r2, [pc, #484]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe f8d3 	bl	8001174 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd2:	f7fe f8cf 	bl	8001174 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e203      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fe4:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d03c      	beq.n	8003076 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01c      	beq.n	800303e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003004:	4b68      	ldr	r3, [pc, #416]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8003006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300a:	4a67      	ldr	r2, [pc, #412]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe f8ae 	bl	8001174 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301c:	f7fe f8aa 	bl	8001174 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1de      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800302e:	4b5e      	ldr	r3, [pc, #376]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8003030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ef      	beq.n	800301c <HAL_RCC_OscConfig+0x3ec>
 800303c:	e01b      	b.n	8003076 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303e:	4b5a      	ldr	r3, [pc, #360]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8003040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003044:	4a58      	ldr	r2, [pc, #352]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304e:	f7fe f891 	bl	8001174 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003056:	f7fe f88d 	bl	8001174 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e1c1      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003068:	4b4f      	ldr	r3, [pc, #316]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 800306a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ef      	bne.n	8003056 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80a6 	beq.w	80031d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003084:	2300      	movs	r3, #0
 8003086:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003088:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10d      	bne.n	80030b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003094:	4b44      	ldr	r3, [pc, #272]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	4a43      	ldr	r2, [pc, #268]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 800309a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309e:	6593      	str	r3, [r2, #88]	; 0x58
 80030a0:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ac:	2301      	movs	r3, #1
 80030ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b0:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <HAL_RCC_OscConfig+0x57c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d118      	bne.n	80030ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030bc:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <HAL_RCC_OscConfig+0x57c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a3a      	ldr	r2, [pc, #232]	; (80031ac <HAL_RCC_OscConfig+0x57c>)
 80030c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c8:	f7fe f854 	bl	8001174 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d0:	f7fe f850 	bl	8001174 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e184      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e2:	4b32      	ldr	r3, [pc, #200]	; (80031ac <HAL_RCC_OscConfig+0x57c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d108      	bne.n	8003108 <HAL_RCC_OscConfig+0x4d8>
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	4a2a      	ldr	r2, [pc, #168]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003106:	e024      	b.n	8003152 <HAL_RCC_OscConfig+0x522>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b05      	cmp	r3, #5
 800310e:	d110      	bne.n	8003132 <HAL_RCC_OscConfig+0x502>
 8003110:	4b25      	ldr	r3, [pc, #148]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	4a24      	ldr	r2, [pc, #144]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8003118:	f043 0304 	orr.w	r3, r3, #4
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003120:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	4a20      	ldr	r2, [pc, #128]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003130:	e00f      	b.n	8003152 <HAL_RCC_OscConfig+0x522>
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003138:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003142:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003148:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 800314a:	f023 0304 	bic.w	r3, r3, #4
 800314e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fe f80b 	bl	8001174 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fe f807 	bl	8001174 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e139      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_OscConfig+0x578>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0ed      	beq.n	8003162 <HAL_RCC_OscConfig+0x532>
 8003186:	e01a      	b.n	80031be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fd fff4 	bl	8001174 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800318e:	e00f      	b.n	80031b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fd fff0 	bl	8001174 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d906      	bls.n	80031b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e122      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031b0:	4b90      	ldr	r3, [pc, #576]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e8      	bne.n	8003190 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031be:	7ffb      	ldrb	r3, [r7, #31]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d105      	bne.n	80031d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c4:	4b8b      	ldr	r3, [pc, #556]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	4a8a      	ldr	r2, [pc, #552]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8108 	beq.w	80033ea <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	2b02      	cmp	r3, #2
 80031e0:	f040 80d0 	bne.w	8003384 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031e4:	4b83      	ldr	r3, [pc, #524]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f003 0203 	and.w	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d130      	bne.n	800325a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	3b01      	subs	r3, #1
 8003204:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d127      	bne.n	800325a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d11f      	bne.n	800325a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003224:	2a07      	cmp	r2, #7
 8003226:	bf14      	ite	ne
 8003228:	2201      	movne	r2, #1
 800322a:	2200      	moveq	r2, #0
 800322c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800322e:	4293      	cmp	r3, r2
 8003230:	d113      	bne.n	800325a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	3b01      	subs	r3, #1
 8003240:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d109      	bne.n	800325a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	3b01      	subs	r3, #1
 8003254:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003256:	429a      	cmp	r2, r3
 8003258:	d06e      	beq.n	8003338 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b0c      	cmp	r3, #12
 800325e:	d069      	beq.n	8003334 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003260:	4b64      	ldr	r3, [pc, #400]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0b7      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800327c:	4b5d      	ldr	r3, [pc, #372]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a5c      	ldr	r2, [pc, #368]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 8003282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003286:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003288:	f7fd ff74 	bl	8001174 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003290:	f7fd ff70 	bl	8001174 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0a4      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a2:	4b54      	ldr	r3, [pc, #336]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ae:	4b51      	ldr	r3, [pc, #324]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	4b51      	ldr	r3, [pc, #324]	; (80033f8 <HAL_RCC_OscConfig+0x7c8>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032be:	3a01      	subs	r2, #1
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	4311      	orrs	r1, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032c8:	0212      	lsls	r2, r2, #8
 80032ca:	4311      	orrs	r1, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032d0:	0852      	lsrs	r2, r2, #1
 80032d2:	3a01      	subs	r2, #1
 80032d4:	0552      	lsls	r2, r2, #21
 80032d6:	4311      	orrs	r1, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032dc:	0852      	lsrs	r2, r2, #1
 80032de:	3a01      	subs	r2, #1
 80032e0:	0652      	lsls	r2, r2, #25
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032e8:	0912      	lsrs	r2, r2, #4
 80032ea:	0452      	lsls	r2, r2, #17
 80032ec:	430a      	orrs	r2, r1
 80032ee:	4941      	ldr	r1, [pc, #260]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032f4:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a3e      	ldr	r2, [pc, #248]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003300:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a3b      	ldr	r2, [pc, #236]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800330c:	f7fd ff32 	bl	8001174 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fd ff2e 	bl	8001174 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e062      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003326:	4b33      	ldr	r3, [pc, #204]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003332:	e05a      	b.n	80033ea <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e059      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003338:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d152      	bne.n	80033ea <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003344:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2a      	ldr	r2, [pc, #168]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 800334a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800334e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a27      	ldr	r2, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 8003356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800335a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800335c:	f7fd ff0a 	bl	8001174 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7fd ff06 	bl	8001174 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e03a      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003376:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x734>
 8003382:	e032      	b.n	80033ea <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d02d      	beq.n	80033e6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a19      	ldr	r2, [pc, #100]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 8003390:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003394:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003396:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80033a8:	f023 0303 	bic.w	r3, r3, #3
 80033ac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80033b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fd fed9 	bl	8001174 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fd fed5 	bl	8001174 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e009      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCC_OscConfig+0x7c4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x796>
 80033e4:	e001      	b.n	80033ea <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	f99d808c 	.word	0xf99d808c

080033fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0c8      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003410:	4b66      	ldr	r3, [pc, #408]	; (80035ac <HAL_RCC_ClockConfig+0x1b0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d910      	bls.n	8003440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCC_ClockConfig+0x1b0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 0207 	bic.w	r2, r3, #7
 8003426:	4961      	ldr	r1, [pc, #388]	; (80035ac <HAL_RCC_ClockConfig+0x1b0>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <HAL_RCC_ClockConfig+0x1b0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0b0      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d04c      	beq.n	80034e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d107      	bne.n	8003464 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003454:	4b56      	ldr	r3, [pc, #344]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d121      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e09e      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d107      	bne.n	800347c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800346c:	4b50      	ldr	r3, [pc, #320]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d115      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e092      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003484:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e086      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003494:	4b46      	ldr	r3, [pc, #280]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e07e      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034a4:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f023 0203 	bic.w	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	493f      	ldr	r1, [pc, #252]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b6:	f7fd fe5d 	bl	8001174 <HAL_GetTick>
 80034ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034bc:	e00a      	b.n	80034d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034be:	f7fd fe59 	bl	8001174 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e066      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d4:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 020c 	and.w	r2, r3, #12
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d1eb      	bne.n	80034be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f2:	4b2f      	ldr	r3, [pc, #188]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	492c      	ldr	r1, [pc, #176]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003504:	4b29      	ldr	r3, [pc, #164]	; (80035ac <HAL_RCC_ClockConfig+0x1b0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d210      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <HAL_RCC_ClockConfig+0x1b0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 0207 	bic.w	r2, r3, #7
 800351a:	4924      	ldr	r1, [pc, #144]	; (80035ac <HAL_RCC_ClockConfig+0x1b0>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_RCC_ClockConfig+0x1b0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e036      	b.n	80035a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4918      	ldr	r1, [pc, #96]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4910      	ldr	r1, [pc, #64]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003572:	f000 f825 	bl	80035c0 <HAL_RCC_GetSysClockFreq>
 8003576:	4601      	mov	r1, r0
 8003578:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <HAL_RCC_ClockConfig+0x1b4>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	4a0c      	ldr	r2, [pc, #48]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	5cd3      	ldrb	r3, [r2, r3]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	fa21 f303 	lsr.w	r3, r1, r3
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003592:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fda0 	bl	80010dc <HAL_InitTick>
 800359c:	4603      	mov	r3, r0
 800359e:	72fb      	strb	r3, [r7, #11]

  return status;
 80035a0:	7afb      	ldrb	r3, [r7, #11]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40022000 	.word	0x40022000
 80035b0:	40021000 	.word	0x40021000
 80035b4:	080052f8 	.word	0x080052f8
 80035b8:	20000048 	.word	0x20000048
 80035bc:	2000004c 	.word	0x2000004c

080035c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	; 0x24
 80035c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035d8:	4b3a      	ldr	r3, [pc, #232]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0x34>
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	d121      	bne.n	8003632 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d11e      	bne.n	8003632 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035f4:	4b33      	ldr	r3, [pc, #204]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003600:	4b30      	ldr	r3, [pc, #192]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003606:	0a1b      	lsrs	r3, r3, #8
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	e005      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003610:	4b2c      	ldr	r3, [pc, #176]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800361c:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003624:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10d      	bne.n	8003648 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003630:	e00a      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b04      	cmp	r3, #4
 8003636:	d102      	bne.n	800363e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003638:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	e004      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d101      	bne.n	8003648 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003644:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003646:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d133      	bne.n	80036b6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d002      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0xa4>
 800365e:	2b03      	cmp	r3, #3
 8003660:	d003      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0xaa>
 8003662:	e005      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003666:	617b      	str	r3, [r7, #20]
      break;
 8003668:	e005      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800366a:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800366c:	617b      	str	r3, [r7, #20]
      break;
 800366e:	e002      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	617b      	str	r3, [r7, #20]
      break;
 8003674:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	3301      	adds	r3, #1
 8003682:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	fb02 f203 	mul.w	r2, r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x104>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0e5b      	lsrs	r3, r3, #25
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	3301      	adds	r3, #1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036b6:	69bb      	ldr	r3, [r7, #24]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3724      	adds	r7, #36	; 0x24
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	40021000 	.word	0x40021000
 80036c8:	08005308 	.word	0x08005308
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	007a1200 	.word	0x007a1200

080036d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036e0:	4b2a      	ldr	r3, [pc, #168]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036ec:	f7ff fa3c 	bl	8002b68 <HAL_PWREx_GetVoltageRange>
 80036f0:	6178      	str	r0, [r7, #20]
 80036f2:	e014      	b.n	800371e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	4a24      	ldr	r2, [pc, #144]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003700:	4b22      	ldr	r3, [pc, #136]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800370c:	f7ff fa2c 	bl	8002b68 <HAL_PWREx_GetVoltageRange>
 8003710:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003716:	4a1d      	ldr	r2, [pc, #116]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003724:	d10b      	bne.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d919      	bls.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2ba0      	cmp	r3, #160	; 0xa0
 8003730:	d902      	bls.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003732:	2302      	movs	r3, #2
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	e013      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003738:	2301      	movs	r3, #1
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	e010      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b80      	cmp	r3, #128	; 0x80
 8003742:	d902      	bls.n	800374a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003744:	2303      	movs	r3, #3
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	e00a      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b80      	cmp	r3, #128	; 0x80
 800374e:	d102      	bne.n	8003756 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003750:	2302      	movs	r3, #2
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e004      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b70      	cmp	r3, #112	; 0x70
 800375a:	d101      	bne.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800375c:	2301      	movs	r3, #1
 800375e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f023 0207 	bic.w	r2, r3, #7
 8003768:	4909      	ldr	r1, [pc, #36]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	40022000 	.word	0x40022000

08003794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800379c:	2300      	movs	r3, #0
 800379e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a0:	2300      	movs	r3, #0
 80037a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d03f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b8:	d01c      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80037ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037be:	d802      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00e      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80037c4:	e01f      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80037c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ca:	d003      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80037cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037d0:	d01c      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80037d2:	e018      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037d4:	4b85      	ldr	r3, [pc, #532]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4a84      	ldr	r2, [pc, #528]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037e0:	e015      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fab9 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037f2:	e00c      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3320      	adds	r3, #32
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fba0 	bl	8003f40 <RCCEx_PLLSAI2_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003804:	e003      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	74fb      	strb	r3, [r7, #19]
      break;
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800380c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800380e:	7cfb      	ldrb	r3, [r7, #19]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10b      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003814:	4b75      	ldr	r3, [pc, #468]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003822:	4972      	ldr	r1, [pc, #456]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800382a:	e001      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382c:	7cfb      	ldrb	r3, [r7, #19]
 800382e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d03f      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003844:	d01c      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003846:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800384a:	d802      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00e      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003850:	e01f      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003856:	d003      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003858:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800385c:	d01c      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800385e:	e018      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003860:	4b62      	ldr	r3, [pc, #392]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a61      	ldr	r2, [pc, #388]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800386c:	e015      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3304      	adds	r3, #4
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fa73 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800387e:	e00c      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3320      	adds	r3, #32
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fb5a 	bl	8003f40 <RCCEx_PLLSAI2_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003890:	e003      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	74fb      	strb	r3, [r7, #19]
      break;
 8003896:	e000      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800389a:	7cfb      	ldrb	r3, [r7, #19]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038a0:	4b52      	ldr	r3, [pc, #328]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ae:	494f      	ldr	r1, [pc, #316]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038b6:	e001      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80a0 	beq.w	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80038de:	2300      	movs	r3, #0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00d      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e4:	4b41      	ldr	r3, [pc, #260]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	4a40      	ldr	r2, [pc, #256]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6593      	str	r3, [r2, #88]	; 0x58
 80038f0:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fc:	2301      	movs	r3, #1
 80038fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003900:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a3a      	ldr	r2, [pc, #232]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800390c:	f7fd fc32 	bl	8001174 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003912:	e009      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003914:	f7fd fc2e 	bl	8001174 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d902      	bls.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	74fb      	strb	r3, [r7, #19]
        break;
 8003926:	e005      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003928:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ef      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003934:	7cfb      	ldrb	r3, [r7, #19]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d15c      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800393a:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003944:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01f      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	429a      	cmp	r2, r3
 8003956:	d019      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003958:	4b24      	ldr	r3, [pc, #144]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003962:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003964:	4b21      	ldr	r3, [pc, #132]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	4a20      	ldr	r2, [pc, #128]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	4a1c      	ldr	r2, [pc, #112]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800397c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003984:	4a19      	ldr	r2, [pc, #100]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d016      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fd fbed 	bl	8001174 <HAL_GetTick>
 800399a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399c:	e00b      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fd fbe9 	bl	8001174 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d902      	bls.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	74fb      	strb	r3, [r7, #19]
            break;
 80039b4:	e006      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b6:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ec      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039da:	4904      	ldr	r1, [pc, #16]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039e2:	e009      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	74bb      	strb	r3, [r7, #18]
 80039e8:	e006      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f8:	7c7b      	ldrb	r3, [r7, #17]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d105      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fe:	4b9e      	ldr	r3, [pc, #632]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	4a9d      	ldr	r2, [pc, #628]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a16:	4b98      	ldr	r3, [pc, #608]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	f023 0203 	bic.w	r2, r3, #3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	4994      	ldr	r1, [pc, #592]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a38:	4b8f      	ldr	r3, [pc, #572]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f023 020c 	bic.w	r2, r3, #12
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	498c      	ldr	r1, [pc, #560]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a5a:	4b87      	ldr	r3, [pc, #540]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	4983      	ldr	r1, [pc, #524]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a7c:	4b7e      	ldr	r3, [pc, #504]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	497b      	ldr	r1, [pc, #492]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a9e:	4b76      	ldr	r3, [pc, #472]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aac:	4972      	ldr	r1, [pc, #456]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ac0:	4b6d      	ldr	r3, [pc, #436]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	496a      	ldr	r1, [pc, #424]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ae2:	4b65      	ldr	r3, [pc, #404]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	4961      	ldr	r1, [pc, #388]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b04:	4b5c      	ldr	r3, [pc, #368]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	4959      	ldr	r1, [pc, #356]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b26:	4b54      	ldr	r3, [pc, #336]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b34:	4950      	ldr	r1, [pc, #320]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b48:	4b4b      	ldr	r3, [pc, #300]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	4948      	ldr	r1, [pc, #288]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b6a:	4b43      	ldr	r3, [pc, #268]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	493f      	ldr	r1, [pc, #252]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d028      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b8c:	4b3a      	ldr	r3, [pc, #232]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b9a:	4937      	ldr	r1, [pc, #220]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003baa:	d106      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bac:	4b32      	ldr	r3, [pc, #200]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4a31      	ldr	r2, [pc, #196]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bb6:	60d3      	str	r3, [r2, #12]
 8003bb8:	e011      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc2:	d10c      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f8c8 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d028      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bea:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	491f      	ldr	r1, [pc, #124]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c08:	d106      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4a1a      	ldr	r2, [pc, #104]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c14:	60d3      	str	r3, [r2, #12]
 8003c16:	e011      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3304      	adds	r3, #4
 8003c26:	2101      	movs	r1, #1
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 f899 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c32:	7cfb      	ldrb	r3, [r7, #19]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d02b      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c56:	4908      	ldr	r1, [pc, #32]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c66:	d109      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a02      	ldr	r2, [pc, #8]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c72:	60d3      	str	r3, [r2, #12]
 8003c74:	e014      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f867 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c96:	7cfb      	ldrb	r3, [r7, #19]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d02f      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cac:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cba:	4928      	ldr	r1, [pc, #160]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cca:	d10d      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	2102      	movs	r1, #2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f844 	bl	8003d60 <RCCEx_PLLSAI1_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d014      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003ce2:	7cfb      	ldrb	r3, [r7, #19]
 8003ce4:	74bb      	strb	r3, [r7, #18]
 8003ce6:	e011      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3320      	adds	r3, #32
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 f921 	bl	8003f40 <RCCEx_PLLSAI2_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d02:	7cfb      	ldrb	r3, [r7, #19]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d18:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d26:	490d      	ldr	r1, [pc, #52]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4a:	4904      	ldr	r1, [pc, #16]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d52:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000

08003d60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d6e:	4b73      	ldr	r3, [pc, #460]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d018      	beq.n	8003dac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d7a:	4b70      	ldr	r3, [pc, #448]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0203 	and.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d10d      	bne.n	8003da6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d92:	4b6a      	ldr	r3, [pc, #424]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
       ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d044      	beq.n	8003e30 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
 8003daa:	e041      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d00c      	beq.n	8003dce <RCCEx_PLLSAI1_Config+0x6e>
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d013      	beq.n	8003de0 <RCCEx_PLLSAI1_Config+0x80>
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d120      	bne.n	8003dfe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dbc:	4b5f      	ldr	r3, [pc, #380]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d11d      	bne.n	8003e04 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dcc:	e01a      	b.n	8003e04 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dce:	4b5b      	ldr	r3, [pc, #364]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d116      	bne.n	8003e08 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dde:	e013      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003de0:	4b56      	ldr	r3, [pc, #344]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10f      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dec:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dfc:	e006      	b.n	8003e0c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
      break;
 8003e02:	e004      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e04:	bf00      	nop
 8003e06:	e002      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e08:	bf00      	nop
 8003e0a:	e000      	b.n	8003e0e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e0c:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e14:	4b49      	ldr	r3, [pc, #292]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	4944      	ldr	r1, [pc, #272]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d17d      	bne.n	8003f32 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e36:	4b41      	ldr	r3, [pc, #260]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a40      	ldr	r2, [pc, #256]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e42:	f7fd f997 	bl	8001174 <HAL_GetTick>
 8003e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e48:	e009      	b.n	8003e5e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e4a:	f7fd f993 	bl	8001174 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d902      	bls.n	8003e5e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e5c:	e005      	b.n	8003e6a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e5e:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1ef      	bne.n	8003e4a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d160      	bne.n	8003f32 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d111      	bne.n	8003e9a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e76:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	0211      	lsls	r1, r2, #8
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68d2      	ldr	r2, [r2, #12]
 8003e8c:	0912      	lsrs	r2, r2, #4
 8003e8e:	0452      	lsls	r2, r2, #17
 8003e90:	430a      	orrs	r2, r1
 8003e92:	492a      	ldr	r1, [pc, #168]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	610b      	str	r3, [r1, #16]
 8003e98:	e027      	b.n	8003eea <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d112      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ea0:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ea8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6892      	ldr	r2, [r2, #8]
 8003eb0:	0211      	lsls	r1, r2, #8
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6912      	ldr	r2, [r2, #16]
 8003eb6:	0852      	lsrs	r2, r2, #1
 8003eb8:	3a01      	subs	r2, #1
 8003eba:	0552      	lsls	r2, r2, #21
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	491f      	ldr	r1, [pc, #124]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	610b      	str	r3, [r1, #16]
 8003ec4:	e011      	b.n	8003eea <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ece:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6892      	ldr	r2, [r2, #8]
 8003ed6:	0211      	lsls	r1, r2, #8
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6952      	ldr	r2, [r2, #20]
 8003edc:	0852      	lsrs	r2, r2, #1
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	0652      	lsls	r2, r2, #25
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	4915      	ldr	r1, [pc, #84]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a13      	ldr	r2, [pc, #76]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef6:	f7fd f93d 	bl	8001174 <HAL_GetTick>
 8003efa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003efc:	e009      	b.n	8003f12 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003efe:	f7fd f939 	bl	8001174 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d902      	bls.n	8003f12 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	73fb      	strb	r3, [r7, #15]
          break;
 8003f10:	e005      	b.n	8003f1e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ef      	beq.n	8003efe <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	4903      	ldr	r1, [pc, #12]	; (8003f3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000

08003f40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f4e:	4b68      	ldr	r3, [pc, #416]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d018      	beq.n	8003f8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f5a:	4b65      	ldr	r3, [pc, #404]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0203 	and.w	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d10d      	bne.n	8003f86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f72:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
       ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d044      	beq.n	8004010 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
 8003f8a:	e041      	b.n	8004010 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d00c      	beq.n	8003fae <RCCEx_PLLSAI2_Config+0x6e>
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d013      	beq.n	8003fc0 <RCCEx_PLLSAI2_Config+0x80>
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d120      	bne.n	8003fde <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f9c:	4b54      	ldr	r3, [pc, #336]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d11d      	bne.n	8003fe4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fac:	e01a      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fae:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d116      	bne.n	8003fe8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fbe:	e013      	b.n	8003fe8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fc0:	4b4b      	ldr	r3, [pc, #300]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10f      	bne.n	8003fec <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fcc:	4b48      	ldr	r3, [pc, #288]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fdc:	e006      	b.n	8003fec <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe2:	e004      	b.n	8003fee <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003fe4:	bf00      	nop
 8003fe6:	e002      	b.n	8003fee <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003fe8:	bf00      	nop
 8003fea:	e000      	b.n	8003fee <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003fec:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10d      	bne.n	8004010 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ff4:	4b3e      	ldr	r3, [pc, #248]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	3b01      	subs	r3, #1
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	430b      	orrs	r3, r1
 800400a:	4939      	ldr	r1, [pc, #228]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800400c:	4313      	orrs	r3, r2
 800400e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d167      	bne.n	80040e6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004016:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a35      	ldr	r2, [pc, #212]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800401c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004022:	f7fd f8a7 	bl	8001174 <HAL_GetTick>
 8004026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004028:	e009      	b.n	800403e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800402a:	f7fd f8a3 	bl	8001174 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d902      	bls.n	800403e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	73fb      	strb	r3, [r7, #15]
        break;
 800403c:	e005      	b.n	800404a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1ef      	bne.n	800402a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d14a      	bne.n	80040e6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d111      	bne.n	800407a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004056:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6892      	ldr	r2, [r2, #8]
 8004066:	0211      	lsls	r1, r2, #8
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68d2      	ldr	r2, [r2, #12]
 800406c:	0912      	lsrs	r2, r2, #4
 800406e:	0452      	lsls	r2, r2, #17
 8004070:	430a      	orrs	r2, r1
 8004072:	491f      	ldr	r1, [pc, #124]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004074:	4313      	orrs	r3, r2
 8004076:	614b      	str	r3, [r1, #20]
 8004078:	e011      	b.n	800409e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004082:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6892      	ldr	r2, [r2, #8]
 800408a:	0211      	lsls	r1, r2, #8
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6912      	ldr	r2, [r2, #16]
 8004090:	0852      	lsrs	r2, r2, #1
 8004092:	3a01      	subs	r2, #1
 8004094:	0652      	lsls	r2, r2, #25
 8004096:	430a      	orrs	r2, r1
 8004098:	4915      	ldr	r1, [pc, #84]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800409a:	4313      	orrs	r3, r2
 800409c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800409e:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040aa:	f7fd f863 	bl	8001174 <HAL_GetTick>
 80040ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040b0:	e009      	b.n	80040c6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040b2:	f7fd f85f 	bl	8001174 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d902      	bls.n	80040c6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	73fb      	strb	r3, [r7, #15]
          break;
 80040c4:	e005      	b.n	80040d2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040c6:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0ef      	beq.n	80040b2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d106      	bne.n	80040e6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	4903      	ldr	r1, [pc, #12]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000

080040f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e01d      	b.n	8004142 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc fec0 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 fbd2 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <HAL_TIM_Base_Start_IT+0x50>)
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d00b      	beq.n	800418e <HAL_TIM_Base_Start_IT+0x42>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d007      	beq.n	800418e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	00010007 	.word	0x00010007

080041a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e01d      	b.n	80041ee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fc fe4c 	bl	8000e64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 fb7c 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2201      	movs	r2, #1
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 ff70 	bl	80050f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <HAL_TIM_PWM_Start+0x98>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d013      	beq.n	8004242 <HAL_TIM_PWM_Start+0x4a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <HAL_TIM_PWM_Start+0x9c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00e      	beq.n	8004242 <HAL_TIM_PWM_Start+0x4a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_TIM_PWM_Start+0xa0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d009      	beq.n	8004242 <HAL_TIM_PWM_Start+0x4a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1a      	ldr	r2, [pc, #104]	; (800429c <HAL_TIM_PWM_Start+0xa4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d004      	beq.n	8004242 <HAL_TIM_PWM_Start+0x4a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_TIM_PWM_Start+0xa8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d101      	bne.n	8004246 <HAL_TIM_PWM_Start+0x4e>
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <HAL_TIM_PWM_Start+0x50>
 8004246:	2300      	movs	r3, #0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800425a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <HAL_TIM_PWM_Start+0xac>)
 8004264:	4013      	ands	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b06      	cmp	r3, #6
 800426c:	d00b      	beq.n	8004286 <HAL_TIM_PWM_Start+0x8e>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004274:	d007      	beq.n	8004286 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40012c00 	.word	0x40012c00
 8004294:	40013400 	.word	0x40013400
 8004298:	40014000 	.word	0x40014000
 800429c:	40014400 	.word	0x40014400
 80042a0:	40014800 	.word	0x40014800
 80042a4:	00010007 	.word	0x00010007

080042a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d122      	bne.n	8004304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d11b      	bne.n	8004304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0202 	mvn.w	r2, #2
 80042d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fad7 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fac9 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fada 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b04      	cmp	r3, #4
 8004310:	d122      	bne.n	8004358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b04      	cmp	r3, #4
 800431e:	d11b      	bne.n	8004358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0204 	mvn.w	r2, #4
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 faad 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fa9f 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fab0 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b08      	cmp	r3, #8
 8004364:	d122      	bne.n	80043ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b08      	cmp	r3, #8
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0208 	mvn.w	r2, #8
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2204      	movs	r2, #4
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fa83 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fa75 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fa86 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d122      	bne.n	8004400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d11b      	bne.n	8004400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0210 	mvn.w	r2, #16
 80043d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2208      	movs	r2, #8
 80043d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa59 	bl	800489e <HAL_TIM_IC_CaptureCallback>
 80043ec:	e005      	b.n	80043fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa4b 	bl	800488a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fa5c 	bl	80048b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b01      	cmp	r3, #1
 800440c:	d10e      	bne.n	800442c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d107      	bne.n	800442c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0201 	mvn.w	r2, #1
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fb fece 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b80      	cmp	r3, #128	; 0x80
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d107      	bne.n	8004458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 ff04 	bl	8005260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004466:	d10e      	bne.n	8004486 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004472:	2b80      	cmp	r3, #128	; 0x80
 8004474:	d107      	bne.n	8004486 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800447e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fef7 	bl	8005274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d10e      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449e:	2b40      	cmp	r3, #64	; 0x40
 80044a0:	d107      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fa0a 	bl	80048c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d10e      	bne.n	80044de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d107      	bne.n	80044de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f06f 0220 	mvn.w	r2, #32
 80044d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 feb7 	bl	800524c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e105      	b.n	800470e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b14      	cmp	r3, #20
 8004516:	f200 80f0 	bhi.w	80046fa <HAL_TIM_PWM_ConfigChannel+0x212>
 800451a:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004575 	.word	0x08004575
 8004524:	080046fb 	.word	0x080046fb
 8004528:	080046fb 	.word	0x080046fb
 800452c:	080046fb 	.word	0x080046fb
 8004530:	080045b5 	.word	0x080045b5
 8004534:	080046fb 	.word	0x080046fb
 8004538:	080046fb 	.word	0x080046fb
 800453c:	080046fb 	.word	0x080046fb
 8004540:	080045f7 	.word	0x080045f7
 8004544:	080046fb 	.word	0x080046fb
 8004548:	080046fb 	.word	0x080046fb
 800454c:	080046fb 	.word	0x080046fb
 8004550:	08004637 	.word	0x08004637
 8004554:	080046fb 	.word	0x080046fb
 8004558:	080046fb 	.word	0x080046fb
 800455c:	080046fb 	.word	0x080046fb
 8004560:	08004679 	.word	0x08004679
 8004564:	080046fb 	.word	0x080046fb
 8004568:	080046fb 	.word	0x080046fb
 800456c:	080046fb 	.word	0x080046fb
 8004570:	080046b9 	.word	0x080046b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fa48 	bl	8004a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0208 	orr.w	r2, r2, #8
 800458e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0204 	bic.w	r2, r2, #4
 800459e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6999      	ldr	r1, [r3, #24]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	619a      	str	r2, [r3, #24]
      break;
 80045b2:	e0a3      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fab8 	bl	8004b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	021a      	lsls	r2, r3, #8
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	619a      	str	r2, [r3, #24]
      break;
 80045f4:	e082      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fb21 	bl	8004c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0208 	orr.w	r2, r2, #8
 8004610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0204 	bic.w	r2, r2, #4
 8004620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69d9      	ldr	r1, [r3, #28]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	61da      	str	r2, [r3, #28]
      break;
 8004634:	e062      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fb89 	bl	8004d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69d9      	ldr	r1, [r3, #28]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	61da      	str	r2, [r3, #28]
      break;
 8004676:	e041      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fbd2 	bl	8004e28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0208 	orr.w	r2, r2, #8
 8004692:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0204 	bic.w	r2, r2, #4
 80046a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046b6:	e021      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fc16 	bl	8004ef0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	021a      	lsls	r2, r3, #8
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046f8:	e000      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80046fa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop

08004718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIM_ConfigClockSource+0x18>
 800472c:	2302      	movs	r3, #2
 800472e:	e0a8      	b.n	8004882 <HAL_TIM_ConfigClockSource+0x16a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800475a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d067      	beq.n	800483c <HAL_TIM_ConfigClockSource+0x124>
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d80b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x70>
 8004770:	2b10      	cmp	r3, #16
 8004772:	d073      	beq.n	800485c <HAL_TIM_ConfigClockSource+0x144>
 8004774:	2b10      	cmp	r3, #16
 8004776:	d802      	bhi.n	800477e <HAL_TIM_ConfigClockSource+0x66>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d06f      	beq.n	800485c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800477c:	e078      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800477e:	2b20      	cmp	r3, #32
 8004780:	d06c      	beq.n	800485c <HAL_TIM_ConfigClockSource+0x144>
 8004782:	2b30      	cmp	r3, #48	; 0x30
 8004784:	d06a      	beq.n	800485c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004786:	e073      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004788:	2b70      	cmp	r3, #112	; 0x70
 800478a:	d00d      	beq.n	80047a8 <HAL_TIM_ConfigClockSource+0x90>
 800478c:	2b70      	cmp	r3, #112	; 0x70
 800478e:	d804      	bhi.n	800479a <HAL_TIM_ConfigClockSource+0x82>
 8004790:	2b50      	cmp	r3, #80	; 0x50
 8004792:	d033      	beq.n	80047fc <HAL_TIM_ConfigClockSource+0xe4>
 8004794:	2b60      	cmp	r3, #96	; 0x60
 8004796:	d041      	beq.n	800481c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004798:	e06a      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800479a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479e:	d066      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x156>
 80047a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a4:	d017      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80047a6:	e063      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6899      	ldr	r1, [r3, #8]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f000 fc7a 	bl	80050b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	609a      	str	r2, [r3, #8]
      break;
 80047d4:	e04c      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6899      	ldr	r1, [r3, #8]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f000 fc63 	bl	80050b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f8:	609a      	str	r2, [r3, #8]
      break;
 80047fa:	e039      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	461a      	mov	r2, r3
 800480a:	f000 fbd7 	bl	8004fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2150      	movs	r1, #80	; 0x50
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fc30 	bl	800507a <TIM_ITRx_SetConfig>
      break;
 800481a:	e029      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	461a      	mov	r2, r3
 800482a:	f000 fbf6 	bl	800501a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2160      	movs	r1, #96	; 0x60
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fc20 	bl	800507a <TIM_ITRx_SetConfig>
      break;
 800483a:	e019      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	461a      	mov	r2, r3
 800484a:	f000 fbb7 	bl	8004fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2140      	movs	r1, #64	; 0x40
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fc10 	bl	800507a <TIM_ITRx_SetConfig>
      break;
 800485a:	e009      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f000 fc07 	bl	800507a <TIM_ITRx_SetConfig>
      break;
 800486c:	e000      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800486e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a40      	ldr	r2, [pc, #256]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d013      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fa:	d00f      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3d      	ldr	r2, [pc, #244]	; (80049f4 <TIM_Base_SetConfig+0x118>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00b      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3c      	ldr	r2, [pc, #240]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d007      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3a      	ldr	r2, [pc, #232]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d108      	bne.n	800492e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2f      	ldr	r2, [pc, #188]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01f      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d01b      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <TIM_Base_SetConfig+0x118>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d017      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2b      	ldr	r2, [pc, #172]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d013      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00f      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00b      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a28      	ldr	r2, [pc, #160]	; (8004a04 <TIM_Base_SetConfig+0x128>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d007      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a27      	ldr	r2, [pc, #156]	; (8004a08 <TIM_Base_SetConfig+0x12c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d003      	beq.n	8004976 <TIM_Base_SetConfig+0x9a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <TIM_Base_SetConfig+0x130>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d108      	bne.n	8004988 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a10      	ldr	r2, [pc, #64]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00f      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a11      	ldr	r2, [pc, #68]	; (8004a04 <TIM_Base_SetConfig+0x128>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a10      	ldr	r2, [pc, #64]	; (8004a08 <TIM_Base_SetConfig+0x12c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0f      	ldr	r2, [pc, #60]	; (8004a0c <TIM_Base_SetConfig+0x130>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d103      	bne.n	80049dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	615a      	str	r2, [r3, #20]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40013400 	.word	0x40013400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800

08004a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0201 	bic.w	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f023 0302 	bic.w	r3, r3, #2
 8004a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a2c      	ldr	r2, [pc, #176]	; (8004b1c <TIM_OC1_SetConfig+0x10c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00f      	beq.n	8004a90 <TIM_OC1_SetConfig+0x80>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <TIM_OC1_SetConfig+0x110>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <TIM_OC1_SetConfig+0x80>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <TIM_OC1_SetConfig+0x114>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_OC1_SetConfig+0x80>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <TIM_OC1_SetConfig+0x118>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_OC1_SetConfig+0x80>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a28      	ldr	r2, [pc, #160]	; (8004b2c <TIM_OC1_SetConfig+0x11c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10c      	bne.n	8004aaa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 0308 	bic.w	r3, r3, #8
 8004a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f023 0304 	bic.w	r3, r3, #4
 8004aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1b      	ldr	r2, [pc, #108]	; (8004b1c <TIM_OC1_SetConfig+0x10c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00f      	beq.n	8004ad2 <TIM_OC1_SetConfig+0xc2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a1a      	ldr	r2, [pc, #104]	; (8004b20 <TIM_OC1_SetConfig+0x110>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00b      	beq.n	8004ad2 <TIM_OC1_SetConfig+0xc2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <TIM_OC1_SetConfig+0x114>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d007      	beq.n	8004ad2 <TIM_OC1_SetConfig+0xc2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <TIM_OC1_SetConfig+0x118>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <TIM_OC1_SetConfig+0xc2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <TIM_OC1_SetConfig+0x11c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d111      	bne.n	8004af6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	621a      	str	r2, [r3, #32]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40013400 	.word	0x40013400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800

08004b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f023 0210 	bic.w	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0320 	bic.w	r3, r3, #32
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a28      	ldr	r2, [pc, #160]	; (8004c30 <TIM_OC2_SetConfig+0x100>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_OC2_SetConfig+0x6c>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <TIM_OC2_SetConfig+0x104>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d10d      	bne.n	8004bb8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1d      	ldr	r2, [pc, #116]	; (8004c30 <TIM_OC2_SetConfig+0x100>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00f      	beq.n	8004be0 <TIM_OC2_SetConfig+0xb0>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <TIM_OC2_SetConfig+0x104>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00b      	beq.n	8004be0 <TIM_OC2_SetConfig+0xb0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a1b      	ldr	r2, [pc, #108]	; (8004c38 <TIM_OC2_SetConfig+0x108>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d007      	beq.n	8004be0 <TIM_OC2_SetConfig+0xb0>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <TIM_OC2_SetConfig+0x10c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_OC2_SetConfig+0xb0>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <TIM_OC2_SetConfig+0x110>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d113      	bne.n	8004c08 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40013400 	.word	0x40013400
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800

08004c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a27      	ldr	r2, [pc, #156]	; (8004d40 <TIM_OC3_SetConfig+0xfc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_OC3_SetConfig+0x6a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a26      	ldr	r2, [pc, #152]	; (8004d44 <TIM_OC3_SetConfig+0x100>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d10d      	bne.n	8004cca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1c      	ldr	r2, [pc, #112]	; (8004d40 <TIM_OC3_SetConfig+0xfc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00f      	beq.n	8004cf2 <TIM_OC3_SetConfig+0xae>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1b      	ldr	r2, [pc, #108]	; (8004d44 <TIM_OC3_SetConfig+0x100>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_OC3_SetConfig+0xae>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1a      	ldr	r2, [pc, #104]	; (8004d48 <TIM_OC3_SetConfig+0x104>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_OC3_SetConfig+0xae>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <TIM_OC3_SetConfig+0x108>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_OC3_SetConfig+0xae>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a18      	ldr	r2, [pc, #96]	; (8004d50 <TIM_OC3_SetConfig+0x10c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d113      	bne.n	8004d1a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40013400 	.word	0x40013400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800

08004d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	031b      	lsls	r3, r3, #12
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <TIM_OC4_SetConfig+0xc0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00f      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x84>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <TIM_OC4_SetConfig+0xc4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x84>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <TIM_OC4_SetConfig+0xc8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x84>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <TIM_OC4_SetConfig+0xcc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_OC4_SetConfig+0x84>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a14      	ldr	r2, [pc, #80]	; (8004e24 <TIM_OC4_SetConfig+0xd0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d109      	bne.n	8004dec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	019b      	lsls	r3, r3, #6
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40013400 	.word	0x40013400
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800

08004e28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <TIM_OC5_SetConfig+0xb4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x7a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <TIM_OC5_SetConfig+0xb8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x7a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <TIM_OC5_SetConfig+0xbc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x7a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <TIM_OC5_SetConfig+0xc0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x7a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a13      	ldr	r2, [pc, #76]	; (8004eec <TIM_OC5_SetConfig+0xc4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d109      	bne.n	8004eb6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	621a      	str	r2, [r3, #32]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40013400 	.word	0x40013400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800

08004ef0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	051b      	lsls	r3, r3, #20
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <TIM_OC6_SetConfig+0xb8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00f      	beq.n	8004f6c <TIM_OC6_SetConfig+0x7c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a17      	ldr	r2, [pc, #92]	; (8004fac <TIM_OC6_SetConfig+0xbc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <TIM_OC6_SetConfig+0x7c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <TIM_OC6_SetConfig+0xc0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d007      	beq.n	8004f6c <TIM_OC6_SetConfig+0x7c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <TIM_OC6_SetConfig+0xc4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_OC6_SetConfig+0x7c>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <TIM_OC6_SetConfig+0xc8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d109      	bne.n	8004f80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	029b      	lsls	r3, r3, #10
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40013400 	.word	0x40013400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40014400 	.word	0x40014400
 8004fb8:	40014800 	.word	0x40014800

08004fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f023 030a 	bic.w	r3, r3, #10
 8004ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	621a      	str	r2, [r3, #32]
}
 800500e:	bf00      	nop
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800501a:	b480      	push	{r7}
 800501c:	b087      	sub	sp, #28
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0210 	bic.w	r2, r3, #16
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	031b      	lsls	r3, r3, #12
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	f043 0307 	orr.w	r3, r3, #7
 800509c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	609a      	str	r2, [r3, #8]
}
 80050a4:	bf00      	nop
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	021a      	lsls	r2, r3, #8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	609a      	str	r2, [r3, #8]
}
 80050e4:	bf00      	nop
 80050e6:	371c      	adds	r7, #28
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	2201      	movs	r2, #1
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a1a      	ldr	r2, [r3, #32]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	43db      	mvns	r3, r3
 8005112:	401a      	ands	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a1a      	ldr	r2, [r3, #32]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f003 031f 	and.w	r3, r3, #31
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	fa01 f303 	lsl.w	r3, r1, r3
 8005128:	431a      	orrs	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005150:	2302      	movs	r3, #2
 8005152:	e068      	b.n	8005226 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a2e      	ldr	r2, [pc, #184]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a2d      	ldr	r2, [pc, #180]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d108      	bne.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800518e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1e      	ldr	r2, [pc, #120]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01d      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c6:	d018      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1b      	ldr	r2, [pc, #108]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1a      	ldr	r2, [pc, #104]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a18      	ldr	r2, [pc, #96]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a13      	ldr	r2, [pc, #76]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a14      	ldr	r2, [pc, #80]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10c      	bne.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4313      	orrs	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40013400 	.word	0x40013400
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00
 8005248:	40014000 	.word	0x40014000

0800524c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <__libc_init_array>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	4e0d      	ldr	r6, [pc, #52]	; (80052c0 <__libc_init_array+0x38>)
 800528c:	4c0d      	ldr	r4, [pc, #52]	; (80052c4 <__libc_init_array+0x3c>)
 800528e:	1ba4      	subs	r4, r4, r6
 8005290:	10a4      	asrs	r4, r4, #2
 8005292:	2500      	movs	r5, #0
 8005294:	42a5      	cmp	r5, r4
 8005296:	d109      	bne.n	80052ac <__libc_init_array+0x24>
 8005298:	4e0b      	ldr	r6, [pc, #44]	; (80052c8 <__libc_init_array+0x40>)
 800529a:	4c0c      	ldr	r4, [pc, #48]	; (80052cc <__libc_init_array+0x44>)
 800529c:	f000 f820 	bl	80052e0 <_init>
 80052a0:	1ba4      	subs	r4, r4, r6
 80052a2:	10a4      	asrs	r4, r4, #2
 80052a4:	2500      	movs	r5, #0
 80052a6:	42a5      	cmp	r5, r4
 80052a8:	d105      	bne.n	80052b6 <__libc_init_array+0x2e>
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052b0:	4798      	blx	r3
 80052b2:	3501      	adds	r5, #1
 80052b4:	e7ee      	b.n	8005294 <__libc_init_array+0xc>
 80052b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ba:	4798      	blx	r3
 80052bc:	3501      	adds	r5, #1
 80052be:	e7f2      	b.n	80052a6 <__libc_init_array+0x1e>
 80052c0:	08005338 	.word	0x08005338
 80052c4:	08005338 	.word	0x08005338
 80052c8:	08005338 	.word	0x08005338
 80052cc:	0800533c 	.word	0x0800533c

080052d0 <memset>:
 80052d0:	4402      	add	r2, r0
 80052d2:	4603      	mov	r3, r0
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d100      	bne.n	80052da <memset+0xa>
 80052d8:	4770      	bx	lr
 80052da:	f803 1b01 	strb.w	r1, [r3], #1
 80052de:	e7f9      	b.n	80052d4 <memset+0x4>

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
