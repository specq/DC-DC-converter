
PI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005dcc  08005dcc  00015dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e0c  08005e0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e0c  08005e0c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e0c  08005e0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000010  08005e20  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08005e20  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111af  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020cd  00000000  00000000  000311eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001110  00000000  00000000  000332b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001008  00000000  00000000  000343c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c20  00000000  00000000  000353d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5c1  00000000  00000000  0005cff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe6ce  00000000  00000000  000695b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167c7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a6c  00000000  00000000  00167cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005db4 	.word	0x08005db4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005db4 	.word	0x08005db4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <swap>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void swap(int* a, int* b)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
	int t = *a;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	60fb      	str	r3, [r7, #12]
    *a = *b;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	601a      	str	r2, [r3, #0]
    *b = t;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	601a      	str	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <partition>:

int partition (int arr[], int low, int high)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b088      	sub	sp, #32
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
	int pivot = arr[high];    // pivot
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4413      	add	r3, r2
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	617b      	str	r3, [r7, #20]
	int i = (low - 1);  // Index of smaller element
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	61fb      	str	r3, [r7, #28]

    for (int j = low; j <= high- 1; j++)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	e018      	b.n	8000b34 <partition+0x56>
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4413      	add	r3, r2
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	dd0d      	ble.n	8000b2e <partition+0x50>
        {
            i++;    // increment index of smaller element
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3301      	adds	r3, #1
 8000b16:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	18d0      	adds	r0, r2, r3
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f7ff ffc3 	bl	8000ab4 <swap>
    for (int j = low; j <= high- 1; j++)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	3301      	adds	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	dde1      	ble.n	8000b02 <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3301      	adds	r3, #1
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	18d0      	adds	r0, r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4619      	mov	r1, r3
 8000b52:	f7ff ffaf 	bl	8000ab4 <swap>
    return (i + 1);
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3301      	adds	r3, #1
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <quickSort>:

void quickSort(int arr[], int low, int high)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
    if (low < high)
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	da13      	bge.n	8000b9e <quickSort+0x3c>
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
    	int pi = partition(arr, low, high);
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	68b9      	ldr	r1, [r7, #8]
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff ffaf 	bl	8000ade <partition>
 8000b80:	6178      	str	r0, [r7, #20]

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	461a      	mov	r2, r3
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff ffe9 	bl	8000b62 <quickSort>
        quickSort(arr, pi + 1, high);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4619      	mov	r1, r3
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f7ff ffe2 	bl	8000b62 <quickSort>
    }
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <get_median>:

int get_median(int *values){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	int n = sizeof(values)/sizeof(values[0]);
 8000bae:	2301      	movs	r3, #1
 8000bb0:	60fb      	str	r3, [r7, #12]
    quickSort(values, 0, n-1);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	2100      	movs	r1, #0
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffd1 	bl	8000b62 <quickSort>
    return values[SIZE/2];
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	0000      	movs	r0, r0
	...

08000bd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000bd4:	b090      	sub	sp, #64	; 0x40
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b4e      	ldr	r3, [pc, #312]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	f040 808b 	bne.w	8000cfe <HAL_TIM_PeriodElapsedCallback+0x12e>
    {
		if(iter < 10000){
 8000be8:	4b4c      	ldr	r3, [pc, #304]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d806      	bhi.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x32>
			iter++;
 8000bf4:	4b49      	ldr	r3, [pc, #292]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000bfe:	801a      	strh	r2, [r3, #0]
			htim2.Instance->CCR2 = input;
			//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, input*4095/5277);
		}
	}
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
}
 8000c00:	e07d      	b.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x12e>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f002 fcfe 	bl	800360c <HAL_GPIO_WritePin>
			for(uint8_t i = 0; i<SIZE; i++){
 8000c10:	2300      	movs	r3, #0
 8000c12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000c16:	e011      	b.n	8000c3c <HAL_TIM_PeriodElapsedCallback+0x6c>
				values[i] = (int)adc_buf[i];
 8000c18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c1c:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000c1e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000c2c:	440b      	add	r3, r1
 8000c2e:	f843 2c38 	str.w	r2, [r3, #-56]
			for(uint8_t i = 0; i<SIZE; i++){
 8000c32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c36:	3301      	adds	r3, #1
 8000c38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c40:	2b06      	cmp	r3, #6
 8000c42:	d9e9      	bls.n	8000c18 <HAL_TIM_PeriodElapsedCallback+0x48>
			int y = get_median(values);
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ffac 	bl	8000ba6 <get_median>
 8000c4e:	62f8      	str	r0, [r7, #44]	; 0x2c
			int e = ref-y;
 8000c50:	f240 63cf 	movw	r3, #1743	; 0x6cf
 8000c54:	461a      	mov	r2, r3
 8000c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
			integral += e;
 8000c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000c64:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000c66:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000c6a:	eb1b 0301 	adds.w	r3, fp, r1
 8000c6e:	eb4c 0402 	adc.w	r4, ip, r2
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000c74:	e9c2 3400 	strd	r3, r4, [r2]
			double u = 0.0000001*integral;
 8000c78:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000c7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	4621      	mov	r1, r4
 8000c82:	f7ff fc2f 	bl	80004e4 <__aeabi_l2d>
 8000c86:	a320      	add	r3, pc, #128	; (adr r3, 8000d08 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8c:	f7ff fc58 	bl	8000540 <__aeabi_dmul>
 8000c90:	4603      	mov	r3, r0
 8000c92:	460c      	mov	r4, r1
 8000c94:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			if(u<0) u=0;
 8000c98:	f04f 0200 	mov.w	r2, #0
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000ca4:	f7ff febe 	bl	8000a24 <__aeabi_dcmplt>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <HAL_TIM_PeriodElapsedCallback+0xea>
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	f04f 0400 	mov.w	r4, #0
 8000cb6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			if(u>1) u=1;
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000cc0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000cc4:	f7ff fecc 	bl	8000a60 <__aeabi_dcmpgt>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d004      	beq.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x108>
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	4c15      	ldr	r4, [pc, #84]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000cd4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
			uint16_t input = u*1599;
 8000cd8:	a30d      	add	r3, pc, #52	; (adr r3, 8000d10 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cde:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000ce2:	f7ff fc2d 	bl	8000540 <__aeabi_dmul>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	460c      	mov	r4, r1
 8000cea:	4618      	mov	r0, r3
 8000cec:	4621      	mov	r1, r4
 8000cee:	f7ff fec1 	bl	8000a74 <__aeabi_d2uiz>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	84fb      	strh	r3, [r7, #38]	; 0x26
			htim2.Instance->CCR2 = input;
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cfe:	bf00      	nop
 8000d00:	3740      	adds	r7, #64	; 0x40
 8000d02:	46bd      	mov	sp, r7
 8000d04:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000d08:	9abcaf48 	.word	0x9abcaf48
 8000d0c:	3e7ad7f2 	.word	0x3e7ad7f2
 8000d10:	00000000 	.word	0x00000000
 8000d14:	4098fc00 	.word	0x4098fc00
 8000d18:	2000004c 	.word	0x2000004c
 8000d1c:	2000002c 	.word	0x2000002c
 8000d20:	20000138 	.word	0x20000138
 8000d24:	20000030 	.word	0x20000030
 8000d28:	3ff00000 	.word	0x3ff00000
 8000d2c:	20000148 	.word	0x20000148

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d34:	f000 fc84 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d38:	f000 f82c 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3c:	f000 fa22 	bl	8001184 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d40:	f000 fa02 	bl	8001148 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d44:	f000 f8ac 	bl	8000ea0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000d48:	f000 f924 	bl	8000f94 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000d4c:	f000 f954 	bl	8000ff8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d50:	f000 f9ac 	bl	80010ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d54:	2100      	movs	r1, #0
 8000d56:	480a      	ldr	r0, [pc, #40]	; (8000d80 <main+0x50>)
 8000d58:	f001 ff51 	bl	8002bfe <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, SIZE);
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	4909      	ldr	r1, [pc, #36]	; (8000d84 <main+0x54>)
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <main+0x58>)
 8000d62:	f001 f823 	bl	8001dac <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d66:	4809      	ldr	r0, [pc, #36]	; (8000d8c <main+0x5c>)
 8000d68:	f003 ff5a 	bl	8004c20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <main+0x60>)
 8000d70:	f003 ffac 	bl	8004ccc <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <main+0x60>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <main+0x4c>
 8000d7e:	bf00      	nop
 8000d80:	20000038 	.word	0x20000038
 8000d84:	20000138 	.word	0x20000138
 8000d88:	2000008c 	.word	0x2000008c
 8000d8c:	2000004c 	.word	0x2000004c
 8000d90:	20000148 	.word	0x20000148

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0b8      	sub	sp, #224	; 0xe0
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d9e:	2244      	movs	r2, #68	; 0x44
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f004 fffe 	bl	8005da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	2288      	movs	r2, #136	; 0x88
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 fff0 	bl	8005da4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd2:	2310      	movs	r3, #16
 8000dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000dea:	230a      	movs	r3, #10
 8000dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000df0:	2307      	movs	r3, #7
 8000df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fc7c 	bl	8003704 <HAL_RCC_OscConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e12:	f000 fa21 	bl	8001258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e34:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e38:	2104      	movs	r1, #4
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 f848 	bl	8003ed0 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e46:	f000 fa07 	bl	8001258 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e4e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e54:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e56:	2302      	movs	r3, #2
 8000e58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e62:	2307      	movs	r3, #7
 8000e64:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e72:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	4618      	mov	r0, r3
 8000e78:	f003 f9f6 	bl	8004268 <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000e82:	f000 f9e9 	bl	8001258 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e8a:	f002 fbe5 	bl	8003658 <HAL_PWREx_ControlVoltageScaling>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000e94:	f000 f9e0 	bl	8001258 <Error_Handler>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	37e0      	adds	r7, #224	; 0xe0
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000ec2:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000ec4:	4a31      	ldr	r2, [pc, #196]	; (8000f8c <MX_ADC1_Init+0xec>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ece:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f28:	4817      	ldr	r0, [pc, #92]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000f2a:	f000 fdeb 	bl	8001b04 <HAL_ADC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f34:	f000 f990 	bl	8001258 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000f44:	f001 fc7c 	bl	8002840 <HAL_ADCEx_MultiModeConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f4e:	f000 f983 	bl	8001258 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_ADC1_Init+0xf0>)
 8000f54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f56:	2306      	movs	r3, #6
 8000f58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f5e:	237f      	movs	r3, #127	; 0x7f
 8000f60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f62:	2304      	movs	r3, #4
 8000f64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_ADC1_Init+0xe8>)
 8000f70:	f000 ffee 	bl	8001f50 <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f7a:	f000 f96d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000008c 	.word	0x2000008c
 8000f8c:	50040000 	.word	0x50040000
 8000f90:	14f00020 	.word	0x14f00020

08000f94 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2224      	movs	r2, #36	; 0x24
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 feff 	bl	8005da4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_DAC1_Init+0x5c>)
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_DAC1_Init+0x60>)
 8000faa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fac:	4810      	ldr	r0, [pc, #64]	; (8000ff0 <MX_DAC1_Init+0x5c>)
 8000fae:	f001 fe04 	bl	8002bba <HAL_DAC_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000fb8:	f000 f94e 	bl	8001258 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <MX_DAC1_Init+0x5c>)
 8000fd8:	f001 fe5e 	bl	8002c98 <HAL_DAC_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000fe2:	f000 f939 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000038 	.word	0x20000038
 8000ff4:	40007400 	.word	0x40007400

08000ff8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <MX_TIM2_Init+0xb0>)
 800101e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001022:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MX_TIM2_Init+0xb0>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_TIM2_Init+0xb0>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_TIM2_Init+0xb0>)
 8001032:	f240 623f 	movw	r2, #1599	; 0x63f
 8001036:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_TIM2_Init+0xb0>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_TIM2_Init+0xb0>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001044:	4818      	ldr	r0, [pc, #96]	; (80010a8 <MX_TIM2_Init+0xb0>)
 8001046:	f003 fe15 	bl	8004c74 <HAL_TIM_PWM_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001050:	f000 f902 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	4811      	ldr	r0, [pc, #68]	; (80010a8 <MX_TIM2_Init+0xb0>)
 8001064:	f004 fdd4 	bl	8005c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800106e:	f000 f8f3 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001072:	2360      	movs	r3, #96	; 0x60
 8001074:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	2204      	movs	r2, #4
 8001086:	4619      	mov	r1, r3
 8001088:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_TIM2_Init+0xb0>)
 800108a:	f003 ff97 	bl	8004fbc <HAL_TIM_PWM_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001094:	f000 f8e0 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <MX_TIM2_Init+0xb0>)
 800109a:	f000 f9f9 	bl	8001490 <HAL_TIM_MspPostInit>

}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000148 	.word	0x20000148

080010ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM3_Init+0x94>)
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <MX_TIM3_Init+0x98>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_TIM3_Init+0x94>)
 80010d2:	224f      	movs	r2, #79	; 0x4f
 80010d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM3_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_TIM3_Init+0x94>)
 80010de:	2263      	movs	r2, #99	; 0x63
 80010e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_TIM3_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM3_Init+0x94>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010ee:	4814      	ldr	r0, [pc, #80]	; (8001140 <MX_TIM3_Init+0x94>)
 80010f0:	f003 fd6a 	bl	8004bc8 <HAL_TIM_Base_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010fa:	f000 f8ad 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_TIM3_Init+0x94>)
 800110c:	f004 f86e 	bl	80051ec <HAL_TIM_ConfigClockSource>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 f89f 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <MX_TIM3_Init+0x94>)
 8001128:	f004 fd72 	bl	8005c10 <HAL_TIMEx_MasterConfigSynchronization>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001132:	f000 f891 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000004c 	.word	0x2000004c
 8001144:	40000400 	.word	0x40000400

08001148 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_DMA_Init+0x38>)
 8001150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <MX_DMA_Init+0x38>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6493      	str	r3, [r2, #72]	; 0x48
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_DMA_Init+0x38>)
 800115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	200b      	movs	r0, #11
 800116c:	f001 fcef 	bl	8002b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001170:	200b      	movs	r0, #11
 8001172:	f001 fd08 	bl	8002b86 <HAL_NVIC_EnableIRQ>

}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	4b2c      	ldr	r3, [pc, #176]	; (800124c <MX_GPIO_Init+0xc8>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a2b      	ldr	r2, [pc, #172]	; (800124c <MX_GPIO_Init+0xc8>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <MX_GPIO_Init+0xc8>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_GPIO_Init+0xc8>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a25      	ldr	r2, [pc, #148]	; (800124c <MX_GPIO_Init+0xc8>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <MX_GPIO_Init+0xc8>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <MX_GPIO_Init+0xc8>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <MX_GPIO_Init+0xc8>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_GPIO_Init+0xc8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_GPIO_Init+0xc8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a19      	ldr	r2, [pc, #100]	; (800124c <MX_GPIO_Init+0xc8>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_GPIO_Init+0xc8>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f002 fa02 	bl	800360c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_GPIO_Init+0xcc>)
 8001210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_GPIO_Init+0xd0>)
 800121e:	f002 f84d 	bl	80032bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f002 f83d 	bl	80032bc <HAL_GPIO_Init>

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	; 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	10210000 	.word	0x10210000
 8001254:	48000800 	.word	0x48000800

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_MspInit+0x44>)
 8001270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <HAL_MspInit+0x44>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6613      	str	r3, [r2, #96]	; 0x60
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <HAL_MspInit+0x44>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_MspInit+0x44>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_MspInit+0x44>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6593      	str	r3, [r2, #88]	; 0x58
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_MspInit+0x44>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a2b      	ldr	r2, [pc, #172]	; (800137c <HAL_ADC_MspInit+0xcc>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d14f      	bne.n	8001372 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012d2:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <HAL_ADC_MspInit+0xd0>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a2a      	ldr	r2, [pc, #168]	; (8001380 <HAL_ADC_MspInit+0xd0>)
 80012d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b28      	ldr	r3, [pc, #160]	; (8001380 <HAL_ADC_MspInit+0xd0>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <HAL_ADC_MspInit+0xd0>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a24      	ldr	r2, [pc, #144]	; (8001380 <HAL_ADC_MspInit+0xd0>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_ADC_MspInit+0xd0>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001302:	2301      	movs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001306:	230b      	movs	r3, #11
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f001 ffd0 	bl	80032bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <HAL_ADC_MspInit+0xd8>)
 8001320:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 800133c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001340:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 8001344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001348:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 800134c:	2220      	movs	r2, #32
 800134e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 8001358:	f001 fdb8 	bl	8002ecc <HAL_DMA_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001362:	f7ff ff79 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 800136a:	64da      	str	r2, [r3, #76]	; 0x4c
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <HAL_ADC_MspInit+0xd4>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	50040000 	.word	0x50040000
 8001380:	40021000 	.word	0x40021000
 8001384:	200000f0 	.word	0x200000f0
 8001388:	40020008 	.word	0x40020008

0800138c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a15      	ldr	r2, [pc, #84]	; (8001400 <HAL_DAC_MspInit+0x74>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d124      	bne.n	80013f8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_DAC_MspInit+0x78>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	4a14      	ldr	r2, [pc, #80]	; (8001404 <HAL_DAC_MspInit+0x78>)
 80013b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013b8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ba:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_DAC_MspInit+0x78>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_DAC_MspInit+0x78>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_DAC_MspInit+0x78>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_DAC_MspInit+0x78>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013de:	2310      	movs	r3, #16
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e2:	2303      	movs	r3, #3
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f001 ff62 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40007400 	.word	0x40007400
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001418:	d10b      	bne.n	8001432 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_TIM_PWM_MspInit+0x38>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_TIM_PWM_MspInit+0x38>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6593      	str	r3, [r2, #88]	; 0x58
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_TIM_PWM_MspInit+0x38>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_TIM_Base_MspInit+0x44>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d113      	bne.n	800147e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_TIM_Base_MspInit+0x48>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	4a0c      	ldr	r2, [pc, #48]	; (800148c <HAL_TIM_Base_MspInit+0x48>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6593      	str	r3, [r2, #88]	; 0x58
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_TIM_Base_MspInit+0x48>)
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	201d      	movs	r0, #29
 8001474:	f001 fb6b 	bl	8002b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001478:	201d      	movs	r0, #29
 800147a:	f001 fb84 	bl	8002b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40000400 	.word	0x40000400
 800148c:	40021000 	.word	0x40021000

08001490 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b0:	d11b      	bne.n	80014ea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_TIM_MspPostInit+0x64>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <HAL_TIM_MspPostInit+0x64>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_TIM_MspPostInit+0x64>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014ca:	2308      	movs	r3, #8
 80014cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014da:	2301      	movs	r3, #1
 80014dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4619      	mov	r1, r3
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <HAL_TIM_MspPostInit+0x68>)
 80014e6:	f001 fee9 	bl	80032bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000
 80014f8:	48000400 	.word	0x48000400

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001550:	f000 f8d0 	bl	80016f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <DMA1_Channel1_IRQHandler+0x10>)
 800155e:	f001 fdcd 	bl	80030fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200000f0 	.word	0x200000f0

0800156c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <TIM3_IRQHandler+0x10>)
 8001572:	f003 fc03 	bl	8004d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000004c 	.word	0x2000004c

08001580 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <SystemInit+0x64>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <SystemInit+0x64>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <SystemInit+0x68>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <SystemInit+0x68>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <SystemInit+0x68>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <SystemInit+0x68>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <SystemInit+0x68>)
 80015ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <SystemInit+0x68>)
 80015b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <SystemInit+0x68>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <SystemInit+0x68>)
 80015c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <SystemInit+0x68>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SystemInit+0x64>)
 80015d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d6:	609a      	str	r2, [r3, #8]
#endif
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	40021000 	.word	0x40021000

080015ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015f2:	e003      	b.n	80015fc <LoopCopyDataInit>

080015f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80015f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015fa:	3104      	adds	r1, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <LoopForever+0xa>)
	ldr	r3, =_edata
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001600:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001602:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001604:	d3f6      	bcc.n	80015f4 <CopyDataInit>
	ldr	r2, =_sbss
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001608:	e002      	b.n	8001610 <LoopFillZerobss>

0800160a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800160a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800160c:	f842 3b04 	str.w	r3, [r2], #4

08001610 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <LoopForever+0x16>)
	cmp	r2, r3
 8001612:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001614:	d3f9      	bcc.n	800160a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001616:	f7ff ffb3 	bl	8001580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f004 fb9f 	bl	8005d5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800161e:	f7ff fb87 	bl	8000d30 <main>

08001622 <LoopForever>:

LoopForever:
    b LoopForever
 8001622:	e7fe      	b.n	8001622 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001624:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001628:	08005e14 	.word	0x08005e14
	ldr	r0, =_sdata
 800162c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001630:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001634:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001638:	2000018c 	.word	0x2000018c

0800163c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC1_2_IRQHandler>
	...

08001640 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_Init+0x3c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_Init+0x3c>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001656:	2003      	movs	r0, #3
 8001658:	f001 fa6e 	bl	8002b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800165c:	2000      	movs	r0, #0
 800165e:	f000 f80f 	bl	8001680 <HAL_InitTick>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	71fb      	strb	r3, [r7, #7]
 800166c:	e001      	b.n	8001672 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800166e:	f7ff fdfb 	bl	8001268 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001672:	79fb      	ldrb	r3, [r7, #7]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40022000 	.word	0x40022000

08001680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_InitTick+0x68>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d022      	beq.n	80016da <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_InitTick+0x6c>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <HAL_InitTick+0x68>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fa7a 	bl	8002ba2 <HAL_SYSTICK_Config>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10f      	bne.n	80016d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	d809      	bhi.n	80016ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ba:	2200      	movs	r2, #0
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	f04f 30ff 	mov.w	r0, #4294967295
 80016c2:	f001 fa44 	bl	8002b4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_InitTick+0x70>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	e007      	b.n	80016de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	e004      	b.n	80016de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e001      	b.n	80016de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_IncTick+0x1c>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_IncTick+0x20>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4413      	add	r3, r2
 8001702:	4a03      	ldr	r2, [pc, #12]	; (8001710 <HAL_IncTick+0x1c>)
 8001704:	6013      	str	r3, [r2, #0]
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	20000188 	.word	0x20000188
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_GetTick+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000188 	.word	0x20000188

08001730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001738:	f7ff ffee 	bl	8001718 <HAL_GetTick>
 800173c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	d004      	beq.n	8001754 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_Delay+0x40>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001754:	bf00      	nop
 8001756:	f7ff ffdf 	bl	8001718 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	429a      	cmp	r2, r3
 8001764:	d8f7      	bhi.n	8001756 <HAL_Delay+0x26>
  {
  }
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008

08001774 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	609a      	str	r2, [r3, #8]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017dc:	b490      	push	{r4, r7}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3360      	adds	r3, #96	; 0x60
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <LL_ADC_SetOffset+0x40>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	4313      	orrs	r3, r2
 800180a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800180e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bc90      	pop	{r4, r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	03fff000 	.word	0x03fff000

08001820 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001820:	b490      	push	{r4, r7}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3360      	adds	r3, #96	; 0x60
 800182e:	461a      	mov	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bc90      	pop	{r4, r7}
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001848:	b490      	push	{r4, r7}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3360      	adds	r3, #96	; 0x60
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4313      	orrs	r3, r2
 800186c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bc90      	pop	{r4, r7}
 8001876:	4770      	bx	lr

08001878 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800189e:	b490      	push	{r4, r7}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3330      	adds	r3, #48	; 0x30
 80018ae:	461a      	mov	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	4413      	add	r3, r2
 80018bc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80018be:	6822      	ldr	r2, [r4, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	211f      	movs	r1, #31
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	401a      	ands	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0e9b      	lsrs	r3, r3, #26
 80018d4:	f003 011f 	and.w	r1, r3, #31
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc90      	pop	{r4, r7}
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018f0:	b490      	push	{r4, r7}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3314      	adds	r3, #20
 8001900:	461a      	mov	r2, r3
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	0e5b      	lsrs	r3, r3, #25
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	4413      	add	r3, r2
 800190e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001910:	6822      	ldr	r2, [r4, #0]
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	0d1b      	lsrs	r3, r3, #20
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	2107      	movs	r1, #7
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	401a      	ands	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	0d1b      	lsrs	r3, r3, #20
 8001928:	f003 031f 	and.w	r3, r3, #31
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	4313      	orrs	r3, r2
 8001934:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bc90      	pop	{r4, r7}
 800193e:	4770      	bx	lr

08001940 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001958:	43db      	mvns	r3, r3
 800195a:	401a      	ands	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0318 	and.w	r3, r3, #24
 8001962:	4908      	ldr	r1, [pc, #32]	; (8001984 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001964:	40d9      	lsrs	r1, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	400b      	ands	r3, r1
 800196a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196e:	431a      	orrs	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	0007ffff 	.word	0x0007ffff

08001988 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 031f 	and.w	r3, r3, #31
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6093      	str	r3, [r2, #8]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019dc:	d101      	bne.n	80019e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a2c:	d101      	bne.n	8001a32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a54:	f043 0201 	orr.w	r2, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <LL_ADC_IsEnabled+0x18>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <LL_ADC_IsEnabled+0x1a>
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aa2:	f043 0204 	orr.w	r2, r3, #4
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d101      	bne.n	8001ace <LL_ADC_REG_IsConversionOngoing+0x18>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d101      	bne.n	8001af4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e134      	b.n	8001d88 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fbbf 	bl	80012b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff3f 	bl	80019c8 <LL_ADC_IsDeepPowerDownEnabled>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d004      	beq.n	8001b5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff25 	bl	80019a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff5a 	bl	8001a18 <LL_ADC_IsInternalRegulatorEnabled>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d113      	bne.n	8001b92 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff3e 	bl	80019f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b74:	4b86      	ldr	r3, [pc, #536]	; (8001d90 <HAL_ADC_Init+0x28c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	4a86      	ldr	r2, [pc, #536]	; (8001d94 <HAL_ADC_Init+0x290>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	099b      	lsrs	r3, r3, #6
 8001b82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b84:	e002      	b.n	8001b8c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f9      	bne.n	8001b86 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff3e 	bl	8001a18 <LL_ADC_IsInternalRegulatorEnabled>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10d      	bne.n	8001bbe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff77 	bl	8001ab6 <LL_ADC_REG_IsConversionOngoing>
 8001bc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 80cf 	bne.w	8001d76 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 80cb 	bne.w	8001d76 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001be8:	f043 0202 	orr.w	r2, r3, #2
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff37 	bl	8001a68 <LL_ADC_IsEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d115      	bne.n	8001c2c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c00:	4865      	ldr	r0, [pc, #404]	; (8001d98 <HAL_ADC_Init+0x294>)
 8001c02:	f7ff ff31 	bl	8001a68 <LL_ADC_IsEnabled>
 8001c06:	4604      	mov	r4, r0
 8001c08:	4864      	ldr	r0, [pc, #400]	; (8001d9c <HAL_ADC_Init+0x298>)
 8001c0a:	f7ff ff2d 	bl	8001a68 <LL_ADC_IsEnabled>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	431c      	orrs	r4, r3
 8001c12:	4863      	ldr	r0, [pc, #396]	; (8001da0 <HAL_ADC_Init+0x29c>)
 8001c14:	f7ff ff28 	bl	8001a68 <LL_ADC_IsEnabled>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4323      	orrs	r3, r4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4619      	mov	r1, r3
 8001c26:	485f      	ldr	r0, [pc, #380]	; (8001da4 <HAL_ADC_Init+0x2a0>)
 8001c28:	f7ff fda4 	bl	8001774 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7e5b      	ldrb	r3, [r3, #25]
 8001c30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c4a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d106      	bne.n	8001c68 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	045b      	lsls	r3, r3, #17
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_ADC_Init+0x2a4>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	69b9      	ldr	r1, [r7, #24]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff0a 	bl	8001ab6 <LL_ADC_REG_IsConversionOngoing>
 8001ca2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff17 	bl	8001adc <LL_ADC_INJ_IsConversionOngoing>
 8001cae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d13d      	bne.n	8001d32 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d13a      	bne.n	8001d32 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cc0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cc8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd8:	f023 0302 	bic.w	r3, r3, #2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	69b9      	ldr	r1, [r7, #24]
 8001ce2:	430b      	orrs	r3, r1
 8001ce4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d118      	bne.n	8001d22 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cfa:	f023 0304 	bic.w	r3, r3, #4
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d06:	4311      	orrs	r1, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d0c:	4311      	orrs	r1, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d12:	430a      	orrs	r2, r1
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	e007      	b.n	8001d32 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0201 	bic.w	r2, r2, #1
 8001d30:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d10c      	bne.n	8001d54 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f023 010f 	bic.w	r1, r3, #15
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	1e5a      	subs	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
 8001d52:	e007      	b.n	8001d64 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 020f 	bic.w	r2, r2, #15
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	f023 0303 	bic.w	r3, r3, #3
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
 8001d74:	e007      	b.n	8001d86 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7a:	f043 0210 	orr.w	r2, r3, #16
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d86:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3724      	adds	r7, #36	; 0x24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}
 8001d90:	20000000 	.word	0x20000000
 8001d94:	053e2d63 	.word	0x053e2d63
 8001d98:	50040000 	.word	0x50040000
 8001d9c:	50040100 	.word	0x50040100
 8001da0:	50040200 	.word	0x50040200
 8001da4:	50040300 	.word	0x50040300
 8001da8:	fff0c007 	.word	0xfff0c007

08001dac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001db8:	4850      	ldr	r0, [pc, #320]	; (8001efc <HAL_ADC_Start_DMA+0x150>)
 8001dba:	f7ff fde5 	bl	8001988 <LL_ADC_GetMultimode>
 8001dbe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fe76 	bl	8001ab6 <LL_ADC_REG_IsConversionOngoing>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 808e 	bne.w	8001eee <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_Start_DMA+0x34>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e089      	b.n	8001ef4 <HAL_ADC_Start_DMA+0x148>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d002      	beq.n	8001dfa <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	2b09      	cmp	r3, #9
 8001df8:	d172      	bne.n	8001ee0 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fc0c 	bl	8002618 <ADC_Enable>
 8001e00:	4603      	mov	r3, r0
 8001e02:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d165      	bne.n	8001ed6 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a37      	ldr	r2, [pc, #220]	; (8001f00 <HAL_ADC_Start_DMA+0x154>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d002      	beq.n	8001e2e <HAL_ADC_Start_DMA+0x82>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	e000      	b.n	8001e30 <HAL_ADC_Start_DMA+0x84>
 8001e2e:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <HAL_ADC_Start_DMA+0x158>)
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d002      	beq.n	8001e3e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d006      	beq.n	8001e64 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	f023 0206 	bic.w	r2, r3, #6
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	659a      	str	r2, [r3, #88]	; 0x58
 8001e62:	e002      	b.n	8001e6a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a26      	ldr	r2, [pc, #152]	; (8001f08 <HAL_ADC_Start_DMA+0x15c>)
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <HAL_ADC_Start_DMA+0x160>)
 8001e78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	4a24      	ldr	r2, [pc, #144]	; (8001f10 <HAL_ADC_Start_DMA+0x164>)
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	221c      	movs	r2, #28
 8001e88:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0210 	orr.w	r2, r2, #16
 8001ea0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3340      	adds	r3, #64	; 0x40
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f001 f8bb 	bl	800303c <HAL_DMA_Start_IT>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fddd 	bl	8001a8e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ed4:	e00d      	b.n	8001ef2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001ede:	e008      	b.n	8001ef2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001eec:	e001      	b.n	8001ef2 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	50040300 	.word	0x50040300
 8001f00:	50040100 	.word	0x50040100
 8001f04:	50040000 	.word	0x50040000
 8001f08:	080026cd 	.word	0x080026cd
 8001f0c:	080027a5 	.word	0x080027a5
 8001f10:	080027c1 	.word	0x080027c1

08001f14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b0a6      	sub	sp, #152	; 0x98
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x22>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e348      	b.n	8002604 <HAL_ADC_ConfigChannel+0x6b4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fd99 	bl	8001ab6 <LL_ADC_REG_IsConversionOngoing>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 8329 	bne.w	80025de <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d824      	bhi.n	8001fde <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	3b02      	subs	r3, #2
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d81b      	bhi.n	8001fd6 <HAL_ADC_ConfigChannel+0x86>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <HAL_ADC_ConfigChannel+0x54>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fbd 	.word	0x08001fbd
 8001fac:	08001fc5 	.word	0x08001fc5
 8001fb0:	08001fcd 	.word	0x08001fcd
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	e011      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2212      	movs	r2, #18
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	e00d      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2218      	movs	r2, #24
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	e009      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	e004      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2206      	movs	r2, #6
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	e000      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001fde:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6859      	ldr	r1, [r3, #4]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	f7ff fc56 	bl	800189e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fd5d 	bl	8001ab6 <LL_ADC_REG_IsConversionOngoing>
 8001ffc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fd69 	bl	8001adc <LL_ADC_INJ_IsConversionOngoing>
 800200a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800200e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002012:	2b00      	cmp	r3, #0
 8002014:	f040 8148 	bne.w	80022a8 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800201c:	2b00      	cmp	r3, #0
 800201e:	f040 8143 	bne.w	80022a8 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	461a      	mov	r2, r3
 8002030:	f7ff fc5e 	bl	80018f0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	08db      	lsrs	r3, r3, #3
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b04      	cmp	r3, #4
 8002054:	d00a      	beq.n	800206c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6919      	ldr	r1, [r3, #16]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002066:	f7ff fbb9 	bl	80017dc <LL_ADC_SetOffset>
 800206a:	e11d      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fbd4 	bl	8001820 <LL_ADC_GetOffsetChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x148>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2100      	movs	r1, #0
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fbc9 	bl	8001820 <LL_ADC_GetOffsetChannel>
 800208e:	4603      	mov	r3, r0
 8002090:	0e9b      	lsrs	r3, r3, #26
 8002092:	f003 021f 	and.w	r2, r3, #31
 8002096:	e012      	b.n	80020be <HAL_ADC_ConfigChannel+0x16e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fbbe 	bl	8001820 <LL_ADC_GetOffsetChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d105      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x186>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	0e9b      	lsrs	r3, r3, #26
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	e00a      	b.n	80020ec <HAL_ADC_ConfigChannel+0x19c>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80020e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d106      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fba5 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2101      	movs	r1, #1
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fb8b 	bl	8001820 <LL_ADC_GetOffsetChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <HAL_ADC_ConfigChannel+0x1da>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fb80 	bl	8001820 <LL_ADC_GetOffsetChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	0e9b      	lsrs	r3, r3, #26
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	e010      	b.n	800214c <HAL_ADC_ConfigChannel+0x1fc>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2101      	movs	r1, #1
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fb75 	bl	8001820 <LL_ADC_GetOffsetChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x214>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	e00a      	b.n	800217a <HAL_ADC_ConfigChannel+0x22a>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	429a      	cmp	r2, r3
 800217c:	d106      	bne.n	800218c <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2200      	movs	r2, #0
 8002184:	2101      	movs	r1, #1
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fb5e 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2102      	movs	r1, #2
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fb44 	bl	8001820 <LL_ADC_GetOffsetChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10a      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x268>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2102      	movs	r1, #2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fb39 	bl	8001820 <LL_ADC_GetOffsetChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	f003 021f 	and.w	r2, r3, #31
 80021b6:	e010      	b.n	80021da <HAL_ADC_ConfigChannel+0x28a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2102      	movs	r1, #2
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fb2e 	bl	8001820 <LL_ADC_GetOffsetChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80021d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x2a2>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0e9b      	lsrs	r3, r3, #26
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	e00a      	b.n	8002208 <HAL_ADC_ConfigChannel+0x2b8>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	429a      	cmp	r2, r3
 800220a:	d106      	bne.n	800221a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2200      	movs	r2, #0
 8002212:	2102      	movs	r1, #2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fb17 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2103      	movs	r1, #3
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fafd 	bl	8001820 <LL_ADC_GetOffsetChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x2f6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2103      	movs	r1, #3
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff faf2 	bl	8001820 <LL_ADC_GetOffsetChannel>
 800223c:	4603      	mov	r3, r0
 800223e:	0e9b      	lsrs	r3, r3, #26
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	e010      	b.n	8002268 <HAL_ADC_ConfigChannel+0x318>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2103      	movs	r1, #3
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fae7 	bl	8001820 <LL_ADC_GetOffsetChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800225e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x330>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0e9b      	lsrs	r3, r3, #26
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	e00a      	b.n	8002296 <HAL_ADC_ConfigChannel+0x346>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800228e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	429a      	cmp	r2, r3
 8002298:	d106      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2200      	movs	r2, #0
 80022a0:	2103      	movs	r1, #3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fad0 	bl	8001848 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fbdb 	bl	8001a68 <LL_ADC_IsEnabled>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f040 810c 	bne.w	80024d2 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f7ff fb3a 	bl	8001940 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4aad      	ldr	r2, [pc, #692]	; (8002588 <HAL_ADC_ConfigChannel+0x638>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	f040 80fd 	bne.w	80024d2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10b      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x3b0>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	3301      	adds	r3, #1
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2b09      	cmp	r3, #9
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e012      	b.n	8002326 <HAL_ADC_ConfigChannel+0x3d6>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800230e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	3301      	adds	r3, #1
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	2b09      	cmp	r3, #9
 800231e:	bf94      	ite	ls
 8002320:	2301      	movls	r3, #1
 8002322:	2300      	movhi	r3, #0
 8002324:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002326:	2b00      	cmp	r3, #0
 8002328:	d064      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002332:	2b00      	cmp	r3, #0
 8002334:	d107      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x3f6>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	0e9b      	lsrs	r3, r3, #26
 800233c:	3301      	adds	r3, #1
 800233e:	069b      	lsls	r3, r3, #26
 8002340:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002344:	e00e      	b.n	8002364 <HAL_ADC_ConfigChannel+0x414>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3301      	adds	r3, #1
 800235e:	069b      	lsls	r3, r3, #26
 8002360:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x434>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	3301      	adds	r3, #1
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	e010      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x456>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	ea42 0103 	orr.w	r1, r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10a      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x47c>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	051b      	lsls	r3, r3, #20
 80023ca:	e011      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x4a0>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f0:	430b      	orrs	r3, r1
 80023f2:	e069      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x4c0>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	3301      	adds	r3, #1
 8002408:	069b      	lsls	r3, r3, #26
 800240a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800240e:	e00e      	b.n	800242e <HAL_ADC_ConfigChannel+0x4de>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	61fb      	str	r3, [r7, #28]
  return result;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	3301      	adds	r3, #1
 8002428:	069b      	lsls	r3, r3, #26
 800242a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_ADC_ConfigChannel+0x4fe>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	0e9b      	lsrs	r3, r3, #26
 8002440:	3301      	adds	r3, #1
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	e010      	b.n	8002470 <HAL_ADC_ConfigChannel+0x520>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	617b      	str	r3, [r7, #20]
  return result;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	3301      	adds	r3, #1
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	2101      	movs	r1, #1
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	ea42 0103 	orr.w	r1, r2, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10d      	bne.n	800249c <HAL_ADC_ConfigChannel+0x54c>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	3301      	adds	r3, #1
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	3b1e      	subs	r3, #30
 8002494:	051b      	lsls	r3, r3, #20
 8002496:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800249a:	e014      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x576>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	60fb      	str	r3, [r7, #12]
  return result;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f003 021f 	and.w	r2, r3, #31
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	3b1e      	subs	r3, #30
 80024c0:	051b      	lsls	r3, r3, #20
 80024c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c6:	430b      	orrs	r3, r1
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	6892      	ldr	r2, [r2, #8]
 80024cc:	4619      	mov	r1, r3
 80024ce:	f7ff fa0f 	bl	80018f0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_ADC_ConfigChannel+0x63c>)
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 808c 	beq.w	80025f8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e0:	482b      	ldr	r0, [pc, #172]	; (8002590 <HAL_ADC_ConfigChannel+0x640>)
 80024e2:	f7ff f96d 	bl	80017c0 <LL_ADC_GetCommonPathInternalCh>
 80024e6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a29      	ldr	r2, [pc, #164]	; (8002594 <HAL_ADC_ConfigChannel+0x644>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d12b      	bne.n	800254c <HAL_ADC_ConfigChannel+0x5fc>
 80024f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d125      	bne.n	800254c <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a24      	ldr	r2, [pc, #144]	; (8002598 <HAL_ADC_ConfigChannel+0x648>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_ADC_ConfigChannel+0x5c4>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a23      	ldr	r2, [pc, #140]	; (800259c <HAL_ADC_ConfigChannel+0x64c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d16e      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002518:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800251c:	4619      	mov	r1, r3
 800251e:	481c      	ldr	r0, [pc, #112]	; (8002590 <HAL_ADC_ConfigChannel+0x640>)
 8002520:	f7ff f93b 	bl	800179a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002524:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <HAL_ADC_ConfigChannel+0x650>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <HAL_ADC_ConfigChannel+0x654>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099a      	lsrs	r2, r3, #6
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800253c:	e002      	b.n	8002544 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	3b01      	subs	r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f9      	bne.n	800253e <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800254a:	e052      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <HAL_ADC_ConfigChannel+0x658>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d12a      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x65c>
 8002556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800255a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d124      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <HAL_ADC_ConfigChannel+0x648>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d004      	beq.n	8002576 <HAL_ADC_ConfigChannel+0x626>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0a      	ldr	r2, [pc, #40]	; (800259c <HAL_ADC_ConfigChannel+0x64c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d13f      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002576:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800257a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257e:	4619      	mov	r1, r3
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <HAL_ADC_ConfigChannel+0x640>)
 8002582:	f7ff f90a 	bl	800179a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002586:	e036      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x6a6>
 8002588:	407f0000 	.word	0x407f0000
 800258c:	80080000 	.word	0x80080000
 8002590:	50040300 	.word	0x50040300
 8002594:	c7520000 	.word	0xc7520000
 8002598:	50040000 	.word	0x50040000
 800259c:	50040200 	.word	0x50040200
 80025a0:	20000000 	.word	0x20000000
 80025a4:	053e2d63 	.word	0x053e2d63
 80025a8:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a16      	ldr	r2, [pc, #88]	; (800260c <HAL_ADC_ConfigChannel+0x6bc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d120      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d11a      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_ADC_ConfigChannel+0x6c0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d115      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d4:	4619      	mov	r1, r3
 80025d6:	480f      	ldr	r0, [pc, #60]	; (8002614 <HAL_ADC_ConfigChannel+0x6c4>)
 80025d8:	f7ff f8df 	bl	800179a <LL_ADC_SetCommonPathInternalCh>
 80025dc:	e00c      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	f043 0220 	orr.w	r2, r3, #32
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80025f0:	e002      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002600:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002604:	4618      	mov	r0, r3
 8002606:	3798      	adds	r7, #152	; 0x98
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	80000001 	.word	0x80000001
 8002610:	50040000 	.word	0x50040000
 8002614:	50040300 	.word	0x50040300

08002618 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fa1f 	bl	8001a68 <LL_ADC_IsEnabled>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d146      	bne.n	80026be <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <ADC_Enable+0xb0>)
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f043 0210 	orr.w	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e032      	b.n	80026c0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff f9ee 	bl	8001a40 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002664:	f7ff f858 	bl	8001718 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800266a:	e021      	b.n	80026b0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff f9f9 	bl	8001a68 <LL_ADC_IsEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d104      	bne.n	8002686 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff f9dd 	bl	8001a40 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002686:	f7ff f847 	bl	8001718 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d90d      	bls.n	80026b0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	f043 0210 	orr.w	r2, r3, #16
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e007      	b.n	80026c0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d1d6      	bne.n	800266c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	8000003f 	.word	0x8000003f

080026cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d14b      	bne.n	800277e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d021      	beq.n	8002744 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff f8b7 	bl	8001878 <LL_ADC_REG_IsTriggerSourceSWStart>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d032      	beq.n	8002776 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d12b      	bne.n	8002776 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11f      	bne.n	8002776 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
 8002742:	e018      	b.n	8002776 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d111      	bne.n	8002776 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff fbcc 	bl	8001f14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800277c:	e00e      	b.n	800279c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f7ff fbd6 	bl	8001f3c <HAL_ADC_ErrorCallback>
}
 8002790:	e004      	b.n	800279c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff fbb8 	bl	8001f28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	f043 0204 	orr.w	r2, r3, #4
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff fba8 	bl	8001f3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <LL_ADC_IsEnabled>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <LL_ADC_IsEnabled+0x18>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <LL_ADC_IsEnabled+0x1a>
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_ADC_REG_IsConversionOngoing>:
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b04      	cmp	r3, #4
 800282c:	d101      	bne.n	8002832 <LL_ADC_REG_IsConversionOngoing+0x18>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b09f      	sub	sp, #124	; 0x7c
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800285a:	2302      	movs	r3, #2
 800285c:	e08f      	b.n	800297e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a47      	ldr	r2, [pc, #284]	; (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d102      	bne.n	8002876 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002870:	4b46      	ldr	r3, [pc, #280]	; (800298c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	e001      	b.n	800287a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e072      	b.n	800297e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ffbd 	bl	800281a <LL_ADC_REG_IsConversionOngoing>
 80028a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ffb7 	bl	800281a <LL_ADC_REG_IsConversionOngoing>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d154      	bne.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d151      	bne.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028ba:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d02c      	beq.n	800291e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028d6:	035b      	lsls	r3, r3, #13
 80028d8:	430b      	orrs	r3, r1
 80028da:	431a      	orrs	r2, r3
 80028dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028e0:	4829      	ldr	r0, [pc, #164]	; (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80028e2:	f7ff ff87 	bl	80027f4 <LL_ADC_IsEnabled>
 80028e6:	4604      	mov	r4, r0
 80028e8:	4828      	ldr	r0, [pc, #160]	; (800298c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80028ea:	f7ff ff83 	bl	80027f4 <LL_ADC_IsEnabled>
 80028ee:	4603      	mov	r3, r0
 80028f0:	431c      	orrs	r4, r3
 80028f2:	4828      	ldr	r0, [pc, #160]	; (8002994 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028f4:	f7ff ff7e 	bl	80027f4 <LL_ADC_IsEnabled>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4323      	orrs	r3, r4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d137      	bne.n	8002970 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002908:	f023 030f 	bic.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	6811      	ldr	r1, [r2, #0]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	6892      	ldr	r2, [r2, #8]
 8002914:	430a      	orrs	r2, r1
 8002916:	431a      	orrs	r2, r3
 8002918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800291c:	e028      	b.n	8002970 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800291e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002928:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800292a:	4817      	ldr	r0, [pc, #92]	; (8002988 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800292c:	f7ff ff62 	bl	80027f4 <LL_ADC_IsEnabled>
 8002930:	4604      	mov	r4, r0
 8002932:	4816      	ldr	r0, [pc, #88]	; (800298c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002934:	f7ff ff5e 	bl	80027f4 <LL_ADC_IsEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	431c      	orrs	r4, r3
 800293c:	4815      	ldr	r0, [pc, #84]	; (8002994 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800293e:	f7ff ff59 	bl	80027f4 <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	4323      	orrs	r3, r4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d112      	bne.n	8002970 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800294a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002952:	f023 030f 	bic.w	r3, r3, #15
 8002956:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002958:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800295a:	e009      	b.n	8002970 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800296e:	e000      	b.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002970:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800297a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800297e:	4618      	mov	r0, r3
 8002980:	377c      	adds	r7, #124	; 0x7c
 8002982:	46bd      	mov	sp, r7
 8002984:	bd90      	pop	{r4, r7, pc}
 8002986:	bf00      	nop
 8002988:	50040000 	.word	0x50040000
 800298c:	50040100 	.word	0x50040100
 8002990:	50040300 	.word	0x50040300
 8002994:	50040200 	.word	0x50040200

08002998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <__NVIC_SetPriorityGrouping+0x44>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b4:	4013      	ands	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ca:	4a04      	ldr	r2, [pc, #16]	; (80029dc <__NVIC_SetPriorityGrouping+0x44>)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	60d3      	str	r3, [r2, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <__NVIC_GetPriorityGrouping+0x18>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	f003 0307 	and.w	r3, r3, #7
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	db0b      	blt.n	8002a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	f003 021f 	and.w	r2, r3, #31
 8002a14:	4907      	ldr	r1, [pc, #28]	; (8002a34 <__NVIC_EnableIRQ+0x38>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000e100 	.word	0xe000e100

08002a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	db0a      	blt.n	8002a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	490c      	ldr	r1, [pc, #48]	; (8002a84 <__NVIC_SetPriority+0x4c>)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	0112      	lsls	r2, r2, #4
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a60:	e00a      	b.n	8002a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4908      	ldr	r1, [pc, #32]	; (8002a88 <__NVIC_SetPriority+0x50>)
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	3b04      	subs	r3, #4
 8002a70:	0112      	lsls	r2, r2, #4
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	440b      	add	r3, r1
 8002a76:	761a      	strb	r2, [r3, #24]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000e100 	.word	0xe000e100
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	; 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f1c3 0307 	rsb	r3, r3, #7
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	bf28      	it	cs
 8002aaa:	2304      	movcs	r3, #4
 8002aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d902      	bls.n	8002abc <NVIC_EncodePriority+0x30>
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3b03      	subs	r3, #3
 8002aba:	e000      	b.n	8002abe <NVIC_EncodePriority+0x32>
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43da      	mvns	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43d9      	mvns	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	4313      	orrs	r3, r2
         );
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3724      	adds	r7, #36	; 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b04:	d301      	bcc.n	8002b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b06:	2301      	movs	r3, #1
 8002b08:	e00f      	b.n	8002b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <SysTick_Config+0x40>)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b12:	210f      	movs	r1, #15
 8002b14:	f04f 30ff 	mov.w	r0, #4294967295
 8002b18:	f7ff ff8e 	bl	8002a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <SysTick_Config+0x40>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b22:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <SysTick_Config+0x40>)
 8002b24:	2207      	movs	r2, #7
 8002b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	e000e010 	.word	0xe000e010

08002b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ff29 	bl	8002998 <__NVIC_SetPriorityGrouping>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b086      	sub	sp, #24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b60:	f7ff ff3e 	bl	80029e0 <__NVIC_GetPriorityGrouping>
 8002b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	6978      	ldr	r0, [r7, #20]
 8002b6c:	f7ff ff8e 	bl	8002a8c <NVIC_EncodePriority>
 8002b70:	4602      	mov	r2, r0
 8002b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff5d 	bl	8002a38 <__NVIC_SetPriority>
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff31 	bl	80029fc <__NVIC_EnableIRQ>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ffa2 	bl	8002af4 <SysTick_Config>
 8002bb0:	4603      	mov	r3, r0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e014      	b.n	8002bf6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	791b      	ldrb	r3, [r3, #4]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fe fbd5 	bl	800138c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	795b      	ldrb	r3, [r3, #5]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_DAC_Start+0x16>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e03b      	b.n	8002c8c <HAL_DAC_Start+0x8e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d118      	bne.n	8002c7e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	e00f      	b.n	8002c7e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c6c:	d107      	bne.n	8002c7e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0202 	orr.w	r2, r2, #2
 8002c7c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	795b      	ldrb	r3, [r3, #5]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_DAC_ConfigChannel+0x1c>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e107      	b.n	8002ec4 <HAL_DAC_ConfigChannel+0x22c>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d174      	bne.n	8002db2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d137      	bne.n	8002d3e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002cce:	f7fe fd23 	bl	8001718 <HAL_GetTick>
 8002cd2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cd4:	e011      	b.n	8002cfa <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cd6:	f7fe fd1f 	bl	8001718 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d90a      	bls.n	8002cfa <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f043 0208 	orr.w	r2, r3, #8
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0e4      	b.n	8002ec4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e6      	bne.n	8002cd6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f7fe fd11 	bl	8001730 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	6992      	ldr	r2, [r2, #24]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
 8002d18:	e01e      	b.n	8002d58 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d1a:	f7fe fcfd 	bl	8001718 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d90a      	bls.n	8002d3e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f043 0208 	orr.w	r2, r3, #8
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2203      	movs	r2, #3
 8002d38:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0c2      	b.n	8002ec4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	dbe8      	blt.n	8002d1a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7fe fcf1 	bl	8001730 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	6992      	ldr	r2, [r2, #24]
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	ea02 0103 	and.w	r1, r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	69da      	ldr	r2, [r3, #28]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	21ff      	movs	r1, #255	; 0xff
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	ea02 0103 	and.w	r1, r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	6a1a      	ldr	r2, [r3, #32]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	409a      	lsls	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d11d      	bne.n	8002df6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	221f      	movs	r2, #31
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2207      	movs	r2, #7
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	400a      	ands	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	22c0      	movs	r2, #192	; 0xc0
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43da      	mvns	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e098      	b.n	8003010 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b4d      	ldr	r3, [pc, #308]	; (800301c <HAL_DMA_Init+0x150>)
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d80f      	bhi.n	8002f0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b4b      	ldr	r3, [pc, #300]	; (8003020 <HAL_DMA_Init+0x154>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a4b      	ldr	r2, [pc, #300]	; (8003024 <HAL_DMA_Init+0x158>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	009a      	lsls	r2, r3, #2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a48      	ldr	r2, [pc, #288]	; (8003028 <HAL_DMA_Init+0x15c>)
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40
 8002f08:	e00e      	b.n	8002f28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4b46      	ldr	r3, [pc, #280]	; (800302c <HAL_DMA_Init+0x160>)
 8002f12:	4413      	add	r3, r2
 8002f14:	4a43      	ldr	r2, [pc, #268]	; (8003024 <HAL_DMA_Init+0x158>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	009a      	lsls	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a42      	ldr	r2, [pc, #264]	; (8003030 <HAL_DMA_Init+0x164>)
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f82:	d039      	beq.n	8002ff8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	4a27      	ldr	r2, [pc, #156]	; (8003028 <HAL_DMA_Init+0x15c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d11a      	bne.n	8002fc4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f8e:	4b29      	ldr	r3, [pc, #164]	; (8003034 <HAL_DMA_Init+0x168>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f003 031c 	and.w	r3, r3, #28
 8002f9a:	210f      	movs	r1, #15
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	4924      	ldr	r1, [pc, #144]	; (8003034 <HAL_DMA_Init+0x168>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fa8:	4b22      	ldr	r3, [pc, #136]	; (8003034 <HAL_DMA_Init+0x168>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	f003 031c 	and.w	r3, r3, #28
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	491d      	ldr	r1, [pc, #116]	; (8003034 <HAL_DMA_Init+0x168>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
 8002fc2:	e019      	b.n	8002ff8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_DMA_Init+0x16c>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fcc:	f003 031c 	and.w	r3, r3, #28
 8002fd0:	210f      	movs	r1, #15
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	4917      	ldr	r1, [pc, #92]	; (8003038 <HAL_DMA_Init+0x16c>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fde:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_DMA_Init+0x16c>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f003 031c 	and.w	r3, r3, #28
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	4911      	ldr	r1, [pc, #68]	; (8003038 <HAL_DMA_Init+0x16c>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40020407 	.word	0x40020407
 8003020:	bffdfff8 	.word	0xbffdfff8
 8003024:	cccccccd 	.word	0xcccccccd
 8003028:	40020000 	.word	0x40020000
 800302c:	bffdfbf8 	.word	0xbffdfbf8
 8003030:	40020400 	.word	0x40020400
 8003034:	400200a8 	.word	0x400200a8
 8003038:	400204a8 	.word	0x400204a8

0800303c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_DMA_Start_IT+0x20>
 8003058:	2302      	movs	r3, #2
 800305a:	e04b      	b.n	80030f4 <HAL_DMA_Start_IT+0xb8>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d13a      	bne.n	80030e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0201 	bic.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f8e0 	bl	800325a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 020e 	orr.w	r2, r2, #14
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e00f      	b.n	80030d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0204 	bic.w	r2, r2, #4
 80030c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 020a 	orr.w	r2, r2, #10
 80030d2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e005      	b.n	80030f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030ee:	2302      	movs	r3, #2
 80030f0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	f003 031c 	and.w	r3, r3, #28
 800311c:	2204      	movs	r2, #4
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d026      	beq.n	8003176 <HAL_DMA_IRQHandler+0x7a>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d021      	beq.n	8003176 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0204 	bic.w	r2, r2, #4
 800314e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	f003 021c 	and.w	r2, r3, #28
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	2104      	movs	r1, #4
 800315e:	fa01 f202 	lsl.w	r2, r1, r2
 8003162:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	2b00      	cmp	r3, #0
 800316a:	d071      	beq.n	8003250 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003174:	e06c      	b.n	8003250 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f003 031c 	and.w	r3, r3, #28
 800317e:	2202      	movs	r2, #2
 8003180:	409a      	lsls	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02e      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xec>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d029      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 020a 	bic.w	r2, r2, #10
 80031b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f003 021c 	and.w	r2, r3, #28
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2102      	movs	r1, #2
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d038      	beq.n	8003250 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80031e6:	e033      	b.n	8003250 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ec:	f003 031c 	and.w	r3, r3, #28
 80031f0:	2208      	movs	r2, #8
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02a      	beq.n	8003252 <HAL_DMA_IRQHandler+0x156>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d025      	beq.n	8003252 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 020e 	bic.w	r2, r2, #14
 8003214:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f003 021c 	and.w	r2, r3, #28
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003250:	bf00      	nop
 8003252:	bf00      	nop
}
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326c:	f003 021c 	and.w	r2, r3, #28
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	2101      	movs	r1, #1
 8003276:	fa01 f202 	lsl.w	r2, r1, r2
 800327a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b10      	cmp	r3, #16
 800328a:	d108      	bne.n	800329e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800329c:	e007      	b.n	80032ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	60da      	str	r2, [r3, #12]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ca:	e17f      	b.n	80035cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8171 	beq.w	80035c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d00b      	beq.n	8003304 <HAL_GPIO_Init+0x48>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d007      	beq.n	8003304 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032f8:	2b11      	cmp	r3, #17
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b12      	cmp	r3, #18
 8003302:	d130      	bne.n	8003366 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2203      	movs	r2, #3
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800333a:	2201      	movs	r2, #1
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	091b      	lsrs	r3, r3, #4
 8003350:	f003 0201 	and.w	r2, r3, #1
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b03      	cmp	r3, #3
 8003370:	d118      	bne.n	80033a4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003378:	2201      	movs	r2, #1
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	08db      	lsrs	r3, r3, #3
 800338e:	f003 0201 	and.w	r2, r3, #1
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x128>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b12      	cmp	r3, #18
 80033e2:	d123      	bne.n	800342c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	08da      	lsrs	r2, r3, #3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3208      	adds	r2, #8
 80033ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	220f      	movs	r2, #15
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	08da      	lsrs	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3208      	adds	r2, #8
 8003426:	6939      	ldr	r1, [r7, #16]
 8003428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 0203 	and.w	r2, r3, #3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80ac 	beq.w	80035c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346e:	4b5e      	ldr	r3, [pc, #376]	; (80035e8 <HAL_GPIO_Init+0x32c>)
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	4a5d      	ldr	r2, [pc, #372]	; (80035e8 <HAL_GPIO_Init+0x32c>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6613      	str	r3, [r2, #96]	; 0x60
 800347a:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <HAL_GPIO_Init+0x32c>)
 800347c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003486:	4a59      	ldr	r2, [pc, #356]	; (80035ec <HAL_GPIO_Init+0x330>)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3302      	adds	r3, #2
 800348e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034b0:	d025      	beq.n	80034fe <HAL_GPIO_Init+0x242>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4e      	ldr	r2, [pc, #312]	; (80035f0 <HAL_GPIO_Init+0x334>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01f      	beq.n	80034fa <HAL_GPIO_Init+0x23e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4d      	ldr	r2, [pc, #308]	; (80035f4 <HAL_GPIO_Init+0x338>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d019      	beq.n	80034f6 <HAL_GPIO_Init+0x23a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4c      	ldr	r2, [pc, #304]	; (80035f8 <HAL_GPIO_Init+0x33c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_GPIO_Init+0x236>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4b      	ldr	r2, [pc, #300]	; (80035fc <HAL_GPIO_Init+0x340>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00d      	beq.n	80034ee <HAL_GPIO_Init+0x232>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4a      	ldr	r2, [pc, #296]	; (8003600 <HAL_GPIO_Init+0x344>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <HAL_GPIO_Init+0x22e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a49      	ldr	r2, [pc, #292]	; (8003604 <HAL_GPIO_Init+0x348>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d101      	bne.n	80034e6 <HAL_GPIO_Init+0x22a>
 80034e2:	2306      	movs	r3, #6
 80034e4:	e00c      	b.n	8003500 <HAL_GPIO_Init+0x244>
 80034e6:	2307      	movs	r3, #7
 80034e8:	e00a      	b.n	8003500 <HAL_GPIO_Init+0x244>
 80034ea:	2305      	movs	r3, #5
 80034ec:	e008      	b.n	8003500 <HAL_GPIO_Init+0x244>
 80034ee:	2304      	movs	r3, #4
 80034f0:	e006      	b.n	8003500 <HAL_GPIO_Init+0x244>
 80034f2:	2303      	movs	r3, #3
 80034f4:	e004      	b.n	8003500 <HAL_GPIO_Init+0x244>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e002      	b.n	8003500 <HAL_GPIO_Init+0x244>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_GPIO_Init+0x244>
 80034fe:	2300      	movs	r3, #0
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	f002 0203 	and.w	r2, r2, #3
 8003506:	0092      	lsls	r2, r2, #2
 8003508:	4093      	lsls	r3, r2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003510:	4936      	ldr	r1, [pc, #216]	; (80035ec <HAL_GPIO_Init+0x330>)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	3302      	adds	r3, #2
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800351e:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <HAL_GPIO_Init+0x34c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003542:	4a31      	ldr	r2, [pc, #196]	; (8003608 <HAL_GPIO_Init+0x34c>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003548:	4b2f      	ldr	r3, [pc, #188]	; (8003608 <HAL_GPIO_Init+0x34c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <HAL_GPIO_Init+0x34c>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003572:	4b25      	ldr	r3, [pc, #148]	; (8003608 <HAL_GPIO_Init+0x34c>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	43db      	mvns	r3, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003596:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_GPIO_Init+0x34c>)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800359c:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_GPIO_Init+0x34c>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035c0:	4a11      	ldr	r2, [pc, #68]	; (8003608 <HAL_GPIO_Init+0x34c>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	3301      	adds	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f47f ae78 	bne.w	80032cc <HAL_GPIO_Init+0x10>
  }
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40010000 	.word	0x40010000
 80035f0:	48000400 	.word	0x48000400
 80035f4:	48000800 	.word	0x48000800
 80035f8:	48000c00 	.word	0x48000c00
 80035fc:	48001000 	.word	0x48001000
 8003600:	48001400 	.word	0x48001400
 8003604:	48001800 	.word	0x48001800
 8003608:	40010400 	.word	0x40010400

0800360c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
 8003618:	4613      	mov	r3, r2
 800361a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800361c:	787b      	ldrb	r3, [r7, #1]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003622:	887a      	ldrh	r2, [r7, #2]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003628:	e002      	b.n	8003630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <HAL_PWREx_GetVoltageRange+0x18>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40007000 	.word	0x40007000

08003658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003666:	d130      	bne.n	80036ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003668:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003674:	d038      	beq.n	80036e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003684:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003686:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2232      	movs	r2, #50	; 0x32
 800368c:	fb02 f303 	mul.w	r3, r2, r3
 8003690:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	0c9b      	lsrs	r3, r3, #18
 8003698:	3301      	adds	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369c:	e002      	b.n	80036a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b0:	d102      	bne.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f2      	bne.n	800369e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c4:	d110      	bne.n	80036e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e00f      	b.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d007      	beq.n	80036e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036d8:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036e0:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40007000 	.word	0x40007000
 80036fc:	20000000 	.word	0x20000000
 8003700:	431bde83 	.word	0x431bde83

08003704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e3d4      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003716:	4ba1      	ldr	r3, [pc, #644]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003720:	4b9e      	ldr	r3, [pc, #632]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80e4 	beq.w	8003900 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <HAL_RCC_OscConfig+0x4a>
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	f040 808b 	bne.w	800385c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b01      	cmp	r3, #1
 800374a:	f040 8087 	bne.w	800385c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800374e:	4b93      	ldr	r3, [pc, #588]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x62>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e3ac      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1a      	ldr	r2, [r3, #32]
 800376a:	4b8c      	ldr	r3, [pc, #560]	; (800399c <HAL_RCC_OscConfig+0x298>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d004      	beq.n	8003780 <HAL_RCC_OscConfig+0x7c>
 8003776:	4b89      	ldr	r3, [pc, #548]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800377e:	e005      	b.n	800378c <HAL_RCC_OscConfig+0x88>
 8003780:	4b86      	ldr	r3, [pc, #536]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800378c:	4293      	cmp	r3, r2
 800378e:	d223      	bcs.n	80037d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fd07 	bl	80041a8 <RCC_SetFlashLatencyFromMSIRange>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e38d      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a4:	4b7d      	ldr	r3, [pc, #500]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a7c      	ldr	r2, [pc, #496]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80037aa:	f043 0308 	orr.w	r3, r3, #8
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b7a      	ldr	r3, [pc, #488]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4977      	ldr	r1, [pc, #476]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c2:	4b76      	ldr	r3, [pc, #472]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	4972      	ldr	r1, [pc, #456]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
 80037d6:	e025      	b.n	8003824 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d8:	4b70      	ldr	r3, [pc, #448]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a6f      	ldr	r2, [pc, #444]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80037de:	f043 0308 	orr.w	r3, r3, #8
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b6d      	ldr	r3, [pc, #436]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	496a      	ldr	r1, [pc, #424]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f6:	4b69      	ldr	r3, [pc, #420]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	4965      	ldr	r1, [pc, #404]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fcc7 	bl	80041a8 <RCC_SetFlashLatencyFromMSIRange>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e34d      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003824:	f000 fc36 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 8003828:	4601      	mov	r1, r0
 800382a:	4b5c      	ldr	r3, [pc, #368]	; (800399c <HAL_RCC_OscConfig+0x298>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	4a5a      	ldr	r2, [pc, #360]	; (80039a0 <HAL_RCC_OscConfig+0x29c>)
 8003836:	5cd3      	ldrb	r3, [r2, r3]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	fa21 f303 	lsr.w	r3, r1, r3
 8003840:	4a58      	ldr	r2, [pc, #352]	; (80039a4 <HAL_RCC_OscConfig+0x2a0>)
 8003842:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003844:	4b58      	ldr	r3, [pc, #352]	; (80039a8 <HAL_RCC_OscConfig+0x2a4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd ff19 	bl	8001680 <HAL_InitTick>
 800384e:	4603      	mov	r3, r0
 8003850:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d052      	beq.n	80038fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	e331      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d032      	beq.n	80038ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003864:	4b4d      	ldr	r3, [pc, #308]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a4c      	ldr	r2, [pc, #304]	; (800399c <HAL_RCC_OscConfig+0x298>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003870:	f7fd ff52 	bl	8001718 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003878:	f7fd ff4e 	bl	8001718 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e31a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800388a:	4b44      	ldr	r3, [pc, #272]	; (800399c <HAL_RCC_OscConfig+0x298>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003896:	4b41      	ldr	r3, [pc, #260]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a40      	ldr	r2, [pc, #256]	; (800399c <HAL_RCC_OscConfig+0x298>)
 800389c:	f043 0308 	orr.w	r3, r3, #8
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b3e      	ldr	r3, [pc, #248]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	493b      	ldr	r1, [pc, #236]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b4:	4b39      	ldr	r3, [pc, #228]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	4936      	ldr	r1, [pc, #216]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
 80038c8:	e01a      	b.n	8003900 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038ca:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a33      	ldr	r2, [pc, #204]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038d6:	f7fd ff1f 	bl	8001718 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038de:	f7fd ff1b 	bl	8001718 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e2e7      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038f0:	4b2a      	ldr	r3, [pc, #168]	; (800399c <HAL_RCC_OscConfig+0x298>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f0      	bne.n	80038de <HAL_RCC_OscConfig+0x1da>
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d074      	beq.n	80039f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b08      	cmp	r3, #8
 8003910:	d005      	beq.n	800391e <HAL_RCC_OscConfig+0x21a>
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b0c      	cmp	r3, #12
 8003916:	d10e      	bne.n	8003936 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2b03      	cmp	r3, #3
 800391c:	d10b      	bne.n	8003936 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391e:	4b1f      	ldr	r3, [pc, #124]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d064      	beq.n	80039f4 <HAL_RCC_OscConfig+0x2f0>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d160      	bne.n	80039f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e2c4      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393e:	d106      	bne.n	800394e <HAL_RCC_OscConfig+0x24a>
 8003940:	4b16      	ldr	r3, [pc, #88]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a15      	ldr	r2, [pc, #84]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	e01d      	b.n	800398a <HAL_RCC_OscConfig+0x286>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003956:	d10c      	bne.n	8003972 <HAL_RCC_OscConfig+0x26e>
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCC_OscConfig+0x298>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0f      	ldr	r2, [pc, #60]	; (800399c <HAL_RCC_OscConfig+0x298>)
 800395e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b0d      	ldr	r3, [pc, #52]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0c      	ldr	r2, [pc, #48]	; (800399c <HAL_RCC_OscConfig+0x298>)
 800396a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	e00b      	b.n	800398a <HAL_RCC_OscConfig+0x286>
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a06      	ldr	r2, [pc, #24]	; (800399c <HAL_RCC_OscConfig+0x298>)
 8003984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003988:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01c      	beq.n	80039cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fd fec1 	bl	8001718 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003998:	e011      	b.n	80039be <HAL_RCC_OscConfig+0x2ba>
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
 80039a0:	08005dcc 	.word	0x08005dcc
 80039a4:	20000000 	.word	0x20000000
 80039a8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fd feb4 	bl	8001718 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e280      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039be:	4baf      	ldr	r3, [pc, #700]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x2a8>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fd fea4 	bl	8001718 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fd fea0 	bl	8001718 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	; 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e26c      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039e6:	4ba5      	ldr	r3, [pc, #660]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x2d0>
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d060      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_OscConfig+0x310>
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d119      	bne.n	8003a42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d116      	bne.n	8003a42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a14:	4b99      	ldr	r3, [pc, #612]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_OscConfig+0x328>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e249      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2c:	4b93      	ldr	r3, [pc, #588]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	061b      	lsls	r3, r3, #24
 8003a3a:	4990      	ldr	r1, [pc, #576]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a40:	e040      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d023      	beq.n	8003a92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a4a:	4b8c      	ldr	r3, [pc, #560]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a8b      	ldr	r2, [pc, #556]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a56:	f7fd fe5f 	bl	8001718 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5e:	f7fd fe5b 	bl	8001718 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e227      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a70:	4b82      	ldr	r3, [pc, #520]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7c:	4b7f      	ldr	r3, [pc, #508]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	497c      	ldr	r1, [pc, #496]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
 8003a90:	e018      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a92:	4b7a      	ldr	r3, [pc, #488]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a79      	ldr	r2, [pc, #484]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fd fe3b 	bl	8001718 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa6:	f7fd fe37 	bl	8001718 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e203      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab8:	4b70      	ldr	r3, [pc, #448]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d03c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01c      	beq.n	8003b12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad8:	4b68      	ldr	r3, [pc, #416]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ade:	4a67      	ldr	r2, [pc, #412]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd fe16 	bl	8001718 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af0:	f7fd fe12 	bl	8001718 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e1de      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b02:	4b5e      	ldr	r3, [pc, #376]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <HAL_RCC_OscConfig+0x3ec>
 8003b10:	e01b      	b.n	8003b4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b12:	4b5a      	ldr	r3, [pc, #360]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b18:	4a58      	ldr	r2, [pc, #352]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b22:	f7fd fdf9 	bl	8001718 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2a:	f7fd fdf5 	bl	8001718 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e1c1      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b3c:	4b4f      	ldr	r3, [pc, #316]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ef      	bne.n	8003b2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80a6 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b5c:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10d      	bne.n	8003b84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b68:	4b44      	ldr	r3, [pc, #272]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	4a43      	ldr	r2, [pc, #268]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b72:	6593      	str	r3, [r2, #88]	; 0x58
 8003b74:	4b41      	ldr	r3, [pc, #260]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b80:	2301      	movs	r3, #1
 8003b82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b84:	4b3e      	ldr	r3, [pc, #248]	; (8003c80 <HAL_RCC_OscConfig+0x57c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d118      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b90:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <HAL_RCC_OscConfig+0x57c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a3a      	ldr	r2, [pc, #232]	; (8003c80 <HAL_RCC_OscConfig+0x57c>)
 8003b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9c:	f7fd fdbc 	bl	8001718 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba4:	f7fd fdb8 	bl	8001718 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e184      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb6:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_RCC_OscConfig+0x57c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d108      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4d8>
 8003bca:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	4a2a      	ldr	r2, [pc, #168]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bda:	e024      	b.n	8003c26 <HAL_RCC_OscConfig+0x522>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b05      	cmp	r3, #5
 8003be2:	d110      	bne.n	8003c06 <HAL_RCC_OscConfig+0x502>
 8003be4:	4b25      	ldr	r3, [pc, #148]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003bec:	f043 0304 	orr.w	r3, r3, #4
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bf4:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	4a20      	ldr	r2, [pc, #128]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c04:	e00f      	b.n	8003c26 <HAL_RCC_OscConfig+0x522>
 8003c06:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c16:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003c1e:	f023 0304 	bic.w	r3, r3, #4
 8003c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2e:	f7fd fd73 	bl	8001718 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fd fd6f 	bl	8001718 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e139      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_OscConfig+0x578>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0ed      	beq.n	8003c36 <HAL_RCC_OscConfig+0x532>
 8003c5a:	e01a      	b.n	8003c92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fd fd5c 	bl	8001718 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c62:	e00f      	b.n	8003c84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7fd fd58 	bl	8001718 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d906      	bls.n	8003c84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e122      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c84:	4b90      	ldr	r3, [pc, #576]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e8      	bne.n	8003c64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c92:	7ffb      	ldrb	r3, [r7, #31]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b8b      	ldr	r3, [pc, #556]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	4a8a      	ldr	r2, [pc, #552]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8108 	beq.w	8003ebe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	f040 80d0 	bne.w	8003e58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cb8:	4b83      	ldr	r3, [pc, #524]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0203 	and.w	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d130      	bne.n	8003d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d127      	bne.n	8003d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d11f      	bne.n	8003d2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cf8:	2a07      	cmp	r2, #7
 8003cfa:	bf14      	ite	ne
 8003cfc:	2201      	movne	r2, #1
 8003cfe:	2200      	moveq	r2, #0
 8003d00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d113      	bne.n	8003d2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	3b01      	subs	r3, #1
 8003d14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d109      	bne.n	8003d2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	3b01      	subs	r3, #1
 8003d28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d06e      	beq.n	8003e0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b0c      	cmp	r3, #12
 8003d32:	d069      	beq.n	8003e08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d34:	4b64      	ldr	r3, [pc, #400]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d40:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0b7      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d50:	4b5d      	ldr	r3, [pc, #372]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a5c      	ldr	r2, [pc, #368]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d5c:	f7fd fcdc 	bl	8001718 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fd fcd8 	bl	8001718 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0a4      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d76:	4b54      	ldr	r3, [pc, #336]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d82:	4b51      	ldr	r3, [pc, #324]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	4b51      	ldr	r3, [pc, #324]	; (8003ecc <HAL_RCC_OscConfig+0x7c8>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d92:	3a01      	subs	r2, #1
 8003d94:	0112      	lsls	r2, r2, #4
 8003d96:	4311      	orrs	r1, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d9c:	0212      	lsls	r2, r2, #8
 8003d9e:	4311      	orrs	r1, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003da4:	0852      	lsrs	r2, r2, #1
 8003da6:	3a01      	subs	r2, #1
 8003da8:	0552      	lsls	r2, r2, #21
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003db0:	0852      	lsrs	r2, r2, #1
 8003db2:	3a01      	subs	r2, #1
 8003db4:	0652      	lsls	r2, r2, #25
 8003db6:	4311      	orrs	r1, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dbc:	0912      	lsrs	r2, r2, #4
 8003dbe:	0452      	lsls	r2, r2, #17
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	4941      	ldr	r1, [pc, #260]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dc8:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a3e      	ldr	r2, [pc, #248]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dd4:	4b3c      	ldr	r3, [pc, #240]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a3b      	ldr	r2, [pc, #236]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003de0:	f7fd fc9a 	bl	8001718 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fd fc96 	bl	8001718 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e062      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfa:	4b33      	ldr	r3, [pc, #204]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e06:	e05a      	b.n	8003ebe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e059      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0c:	4b2e      	ldr	r3, [pc, #184]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d152      	bne.n	8003ebe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e18:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a2a      	ldr	r2, [pc, #168]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e24:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a27      	ldr	r2, [pc, #156]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e30:	f7fd fc72 	bl	8001718 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fd fc6e 	bl	8001718 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e03a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4a:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x734>
 8003e56:	e032      	b.n	8003ebe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d02d      	beq.n	8003eba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a19      	ldr	r2, [pc, #100]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e68:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003e6a:	4b17      	ldr	r3, [pc, #92]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d105      	bne.n	8003e82 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003e76:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e7c:	f023 0303 	bic.w	r3, r3, #3
 8003e80:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	4a10      	ldr	r2, [pc, #64]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003e88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd fc41 	bl	8001718 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9a:	f7fd fc3d 	bl	8001718 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e009      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <HAL_RCC_OscConfig+0x7c4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCC_OscConfig+0x796>
 8003eb8:	e001      	b.n	8003ebe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	f99d808c 	.word	0xf99d808c

08003ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0c8      	b.n	8004076 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b66      	ldr	r3, [pc, #408]	; (8004080 <HAL_RCC_ClockConfig+0x1b0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d910      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b63      	ldr	r3, [pc, #396]	; (8004080 <HAL_RCC_ClockConfig+0x1b0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 0207 	bic.w	r2, r3, #7
 8003efa:	4961      	ldr	r1, [pc, #388]	; (8004080 <HAL_RCC_ClockConfig+0x1b0>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b5f      	ldr	r3, [pc, #380]	; (8004080 <HAL_RCC_ClockConfig+0x1b0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0b0      	b.n	8004076 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d04c      	beq.n	8003fba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d107      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f28:	4b56      	ldr	r3, [pc, #344]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d121      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e09e      	b.n	8004076 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f40:	4b50      	ldr	r3, [pc, #320]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d115      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e092      	b.n	8004076 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f58:	4b4a      	ldr	r3, [pc, #296]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e086      	b.n	8004076 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f68:	4b46      	ldr	r3, [pc, #280]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e07e      	b.n	8004076 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f78:	4b42      	ldr	r3, [pc, #264]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 0203 	bic.w	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	493f      	ldr	r1, [pc, #252]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f8a:	f7fd fbc5 	bl	8001718 <HAL_GetTick>
 8003f8e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f90:	e00a      	b.n	8003fa8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f92:	f7fd fbc1 	bl	8001718 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e066      	b.n	8004076 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa8:	4b36      	ldr	r3, [pc, #216]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 020c 	and.w	r2, r3, #12
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d1eb      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc6:	4b2f      	ldr	r3, [pc, #188]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	492c      	ldr	r1, [pc, #176]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b29      	ldr	r3, [pc, #164]	; (8004080 <HAL_RCC_ClockConfig+0x1b0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d210      	bcs.n	8004008 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b26      	ldr	r3, [pc, #152]	; (8004080 <HAL_RCC_ClockConfig+0x1b0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 0207 	bic.w	r2, r3, #7
 8003fee:	4924      	ldr	r1, [pc, #144]	; (8004080 <HAL_RCC_ClockConfig+0x1b0>)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b22      	ldr	r3, [pc, #136]	; (8004080 <HAL_RCC_ClockConfig+0x1b0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e036      	b.n	8004076 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004014:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4918      	ldr	r1, [pc, #96]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004032:	4b14      	ldr	r3, [pc, #80]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4910      	ldr	r1, [pc, #64]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004046:	f000 f825 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 800404a:	4601      	mov	r1, r0
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <HAL_RCC_ClockConfig+0x1b4>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	5cd3      	ldrb	r3, [r2, r3]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	fa21 f303 	lsr.w	r3, r1, r3
 8004062:	4a0a      	ldr	r2, [pc, #40]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <HAL_RCC_ClockConfig+0x1c0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fb08 	bl	8001680 <HAL_InitTick>
 8004070:	4603      	mov	r3, r0
 8004072:	72fb      	strb	r3, [r7, #11]

  return status;
 8004074:	7afb      	ldrb	r3, [r7, #11]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40022000 	.word	0x40022000
 8004084:	40021000 	.word	0x40021000
 8004088:	08005dcc 	.word	0x08005dcc
 800408c:	20000000 	.word	0x20000000
 8004090:	20000004 	.word	0x20000004

08004094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004094:	b480      	push	{r7}
 8004096:	b089      	sub	sp, #36	; 0x24
 8004098:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040a2:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_RCC_GetSysClockFreq+0x104>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ac:	4b3a      	ldr	r3, [pc, #232]	; (8004198 <HAL_RCC_GetSysClockFreq+0x104>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x34>
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d121      	bne.n	8004106 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d11e      	bne.n	8004106 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040c8:	4b33      	ldr	r3, [pc, #204]	; (8004198 <HAL_RCC_GetSysClockFreq+0x104>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040d4:	4b30      	ldr	r3, [pc, #192]	; (8004198 <HAL_RCC_GetSysClockFreq+0x104>)
 80040d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e005      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040e4:	4b2c      	ldr	r3, [pc, #176]	; (8004198 <HAL_RCC_GetSysClockFreq+0x104>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040f0:	4a2a      	ldr	r2, [pc, #168]	; (800419c <HAL_RCC_GetSysClockFreq+0x108>)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10d      	bne.n	800411c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004104:	e00a      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d102      	bne.n	8004112 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800410c:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	e004      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d101      	bne.n	800411c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004118:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800411a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d133      	bne.n	800418a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_RCC_GetSysClockFreq+0x104>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d002      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0xa4>
 8004132:	2b03      	cmp	r3, #3
 8004134:	d003      	beq.n	800413e <HAL_RCC_GetSysClockFreq+0xaa>
 8004136:	e005      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800413a:	617b      	str	r3, [r7, #20]
      break;
 800413c:	e005      	b.n	800414a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800413e:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004140:	617b      	str	r3, [r7, #20]
      break;
 8004142:	e002      	b.n	800414a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	617b      	str	r3, [r7, #20]
      break;
 8004148:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_RCC_GetSysClockFreq+0x104>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	3301      	adds	r3, #1
 8004156:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_RCC_GetSysClockFreq+0x104>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	fb02 f203 	mul.w	r2, r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_GetSysClockFreq+0x104>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	0e5b      	lsrs	r3, r3, #25
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	3301      	adds	r3, #1
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800418a:	69bb      	ldr	r3, [r7, #24]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3724      	adds	r7, #36	; 0x24
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40021000 	.word	0x40021000
 800419c:	08005ddc 	.word	0x08005ddc
 80041a0:	00f42400 	.word	0x00f42400
 80041a4:	007a1200 	.word	0x007a1200

080041a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041b4:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041c0:	f7ff fa3c 	bl	800363c <HAL_PWREx_GetVoltageRange>
 80041c4:	6178      	str	r0, [r7, #20]
 80041c6:	e014      	b.n	80041f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041c8:	4b25      	ldr	r3, [pc, #148]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	4a24      	ldr	r2, [pc, #144]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d2:	6593      	str	r3, [r2, #88]	; 0x58
 80041d4:	4b22      	ldr	r3, [pc, #136]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041e0:	f7ff fa2c 	bl	800363c <HAL_PWREx_GetVoltageRange>
 80041e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041e6:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f8:	d10b      	bne.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d919      	bls.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2ba0      	cmp	r3, #160	; 0xa0
 8004204:	d902      	bls.n	800420c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004206:	2302      	movs	r3, #2
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	e013      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800420c:	2301      	movs	r3, #1
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	e010      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d902      	bls.n	800421e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004218:	2303      	movs	r3, #3
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	e00a      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b80      	cmp	r3, #128	; 0x80
 8004222:	d102      	bne.n	800422a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004224:	2302      	movs	r3, #2
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	e004      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b70      	cmp	r3, #112	; 0x70
 800422e:	d101      	bne.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004230:	2301      	movs	r3, #1
 8004232:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 0207 	bic.w	r2, r3, #7
 800423c:	4909      	ldr	r1, [pc, #36]	; (8004264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	429a      	cmp	r2, r3
 8004250:	d001      	beq.n	8004256 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40021000 	.word	0x40021000
 8004264:	40022000 	.word	0x40022000

08004268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004270:	2300      	movs	r3, #0
 8004272:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004274:	2300      	movs	r3, #0
 8004276:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004280:	2b00      	cmp	r3, #0
 8004282:	d03f      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800428c:	d01c      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800428e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004292:	d802      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004298:	e01f      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x72>
 800429a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800429e:	d003      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80042a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042a4:	d01c      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80042a6:	e018      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042a8:	4b85      	ldr	r3, [pc, #532]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a84      	ldr	r2, [pc, #528]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042b4:	e015      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2100      	movs	r1, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fab9 	bl	8004834 <RCCEx_PLLSAI1_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042c6:	e00c      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3320      	adds	r3, #32
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fba0 	bl	8004a14 <RCCEx_PLLSAI2_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042d8:	e003      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	74fb      	strb	r3, [r7, #19]
      break;
 80042de:	e000      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80042e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e8:	4b75      	ldr	r3, [pc, #468]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042f6:	4972      	ldr	r1, [pc, #456]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042fe:	e001      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d03f      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004318:	d01c      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800431a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800431e:	d802      	bhi.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00e      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004324:	e01f      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800432a:	d003      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800432c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004330:	d01c      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004332:	e018      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004334:	4b62      	ldr	r3, [pc, #392]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a61      	ldr	r2, [pc, #388]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800433a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004340:	e015      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fa73 	bl	8004834 <RCCEx_PLLSAI1_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004352:	e00c      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3320      	adds	r3, #32
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fb5a 	bl	8004a14 <RCCEx_PLLSAI2_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004364:	e003      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	74fb      	strb	r3, [r7, #19]
      break;
 800436a:	e000      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800436c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004374:	4b52      	ldr	r3, [pc, #328]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004382:	494f      	ldr	r1, [pc, #316]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800438a:	e001      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80a0 	beq.w	80044de <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043a2:	4b47      	ldr	r3, [pc, #284]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043bc:	4a40      	ldr	r2, [pc, #256]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c2:	6593      	str	r3, [r2, #88]	; 0x58
 80043c4:	4b3e      	ldr	r3, [pc, #248]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d0:	2301      	movs	r3, #1
 80043d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d4:	4b3b      	ldr	r3, [pc, #236]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a3a      	ldr	r2, [pc, #232]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043e0:	f7fd f99a 	bl	8001718 <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e6:	e009      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fd f996 	bl	8001718 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d902      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	74fb      	strb	r3, [r7, #19]
        break;
 80043fa:	e005      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043fc:	4b31      	ldr	r3, [pc, #196]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ef      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d15c      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800440e:	4b2c      	ldr	r3, [pc, #176]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004418:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01f      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	429a      	cmp	r2, r3
 800442a:	d019      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800442c:	4b24      	ldr	r3, [pc, #144]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004436:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004438:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	4a20      	ldr	r2, [pc, #128]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004458:	4a19      	ldr	r2, [pc, #100]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d016      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fd f955 	bl	8001718 <HAL_GetTick>
 800446e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004470:	e00b      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fd f951 	bl	8001718 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d902      	bls.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	74fb      	strb	r3, [r7, #19]
            break;
 8004488:	e006      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800448a:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ec      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10c      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ae:	4904      	ldr	r1, [pc, #16]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044b6:	e009      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	74bb      	strb	r3, [r7, #18]
 80044bc:	e006      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	7cfb      	ldrb	r3, [r7, #19]
 80044ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044cc:	7c7b      	ldrb	r3, [r7, #17]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d105      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d2:	4b9e      	ldr	r3, [pc, #632]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d6:	4a9d      	ldr	r2, [pc, #628]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ea:	4b98      	ldr	r3, [pc, #608]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f0:	f023 0203 	bic.w	r2, r3, #3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	4994      	ldr	r1, [pc, #592]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800450c:	4b8f      	ldr	r3, [pc, #572]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f023 020c 	bic.w	r2, r3, #12
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	498c      	ldr	r1, [pc, #560]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800452e:	4b87      	ldr	r3, [pc, #540]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	4983      	ldr	r1, [pc, #524]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004550:	4b7e      	ldr	r3, [pc, #504]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	497b      	ldr	r1, [pc, #492]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004572:	4b76      	ldr	r3, [pc, #472]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004580:	4972      	ldr	r1, [pc, #456]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004594:	4b6d      	ldr	r3, [pc, #436]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	496a      	ldr	r1, [pc, #424]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b6:	4b65      	ldr	r3, [pc, #404]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c4:	4961      	ldr	r1, [pc, #388]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045d8:	4b5c      	ldr	r3, [pc, #368]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e6:	4959      	ldr	r1, [pc, #356]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045fa:	4b54      	ldr	r3, [pc, #336]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	4950      	ldr	r1, [pc, #320]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800461c:	4b4b      	ldr	r3, [pc, #300]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	4948      	ldr	r1, [pc, #288]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800463e:	4b43      	ldr	r3, [pc, #268]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464c:	493f      	ldr	r1, [pc, #252]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d028      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004660:	4b3a      	ldr	r3, [pc, #232]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466e:	4937      	ldr	r1, [pc, #220]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800467a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800467e:	d106      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004680:	4b32      	ldr	r3, [pc, #200]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4a31      	ldr	r2, [pc, #196]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800468a:	60d3      	str	r3, [r2, #12]
 800468c:	e011      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004696:	d10c      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f8c8 	bl	8004834 <RCCEx_PLLSAI1_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046a8:	7cfb      	ldrb	r3, [r7, #19]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d028      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046be:	4b23      	ldr	r3, [pc, #140]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	491f      	ldr	r1, [pc, #124]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046dc:	d106      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046de:	4b1b      	ldr	r3, [pc, #108]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4a1a      	ldr	r2, [pc, #104]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046e8:	60d3      	str	r3, [r2, #12]
 80046ea:	e011      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f4:	d10c      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3304      	adds	r3, #4
 80046fa:	2101      	movs	r1, #1
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 f899 	bl	8004834 <RCCEx_PLLSAI1_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02b      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	4908      	ldr	r1, [pc, #32]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800473a:	d109      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a02      	ldr	r2, [pc, #8]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004746:	60d3      	str	r3, [r2, #12]
 8004748:	e014      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004758:	d10c      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f867 	bl	8004834 <RCCEx_PLLSAI1_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d02f      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004780:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478e:	4928      	ldr	r1, [pc, #160]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800479a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479e:	d10d      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	2102      	movs	r1, #2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f844 	bl	8004834 <RCCEx_PLLSAI1_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d014      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	74bb      	strb	r3, [r7, #18]
 80047ba:	e011      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3320      	adds	r3, #32
 80047ca:	2102      	movs	r1, #2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 f921 	bl	8004a14 <RCCEx_PLLSAI2_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80047dc:	7cfb      	ldrb	r3, [r7, #19]
 80047de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047ec:	4b10      	ldr	r3, [pc, #64]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fa:	490d      	ldr	r1, [pc, #52]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004814:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800481e:	4904      	ldr	r1, [pc, #16]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004826:	7cbb      	ldrb	r3, [r7, #18]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000

08004834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004842:	4b73      	ldr	r3, [pc, #460]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d018      	beq.n	8004880 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800484e:	4b70      	ldr	r3, [pc, #448]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0203 	and.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d10d      	bne.n	800487a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
       ||
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004866:	4b6a      	ldr	r3, [pc, #424]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	091b      	lsrs	r3, r3, #4
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
       ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d044      	beq.n	8004904 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
 800487e:	e041      	b.n	8004904 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d00c      	beq.n	80048a2 <RCCEx_PLLSAI1_Config+0x6e>
 8004888:	2b03      	cmp	r3, #3
 800488a:	d013      	beq.n	80048b4 <RCCEx_PLLSAI1_Config+0x80>
 800488c:	2b01      	cmp	r3, #1
 800488e:	d120      	bne.n	80048d2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004890:	4b5f      	ldr	r3, [pc, #380]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d11d      	bne.n	80048d8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a0:	e01a      	b.n	80048d8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048a2:	4b5b      	ldr	r3, [pc, #364]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d116      	bne.n	80048dc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b2:	e013      	b.n	80048dc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048b4:	4b56      	ldr	r3, [pc, #344]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10f      	bne.n	80048e0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048c0:	4b53      	ldr	r3, [pc, #332]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048d0:	e006      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
      break;
 80048d6:	e004      	b.n	80048e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80048d8:	bf00      	nop
 80048da:	e002      	b.n	80048e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80048dc:	bf00      	nop
 80048de:	e000      	b.n	80048e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80048e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10d      	bne.n	8004904 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048e8:	4b49      	ldr	r3, [pc, #292]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6819      	ldr	r1, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	430b      	orrs	r3, r1
 80048fe:	4944      	ldr	r1, [pc, #272]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004900:	4313      	orrs	r3, r2
 8004902:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d17d      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800490a:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a40      	ldr	r2, [pc, #256]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004910:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004916:	f7fc feff 	bl	8001718 <HAL_GetTick>
 800491a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800491c:	e009      	b.n	8004932 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800491e:	f7fc fefb 	bl	8001718 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d902      	bls.n	8004932 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	73fb      	strb	r3, [r7, #15]
        break;
 8004930:	e005      	b.n	800493e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004932:	4b37      	ldr	r3, [pc, #220]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1ef      	bne.n	800491e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d160      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d111      	bne.n	800496e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800494a:	4b31      	ldr	r3, [pc, #196]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6892      	ldr	r2, [r2, #8]
 800495a:	0211      	lsls	r1, r2, #8
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68d2      	ldr	r2, [r2, #12]
 8004960:	0912      	lsrs	r2, r2, #4
 8004962:	0452      	lsls	r2, r2, #17
 8004964:	430a      	orrs	r2, r1
 8004966:	492a      	ldr	r1, [pc, #168]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004968:	4313      	orrs	r3, r2
 800496a:	610b      	str	r3, [r1, #16]
 800496c:	e027      	b.n	80049be <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d112      	bne.n	800499a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004974:	4b26      	ldr	r3, [pc, #152]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800497c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6892      	ldr	r2, [r2, #8]
 8004984:	0211      	lsls	r1, r2, #8
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6912      	ldr	r2, [r2, #16]
 800498a:	0852      	lsrs	r2, r2, #1
 800498c:	3a01      	subs	r2, #1
 800498e:	0552      	lsls	r2, r2, #21
 8004990:	430a      	orrs	r2, r1
 8004992:	491f      	ldr	r1, [pc, #124]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	610b      	str	r3, [r1, #16]
 8004998:	e011      	b.n	80049be <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800499a:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6892      	ldr	r2, [r2, #8]
 80049aa:	0211      	lsls	r1, r2, #8
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6952      	ldr	r2, [r2, #20]
 80049b0:	0852      	lsrs	r2, r2, #1
 80049b2:	3a01      	subs	r2, #1
 80049b4:	0652      	lsls	r2, r2, #25
 80049b6:	430a      	orrs	r2, r1
 80049b8:	4915      	ldr	r1, [pc, #84]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049be:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ca:	f7fc fea5 	bl	8001718 <HAL_GetTick>
 80049ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049d0:	e009      	b.n	80049e6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049d2:	f7fc fea1 	bl	8001718 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d902      	bls.n	80049e6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	73fb      	strb	r3, [r7, #15]
          break;
 80049e4:	e005      	b.n	80049f2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0ef      	beq.n	80049d2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d106      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	4903      	ldr	r1, [pc, #12]	; (8004a10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40021000 	.word	0x40021000

08004a14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a22:	4b68      	ldr	r3, [pc, #416]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d018      	beq.n	8004a60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a2e:	4b65      	ldr	r3, [pc, #404]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0203 	and.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d10d      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
       ||
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a46:	4b5f      	ldr	r3, [pc, #380]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	091b      	lsrs	r3, r3, #4
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
       ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d044      	beq.n	8004ae4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
 8004a5e:	e041      	b.n	8004ae4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d00c      	beq.n	8004a82 <RCCEx_PLLSAI2_Config+0x6e>
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d013      	beq.n	8004a94 <RCCEx_PLLSAI2_Config+0x80>
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d120      	bne.n	8004ab2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a70:	4b54      	ldr	r3, [pc, #336]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d11d      	bne.n	8004ab8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a80:	e01a      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a82:	4b50      	ldr	r3, [pc, #320]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d116      	bne.n	8004abc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a92:	e013      	b.n	8004abc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a94:	4b4b      	ldr	r3, [pc, #300]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10f      	bne.n	8004ac0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aa0:	4b48      	ldr	r3, [pc, #288]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d109      	bne.n	8004ac0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ab0:	e006      	b.n	8004ac0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab6:	e004      	b.n	8004ac2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ab8:	bf00      	nop
 8004aba:	e002      	b.n	8004ac2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ac0:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10d      	bne.n	8004ae4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ac8:	4b3e      	ldr	r3, [pc, #248]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6819      	ldr	r1, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	430b      	orrs	r3, r1
 8004ade:	4939      	ldr	r1, [pc, #228]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d167      	bne.n	8004bba <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004aea:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a35      	ldr	r2, [pc, #212]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af6:	f7fc fe0f 	bl	8001718 <HAL_GetTick>
 8004afa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004afc:	e009      	b.n	8004b12 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004afe:	f7fc fe0b 	bl	8001718 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d902      	bls.n	8004b12 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	73fb      	strb	r3, [r7, #15]
        break;
 8004b10:	e005      	b.n	8004b1e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b12:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ef      	bne.n	8004afe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d14a      	bne.n	8004bba <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d111      	bne.n	8004b4e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b2a:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6892      	ldr	r2, [r2, #8]
 8004b3a:	0211      	lsls	r1, r2, #8
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68d2      	ldr	r2, [r2, #12]
 8004b40:	0912      	lsrs	r2, r2, #4
 8004b42:	0452      	lsls	r2, r2, #17
 8004b44:	430a      	orrs	r2, r1
 8004b46:	491f      	ldr	r1, [pc, #124]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	614b      	str	r3, [r1, #20]
 8004b4c:	e011      	b.n	8004b72 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6892      	ldr	r2, [r2, #8]
 8004b5e:	0211      	lsls	r1, r2, #8
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6912      	ldr	r2, [r2, #16]
 8004b64:	0852      	lsrs	r2, r2, #1
 8004b66:	3a01      	subs	r2, #1
 8004b68:	0652      	lsls	r2, r2, #25
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	4915      	ldr	r1, [pc, #84]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b72:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7e:	f7fc fdcb 	bl	8001718 <HAL_GetTick>
 8004b82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b84:	e009      	b.n	8004b9a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b86:	f7fc fdc7 	bl	8001718 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d902      	bls.n	8004b9a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	73fb      	strb	r3, [r7, #15]
          break;
 8004b98:	e005      	b.n	8004ba6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0ef      	beq.n	8004b86 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	4903      	ldr	r1, [pc, #12]	; (8004bc4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e01d      	b.n	8004c16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fc28 	bl	8001444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f000 fbd2 	bl	80053b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <HAL_TIM_Base_Start_IT+0x50>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b06      	cmp	r3, #6
 8004c48:	d00b      	beq.n	8004c62 <HAL_TIM_Base_Start_IT+0x42>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d007      	beq.n	8004c62 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	00010007 	.word	0x00010007

08004c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e01d      	b.n	8004cc2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fc fbb4 	bl	8001408 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f000 fb7c 	bl	80053b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	6839      	ldr	r1, [r7, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 ff70 	bl	8005bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <HAL_TIM_PWM_Start+0x98>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_TIM_PWM_Start+0x4a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <HAL_TIM_PWM_Start+0x9c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00e      	beq.n	8004d16 <HAL_TIM_PWM_Start+0x4a>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1b      	ldr	r2, [pc, #108]	; (8004d6c <HAL_TIM_PWM_Start+0xa0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d009      	beq.n	8004d16 <HAL_TIM_PWM_Start+0x4a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1a      	ldr	r2, [pc, #104]	; (8004d70 <HAL_TIM_PWM_Start+0xa4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <HAL_TIM_PWM_Start+0x4a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <HAL_TIM_PWM_Start+0xa8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d101      	bne.n	8004d1a <HAL_TIM_PWM_Start+0x4e>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <HAL_TIM_PWM_Start+0x50>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <HAL_TIM_PWM_Start+0xac>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b06      	cmp	r3, #6
 8004d40:	d00b      	beq.n	8004d5a <HAL_TIM_PWM_Start+0x8e>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d007      	beq.n	8004d5a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0201 	orr.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	40013400 	.word	0x40013400
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	40014400 	.word	0x40014400
 8004d74:	40014800 	.word	0x40014800
 8004d78:	00010007 	.word	0x00010007

08004d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d122      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d11b      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0202 	mvn.w	r2, #2
 8004da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fad7 	bl	8005372 <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fac9 	bl	800535e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fada 	bl	8005386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d122      	bne.n	8004e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d11b      	bne.n	8004e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0204 	mvn.w	r2, #4
 8004dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 faad 	bl	8005372 <HAL_TIM_IC_CaptureCallback>
 8004e18:	e005      	b.n	8004e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fa9f 	bl	800535e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fab0 	bl	8005386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d122      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d11b      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0208 	mvn.w	r2, #8
 8004e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2204      	movs	r2, #4
 8004e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa83 	bl	8005372 <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fa75 	bl	800535e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fa86 	bl	8005386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d122      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b10      	cmp	r3, #16
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0210 	mvn.w	r2, #16
 8004ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fa59 	bl	8005372 <HAL_TIM_IC_CaptureCallback>
 8004ec0:	e005      	b.n	8004ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa4b 	bl	800535e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fa5c 	bl	8005386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d10e      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d107      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0201 	mvn.w	r2, #1
 8004ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fb fe68 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b80      	cmp	r3, #128	; 0x80
 8004f0c:	d10e      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b80      	cmp	r3, #128	; 0x80
 8004f1a:	d107      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 ff04 	bl	8005d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f3a:	d10e      	bne.n	8004f5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d107      	bne.n	8004f5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fef7 	bl	8005d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f64:	2b40      	cmp	r3, #64	; 0x40
 8004f66:	d10e      	bne.n	8004f86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d107      	bne.n	8004f86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fa0a 	bl	800539a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d10e      	bne.n	8004fb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d107      	bne.n	8004fb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f06f 0220 	mvn.w	r2, #32
 8004faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 feb7 	bl	8005d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e105      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b14      	cmp	r3, #20
 8004fea:	f200 80f0 	bhi.w	80051ce <HAL_TIM_PWM_ConfigChannel+0x212>
 8004fee:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff4:	08005049 	.word	0x08005049
 8004ff8:	080051cf 	.word	0x080051cf
 8004ffc:	080051cf 	.word	0x080051cf
 8005000:	080051cf 	.word	0x080051cf
 8005004:	08005089 	.word	0x08005089
 8005008:	080051cf 	.word	0x080051cf
 800500c:	080051cf 	.word	0x080051cf
 8005010:	080051cf 	.word	0x080051cf
 8005014:	080050cb 	.word	0x080050cb
 8005018:	080051cf 	.word	0x080051cf
 800501c:	080051cf 	.word	0x080051cf
 8005020:	080051cf 	.word	0x080051cf
 8005024:	0800510b 	.word	0x0800510b
 8005028:	080051cf 	.word	0x080051cf
 800502c:	080051cf 	.word	0x080051cf
 8005030:	080051cf 	.word	0x080051cf
 8005034:	0800514d 	.word	0x0800514d
 8005038:	080051cf 	.word	0x080051cf
 800503c:	080051cf 	.word	0x080051cf
 8005040:	080051cf 	.word	0x080051cf
 8005044:	0800518d 	.word	0x0800518d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fa48 	bl	80054e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0208 	orr.w	r2, r2, #8
 8005062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0204 	bic.w	r2, r2, #4
 8005072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6999      	ldr	r1, [r3, #24]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	619a      	str	r2, [r3, #24]
      break;
 8005086:	e0a3      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fab8 	bl	8005604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6999      	ldr	r1, [r3, #24]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	021a      	lsls	r2, r3, #8
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	619a      	str	r2, [r3, #24]
      break;
 80050c8:	e082      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fb21 	bl	8005718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0208 	orr.w	r2, r2, #8
 80050e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0204 	bic.w	r2, r2, #4
 80050f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69d9      	ldr	r1, [r3, #28]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	61da      	str	r2, [r3, #28]
      break;
 8005108:	e062      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fb89 	bl	8005828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69d9      	ldr	r1, [r3, #28]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	021a      	lsls	r2, r3, #8
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	61da      	str	r2, [r3, #28]
      break;
 800514a:	e041      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fbd2 	bl	80058fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0208 	orr.w	r2, r2, #8
 8005166:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0204 	bic.w	r2, r2, #4
 8005176:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800518a:	e021      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fc16 	bl	80059c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	021a      	lsls	r2, r3, #8
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051cc:	e000      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80051ce:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop

080051ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIM_ConfigClockSource+0x18>
 8005200:	2302      	movs	r3, #2
 8005202:	e0a8      	b.n	8005356 <HAL_TIM_ConfigClockSource+0x16a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d067      	beq.n	8005310 <HAL_TIM_ConfigClockSource+0x124>
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d80b      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x70>
 8005244:	2b10      	cmp	r3, #16
 8005246:	d073      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x144>
 8005248:	2b10      	cmp	r3, #16
 800524a:	d802      	bhi.n	8005252 <HAL_TIM_ConfigClockSource+0x66>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d06f      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005250:	e078      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005252:	2b20      	cmp	r3, #32
 8005254:	d06c      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x144>
 8005256:	2b30      	cmp	r3, #48	; 0x30
 8005258:	d06a      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800525a:	e073      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800525c:	2b70      	cmp	r3, #112	; 0x70
 800525e:	d00d      	beq.n	800527c <HAL_TIM_ConfigClockSource+0x90>
 8005260:	2b70      	cmp	r3, #112	; 0x70
 8005262:	d804      	bhi.n	800526e <HAL_TIM_ConfigClockSource+0x82>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d033      	beq.n	80052d0 <HAL_TIM_ConfigClockSource+0xe4>
 8005268:	2b60      	cmp	r3, #96	; 0x60
 800526a:	d041      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800526c:	e06a      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005272:	d066      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x156>
 8005274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005278:	d017      	beq.n	80052aa <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800527a:	e063      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6899      	ldr	r1, [r3, #8]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f000 fc7a 	bl	8005b84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800529e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	609a      	str	r2, [r3, #8]
      break;
 80052a8:	e04c      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6899      	ldr	r1, [r3, #8]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f000 fc63 	bl	8005b84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052cc:	609a      	str	r2, [r3, #8]
      break;
 80052ce:	e039      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	461a      	mov	r2, r3
 80052de:	f000 fbd7 	bl	8005a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2150      	movs	r1, #80	; 0x50
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fc30 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 80052ee:	e029      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6859      	ldr	r1, [r3, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	461a      	mov	r2, r3
 80052fe:	f000 fbf6 	bl	8005aee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2160      	movs	r1, #96	; 0x60
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fc20 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 800530e:	e019      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	6859      	ldr	r1, [r3, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	461a      	mov	r2, r3
 800531e:	f000 fbb7 	bl	8005a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2140      	movs	r1, #64	; 0x40
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fc10 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 800532e:	e009      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 fc07 	bl	8005b4e <TIM_ITRx_SetConfig>
      break;
 8005340:	e000      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a40      	ldr	r2, [pc, #256]	; (80054c4 <TIM_Base_SetConfig+0x114>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ce:	d00f      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a3d      	ldr	r2, [pc, #244]	; (80054c8 <TIM_Base_SetConfig+0x118>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a3c      	ldr	r2, [pc, #240]	; (80054cc <TIM_Base_SetConfig+0x11c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a3b      	ldr	r2, [pc, #236]	; (80054d0 <TIM_Base_SetConfig+0x120>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3a      	ldr	r2, [pc, #232]	; (80054d4 <TIM_Base_SetConfig+0x124>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d108      	bne.n	8005402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a2f      	ldr	r2, [pc, #188]	; (80054c4 <TIM_Base_SetConfig+0x114>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01f      	beq.n	800544a <TIM_Base_SetConfig+0x9a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005410:	d01b      	beq.n	800544a <TIM_Base_SetConfig+0x9a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a2c      	ldr	r2, [pc, #176]	; (80054c8 <TIM_Base_SetConfig+0x118>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d017      	beq.n	800544a <TIM_Base_SetConfig+0x9a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2b      	ldr	r2, [pc, #172]	; (80054cc <TIM_Base_SetConfig+0x11c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <TIM_Base_SetConfig+0x9a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <TIM_Base_SetConfig+0x120>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00f      	beq.n	800544a <TIM_Base_SetConfig+0x9a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a29      	ldr	r2, [pc, #164]	; (80054d4 <TIM_Base_SetConfig+0x124>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00b      	beq.n	800544a <TIM_Base_SetConfig+0x9a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a28      	ldr	r2, [pc, #160]	; (80054d8 <TIM_Base_SetConfig+0x128>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d007      	beq.n	800544a <TIM_Base_SetConfig+0x9a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a27      	ldr	r2, [pc, #156]	; (80054dc <TIM_Base_SetConfig+0x12c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_Base_SetConfig+0x9a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <TIM_Base_SetConfig+0x130>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d108      	bne.n	800545c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a10      	ldr	r2, [pc, #64]	; (80054c4 <TIM_Base_SetConfig+0x114>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00f      	beq.n	80054a8 <TIM_Base_SetConfig+0xf8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a12      	ldr	r2, [pc, #72]	; (80054d4 <TIM_Base_SetConfig+0x124>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <TIM_Base_SetConfig+0xf8>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a11      	ldr	r2, [pc, #68]	; (80054d8 <TIM_Base_SetConfig+0x128>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0xf8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a10      	ldr	r2, [pc, #64]	; (80054dc <TIM_Base_SetConfig+0x12c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0xf8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a0f      	ldr	r2, [pc, #60]	; (80054e0 <TIM_Base_SetConfig+0x130>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d103      	bne.n	80054b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	615a      	str	r2, [r3, #20]
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40000c00 	.word	0x40000c00
 80054d4:	40013400 	.word	0x40013400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40014400 	.word	0x40014400
 80054e0:	40014800 	.word	0x40014800

080054e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0201 	bic.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0303 	bic.w	r3, r3, #3
 800551e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f023 0302 	bic.w	r3, r3, #2
 8005530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a2c      	ldr	r2, [pc, #176]	; (80055f0 <TIM_OC1_SetConfig+0x10c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00f      	beq.n	8005564 <TIM_OC1_SetConfig+0x80>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a2b      	ldr	r2, [pc, #172]	; (80055f4 <TIM_OC1_SetConfig+0x110>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00b      	beq.n	8005564 <TIM_OC1_SetConfig+0x80>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a2a      	ldr	r2, [pc, #168]	; (80055f8 <TIM_OC1_SetConfig+0x114>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d007      	beq.n	8005564 <TIM_OC1_SetConfig+0x80>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a29      	ldr	r2, [pc, #164]	; (80055fc <TIM_OC1_SetConfig+0x118>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_OC1_SetConfig+0x80>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a28      	ldr	r2, [pc, #160]	; (8005600 <TIM_OC1_SetConfig+0x11c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d10c      	bne.n	800557e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f023 0308 	bic.w	r3, r3, #8
 800556a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f023 0304 	bic.w	r3, r3, #4
 800557c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1b      	ldr	r2, [pc, #108]	; (80055f0 <TIM_OC1_SetConfig+0x10c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00f      	beq.n	80055a6 <TIM_OC1_SetConfig+0xc2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a1a      	ldr	r2, [pc, #104]	; (80055f4 <TIM_OC1_SetConfig+0x110>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00b      	beq.n	80055a6 <TIM_OC1_SetConfig+0xc2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <TIM_OC1_SetConfig+0x114>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <TIM_OC1_SetConfig+0xc2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a18      	ldr	r2, [pc, #96]	; (80055fc <TIM_OC1_SetConfig+0x118>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_OC1_SetConfig+0xc2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a17      	ldr	r2, [pc, #92]	; (8005600 <TIM_OC1_SetConfig+0x11c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d111      	bne.n	80055ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	621a      	str	r2, [r3, #32]
}
 80055e4:	bf00      	nop
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	40012c00 	.word	0x40012c00
 80055f4:	40013400 	.word	0x40013400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40014400 	.word	0x40014400
 8005600:	40014800 	.word	0x40014800

08005604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f023 0210 	bic.w	r2, r3, #16
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0320 	bic.w	r3, r3, #32
 8005652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a28      	ldr	r2, [pc, #160]	; (8005704 <TIM_OC2_SetConfig+0x100>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC2_SetConfig+0x6c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a27      	ldr	r2, [pc, #156]	; (8005708 <TIM_OC2_SetConfig+0x104>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d10d      	bne.n	800568c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800568a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <TIM_OC2_SetConfig+0x100>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00f      	beq.n	80056b4 <TIM_OC2_SetConfig+0xb0>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a1c      	ldr	r2, [pc, #112]	; (8005708 <TIM_OC2_SetConfig+0x104>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00b      	beq.n	80056b4 <TIM_OC2_SetConfig+0xb0>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a1b      	ldr	r2, [pc, #108]	; (800570c <TIM_OC2_SetConfig+0x108>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <TIM_OC2_SetConfig+0xb0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a1a      	ldr	r2, [pc, #104]	; (8005710 <TIM_OC2_SetConfig+0x10c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_OC2_SetConfig+0xb0>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a19      	ldr	r2, [pc, #100]	; (8005714 <TIM_OC2_SetConfig+0x110>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d113      	bne.n	80056dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40012c00 	.word	0x40012c00
 8005708:	40013400 	.word	0x40013400
 800570c:	40014000 	.word	0x40014000
 8005710:	40014400 	.word	0x40014400
 8005714:	40014800 	.word	0x40014800

08005718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a27      	ldr	r2, [pc, #156]	; (8005814 <TIM_OC3_SetConfig+0xfc>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_OC3_SetConfig+0x6a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a26      	ldr	r2, [pc, #152]	; (8005818 <TIM_OC3_SetConfig+0x100>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10d      	bne.n	800579e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800579c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a1c      	ldr	r2, [pc, #112]	; (8005814 <TIM_OC3_SetConfig+0xfc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00f      	beq.n	80057c6 <TIM_OC3_SetConfig+0xae>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a1b      	ldr	r2, [pc, #108]	; (8005818 <TIM_OC3_SetConfig+0x100>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00b      	beq.n	80057c6 <TIM_OC3_SetConfig+0xae>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a1a      	ldr	r2, [pc, #104]	; (800581c <TIM_OC3_SetConfig+0x104>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d007      	beq.n	80057c6 <TIM_OC3_SetConfig+0xae>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a19      	ldr	r2, [pc, #100]	; (8005820 <TIM_OC3_SetConfig+0x108>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_OC3_SetConfig+0xae>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a18      	ldr	r2, [pc, #96]	; (8005824 <TIM_OC3_SetConfig+0x10c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d113      	bne.n	80057ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	621a      	str	r2, [r3, #32]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	40014400 	.word	0x40014400
 8005824:	40014800 	.word	0x40014800

08005828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	031b      	lsls	r3, r3, #12
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <TIM_OC4_SetConfig+0xc0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00f      	beq.n	80058ac <TIM_OC4_SetConfig+0x84>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a17      	ldr	r2, [pc, #92]	; (80058ec <TIM_OC4_SetConfig+0xc4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00b      	beq.n	80058ac <TIM_OC4_SetConfig+0x84>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a16      	ldr	r2, [pc, #88]	; (80058f0 <TIM_OC4_SetConfig+0xc8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d007      	beq.n	80058ac <TIM_OC4_SetConfig+0x84>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a15      	ldr	r2, [pc, #84]	; (80058f4 <TIM_OC4_SetConfig+0xcc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_OC4_SetConfig+0x84>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a14      	ldr	r2, [pc, #80]	; (80058f8 <TIM_OC4_SetConfig+0xd0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d109      	bne.n	80058c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	019b      	lsls	r3, r3, #6
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40013400 	.word	0x40013400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40014400 	.word	0x40014400
 80058f8:	40014800 	.word	0x40014800

080058fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005940:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	041b      	lsls	r3, r3, #16
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <TIM_OC5_SetConfig+0xb4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00f      	beq.n	8005976 <TIM_OC5_SetConfig+0x7a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <TIM_OC5_SetConfig+0xb8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00b      	beq.n	8005976 <TIM_OC5_SetConfig+0x7a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <TIM_OC5_SetConfig+0xbc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d007      	beq.n	8005976 <TIM_OC5_SetConfig+0x7a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a14      	ldr	r2, [pc, #80]	; (80059bc <TIM_OC5_SetConfig+0xc0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d003      	beq.n	8005976 <TIM_OC5_SetConfig+0x7a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <TIM_OC5_SetConfig+0xc4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d109      	bne.n	800598a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	621a      	str	r2, [r3, #32]
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40013400 	.word	0x40013400
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40014400 	.word	0x40014400
 80059c0:	40014800 	.word	0x40014800

080059c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	051b      	lsls	r3, r3, #20
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a18      	ldr	r2, [pc, #96]	; (8005a7c <TIM_OC6_SetConfig+0xb8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00f      	beq.n	8005a40 <TIM_OC6_SetConfig+0x7c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a17      	ldr	r2, [pc, #92]	; (8005a80 <TIM_OC6_SetConfig+0xbc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00b      	beq.n	8005a40 <TIM_OC6_SetConfig+0x7c>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a16      	ldr	r2, [pc, #88]	; (8005a84 <TIM_OC6_SetConfig+0xc0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d007      	beq.n	8005a40 <TIM_OC6_SetConfig+0x7c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <TIM_OC6_SetConfig+0xc4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_OC6_SetConfig+0x7c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a14      	ldr	r2, [pc, #80]	; (8005a8c <TIM_OC6_SetConfig+0xc8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d109      	bne.n	8005a54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	029b      	lsls	r3, r3, #10
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40013400 	.word	0x40013400
 8005a84:	40014000 	.word	0x40014000
 8005a88:	40014400 	.word	0x40014400
 8005a8c:	40014800 	.word	0x40014800

08005a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f023 030a 	bic.w	r3, r3, #10
 8005acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	621a      	str	r2, [r3, #32]
}
 8005ae2:	bf00      	nop
 8005ae4:	371c      	adds	r7, #28
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b087      	sub	sp, #28
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f023 0210 	bic.w	r2, r3, #16
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	031b      	lsls	r3, r3, #12
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	011b      	lsls	r3, r3, #4
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f043 0307 	orr.w	r3, r3, #7
 8005b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	609a      	str	r2, [r3, #8]
}
 8005b78:	bf00      	nop
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	021a      	lsls	r2, r3, #8
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	609a      	str	r2, [r3, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a1a      	ldr	r2, [r3, #32]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	43db      	mvns	r3, r3
 8005be6:	401a      	ands	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1a      	ldr	r2, [r3, #32]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 031f 	and.w	r3, r3, #31
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e068      	b.n	8005cfa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a2e      	ldr	r2, [pc, #184]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2d      	ldr	r2, [pc, #180]	; (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d108      	bne.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1e      	ldr	r2, [pc, #120]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01d      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9a:	d018      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00e      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d009      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a13      	ldr	r2, [pc, #76]	; (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d004      	beq.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a14      	ldr	r2, [pc, #80]	; (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d10c      	bne.n	8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40012c00 	.word	0x40012c00
 8005d0c:	40013400 	.word	0x40013400
 8005d10:	40000400 	.word	0x40000400
 8005d14:	40000800 	.word	0x40000800
 8005d18:	40000c00 	.word	0x40000c00
 8005d1c:	40014000 	.word	0x40014000

08005d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <__libc_init_array>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	4e0d      	ldr	r6, [pc, #52]	; (8005d94 <__libc_init_array+0x38>)
 8005d60:	4c0d      	ldr	r4, [pc, #52]	; (8005d98 <__libc_init_array+0x3c>)
 8005d62:	1ba4      	subs	r4, r4, r6
 8005d64:	10a4      	asrs	r4, r4, #2
 8005d66:	2500      	movs	r5, #0
 8005d68:	42a5      	cmp	r5, r4
 8005d6a:	d109      	bne.n	8005d80 <__libc_init_array+0x24>
 8005d6c:	4e0b      	ldr	r6, [pc, #44]	; (8005d9c <__libc_init_array+0x40>)
 8005d6e:	4c0c      	ldr	r4, [pc, #48]	; (8005da0 <__libc_init_array+0x44>)
 8005d70:	f000 f820 	bl	8005db4 <_init>
 8005d74:	1ba4      	subs	r4, r4, r6
 8005d76:	10a4      	asrs	r4, r4, #2
 8005d78:	2500      	movs	r5, #0
 8005d7a:	42a5      	cmp	r5, r4
 8005d7c:	d105      	bne.n	8005d8a <__libc_init_array+0x2e>
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}
 8005d80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d84:	4798      	blx	r3
 8005d86:	3501      	adds	r5, #1
 8005d88:	e7ee      	b.n	8005d68 <__libc_init_array+0xc>
 8005d8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d8e:	4798      	blx	r3
 8005d90:	3501      	adds	r5, #1
 8005d92:	e7f2      	b.n	8005d7a <__libc_init_array+0x1e>
 8005d94:	08005e0c 	.word	0x08005e0c
 8005d98:	08005e0c 	.word	0x08005e0c
 8005d9c:	08005e0c 	.word	0x08005e0c
 8005da0:	08005e10 	.word	0x08005e10

08005da4 <memset>:
 8005da4:	4402      	add	r2, r0
 8005da6:	4603      	mov	r3, r0
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d100      	bne.n	8005dae <memset+0xa>
 8005dac:	4770      	bx	lr
 8005dae:	f803 1b01 	strb.w	r1, [r3], #1
 8005db2:	e7f9      	b.n	8005da8 <memset+0x4>

08005db4 <_init>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr

08005dc0 <_fini>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr
