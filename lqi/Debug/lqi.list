
lqi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005940  08005940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005980  08005980  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005980  08005980  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005980  08005980  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005984  08005984  00015984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000018  0800599c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800599c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011baa  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000212f  00000000  00000000  00031bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  00033d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001018  00000000  00000000  00034e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028870  00000000  00000000  00035e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c86b  00000000  00000000  0005e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010288a  00000000  00000000  0006af33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d7bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048cc  00000000  00000000  0016d838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005928 	.word	0x08005928

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08005928 	.word	0x08005928

080001c8 <swap>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void swap(int* a, int* b)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	int t = *a;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	60fb      	str	r3, [r7, #12]
    *a = *b;
 80001d8:	683b      	ldr	r3, [r7, #0]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	601a      	str	r2, [r3, #0]
    *b = t;
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	601a      	str	r2, [r3, #0]
}
 80001e6:	bf00      	nop
 80001e8:	3714      	adds	r7, #20
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr

080001f2 <partition>:

int partition (int arr[], int low, int high)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b088      	sub	sp, #32
 80001f6:	af00      	add	r7, sp, #0
 80001f8:	60f8      	str	r0, [r7, #12]
 80001fa:	60b9      	str	r1, [r7, #8]
 80001fc:	607a      	str	r2, [r7, #4]
	int pivot = arr[high];    // pivot
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	68fa      	ldr	r2, [r7, #12]
 8000204:	4413      	add	r3, r2
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	617b      	str	r3, [r7, #20]
	int i = (low - 1);  // Index of smaller element
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	3b01      	subs	r3, #1
 800020e:	61fb      	str	r3, [r7, #28]

    for (int j = low; j <= high- 1; j++)
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	61bb      	str	r3, [r7, #24]
 8000214:	e018      	b.n	8000248 <partition+0x56>
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
 8000216:	69bb      	ldr	r3, [r7, #24]
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	68fa      	ldr	r2, [r7, #12]
 800021c:	4413      	add	r3, r2
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	429a      	cmp	r2, r3
 8000224:	dd0d      	ble.n	8000242 <partition+0x50>
        {
            i++;    // increment index of smaller element
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	3301      	adds	r3, #1
 800022a:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 800022c:	69fb      	ldr	r3, [r7, #28]
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	18d0      	adds	r0, r2, r3
 8000234:	69bb      	ldr	r3, [r7, #24]
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	4413      	add	r3, r2
 800023c:	4619      	mov	r1, r3
 800023e:	f7ff ffc3 	bl	80001c8 <swap>
    for (int j = low; j <= high- 1; j++)
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	3301      	adds	r3, #1
 8000246:	61bb      	str	r3, [r7, #24]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	69ba      	ldr	r2, [r7, #24]
 800024e:	429a      	cmp	r2, r3
 8000250:	dde1      	ble.n	8000216 <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8000252:	69fb      	ldr	r3, [r7, #28]
 8000254:	3301      	adds	r3, #1
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	18d0      	adds	r0, r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	4413      	add	r3, r2
 8000264:	4619      	mov	r1, r3
 8000266:	f7ff ffaf 	bl	80001c8 <swap>
    return (i + 1);
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	3301      	adds	r3, #1
}
 800026e:	4618      	mov	r0, r3
 8000270:	3720      	adds	r7, #32
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}

08000276 <quickSort>:

void quickSort(int arr[], int low, int high)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	b086      	sub	sp, #24
 800027a:	af00      	add	r7, sp, #0
 800027c:	60f8      	str	r0, [r7, #12]
 800027e:	60b9      	str	r1, [r7, #8]
 8000280:	607a      	str	r2, [r7, #4]
    if (low < high)
 8000282:	68ba      	ldr	r2, [r7, #8]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	429a      	cmp	r2, r3
 8000288:	da13      	bge.n	80002b2 <quickSort+0x3c>
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
    	int pi = partition(arr, low, high);
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	68b9      	ldr	r1, [r7, #8]
 800028e:	68f8      	ldr	r0, [r7, #12]
 8000290:	f7ff ffaf 	bl	80001f2 <partition>
 8000294:	6178      	str	r0, [r7, #20]

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	3b01      	subs	r3, #1
 800029a:	461a      	mov	r2, r3
 800029c:	68b9      	ldr	r1, [r7, #8]
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f7ff ffe9 	bl	8000276 <quickSort>
        quickSort(arr, pi + 1, high);
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	3301      	adds	r3, #1
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	4619      	mov	r1, r3
 80002ac:	68f8      	ldr	r0, [r7, #12]
 80002ae:	f7ff ffe2 	bl	8000276 <quickSort>
    }
}
 80002b2:	bf00      	nop
 80002b4:	3718      	adds	r7, #24
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <get_median>:

int get_median(int *values){
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
	int n = sizeof(values)/sizeof(values[0]);
 80002c2:	2301      	movs	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
    quickSort(values, 0, n-1);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	461a      	mov	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ffd1 	bl	8000276 <quickSort>
    return values[SIZE/2];
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68db      	ldr	r3, [r3, #12]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80002e4:	b09a      	sub	sp, #104	; 0x68
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	4b92      	ldr	r3, [pc, #584]	; (8000538 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	f040 81a4 	bne.w	8000640 <HAL_TIM_PeriodElapsedCallback+0x360>
    {
		if(iter < 10000){
 80002f8:	4b90      	ldr	r3, [pc, #576]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000300:	4293      	cmp	r3, r2
 8000302:	d806      	bhi.n	8000312 <HAL_TIM_PeriodElapsedCallback+0x32>
			iter++;
 8000304:	4b8d      	ldr	r3, [pc, #564]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	b29a      	uxth	r2, r3
 800030c:	4b8b      	ldr	r3, [pc, #556]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800030e:	801a      	strh	r2, [r3, #0]
			htim2.Instance->CCR2 = input;
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, input*4095/13197);
		}
	}
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
}
 8000310:	e196      	b.n	8000640 <HAL_TIM_PeriodElapsedCallback+0x360>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031c:	f002 ff30 	bl	8003180 <HAL_GPIO_WritePin>
			for(uint8_t i = 0; i<SIZE; i++){
 8000320:	2300      	movs	r3, #0
 8000322:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000326:	e01e      	b.n	8000366 <HAL_TIM_PeriodElapsedCallback+0x86>
				value0[i] = (int)adc_buf0[i];
 8000328:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800032c:	4a84      	ldr	r2, [pc, #528]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800032e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000332:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800033c:	440b      	add	r3, r1
 800033e:	f843 2c44 	str.w	r2, [r3, #-68]
				value1[i] = (int)adc_buf1[i];
 8000342:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000346:	4a7f      	ldr	r2, [pc, #508]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000348:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800034c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000356:	440b      	add	r3, r1
 8000358:	f843 2c60 	str.w	r2, [r3, #-96]
			for(uint8_t i = 0; i<SIZE; i++){
 800035c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000360:	3301      	adds	r3, #1
 8000362:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000366:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800036a:	2b06      	cmp	r3, #6
 800036c:	d9dc      	bls.n	8000328 <HAL_TIM_PeriodElapsedCallback+0x48>
			y[0] = get_median(value0);   y[0] *= 1075;  y[0] /= 10000;
 800036e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ffa1 	bl	80002ba <get_median>
 8000378:	4602      	mov	r2, r0
 800037a:	4b73      	ldr	r3, [pc, #460]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	4b72      	ldr	r3, [pc, #456]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f240 4233 	movw	r2, #1075	; 0x433
 8000386:	fb02 f303 	mul.w	r3, r2, r3
 800038a:	4a6f      	ldr	r2, [pc, #444]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800038c:	6013      	str	r3, [r2, #0]
 800038e:	4b6e      	ldr	r3, [pc, #440]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a6e      	ldr	r2, [pc, #440]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000394:	fb82 1203 	smull	r1, r2, r2, r3
 8000398:	1312      	asrs	r2, r2, #12
 800039a:	17db      	asrs	r3, r3, #31
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	4a6a      	ldr	r2, [pc, #424]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80003a0:	6013      	str	r3, [r2, #0]
			y[1] = get_median(value1);   y[1] *= 29500; y[1] /= 10000;
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ff87 	bl	80002ba <get_median>
 80003ac:	4602      	mov	r2, r0
 80003ae:	4b66      	ldr	r3, [pc, #408]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	4b65      	ldr	r3, [pc, #404]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	f247 323c 	movw	r2, #29500	; 0x733c
 80003ba:	fb02 f303 	mul.w	r3, r2, r3
 80003be:	4a62      	ldr	r2, [pc, #392]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80003c0:	6053      	str	r3, [r2, #4]
 80003c2:	4b61      	ldr	r3, [pc, #388]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	4a61      	ldr	r2, [pc, #388]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80003c8:	fb82 1203 	smull	r1, r2, r2, r3
 80003cc:	1312      	asrs	r2, r2, #12
 80003ce:	17db      	asrs	r3, r3, #31
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	4a5d      	ldr	r2, [pc, #372]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80003d4:	6053      	str	r3, [r2, #4]
			int x0_prev = x[0];
 80003d6:	4b5e      	ldr	r3, [pc, #376]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	65fb      	str	r3, [r7, #92]	; 0x5c
			int x1_prev = x[1];
 80003dc:	4b5c      	ldr	r3, [pc, #368]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	65bb      	str	r3, [r7, #88]	; 0x58
			x_est[0] = 97136*x0_prev - 978*x1_prev + 14878*u;    x_est[0] /= 100000;
 80003e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80003e4:	4a5b      	ldr	r2, [pc, #364]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80003e6:	fb02 f203 	mul.w	r2, r2, r3
 80003ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80003ec:	495a      	ldr	r1, [pc, #360]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80003ee:	fb01 f303 	mul.w	r3, r1, r3
 80003f2:	441a      	add	r2, r3
 80003f4:	4b59      	ldr	r3, [pc, #356]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f643 211e 	movw	r1, #14878	; 0x3a1e
 80003fc:	fb01 f303 	mul.w	r3, r1, r3
 8000400:	4413      	add	r3, r2
 8000402:	4a57      	ldr	r2, [pc, #348]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000404:	6013      	str	r3, [r2, #0]
 8000406:	4b56      	ldr	r3, [pc, #344]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a56      	ldr	r2, [pc, #344]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800040c:	fb82 1203 	smull	r1, r2, r2, r3
 8000410:	1352      	asrs	r2, r2, #13
 8000412:	17db      	asrs	r3, r3, #31
 8000414:	1ad3      	subs	r3, r2, r3
 8000416:	4a52      	ldr	r2, [pc, #328]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000418:	6013      	str	r3, [r2, #0]
			x_est[1] = 173187*x0_prev + 97046*x1_prev + 18083*u; x_est[1] /= 100000;
 800041a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800041c:	4a52      	ldr	r2, [pc, #328]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800041e:	fb02 f203 	mul.w	r2, r2, r3
 8000422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000424:	4951      	ldr	r1, [pc, #324]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000426:	fb01 f303 	mul.w	r3, r1, r3
 800042a:	441a      	add	r2, r3
 800042c:	4b4b      	ldr	r3, [pc, #300]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f244 61a3 	movw	r1, #18083	; 0x46a3
 8000434:	fb01 f303 	mul.w	r3, r1, r3
 8000438:	4413      	add	r3, r2
 800043a:	4a49      	ldr	r2, [pc, #292]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800043c:	6053      	str	r3, [r2, #4]
 800043e:	4b48      	ldr	r3, [pc, #288]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	4a48      	ldr	r2, [pc, #288]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000444:	fb82 1203 	smull	r1, r2, r2, r3
 8000448:	1352      	asrs	r2, r2, #13
 800044a:	17db      	asrs	r3, r3, #31
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	4a44      	ldr	r2, [pc, #272]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000450:	6053      	str	r3, [r2, #4]
			int alpha = 500;
 8000452:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000456:	657b      	str	r3, [r7, #84]	; 0x54
			int alpha_bar = 1000-alpha;
 8000458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800045a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800045e:	653b      	str	r3, [r7, #80]	; 0x50
			x[0] = alpha*y[0] + alpha_bar*x_est[0]; x[0] /= 1000;
 8000460:	4b39      	ldr	r3, [pc, #228]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000466:	fb02 f203 	mul.w	r2, r2, r3
 800046a:	4b3d      	ldr	r3, [pc, #244]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000470:	fb01 f303 	mul.w	r3, r1, r3
 8000474:	4413      	add	r3, r2
 8000476:	4a36      	ldr	r2, [pc, #216]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8000478:	6013      	str	r3, [r2, #0]
 800047a:	4b35      	ldr	r3, [pc, #212]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a3c      	ldr	r2, [pc, #240]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000480:	fb82 1203 	smull	r1, r2, r2, r3
 8000484:	1192      	asrs	r2, r2, #6
 8000486:	17db      	asrs	r3, r3, #31
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	4a31      	ldr	r2, [pc, #196]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800048c:	6013      	str	r3, [r2, #0]
			x[1] = alpha*y[1] + alpha_bar*x_est[1]; x[1] /= 1000;
 800048e:	4b2e      	ldr	r3, [pc, #184]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000494:	fb02 f203 	mul.w	r2, r2, r3
 8000498:	4b31      	ldr	r3, [pc, #196]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800049e:	fb01 f303 	mul.w	r3, r1, r3
 80004a2:	4413      	add	r3, r2
 80004a4:	4a2a      	ldr	r2, [pc, #168]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80004a6:	6053      	str	r3, [r2, #4]
 80004a8:	4b29      	ldr	r3, [pc, #164]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4a30      	ldr	r2, [pc, #192]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80004ae:	fb82 1203 	smull	r1, r2, r2, r3
 80004b2:	1192      	asrs	r2, r2, #6
 80004b4:	17db      	asrs	r3, r3, #31
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	4a25      	ldr	r2, [pc, #148]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80004ba:	6053      	str	r3, [r2, #4]
			int dx0 = x[0] - xs0;
 80004bc:	4b24      	ldr	r3, [pc, #144]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2232      	movs	r2, #50	; 0x32
 80004c2:	1a9b      	subs	r3, r3, r2
 80004c4:	64fb      	str	r3, [r7, #76]	; 0x4c
			int dx1 = x[1] - xs1;
 80004c6:	4b22      	ldr	r3, [pc, #136]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	64bb      	str	r3, [r7, #72]	; 0x48
			u = -K[0]*dx0 - K[1]*dx1;
 80004d2:	4b28      	ldr	r3, [pc, #160]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	425b      	negs	r3, r3
 80004d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80004da:	fb02 f203 	mul.w	r2, r2, r3
 80004de:	4b25      	ldr	r3, [pc, #148]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80004e4:	fb01 f303 	mul.w	r3, r1, r3
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80004ec:	6013      	str	r3, [r2, #0]
			if(!settled){
 80004ee:	4b22      	ldr	r3, [pc, #136]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	f083 0301 	eor.w	r3, r3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d041      	beq.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				int diff = x[0]-x0_prev;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	643b      	str	r3, [r7, #64]	; 0x40
				if(diff > -100 && diff < 100){
 8000506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000508:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800050c:	db10      	blt.n	8000530 <HAL_TIM_PeriodElapsedCallback+0x250>
 800050e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000510:	2b63      	cmp	r3, #99	; 0x63
 8000512:	dc0d      	bgt.n	8000530 <HAL_TIM_PeriodElapsedCallback+0x250>
					settling_iter++;
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	3301      	adds	r3, #1
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800051e:	701a      	strb	r2, [r3, #0]
					if(settling_iter == 100){
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b64      	cmp	r3, #100	; 0x64
 8000526:	d14e      	bne.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0x2e6>
						settled = true;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
					if(settling_iter == 100){
 800052e:	e04a      	b.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0x2e6>
					settling_iter = 0;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	e046      	b.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0x2e6>
 8000538:	200000e0 	.word	0x200000e0
 800053c:	20000038 	.word	0x20000038
 8000540:	20000264 	.word	0x20000264
 8000544:	20000120 	.word	0x20000120
 8000548:	20000044 	.word	0x20000044
 800054c:	68db8bad 	.word	0x68db8bad
 8000550:	2000003c 	.word	0x2000003c
 8000554:	00017b70 	.word	0x00017b70
 8000558:	fffffc2e 	.word	0xfffffc2e
 800055c:	20000034 	.word	0x20000034
 8000560:	2000004c 	.word	0x2000004c
 8000564:	14f8b589 	.word	0x14f8b589
 8000568:	0002a483 	.word	0x0002a483
 800056c:	00017b16 	.word	0x00017b16
 8000570:	10624dd3 	.word	0x10624dd3
 8000574:	20000000 	.word	0x20000000
 8000578:	20000060 	.word	0x20000060
 800057c:	20000061 	.word	0x20000061
				int error = 5000-y[1];
 8000580:	4b32      	ldr	r3, [pc, #200]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000588:	3308      	adds	r3, #8
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
				integral += error;
 800058c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800058e:	4619      	mov	r1, r3
 8000590:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000594:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000596:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800059a:	eb1b 0301 	adds.w	r3, fp, r1
 800059e:	eb4c 0402 	adc.w	r4, ip, r2
 80005a2:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80005a4:	e9c2 3400 	strd	r3, r4, [r2]
				u += 10*integral;
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80005aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80005ae:	461a      	mov	r2, r3
 80005b0:	4613      	mov	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80005c4:	601a      	str	r2, [r3, #0]
			u += us;  u /= 1000;
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a23      	ldr	r2, [pc, #140]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80005cc:	4413      	add	r3, r2
 80005ce:	4a21      	ldr	r2, [pc, #132]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a21      	ldr	r2, [pc, #132]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80005d8:	fb82 1203 	smull	r1, r2, r2, r3
 80005dc:	1192      	asrs	r2, r2, #6
 80005de:	17db      	asrs	r3, r3, #31
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80005e4:	6013      	str	r3, [r2, #0]
			int input = u*COUNTER_PERIOD/1000;
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4613      	mov	r3, r2
 80005ec:	015b      	lsls	r3, r3, #5
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	01da      	lsls	r2, r3, #7
 80005f2:	4413      	add	r3, r2
 80005f4:	4a19      	ldr	r2, [pc, #100]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80005f6:	fb82 1203 	smull	r1, r2, r2, r3
 80005fa:	1192      	asrs	r2, r2, #6
 80005fc:	17db      	asrs	r3, r3, #31
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	663b      	str	r3, [r7, #96]	; 0x60
			if(input < 0) input = 0;
 8000602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000604:	2b00      	cmp	r3, #0
 8000606:	da01      	bge.n	800060c <HAL_TIM_PeriodElapsedCallback+0x32c>
 8000608:	2300      	movs	r3, #0
 800060a:	663b      	str	r3, [r7, #96]	; 0x60
			if(input > COUNTER_PERIOD) input = COUNTER_PERIOD;
 800060c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800060e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000612:	db02      	blt.n	800061a <HAL_TIM_PeriodElapsedCallback+0x33a>
 8000614:	f640 739f 	movw	r3, #3999	; 0xf9f
 8000618:	663b      	str	r3, [r7, #96]	; 0x60
			htim2.Instance->CCR2 = input;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000620:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, input*4095/13197);
 8000622:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000624:	4613      	mov	r3, r2
 8000626:	031b      	lsls	r3, r3, #12
 8000628:	1a9b      	subs	r3, r3, r2
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800062c:	fb82 1203 	smull	r1, r2, r2, r3
 8000630:	1292      	asrs	r2, r2, #10
 8000632:	17db      	asrs	r3, r3, #31
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	480b      	ldr	r0, [pc, #44]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800063c:	f002 f8c0 	bl	80027c0 <HAL_DAC_SetValue>
}
 8000640:	bf00      	nop
 8000642:	3768      	adds	r7, #104	; 0x68
 8000644:	46bd      	mov	sp, r7
 8000646:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800064a:	bf00      	nop
 800064c:	20000044 	.word	0x20000044
 8000650:	20000058 	.word	0x20000058
 8000654:	20000034 	.word	0x20000034
 8000658:	000527ec 	.word	0x000527ec
 800065c:	10624dd3 	.word	0x10624dd3
 8000660:	200001dc 	.word	0x200001dc
 8000664:	13dd291b 	.word	0x13dd291b
 8000668:	20000068 	.word	0x20000068

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fd7a 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f83a 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 fa9e 	bl	8000bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 800067c:	f000 fa76 	bl	8000b6c <MX_DMA_Init>
  MX_ADC1_Init();
 8000680:	f000 f8ba 	bl	80007f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000684:	f000 f932 	bl	80008ec <MX_ADC2_Init>
  MX_DAC1_Init();
 8000688:	f000 f996 	bl	80009b8 <MX_DAC1_Init>
  MX_TIM2_Init();
 800068c:	f000 f9c6 	bl	8000a1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000690:	f000 fa1e 	bl	8000ad0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000694:	2100      	movs	r1, #0
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <main+0x64>)
 8000698:	f002 f845 	bl	8002726 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800069c:	2110      	movs	r1, #16
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <main+0x64>)
 80006a0:	f002 f841 	bl	8002726 <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf0, SIZE);
 80006a4:	2207      	movs	r2, #7
 80006a6:	490b      	ldr	r1, [pc, #44]	; (80006d4 <main+0x68>)
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <main+0x6c>)
 80006aa:	f001 f913 	bl	80018d4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf1, SIZE);
 80006ae:	2207      	movs	r2, #7
 80006b0:	490a      	ldr	r1, [pc, #40]	; (80006dc <main+0x70>)
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <main+0x74>)
 80006b4:	f001 f90e 	bl	80018d4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 80006b8:	480a      	ldr	r0, [pc, #40]	; (80006e4 <main+0x78>)
 80006ba:	f004 f86b 	bl	8004794 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80006be:	2104      	movs	r1, #4
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <main+0x7c>)
 80006c2:	f004 f8bd 	bl	8004840 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <main+0x7c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <main+0x62>
 80006d0:	20000068 	.word	0x20000068
 80006d4:	20000264 	.word	0x20000264
 80006d8:	2000007c 	.word	0x2000007c
 80006dc:	20000120 	.word	0x20000120
 80006e0:	20000130 	.word	0x20000130
 80006e4:	200000e0 	.word	0x200000e0
 80006e8:	200001dc 	.word	0x200001dc

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0b8      	sub	sp, #224	; 0xe0
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006f6:	2244      	movs	r2, #68	; 0x44
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 f90c 	bl	8005918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2288      	movs	r2, #136	; 0x88
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f005 f8fe 	bl	8005918 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072a:	2310      	movs	r3, #16
 800072c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000736:	2302      	movs	r3, #2
 8000738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000742:	230a      	movs	r3, #10
 8000744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000748:	2307      	movs	r3, #7
 800074a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fd8a 	bl	8003278 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800076a:	f000 fa8f 	bl	8000c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2303      	movs	r3, #3
 8000776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800078c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000790:	2104      	movs	r1, #4
 8000792:	4618      	mov	r0, r3
 8000794:	f003 f956 	bl	8003a44 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800079e:	f000 fa75 	bl	8000c8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007a6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007ac:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80007ae:	2302      	movs	r3, #2
 80007b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80007b6:	2308      	movs	r3, #8
 80007b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80007ba:	2307      	movs	r3, #7
 80007bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80007c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007ca:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fb04 	bl	8003ddc <HAL_RCCEx_PeriphCLKConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007da:	f000 fa57 	bl	8000c8c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e2:	f002 fcf3 	bl	80031cc <HAL_PWREx_ControlVoltageScaling>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80007ec:	f000 fa4e 	bl	8000c8c <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	37e0      	adds	r7, #224	; 0xe0
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
 8000818:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800081a:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <MX_ADC1_Init+0xe8>)
 800081c:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <MX_ADC1_Init+0xec>)
 800081e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <MX_ADC1_Init+0xe8>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_ADC1_Init+0xe8>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000838:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_ADC1_Init+0xe8>)
 800083a:	2204      	movs	r2, #4
 800083c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <MX_ADC1_Init+0xe8>)
 8000840:	2200      	movs	r2, #0
 8000842:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_ADC1_Init+0xe8>)
 8000846:	2201      	movs	r2, #1
 8000848:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <MX_ADC1_Init+0xe8>)
 800084c:	2201      	movs	r2, #1
 800084e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_ADC1_Init+0xe8>)
 8000852:	2200      	movs	r2, #0
 8000854:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_ADC1_Init+0xe8>)
 800085a:	2201      	movs	r2, #1
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_ADC1_Init+0xe8>)
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_ADC1_Init+0xe8>)
 8000866:	2200      	movs	r2, #0
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_ADC1_Init+0xe8>)
 800086c:	2201      	movs	r2, #1
 800086e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_ADC1_Init+0xe8>)
 8000874:	2200      	movs	r2, #0
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_ADC1_Init+0xe8>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000880:	4817      	ldr	r0, [pc, #92]	; (80008e0 <MX_ADC1_Init+0xe8>)
 8000882:	f000 fed3 	bl	800162c <HAL_ADC_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800088c:	f000 f9fe 	bl	8000c8c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_ADC1_Init+0xe8>)
 800089c:	f001 fd64 	bl	8002368 <HAL_ADCEx_MultiModeConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80008a6:	f000 f9f1 	bl	8000c8c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_ADC1_Init+0xf0>)
 80008ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ae:	2306      	movs	r3, #6
 80008b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80008b2:	2305      	movs	r3, #5
 80008b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b6:	237f      	movs	r3, #127	; 0x7f
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <MX_ADC1_Init+0xe8>)
 80008c8:	f001 f8d6 	bl	8001a78 <HAL_ADC_ConfigChannel>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80008d2:	f000 f9db 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000130 	.word	0x20000130
 80008e4:	50040000 	.word	0x50040000
 80008e8:	14f00020 	.word	0x14f00020

080008ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <MX_ADC2_Init+0xc0>)
 8000904:	4a2a      	ldr	r2, [pc, #168]	; (80009b0 <MX_ADC2_Init+0xc4>)
 8000906:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <MX_ADC2_Init+0xc0>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <MX_ADC2_Init+0xc0>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <MX_ADC2_Init+0xc0>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800091a:	4b24      	ldr	r3, [pc, #144]	; (80009ac <MX_ADC2_Init+0xc0>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_ADC2_Init+0xc0>)
 8000922:	2204      	movs	r2, #4
 8000924:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_ADC2_Init+0xc0>)
 8000928:	2200      	movs	r2, #0
 800092a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_ADC2_Init+0xc0>)
 800092e:	2201      	movs	r2, #1
 8000930:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_ADC2_Init+0xc0>)
 8000934:	2201      	movs	r2, #1
 8000936:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_ADC2_Init+0xc0>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8000940:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_ADC2_Init+0xc0>)
 8000942:	2201      	movs	r2, #1
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_ADC2_Init+0xc0>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_ADC2_Init+0xc0>)
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_ADC2_Init+0xc0>)
 8000954:	2201      	movs	r2, #1
 8000956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_ADC2_Init+0xc0>)
 800095c:	2200      	movs	r2, #0
 800095e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_ADC2_Init+0xc0>)
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <MX_ADC2_Init+0xc0>)
 800096a:	f000 fe5f 	bl	800162c <HAL_ADC_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000974:	f000 f98a 	bl	8000c8c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_ADC2_Init+0xc8>)
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097c:	2306      	movs	r3, #6
 800097e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000980:	2305      	movs	r3, #5
 8000982:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000984:	237f      	movs	r3, #127	; 0x7f
 8000986:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000988:	2304      	movs	r3, #4
 800098a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_ADC2_Init+0xc0>)
 8000996:	f001 f86f 	bl	8001a78 <HAL_ADC_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80009a0:	f000 f974 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000007c 	.word	0x2000007c
 80009b0:	50040100 	.word	0x50040100
 80009b4:	19200040 	.word	0x19200040

080009b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2224      	movs	r2, #36	; 0x24
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f004 ffa7 	bl	8005918 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_DAC1_Init+0x5c>)
 80009cc:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_DAC1_Init+0x60>)
 80009ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009d0:	4810      	ldr	r0, [pc, #64]	; (8000a14 <MX_DAC1_Init+0x5c>)
 80009d2:	f001 fe86 	bl	80026e2 <HAL_DAC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009dc:	f000 f956 	bl	8000c8c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_DAC1_Init+0x5c>)
 80009fc:	f001 ff05 	bl	800280a <HAL_DAC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f941 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000068 	.word	0x20000068
 8000a18:	40007400 	.word	0x40007400

08000a1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	615a      	str	r2, [r3, #20]
 8000a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_TIM2_Init+0xb0>)
 8000a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_TIM2_Init+0xb0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_TIM2_Init+0xb0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_TIM2_Init+0xb0>)
 8000a56:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000a5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_TIM2_Init+0xb0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_TIM2_Init+0xb0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a68:	4818      	ldr	r0, [pc, #96]	; (8000acc <MX_TIM2_Init+0xb0>)
 8000a6a:	f003 febd 	bl	80047e8 <HAL_TIM_PWM_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a74:	f000 f90a 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4811      	ldr	r0, [pc, #68]	; (8000acc <MX_TIM2_Init+0xb0>)
 8000a88:	f004 fe7c 	bl	8005784 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a92:	f000 f8fb 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a96:	2360      	movs	r3, #96	; 0x60
 8000a98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4807      	ldr	r0, [pc, #28]	; (8000acc <MX_TIM2_Init+0xb0>)
 8000aae:	f004 f83f 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ab8:	f000 f8e8 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <MX_TIM2_Init+0xb0>)
 8000abe:	f000 fa71 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200001dc 	.word	0x200001dc

08000ad0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_TIM3_Init+0x94>)
 8000af0:	4a1d      	ldr	r2, [pc, #116]	; (8000b68 <MX_TIM3_Init+0x98>)
 8000af2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_TIM3_Init+0x94>)
 8000af6:	224f      	movs	r2, #79	; 0x4f
 8000af8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_TIM3_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_TIM3_Init+0x94>)
 8000b02:	2263      	movs	r2, #99	; 0x63
 8000b04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_TIM3_Init+0x94>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_TIM3_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b12:	4814      	ldr	r0, [pc, #80]	; (8000b64 <MX_TIM3_Init+0x94>)
 8000b14:	f003 fe12 	bl	800473c <HAL_TIM_Base_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b1e:	f000 f8b5 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_TIM3_Init+0x94>)
 8000b30:	f004 f916 	bl	8004d60 <HAL_TIM_ConfigClockSource>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000b3a:	f000 f8a7 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <MX_TIM3_Init+0x94>)
 8000b4c:	f004 fe1a 	bl	8005784 <HAL_TIMEx_MasterConfigSynchronization>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000b56:	f000 f899 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000e0 	.word	0x200000e0
 8000b68:	40000400 	.word	0x40000400

08000b6c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_DMA_Init+0x48>)
 8000b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <MX_DMA_Init+0x48>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <MX_DMA_Init+0x48>)
 8000b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	200b      	movs	r0, #11
 8000b90:	f001 fd71 	bl	8002676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b94:	200b      	movs	r0, #11
 8000b96:	f001 fd8a 	bl	80026ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	200c      	movs	r0, #12
 8000ba0:	f001 fd69 	bl	8002676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ba4:	200c      	movs	r0, #12
 8000ba6:	f001 fd82 	bl	80026ae <HAL_NVIC_EnableIRQ>

}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4a25      	ldr	r2, [pc, #148]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a1f      	ldr	r2, [pc, #124]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_GPIO_Init+0xc8>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f002 faa2 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_GPIO_Init+0xd0>)
 8000c52:	f002 f8ed 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f002 f8dd 	bl	8002e30 <HAL_GPIO_Init>

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000
 8000c84:	10210000 	.word	0x10210000
 8000c88:	48000800 	.word	0x48000800

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6613      	str	r3, [r2, #96]	; 0x60
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a5f      	ldr	r2, [pc, #380]	; (8000e80 <HAL_ADC_MspInit+0x19c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d159      	bne.n	8000dba <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000d06:	4b5f      	ldr	r3, [pc, #380]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	4a5d      	ldr	r2, [pc, #372]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000d10:	4b5c      	ldr	r3, [pc, #368]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d10b      	bne.n	8000d30 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000d18:	4b5b      	ldr	r3, [pc, #364]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	4a5a      	ldr	r2, [pc, #360]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000d1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d24:	4b58      	ldr	r3, [pc, #352]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	4b55      	ldr	r3, [pc, #340]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d34:	4a54      	ldr	r2, [pc, #336]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3c:	4b52      	ldr	r3, [pc, #328]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d4c:	230b      	movs	r3, #11
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f002 f867 	bl	8002e30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d62:	4b4a      	ldr	r3, [pc, #296]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000d64:	4a4a      	ldr	r2, [pc, #296]	; (8000e90 <HAL_ADC_MspInit+0x1ac>)
 8000d66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d68:	4b48      	ldr	r3, [pc, #288]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d74:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d7a:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d80:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d86:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d88:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d90:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000d92:	2220      	movs	r2, #32
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d96:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d9c:	483b      	ldr	r0, [pc, #236]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000d9e:	f001 fe4f 	bl	8002a40 <HAL_DMA_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000da8:	f7ff ff70 	bl	8000c8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a37      	ldr	r2, [pc, #220]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000db0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000db2:	4a36      	ldr	r2, [pc, #216]	; (8000e8c <HAL_ADC_MspInit+0x1a8>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000db8:	e05d      	b.n	8000e76 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a35      	ldr	r2, [pc, #212]	; (8000e94 <HAL_ADC_MspInit+0x1b0>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d158      	bne.n	8000e76 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000dc4:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	4a2e      	ldr	r2, [pc, #184]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000dcc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <HAL_ADC_MspInit+0x1a0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d10b      	bne.n	8000dee <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a2b      	ldr	r2, [pc, #172]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000ddc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a25      	ldr	r2, [pc, #148]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <HAL_ADC_MspInit+0x1a4>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1c:	f002 f808 	bl	8002e30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_ADC_MspInit+0x1b8>)
 8000e24:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e44:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e4c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e50:	2220      	movs	r2, #32
 8000e52:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e5a:	480f      	ldr	r0, [pc, #60]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e5c:	f001 fdf0 	bl	8002a40 <HAL_DMA_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8000e66:	f7ff ff11 	bl	8000c8c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e70:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <HAL_ADC_MspInit+0x1b4>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e76:	bf00      	nop
 8000e78:	3730      	adds	r7, #48	; 0x30
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	50040000 	.word	0x50040000
 8000e84:	20000064 	.word	0x20000064
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	20000194 	.word	0x20000194
 8000e90:	40020008 	.word	0x40020008
 8000e94:	50040100 	.word	0x50040100
 8000e98:	2000021c 	.word	0x2000021c
 8000e9c:	4002001c 	.word	0x4002001c

08000ea0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <HAL_DAC_MspInit+0x74>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d124      	bne.n	8000f0c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000ec8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ef2:	2310      	movs	r3, #16
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f001 ff92 	bl	8002e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40007400 	.word	0x40007400
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2c:	d10b      	bne.n	8000f46 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_TIM_PWM_MspInit+0x38>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_TIM_PWM_MspInit+0x38>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_TIM_PWM_MspInit+0x38>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_TIM_Base_MspInit+0x44>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d113      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_TIM_Base_MspInit+0x48>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	201d      	movs	r0, #29
 8000f88:	f001 fb75 	bl	8002676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f8c:	201d      	movs	r0, #29
 8000f8e:	f001 fb8e 	bl	80026ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40000400 	.word	0x40000400
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc4:	d11b      	bne.n	8000ffe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_TIM_MspPostInit+0x64>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <HAL_TIM_MspPostInit+0x64>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_TIM_MspPostInit+0x64>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <HAL_TIM_MspPostInit+0x68>)
 8000ffa:	f001 ff19 	bl	8002e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <MemManage_Handler+0x4>

0800102a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <UsageFault_Handler+0x4>

08001036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001064:	f000 f8da 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}

0800106c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <DMA1_Channel1_IRQHandler+0x10>)
 8001072:	f001 fdfd 	bl	8002c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000194 	.word	0x20000194

08001080 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <DMA1_Channel2_IRQHandler+0x10>)
 8001086:	f001 fdf3 	bl	8002c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000021c 	.word	0x2000021c

08001094 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <TIM3_IRQHandler+0x10>)
 800109a:	f003 fc29 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000e0 	.word	0x200000e0

080010a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <SystemInit+0x64>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a16      	ldr	r2, [pc, #88]	; (800110c <SystemInit+0x64>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <SystemInit+0x68>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a13      	ldr	r2, [pc, #76]	; (8001110 <SystemInit+0x68>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <SystemInit+0x68>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <SystemInit+0x68>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <SystemInit+0x68>)
 80010d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <SystemInit+0x68>)
 80010e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <SystemInit+0x68>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a09      	ldr	r2, [pc, #36]	; (8001110 <SystemInit+0x68>)
 80010ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <SystemInit+0x68>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <SystemInit+0x64>)
 80010fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	40021000 	.word	0x40021000

08001114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800114c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001118:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800111a:	e003      	b.n	8001124 <LoopCopyDataInit>

0800111c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800111e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001120:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001122:	3104      	adds	r1, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001128:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800112a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800112c:	d3f6      	bcc.n	800111c <CopyDataInit>
	ldr	r2, =_sbss
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001130:	e002      	b.n	8001138 <LoopFillZerobss>

08001132 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001132:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001134:	f842 3b04 	str.w	r3, [r2], #4

08001138 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <LoopForever+0x16>)
	cmp	r2, r3
 800113a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800113c:	d3f9      	bcc.n	8001132 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800113e:	f7ff ffb3 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001142:	f004 fbc5 	bl	80058d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001146:	f7ff fa91 	bl	800066c <main>

0800114a <LoopForever>:

LoopForever:
    b LoopForever
 800114a:	e7fe      	b.n	800114a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800114c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001150:	08005988 	.word	0x08005988
	ldr	r0, =_sdata
 8001154:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001158:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 800115c:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001160:	20000278 	.word	0x20000278

08001164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_2_IRQHandler>
	...

08001168 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_Init+0x3c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <HAL_Init+0x3c>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117e:	2003      	movs	r0, #3
 8001180:	f001 fa6e 	bl	8002660 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001184:	2000      	movs	r0, #0
 8001186:	f000 f80f 	bl	80011a8 <HAL_InitTick>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	e001      	b.n	800119a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001196:	f7ff fd81 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800119a:	79fb      	ldrb	r3, [r7, #7]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40022000 	.word	0x40022000

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_InitTick+0x68>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d022      	beq.n	8001202 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_InitTick+0x6c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_InitTick+0x68>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fa7a 	bl	80026ca <HAL_SYSTICK_Config>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10f      	bne.n	80011fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	d809      	bhi.n	80011f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e2:	2200      	movs	r2, #0
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ea:	f001 fa44 	bl	8002676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_InitTick+0x70>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e007      	b.n	8001206 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	e004      	b.n	8001206 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e001      	b.n	8001206 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000010 	.word	0x20000010
 8001214:	20000008 	.word	0x20000008
 8001218:	2000000c 	.word	0x2000000c

0800121c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_IncTick+0x1c>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_IncTick+0x20>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4413      	add	r3, r2
 800122a:	4a03      	ldr	r2, [pc, #12]	; (8001238 <HAL_IncTick+0x1c>)
 800122c:	6013      	str	r3, [r2, #0]
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000274 	.word	0x20000274
 800123c:	20000010 	.word	0x20000010

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000274 	.word	0x20000274

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d004      	beq.n	800127c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_Delay+0x40>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4413      	add	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127c:	bf00      	nop
 800127e:	f7ff ffdf 	bl	8001240 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	429a      	cmp	r2, r3
 800128c:	d8f7      	bhi.n	800127e <HAL_Delay+0x26>
  {
  }
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000010 	.word	0x20000010

0800129c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	609a      	str	r2, [r3, #8]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001304:	b490      	push	{r4, r7}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3360      	adds	r3, #96	; 0x60
 8001316:	461a      	mov	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001320:	6822      	ldr	r2, [r4, #0]
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <LL_ADC_SetOffset+0x40>)
 8001324:	4013      	ands	r3, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	4313      	orrs	r3, r2
 8001332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001336:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bc90      	pop	{r4, r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	03fff000 	.word	0x03fff000

08001348 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3360      	adds	r3, #96	; 0x60
 8001356:	461a      	mov	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bc90      	pop	{r4, r7}
 800136e:	4770      	bx	lr

08001370 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001370:	b490      	push	{r4, r7}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3360      	adds	r3, #96	; 0x60
 8001380:	461a      	mov	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4313      	orrs	r3, r2
 8001394:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bc90      	pop	{r4, r7}
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013c6:	b490      	push	{r4, r7}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3330      	adds	r3, #48	; 0x30
 80013d6:	461a      	mov	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	4413      	add	r3, r2
 80013e4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80013e6:	6822      	ldr	r2, [r4, #0]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	211f      	movs	r1, #31
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	401a      	ands	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0e9b      	lsrs	r3, r3, #26
 80013fc:	f003 011f 	and.w	r1, r3, #31
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bc90      	pop	{r4, r7}
 8001416:	4770      	bx	lr

08001418 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001418:	b490      	push	{r4, r7}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3314      	adds	r3, #20
 8001428:	461a      	mov	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	0e5b      	lsrs	r3, r3, #25
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001438:	6822      	ldr	r2, [r4, #0]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	0d1b      	lsrs	r3, r3, #20
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	2107      	movs	r1, #7
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	401a      	ands	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	0d1b      	lsrs	r3, r3, #20
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bc90      	pop	{r4, r7}
 8001466:	4770      	bx	lr

08001468 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0318 	and.w	r3, r3, #24
 800148a:	4908      	ldr	r1, [pc, #32]	; (80014ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800148c:	40d9      	lsrs	r1, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	400b      	ands	r3, r1
 8001492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001496:	431a      	orrs	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	0007ffff 	.word	0x0007ffff

080014b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 031f 	and.w	r3, r3, #31
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6093      	str	r3, [r2, #8]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001504:	d101      	bne.n	800150a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001528:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800152c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001554:	d101      	bne.n	800155a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800157c:	f043 0201 	orr.w	r2, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <LL_ADC_IsEnabled+0x18>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <LL_ADC_IsEnabled+0x1a>
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ca:	f043 0204 	orr.w	r2, r3, #4
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d101      	bne.n	80015f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b08      	cmp	r3, #8
 8001616:	d101      	bne.n	800161c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e134      	b.n	80018b0 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001650:	2b00      	cmp	r3, #0
 8001652:	d109      	bne.n	8001668 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fb45 	bl	8000ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff3f 	bl	80014f0 <LL_ADC_IsDeepPowerDownEnabled>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff25 	bl	80014cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff5a 	bl	8001540 <LL_ADC_IsInternalRegulatorEnabled>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d113      	bne.n	80016ba <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff3e 	bl	8001518 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800169c:	4b86      	ldr	r3, [pc, #536]	; (80018b8 <HAL_ADC_Init+0x28c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	099b      	lsrs	r3, r3, #6
 80016a2:	4a86      	ldr	r2, [pc, #536]	; (80018bc <HAL_ADC_Init+0x290>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016ac:	e002      	b.n	80016b4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f9      	bne.n	80016ae <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff3e 	bl	8001540 <LL_ADC_IsInternalRegulatorEnabled>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10d      	bne.n	80016e6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ce:	f043 0210 	orr.w	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff77 	bl	80015de <LL_ADC_REG_IsConversionOngoing>
 80016f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 80cf 	bne.w	800189e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 80cb 	bne.w	800189e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001710:	f043 0202 	orr.w	r2, r3, #2
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff37 	bl	8001590 <LL_ADC_IsEnabled>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d115      	bne.n	8001754 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001728:	4865      	ldr	r0, [pc, #404]	; (80018c0 <HAL_ADC_Init+0x294>)
 800172a:	f7ff ff31 	bl	8001590 <LL_ADC_IsEnabled>
 800172e:	4604      	mov	r4, r0
 8001730:	4864      	ldr	r0, [pc, #400]	; (80018c4 <HAL_ADC_Init+0x298>)
 8001732:	f7ff ff2d 	bl	8001590 <LL_ADC_IsEnabled>
 8001736:	4603      	mov	r3, r0
 8001738:	431c      	orrs	r4, r3
 800173a:	4863      	ldr	r0, [pc, #396]	; (80018c8 <HAL_ADC_Init+0x29c>)
 800173c:	f7ff ff28 	bl	8001590 <LL_ADC_IsEnabled>
 8001740:	4603      	mov	r3, r0
 8001742:	4323      	orrs	r3, r4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4619      	mov	r1, r3
 800174e:	485f      	ldr	r0, [pc, #380]	; (80018cc <HAL_ADC_Init+0x2a0>)
 8001750:	f7ff fda4 	bl	800129c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e5b      	ldrb	r3, [r3, #25]
 8001758:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800175e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001764:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800176a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001772:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d106      	bne.n	8001790 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	3b01      	subs	r3, #1
 8001788:	045b      	lsls	r3, r3, #17
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	d009      	beq.n	80017ac <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_ADC_Init+0x2a4>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	430b      	orrs	r3, r1
 80017be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff0a 	bl	80015de <LL_ADC_REG_IsConversionOngoing>
 80017ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff17 	bl	8001604 <LL_ADC_INJ_IsConversionOngoing>
 80017d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13d      	bne.n	800185a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d13a      	bne.n	800185a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017e8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017f0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001800:	f023 0302 	bic.w	r3, r3, #2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	69b9      	ldr	r1, [r7, #24]
 800180a:	430b      	orrs	r3, r1
 800180c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001814:	2b01      	cmp	r3, #1
 8001816:	d118      	bne.n	800184a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001822:	f023 0304 	bic.w	r3, r3, #4
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800182e:	4311      	orrs	r1, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001834:	4311      	orrs	r1, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800183a:	430a      	orrs	r2, r1
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	e007      	b.n	800185a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0201 	bic.w	r2, r2, #1
 8001858:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10c      	bne.n	800187c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f023 010f 	bic.w	r1, r3, #15
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	1e5a      	subs	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	631a      	str	r2, [r3, #48]	; 0x30
 800187a:	e007      	b.n	800188c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 020f 	bic.w	r2, r2, #15
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	f023 0303 	bic.w	r3, r3, #3
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
 800189c:	e007      	b.n	80018ae <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a2:	f043 0210 	orr.w	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3724      	adds	r7, #36	; 0x24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd90      	pop	{r4, r7, pc}
 80018b8:	20000008 	.word	0x20000008
 80018bc:	053e2d63 	.word	0x053e2d63
 80018c0:	50040000 	.word	0x50040000
 80018c4:	50040100 	.word	0x50040100
 80018c8:	50040200 	.word	0x50040200
 80018cc:	50040300 	.word	0x50040300
 80018d0:	fff0c007 	.word	0xfff0c007

080018d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018e0:	4850      	ldr	r0, [pc, #320]	; (8001a24 <HAL_ADC_Start_DMA+0x150>)
 80018e2:	f7ff fde5 	bl	80014b0 <LL_ADC_GetMultimode>
 80018e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fe76 	bl	80015de <LL_ADC_REG_IsConversionOngoing>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f040 808e 	bne.w	8001a16 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_ADC_Start_DMA+0x34>
 8001904:	2302      	movs	r3, #2
 8001906:	e089      	b.n	8001a1c <HAL_ADC_Start_DMA+0x148>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2b05      	cmp	r3, #5
 800191a:	d002      	beq.n	8001922 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	2b09      	cmp	r3, #9
 8001920:	d172      	bne.n	8001a08 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 fc0c 	bl	8002140 <ADC_Enable>
 8001928:	4603      	mov	r3, r0
 800192a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d165      	bne.n	80019fe <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a37      	ldr	r2, [pc, #220]	; (8001a28 <HAL_ADC_Start_DMA+0x154>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d002      	beq.n	8001956 <HAL_ADC_Start_DMA+0x82>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	e000      	b.n	8001958 <HAL_ADC_Start_DMA+0x84>
 8001956:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <HAL_ADC_Start_DMA+0x158>)
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	4293      	cmp	r3, r2
 800195e:	d002      	beq.n	8001966 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	f023 0206 	bic.w	r2, r3, #6
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	659a      	str	r2, [r3, #88]	; 0x58
 800198a:	e002      	b.n	8001992 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <HAL_ADC_Start_DMA+0x15c>)
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <HAL_ADC_Start_DMA+0x160>)
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <HAL_ADC_Start_DMA+0x164>)
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	221c      	movs	r2, #28
 80019b0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0210 	orr.w	r2, r2, #16
 80019c8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0201 	orr.w	r2, r2, #1
 80019d8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3340      	adds	r3, #64	; 0x40
 80019e4:	4619      	mov	r1, r3
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f001 f8e1 	bl	8002bb0 <HAL_DMA_Start_IT>
 80019ee:	4603      	mov	r3, r0
 80019f0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fddd 	bl	80015b6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80019fc:	e00d      	b.n	8001a1a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001a06:	e008      	b.n	8001a1a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a14:	e001      	b.n	8001a1a <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
 8001a18:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	50040300 	.word	0x50040300
 8001a28:	50040100 	.word	0x50040100
 8001a2c:	50040000 	.word	0x50040000
 8001a30:	080021f5 	.word	0x080021f5
 8001a34:	080022cd 	.word	0x080022cd
 8001a38:	080022e9 	.word	0x080022e9

08001a3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b0a6      	sub	sp, #152	; 0x98
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x22>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e348      	b.n	800212c <HAL_ADC_ConfigChannel+0x6b4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fd99 	bl	80015de <LL_ADC_REG_IsConversionOngoing>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8329 	bne.w	8002106 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d824      	bhi.n	8001b06 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	3b02      	subs	r3, #2
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d81b      	bhi.n	8001afe <HAL_ADC_ConfigChannel+0x86>
 8001ac6:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <HAL_ADC_ConfigChannel+0x54>)
 8001ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001acc:	08001add 	.word	0x08001add
 8001ad0:	08001ae5 	.word	0x08001ae5
 8001ad4:	08001aed 	.word	0x08001aed
 8001ad8:	08001af5 	.word	0x08001af5
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	220c      	movs	r2, #12
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	e011      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2212      	movs	r2, #18
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	e00d      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2218      	movs	r2, #24
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	e009      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	e004      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2206      	movs	r2, #6
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	e000      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001b06:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	f7ff fc56 	bl	80013c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fd5d 	bl	80015de <LL_ADC_REG_IsConversionOngoing>
 8001b24:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fd69 	bl	8001604 <LL_ADC_INJ_IsConversionOngoing>
 8001b32:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 8148 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f040 8143 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6819      	ldr	r1, [r3, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	461a      	mov	r2, r3
 8001b58:	f7ff fc5e 	bl	8001418 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	08db      	lsrs	r3, r3, #3
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d00a      	beq.n	8001b94 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	6919      	ldr	r1, [r3, #16]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b8e:	f7ff fbb9 	bl	8001304 <LL_ADC_SetOffset>
 8001b92:	e11d      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fbd4 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10a      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x148>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fbc9 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	0e9b      	lsrs	r3, r3, #26
 8001bba:	f003 021f 	and.w	r2, r3, #31
 8001bbe:	e012      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x16e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fbbe 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d105      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x186>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	0e9b      	lsrs	r3, r3, #26
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	e00a      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x19c>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d106      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fba5 	bl	8001370 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fb8b 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x1da>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2101      	movs	r1, #1
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fb80 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	0e9b      	lsrs	r3, r3, #26
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	e010      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x1fc>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2101      	movs	r1, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fb75 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x214>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0e9b      	lsrs	r3, r3, #26
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	e00a      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x22a>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d106      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	2101      	movs	r1, #1
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fb5e 	bl	8001370 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2102      	movs	r1, #2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fb44 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10a      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x268>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2102      	movs	r1, #2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fb39 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	0e9b      	lsrs	r3, r3, #26
 8001cda:	f003 021f 	and.w	r2, r3, #31
 8001cde:	e010      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x28a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fb2e 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x2a2>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0e9b      	lsrs	r3, r3, #26
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	e00a      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x2b8>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d106      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fb17 	bl	8001370 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2103      	movs	r1, #3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fafd 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10a      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x2f6>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2103      	movs	r1, #3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff faf2 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	e010      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x318>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2103      	movs	r1, #3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fae7 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x330>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0e9b      	lsrs	r3, r3, #26
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	e00a      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x346>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d106      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2103      	movs	r1, #3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fad0 	bl	8001370 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fbdb 	bl	8001590 <LL_ADC_IsEnabled>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 810c 	bne.w	8001ffa <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f7ff fb3a 	bl	8001468 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4aad      	ldr	r2, [pc, #692]	; (80020b0 <HAL_ADC_ConfigChannel+0x638>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	f040 80fd 	bne.w	8001ffa <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10b      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x3b0>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0e9b      	lsrs	r3, r3, #26
 8001e16:	3301      	adds	r3, #1
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	bf94      	ite	ls
 8001e20:	2301      	movls	r3, #1
 8001e22:	2300      	movhi	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e012      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x3d6>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	2b09      	cmp	r3, #9
 8001e46:	bf94      	ite	ls
 8001e48:	2301      	movls	r3, #1
 8001e4a:	2300      	movhi	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d064      	beq.n	8001f1c <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d107      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x3f6>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0e9b      	lsrs	r3, r3, #26
 8001e64:	3301      	adds	r3, #1
 8001e66:	069b      	lsls	r3, r3, #26
 8001e68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e6c:	e00e      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x414>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	069b      	lsls	r3, r3, #26
 8001e88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x434>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0e9b      	lsrs	r3, r3, #26
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	e010      	b.n	8001ece <HAL_ADC_ConfigChannel+0x456>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	ea42 0103 	orr.w	r1, r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10a      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x47c>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	0e9b      	lsrs	r3, r3, #26
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f003 021f 	and.w	r2, r3, #31
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	051b      	lsls	r3, r3, #20
 8001ef2:	e011      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x4a0>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	e069      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d107      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x4c0>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	0e9b      	lsrs	r3, r3, #26
 8001f2e:	3301      	adds	r3, #1
 8001f30:	069b      	lsls	r3, r3, #26
 8001f32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f36:	e00e      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x4de>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	61fb      	str	r3, [r7, #28]
  return result;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fab3 f383 	clz	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	069b      	lsls	r3, r3, #26
 8001f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x4fe>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	0e9b      	lsrs	r3, r3, #26
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	e010      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x520>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	617b      	str	r3, [r7, #20]
  return result;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	2101      	movs	r1, #1
 8001f94:	fa01 f303 	lsl.w	r3, r1, r3
 8001f98:	ea42 0103 	orr.w	r1, r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x54c>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0e9b      	lsrs	r3, r3, #26
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	3b1e      	subs	r3, #30
 8001fbc:	051b      	lsls	r3, r3, #20
 8001fbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	e014      	b.n	8001fee <HAL_ADC_ConfigChannel+0x576>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	60fb      	str	r3, [r7, #12]
  return result;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b1e      	subs	r3, #30
 8001fe8:	051b      	lsls	r3, r3, #20
 8001fea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fee:	430b      	orrs	r3, r1
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	6892      	ldr	r2, [r2, #8]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7ff fa0f 	bl	8001418 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_ADC_ConfigChannel+0x63c>)
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 808c 	beq.w	8002120 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002008:	482b      	ldr	r0, [pc, #172]	; (80020b8 <HAL_ADC_ConfigChannel+0x640>)
 800200a:	f7ff f96d 	bl	80012e8 <LL_ADC_GetCommonPathInternalCh>
 800200e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a29      	ldr	r2, [pc, #164]	; (80020bc <HAL_ADC_ConfigChannel+0x644>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d12b      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x5fc>
 800201c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d125      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <HAL_ADC_ConfigChannel+0x648>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d004      	beq.n	800203c <HAL_ADC_ConfigChannel+0x5c4>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <HAL_ADC_ConfigChannel+0x64c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d16e      	bne.n	800211a <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800203c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002040:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002044:	4619      	mov	r1, r3
 8002046:	481c      	ldr	r0, [pc, #112]	; (80020b8 <HAL_ADC_ConfigChannel+0x640>)
 8002048:	f7ff f93b 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_ADC_ConfigChannel+0x650>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	4a1e      	ldr	r2, [pc, #120]	; (80020cc <HAL_ADC_ConfigChannel+0x654>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	099a      	lsrs	r2, r3, #6
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002064:	e002      	b.n	800206c <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3b01      	subs	r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f9      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002072:	e052      	b.n	800211a <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <HAL_ADC_ConfigChannel+0x658>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d12a      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x65c>
 800207e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d124      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <HAL_ADC_ConfigChannel+0x648>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d004      	beq.n	800209e <HAL_ADC_ConfigChannel+0x626>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_ADC_ConfigChannel+0x64c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d13f      	bne.n	800211e <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800209e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a6:	4619      	mov	r1, r3
 80020a8:	4803      	ldr	r0, [pc, #12]	; (80020b8 <HAL_ADC_ConfigChannel+0x640>)
 80020aa:	f7ff f90a 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020ae:	e036      	b.n	800211e <HAL_ADC_ConfigChannel+0x6a6>
 80020b0:	407f0000 	.word	0x407f0000
 80020b4:	80080000 	.word	0x80080000
 80020b8:	50040300 	.word	0x50040300
 80020bc:	c7520000 	.word	0xc7520000
 80020c0:	50040000 	.word	0x50040000
 80020c4:	50040200 	.word	0x50040200
 80020c8:	20000008 	.word	0x20000008
 80020cc:	053e2d63 	.word	0x053e2d63
 80020d0:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a16      	ldr	r2, [pc, #88]	; (8002134 <HAL_ADC_ConfigChannel+0x6bc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d120      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d11a      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a12      	ldr	r2, [pc, #72]	; (8002138 <HAL_ADC_ConfigChannel+0x6c0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d115      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020fc:	4619      	mov	r1, r3
 80020fe:	480f      	ldr	r0, [pc, #60]	; (800213c <HAL_ADC_ConfigChannel+0x6c4>)
 8002100:	f7ff f8df 	bl	80012c2 <LL_ADC_SetCommonPathInternalCh>
 8002104:	e00c      	b.n	8002120 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f043 0220 	orr.w	r2, r3, #32
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002118:	e002      	b.n	8002120 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800211a:	bf00      	nop
 800211c:	e000      	b.n	8002120 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800211e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002128:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800212c:	4618      	mov	r0, r3
 800212e:	3798      	adds	r7, #152	; 0x98
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	80000001 	.word	0x80000001
 8002138:	50040000 	.word	0x50040000
 800213c:	50040300 	.word	0x50040300

08002140 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fa1f 	bl	8001590 <LL_ADC_IsEnabled>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d146      	bne.n	80021e6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <ADC_Enable+0xb0>)
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00d      	beq.n	8002182 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	f043 0210 	orr.w	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e032      	b.n	80021e8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f9ee 	bl	8001568 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800218c:	f7ff f858 	bl	8001240 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002192:	e021      	b.n	80021d8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff f9f9 	bl	8001590 <LL_ADC_IsEnabled>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d104      	bne.n	80021ae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff f9dd 	bl	8001568 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ae:	f7ff f847 	bl	8001240 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d90d      	bls.n	80021d8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	f043 0210 	orr.w	r2, r3, #16
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e007      	b.n	80021e8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d1d6      	bne.n	8002194 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	8000003f 	.word	0x8000003f

080021f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800220a:	2b00      	cmp	r3, #0
 800220c:	d14b      	bne.n	80022a6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d021      	beq.n	800226c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff f8b7 	bl	80013a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d032      	beq.n	800229e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d12b      	bne.n	800229e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d11f      	bne.n	800229e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
 800226a:	e018      	b.n	800229e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d111      	bne.n	800229e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d105      	bne.n	800229e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f7ff fbcc 	bl	8001a3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022a4:	e00e      	b.n	80022c4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7ff fbd6 	bl	8001a64 <HAL_ADC_ErrorCallback>
}
 80022b8:	e004      	b.n	80022c4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f7ff fbb8 	bl	8001a50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	f043 0204 	orr.w	r2, r3, #4
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7ff fba8 	bl	8001a64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <LL_ADC_IsEnabled>:
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <LL_ADC_IsEnabled+0x18>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <LL_ADC_IsEnabled+0x1a>
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <LL_ADC_REG_IsConversionOngoing>:
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b04      	cmp	r3, #4
 8002354:	d101      	bne.n	800235a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b09f      	sub	sp, #124	; 0x7c
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002382:	2302      	movs	r3, #2
 8002384:	e08f      	b.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a47      	ldr	r2, [pc, #284]	; (80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d102      	bne.n	800239e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002398:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	e001      	b.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e072      	b.n	80024a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ffbd 	bl	8002342 <LL_ADC_REG_IsConversionOngoing>
 80023c8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ffb7 	bl	8002342 <LL_ADC_REG_IsConversionOngoing>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d154      	bne.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d151      	bne.n	8002484 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023e0:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02c      	beq.n	8002446 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023fe:	035b      	lsls	r3, r3, #13
 8002400:	430b      	orrs	r3, r1
 8002402:	431a      	orrs	r2, r3
 8002404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002406:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002408:	4829      	ldr	r0, [pc, #164]	; (80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800240a:	f7ff ff87 	bl	800231c <LL_ADC_IsEnabled>
 800240e:	4604      	mov	r4, r0
 8002410:	4828      	ldr	r0, [pc, #160]	; (80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002412:	f7ff ff83 	bl	800231c <LL_ADC_IsEnabled>
 8002416:	4603      	mov	r3, r0
 8002418:	431c      	orrs	r4, r3
 800241a:	4828      	ldr	r0, [pc, #160]	; (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800241c:	f7ff ff7e 	bl	800231c <LL_ADC_IsEnabled>
 8002420:	4603      	mov	r3, r0
 8002422:	4323      	orrs	r3, r4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d137      	bne.n	8002498 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002430:	f023 030f 	bic.w	r3, r3, #15
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	6811      	ldr	r1, [r2, #0]
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	6892      	ldr	r2, [r2, #8]
 800243c:	430a      	orrs	r2, r1
 800243e:	431a      	orrs	r2, r3
 8002440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002442:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002444:	e028      	b.n	8002498 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002452:	4817      	ldr	r0, [pc, #92]	; (80024b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002454:	f7ff ff62 	bl	800231c <LL_ADC_IsEnabled>
 8002458:	4604      	mov	r4, r0
 800245a:	4816      	ldr	r0, [pc, #88]	; (80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800245c:	f7ff ff5e 	bl	800231c <LL_ADC_IsEnabled>
 8002460:	4603      	mov	r3, r0
 8002462:	431c      	orrs	r4, r3
 8002464:	4815      	ldr	r0, [pc, #84]	; (80024bc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002466:	f7ff ff59 	bl	800231c <LL_ADC_IsEnabled>
 800246a:	4603      	mov	r3, r0
 800246c:	4323      	orrs	r3, r4
 800246e:	2b00      	cmp	r3, #0
 8002470:	d112      	bne.n	8002498 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800247a:	f023 030f 	bic.w	r3, r3, #15
 800247e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002480:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002482:	e009      	b.n	8002498 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002496:	e000      	b.n	800249a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002498:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	377c      	adds	r7, #124	; 0x7c
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	50040000 	.word	0x50040000
 80024b4:	50040100 	.word	0x50040100
 80024b8:	50040300 	.word	0x50040300
 80024bc:	50040200 	.word	0x50040200

080024c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <__NVIC_EnableIRQ+0x38>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800262c:	d301      	bcc.n	8002632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262e:	2301      	movs	r3, #1
 8002630:	e00f      	b.n	8002652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <SysTick_Config+0x40>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263a:	210f      	movs	r1, #15
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	f7ff ff8e 	bl	8002560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <SysTick_Config+0x40>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <SysTick_Config+0x40>)
 800264c:	2207      	movs	r2, #7
 800264e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	e000e010 	.word	0xe000e010

08002660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff29 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002688:	f7ff ff3e 	bl	8002508 <__NVIC_GetPriorityGrouping>
 800268c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	6978      	ldr	r0, [r7, #20]
 8002694:	f7ff ff8e 	bl	80025b4 <NVIC_EncodePriority>
 8002698:	4602      	mov	r2, r0
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff5d 	bl	8002560 <__NVIC_SetPriority>
}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff31 	bl	8002524 <__NVIC_EnableIRQ>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffa2 	bl	800261c <SysTick_Config>
 80026d8:	4603      	mov	r3, r0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e014      	b.n	800271e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	791b      	ldrb	r3, [r3, #4]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7fe fbcb 	bl	8000ea0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	795b      	ldrb	r3, [r3, #5]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_DAC_Start+0x16>
 8002738:	2302      	movs	r3, #2
 800273a:	e03b      	b.n	80027b4 <HAL_DAC_Start+0x8e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2202      	movs	r2, #2
 8002746:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2201      	movs	r2, #1
 8002756:	409a      	lsls	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002770:	2b04      	cmp	r3, #4
 8002772:	d118      	bne.n	80027a6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	e00f      	b.n	80027a6 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002790:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002794:	d107      	bne.n	80027a6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0202 	orr.w	r2, r2, #2
 80027a4:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	3308      	adds	r3, #8
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	e004      	b.n	80027f4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	3314      	adds	r3, #20
 80027f2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	461a      	mov	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b088      	sub	sp, #32
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	795b      	ldrb	r3, [r3, #5]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_DAC_ConfigChannel+0x1c>
 8002822:	2302      	movs	r3, #2
 8002824:	e107      	b.n	8002a36 <HAL_DAC_ConfigChannel+0x22c>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2201      	movs	r2, #1
 800282a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2202      	movs	r2, #2
 8002830:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b04      	cmp	r3, #4
 8002838:	d174      	bne.n	8002924 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d137      	bne.n	80028b0 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002840:	f7fe fcfe 	bl	8001240 <HAL_GetTick>
 8002844:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002846:	e011      	b.n	800286c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002848:	f7fe fcfa 	bl	8001240 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d90a      	bls.n	800286c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f043 0208 	orr.w	r2, r3, #8
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2203      	movs	r2, #3
 8002866:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e0e4      	b.n	8002a36 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e6      	bne.n	8002848 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800287a:	2001      	movs	r0, #1
 800287c:	f7fe fcec 	bl	8001258 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	6992      	ldr	r2, [r2, #24]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
 800288a:	e01e      	b.n	80028ca <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800288c:	f7fe fcd8 	bl	8001240 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d90a      	bls.n	80028b0 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f043 0208 	orr.w	r2, r3, #8
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2203      	movs	r2, #3
 80028aa:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0c2      	b.n	8002a36 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	dbe8      	blt.n	800288c <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7fe fccc 	bl	8001258 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	6992      	ldr	r2, [r2, #24]
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	ea02 0103 	and.w	r1, r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	21ff      	movs	r1, #255	; 0xff
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	ea02 0103 	and.w	r1, r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	6a1a      	ldr	r2, [r3, #32]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d11d      	bne.n	8002968 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	221f      	movs	r2, #31
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2207      	movs	r2, #7
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	431a      	orrs	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6819      	ldr	r1, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43da      	mvns	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	400a      	ands	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	f640 72fc 	movw	r2, #4092	; 0xffc
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	22c0      	movs	r2, #192	; 0xc0
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	400a      	ands	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3720      	adds	r7, #32
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e098      	b.n	8002b84 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <HAL_DMA_Init+0x150>)
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d80f      	bhi.n	8002a7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b4b      	ldr	r3, [pc, #300]	; (8002b94 <HAL_DMA_Init+0x154>)
 8002a66:	4413      	add	r3, r2
 8002a68:	4a4b      	ldr	r2, [pc, #300]	; (8002b98 <HAL_DMA_Init+0x158>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	009a      	lsls	r2, r3, #2
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <HAL_DMA_Init+0x15c>)
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a7c:	e00e      	b.n	8002a9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b46      	ldr	r3, [pc, #280]	; (8002ba0 <HAL_DMA_Init+0x160>)
 8002a86:	4413      	add	r3, r2
 8002a88:	4a43      	ldr	r2, [pc, #268]	; (8002b98 <HAL_DMA_Init+0x158>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	091b      	lsrs	r3, r3, #4
 8002a90:	009a      	lsls	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a42      	ldr	r2, [pc, #264]	; (8002ba4 <HAL_DMA_Init+0x164>)
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002af6:	d039      	beq.n	8002b6c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <HAL_DMA_Init+0x15c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d11a      	bne.n	8002b38 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b02:	4b29      	ldr	r3, [pc, #164]	; (8002ba8 <HAL_DMA_Init+0x168>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f003 031c 	and.w	r3, r3, #28
 8002b0e:	210f      	movs	r1, #15
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4924      	ldr	r1, [pc, #144]	; (8002ba8 <HAL_DMA_Init+0x168>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_DMA_Init+0x168>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f003 031c 	and.w	r3, r3, #28
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	491d      	ldr	r1, [pc, #116]	; (8002ba8 <HAL_DMA_Init+0x168>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
 8002b36:	e019      	b.n	8002b6c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_DMA_Init+0x16c>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	f003 031c 	and.w	r3, r3, #28
 8002b44:	210f      	movs	r1, #15
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	4917      	ldr	r1, [pc, #92]	; (8002bac <HAL_DMA_Init+0x16c>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_DMA_Init+0x16c>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f003 031c 	and.w	r3, r3, #28
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	4911      	ldr	r1, [pc, #68]	; (8002bac <HAL_DMA_Init+0x16c>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40020407 	.word	0x40020407
 8002b94:	bffdfff8 	.word	0xbffdfff8
 8002b98:	cccccccd 	.word	0xcccccccd
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	bffdfbf8 	.word	0xbffdfbf8
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	400200a8 	.word	0x400200a8
 8002bac:	400204a8 	.word	0x400204a8

08002bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_DMA_Start_IT+0x20>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e04b      	b.n	8002c68 <HAL_DMA_Start_IT+0xb8>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d13a      	bne.n	8002c5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f8e0 	bl	8002dce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 020e 	orr.w	r2, r2, #14
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	e00f      	b.n	8002c48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0204 	bic.w	r2, r2, #4
 8002c36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 020a 	orr.w	r2, r2, #10
 8002c46:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e005      	b.n	8002c66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
 8002c64:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	f003 031c 	and.w	r3, r3, #28
 8002c90:	2204      	movs	r2, #4
 8002c92:	409a      	lsls	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d026      	beq.n	8002cea <HAL_DMA_IRQHandler+0x7a>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d021      	beq.n	8002cea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d107      	bne.n	8002cc4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0204 	bic.w	r2, r2, #4
 8002cc2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	f003 021c 	and.w	r2, r3, #28
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2104      	movs	r1, #4
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d071      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002ce8:	e06c      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f003 031c 	and.w	r3, r3, #28
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d02e      	beq.n	8002d5c <HAL_DMA_IRQHandler+0xec>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d029      	beq.n	8002d5c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 020a 	bic.w	r2, r2, #10
 8002d24:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f003 021c 	and.w	r2, r3, #28
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d038      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d5a:	e033      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f003 031c 	and.w	r3, r3, #28
 8002d64:	2208      	movs	r2, #8
 8002d66:	409a      	lsls	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d02a      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x156>
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d025      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 020e 	bic.w	r2, r2, #14
 8002d88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f003 021c 	and.w	r2, r3, #28
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
}
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f003 021c 	and.w	r2, r3, #28
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f202 	lsl.w	r2, r1, r2
 8002dee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d108      	bne.n	8002e12 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e10:	e007      	b.n	8002e22 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	60da      	str	r2, [r3, #12]
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3e:	e17f      	b.n	8003140 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8171 	beq.w	800313a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d00b      	beq.n	8002e78 <HAL_GPIO_Init+0x48>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d007      	beq.n	8002e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e6c:	2b11      	cmp	r3, #17
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d130      	bne.n	8002eda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eae:	2201      	movs	r2, #1
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f003 0201 	and.w	r2, r3, #1
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d118      	bne.n	8002f18 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002eec:	2201      	movs	r2, #1
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	08db      	lsrs	r3, r3, #3
 8002f02:	f003 0201 	and.w	r2, r3, #1
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x128>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b12      	cmp	r3, #18
 8002f56:	d123      	bne.n	8002fa0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	08da      	lsrs	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3208      	adds	r2, #8
 8002f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	220f      	movs	r2, #15
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	08da      	lsrs	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3208      	adds	r2, #8
 8002f9a:	6939      	ldr	r1, [r7, #16]
 8002f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	2203      	movs	r2, #3
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0203 	and.w	r2, r3, #3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80ac 	beq.w	800313a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe2:	4b5e      	ldr	r3, [pc, #376]	; (800315c <HAL_GPIO_Init+0x32c>)
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe6:	4a5d      	ldr	r2, [pc, #372]	; (800315c <HAL_GPIO_Init+0x32c>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6613      	str	r3, [r2, #96]	; 0x60
 8002fee:	4b5b      	ldr	r3, [pc, #364]	; (800315c <HAL_GPIO_Init+0x32c>)
 8002ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ffa:	4a59      	ldr	r2, [pc, #356]	; (8003160 <HAL_GPIO_Init+0x330>)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	089b      	lsrs	r3, r3, #2
 8003000:	3302      	adds	r3, #2
 8003002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	220f      	movs	r2, #15
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003024:	d025      	beq.n	8003072 <HAL_GPIO_Init+0x242>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a4e      	ldr	r2, [pc, #312]	; (8003164 <HAL_GPIO_Init+0x334>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01f      	beq.n	800306e <HAL_GPIO_Init+0x23e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a4d      	ldr	r2, [pc, #308]	; (8003168 <HAL_GPIO_Init+0x338>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d019      	beq.n	800306a <HAL_GPIO_Init+0x23a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a4c      	ldr	r2, [pc, #304]	; (800316c <HAL_GPIO_Init+0x33c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_GPIO_Init+0x236>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a4b      	ldr	r2, [pc, #300]	; (8003170 <HAL_GPIO_Init+0x340>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00d      	beq.n	8003062 <HAL_GPIO_Init+0x232>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a4a      	ldr	r2, [pc, #296]	; (8003174 <HAL_GPIO_Init+0x344>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <HAL_GPIO_Init+0x22e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a49      	ldr	r2, [pc, #292]	; (8003178 <HAL_GPIO_Init+0x348>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_GPIO_Init+0x22a>
 8003056:	2306      	movs	r3, #6
 8003058:	e00c      	b.n	8003074 <HAL_GPIO_Init+0x244>
 800305a:	2307      	movs	r3, #7
 800305c:	e00a      	b.n	8003074 <HAL_GPIO_Init+0x244>
 800305e:	2305      	movs	r3, #5
 8003060:	e008      	b.n	8003074 <HAL_GPIO_Init+0x244>
 8003062:	2304      	movs	r3, #4
 8003064:	e006      	b.n	8003074 <HAL_GPIO_Init+0x244>
 8003066:	2303      	movs	r3, #3
 8003068:	e004      	b.n	8003074 <HAL_GPIO_Init+0x244>
 800306a:	2302      	movs	r3, #2
 800306c:	e002      	b.n	8003074 <HAL_GPIO_Init+0x244>
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_GPIO_Init+0x244>
 8003072:	2300      	movs	r3, #0
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	f002 0203 	and.w	r2, r2, #3
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	4093      	lsls	r3, r2
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003084:	4936      	ldr	r1, [pc, #216]	; (8003160 <HAL_GPIO_Init+0x330>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3302      	adds	r3, #2
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003092:	4b3a      	ldr	r3, [pc, #232]	; (800317c <HAL_GPIO_Init+0x34c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	43db      	mvns	r3, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030b6:	4a31      	ldr	r2, [pc, #196]	; (800317c <HAL_GPIO_Init+0x34c>)
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030bc:	4b2f      	ldr	r3, [pc, #188]	; (800317c <HAL_GPIO_Init+0x34c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030e0:	4a26      	ldr	r2, [pc, #152]	; (800317c <HAL_GPIO_Init+0x34c>)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030e6:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_GPIO_Init+0x34c>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800310a:	4a1c      	ldr	r2, [pc, #112]	; (800317c <HAL_GPIO_Init+0x34c>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_GPIO_Init+0x34c>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003134:	4a11      	ldr	r2, [pc, #68]	; (800317c <HAL_GPIO_Init+0x34c>)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3301      	adds	r3, #1
 800313e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa22 f303 	lsr.w	r3, r2, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	f47f ae78 	bne.w	8002e40 <HAL_GPIO_Init+0x10>
  }
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40021000 	.word	0x40021000
 8003160:	40010000 	.word	0x40010000
 8003164:	48000400 	.word	0x48000400
 8003168:	48000800 	.word	0x48000800
 800316c:	48000c00 	.word	0x48000c00
 8003170:	48001000 	.word	0x48001000
 8003174:	48001400 	.word	0x48001400
 8003178:	48001800 	.word	0x48001800
 800317c:	40010400 	.word	0x40010400

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800319c:	e002      	b.n	80031a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031b4:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40007000 	.word	0x40007000

080031cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031da:	d130      	bne.n	800323e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031dc:	4b23      	ldr	r3, [pc, #140]	; (800326c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e8:	d038      	beq.n	800325c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031f2:	4a1e      	ldr	r2, [pc, #120]	; (800326c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2232      	movs	r2, #50	; 0x32
 8003200:	fb02 f303 	mul.w	r3, r2, r3
 8003204:	4a1b      	ldr	r2, [pc, #108]	; (8003274 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0c9b      	lsrs	r3, r3, #18
 800320c:	3301      	adds	r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003210:	e002      	b.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3b01      	subs	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003224:	d102      	bne.n	800322c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f2      	bne.n	8003212 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003238:	d110      	bne.n	800325c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e00f      	b.n	800325e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324a:	d007      	beq.n	800325c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800324c:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003254:	4a05      	ldr	r2, [pc, #20]	; (800326c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800325a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40007000 	.word	0x40007000
 8003270:	20000008 	.word	0x20000008
 8003274:	431bde83 	.word	0x431bde83

08003278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e3d4      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800328a:	4ba1      	ldr	r3, [pc, #644]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003294:	4b9e      	ldr	r3, [pc, #632]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80e4 	beq.w	8003474 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <HAL_RCC_OscConfig+0x4a>
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b0c      	cmp	r3, #12
 80032b6:	f040 808b 	bne.w	80033d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	f040 8087 	bne.w	80033d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032c2:	4b93      	ldr	r3, [pc, #588]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_RCC_OscConfig+0x62>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e3ac      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1a      	ldr	r2, [r3, #32]
 80032de:	4b8c      	ldr	r3, [pc, #560]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <HAL_RCC_OscConfig+0x7c>
 80032ea:	4b89      	ldr	r3, [pc, #548]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f2:	e005      	b.n	8003300 <HAL_RCC_OscConfig+0x88>
 80032f4:	4b86      	ldr	r3, [pc, #536]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003300:	4293      	cmp	r3, r2
 8003302:	d223      	bcs.n	800334c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fd07 	bl	8003d1c <RCC_SetFlashLatencyFromMSIRange>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e38d      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003318:	4b7d      	ldr	r3, [pc, #500]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a7c      	ldr	r2, [pc, #496]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 800331e:	f043 0308 	orr.w	r3, r3, #8
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b7a      	ldr	r3, [pc, #488]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	4977      	ldr	r1, [pc, #476]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003336:	4b76      	ldr	r3, [pc, #472]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	4972      	ldr	r1, [pc, #456]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
 800334a:	e025      	b.n	8003398 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800334c:	4b70      	ldr	r3, [pc, #448]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6f      	ldr	r2, [pc, #444]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003352:	f043 0308 	orr.w	r3, r3, #8
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	4b6d      	ldr	r3, [pc, #436]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	496a      	ldr	r1, [pc, #424]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800336a:	4b69      	ldr	r3, [pc, #420]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	4965      	ldr	r1, [pc, #404]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d109      	bne.n	8003398 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fcc7 	bl	8003d1c <RCC_SetFlashLatencyFromMSIRange>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e34d      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003398:	f000 fc36 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 800339c:	4601      	mov	r1, r0
 800339e:	4b5c      	ldr	r3, [pc, #368]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	4a5a      	ldr	r2, [pc, #360]	; (8003514 <HAL_RCC_OscConfig+0x29c>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	fa21 f303 	lsr.w	r3, r1, r3
 80033b4:	4a58      	ldr	r2, [pc, #352]	; (8003518 <HAL_RCC_OscConfig+0x2a0>)
 80033b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033b8:	4b58      	ldr	r3, [pc, #352]	; (800351c <HAL_RCC_OscConfig+0x2a4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd fef3 	bl	80011a8 <HAL_InitTick>
 80033c2:	4603      	mov	r3, r0
 80033c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d052      	beq.n	8003472 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	e331      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d032      	beq.n	800343e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033d8:	4b4d      	ldr	r3, [pc, #308]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a4c      	ldr	r2, [pc, #304]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80033de:	f043 0301 	orr.w	r3, r3, #1
 80033e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033e4:	f7fd ff2c 	bl	8001240 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033ec:	f7fd ff28 	bl	8001240 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e31a      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033fe:	4b44      	ldr	r3, [pc, #272]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800340a:	4b41      	ldr	r3, [pc, #260]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a40      	ldr	r2, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003410:	f043 0308 	orr.w	r3, r3, #8
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	493b      	ldr	r1, [pc, #236]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003428:	4b39      	ldr	r3, [pc, #228]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	021b      	lsls	r3, r3, #8
 8003436:	4936      	ldr	r1, [pc, #216]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
 800343c:	e01a      	b.n	8003474 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800343e:	4b34      	ldr	r3, [pc, #208]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a33      	ldr	r2, [pc, #204]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800344a:	f7fd fef9 	bl	8001240 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003452:	f7fd fef5 	bl	8001240 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e2e7      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003464:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x1da>
 8003470:	e000      	b.n	8003474 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003472:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d074      	beq.n	800356a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b08      	cmp	r3, #8
 8003484:	d005      	beq.n	8003492 <HAL_RCC_OscConfig+0x21a>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b0c      	cmp	r3, #12
 800348a:	d10e      	bne.n	80034aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d10b      	bne.n	80034aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d064      	beq.n	8003568 <HAL_RCC_OscConfig+0x2f0>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d160      	bne.n	8003568 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e2c4      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x24a>
 80034b4:	4b16      	ldr	r3, [pc, #88]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a15      	ldr	r2, [pc, #84]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80034ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	e01d      	b.n	80034fe <HAL_RCC_OscConfig+0x286>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x26e>
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80034d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80034de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	e00b      	b.n	80034fe <HAL_RCC_OscConfig+0x286>
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80034ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a06      	ldr	r2, [pc, #24]	; (8003510 <HAL_RCC_OscConfig+0x298>)
 80034f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01c      	beq.n	8003540 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fd fe9b 	bl	8001240 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350c:	e011      	b.n	8003532 <HAL_RCC_OscConfig+0x2ba>
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	08005940 	.word	0x08005940
 8003518:	20000008 	.word	0x20000008
 800351c:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7fd fe8e 	bl	8001240 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e280      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003532:	4baf      	ldr	r3, [pc, #700]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x2a8>
 800353e:	e014      	b.n	800356a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fd fe7e 	bl	8001240 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003548:	f7fd fe7a 	bl	8001240 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e26c      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800355a:	4ba5      	ldr	r3, [pc, #660]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x2d0>
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d060      	beq.n	8003638 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b04      	cmp	r3, #4
 800357a:	d005      	beq.n	8003588 <HAL_RCC_OscConfig+0x310>
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d119      	bne.n	80035b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d116      	bne.n	80035b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003588:	4b99      	ldr	r3, [pc, #612]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_OscConfig+0x328>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e249      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a0:	4b93      	ldr	r3, [pc, #588]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	061b      	lsls	r3, r3, #24
 80035ae:	4990      	ldr	r1, [pc, #576]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b4:	e040      	b.n	8003638 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d023      	beq.n	8003606 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035be:	4b8c      	ldr	r3, [pc, #560]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a8b      	ldr	r2, [pc, #556]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80035c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fd fe39 	bl	8001240 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d2:	f7fd fe35 	bl	8001240 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e227      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e4:	4b82      	ldr	r3, [pc, #520]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f0:	4b7f      	ldr	r3, [pc, #508]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	061b      	lsls	r3, r3, #24
 80035fe:	497c      	ldr	r1, [pc, #496]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]
 8003604:	e018      	b.n	8003638 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003606:	4b7a      	ldr	r3, [pc, #488]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a79      	ldr	r2, [pc, #484]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 800360c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fd fe15 	bl	8001240 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361a:	f7fd fe11 	bl	8001240 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e203      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800362c:	4b70      	ldr	r3, [pc, #448]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03c      	beq.n	80036be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01c      	beq.n	8003686 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800364c:	4b68      	ldr	r3, [pc, #416]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 800364e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003652:	4a67      	ldr	r2, [pc, #412]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7fd fdf0 	bl	8001240 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003664:	f7fd fdec 	bl	8001240 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1de      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003676:	4b5e      	ldr	r3, [pc, #376]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ef      	beq.n	8003664 <HAL_RCC_OscConfig+0x3ec>
 8003684:	e01b      	b.n	80036be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003686:	4b5a      	ldr	r3, [pc, #360]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368c:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fd fdd3 	bl	8001240 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800369e:	f7fd fdcf 	bl	8001240 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1c1      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036b0:	4b4f      	ldr	r3, [pc, #316]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80036b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1ef      	bne.n	800369e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80a6 	beq.w	8003818 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036cc:	2300      	movs	r3, #0
 80036ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036d0:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10d      	bne.n	80036f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	4b44      	ldr	r3, [pc, #272]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	4a43      	ldr	r2, [pc, #268]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6593      	str	r3, [r2, #88]	; 0x58
 80036e8:	4b41      	ldr	r3, [pc, #260]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f4:	2301      	movs	r3, #1
 80036f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f8:	4b3e      	ldr	r3, [pc, #248]	; (80037f4 <HAL_RCC_OscConfig+0x57c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d118      	bne.n	8003736 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003704:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <HAL_RCC_OscConfig+0x57c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a3a      	ldr	r2, [pc, #232]	; (80037f4 <HAL_RCC_OscConfig+0x57c>)
 800370a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003710:	f7fd fd96 	bl	8001240 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003718:	f7fd fd92 	bl	8001240 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e184      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372a:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <HAL_RCC_OscConfig+0x57c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d108      	bne.n	8003750 <HAL_RCC_OscConfig+0x4d8>
 800373e:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	4a2a      	ldr	r2, [pc, #168]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800374e:	e024      	b.n	800379a <HAL_RCC_OscConfig+0x522>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b05      	cmp	r3, #5
 8003756:	d110      	bne.n	800377a <HAL_RCC_OscConfig+0x502>
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375e:	4a24      	ldr	r2, [pc, #144]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003760:	f043 0304 	orr.w	r3, r3, #4
 8003764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003768:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	4a20      	ldr	r2, [pc, #128]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003778:	e00f      	b.n	800379a <HAL_RCC_OscConfig+0x522>
 800377a:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	4a1b      	ldr	r2, [pc, #108]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800378a:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 8003792:	f023 0304 	bic.w	r3, r3, #4
 8003796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fd fd4d 	bl	8001240 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fd fd49 	bl	8001240 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e139      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_OscConfig+0x578>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ed      	beq.n	80037aa <HAL_RCC_OscConfig+0x532>
 80037ce:	e01a      	b.n	8003806 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fd fd36 	bl	8001240 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037d6:	e00f      	b.n	80037f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d8:	f7fd fd32 	bl	8001240 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d906      	bls.n	80037f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e122      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037f8:	4b90      	ldr	r3, [pc, #576]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e8      	bne.n	80037d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003806:	7ffb      	ldrb	r3, [r7, #31]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d105      	bne.n	8003818 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380c:	4b8b      	ldr	r3, [pc, #556]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	4a8a      	ldr	r2, [pc, #552]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 8003812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003816:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8108 	beq.w	8003a32 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	2b02      	cmp	r3, #2
 8003828:	f040 80d0 	bne.w	80039cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800382c:	4b83      	ldr	r3, [pc, #524]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	429a      	cmp	r2, r3
 800383e:	d130      	bne.n	80038a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	3b01      	subs	r3, #1
 800384c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d127      	bne.n	80038a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d11f      	bne.n	80038a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800386c:	2a07      	cmp	r2, #7
 800386e:	bf14      	ite	ne
 8003870:	2201      	movne	r2, #1
 8003872:	2200      	moveq	r2, #0
 8003874:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003876:	4293      	cmp	r3, r2
 8003878:	d113      	bne.n	80038a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	3b01      	subs	r3, #1
 8003888:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d109      	bne.n	80038a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	3b01      	subs	r3, #1
 800389c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d06e      	beq.n	8003980 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b0c      	cmp	r3, #12
 80038a6:	d069      	beq.n	800397c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038a8:	4b64      	ldr	r3, [pc, #400]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038b4:	4b61      	ldr	r3, [pc, #388]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0b7      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038c4:	4b5d      	ldr	r3, [pc, #372]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a5c      	ldr	r2, [pc, #368]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80038ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038d0:	f7fd fcb6 	bl	8001240 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d8:	f7fd fcb2 	bl	8001240 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0a4      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ea:	4b54      	ldr	r3, [pc, #336]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f6:	4b51      	ldr	r3, [pc, #324]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	4b51      	ldr	r3, [pc, #324]	; (8003a40 <HAL_RCC_OscConfig+0x7c8>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003906:	3a01      	subs	r2, #1
 8003908:	0112      	lsls	r2, r2, #4
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003910:	0212      	lsls	r2, r2, #8
 8003912:	4311      	orrs	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003918:	0852      	lsrs	r2, r2, #1
 800391a:	3a01      	subs	r2, #1
 800391c:	0552      	lsls	r2, r2, #21
 800391e:	4311      	orrs	r1, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003924:	0852      	lsrs	r2, r2, #1
 8003926:	3a01      	subs	r2, #1
 8003928:	0652      	lsls	r2, r2, #25
 800392a:	4311      	orrs	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003930:	0912      	lsrs	r2, r2, #4
 8003932:	0452      	lsls	r2, r2, #17
 8003934:	430a      	orrs	r2, r1
 8003936:	4941      	ldr	r1, [pc, #260]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 8003938:	4313      	orrs	r3, r2
 800393a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800393c:	4b3f      	ldr	r3, [pc, #252]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a3e      	ldr	r2, [pc, #248]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 8003942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003946:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003948:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a3b      	ldr	r2, [pc, #236]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003952:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003954:	f7fd fc74 	bl	8001240 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7fd fc70 	bl	8001240 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e062      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396e:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800397a:	e05a      	b.n	8003a32 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e059      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003980:	4b2e      	ldr	r3, [pc, #184]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d152      	bne.n	8003a32 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 8003992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003996:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003998:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4a27      	ldr	r2, [pc, #156]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 800399e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039a4:	f7fd fc4c 	bl	8001240 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ac:	f7fd fc48 	bl	8001240 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e03a      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039be:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x734>
 80039ca:	e032      	b.n	8003a32 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d02d      	beq.n	8003a2e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d2:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a19      	ldr	r2, [pc, #100]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80039d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80039f0:	f023 0303 	bic.w	r3, r3, #3
 80039f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 80039fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fd fc1b 	bl	8001240 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fd fc17 	bl	8001240 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e009      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_OscConfig+0x7c4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x796>
 8003a2c:	e001      	b.n	8003a32 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3720      	adds	r7, #32
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	f99d808c 	.word	0xf99d808c

08003a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0c8      	b.n	8003bea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a58:	4b66      	ldr	r3, [pc, #408]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d910      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b63      	ldr	r3, [pc, #396]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 0207 	bic.w	r2, r3, #7
 8003a6e:	4961      	ldr	r1, [pc, #388]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b5f      	ldr	r3, [pc, #380]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b0      	b.n	8003bea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d04c      	beq.n	8003b2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a9c:	4b56      	ldr	r3, [pc, #344]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d121      	bne.n	8003aec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e09e      	b.n	8003bea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab4:	4b50      	ldr	r3, [pc, #320]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d115      	bne.n	8003aec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e092      	b.n	8003bea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d107      	bne.n	8003adc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003acc:	4b4a      	ldr	r3, [pc, #296]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e086      	b.n	8003bea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003adc:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e07e      	b.n	8003bea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aec:	4b42      	ldr	r3, [pc, #264]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f023 0203 	bic.w	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	493f      	ldr	r1, [pc, #252]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afe:	f7fd fb9f 	bl	8001240 <HAL_GetTick>
 8003b02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b06:	f7fd fb9b 	bl	8001240 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e066      	b.n	8003bea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1c:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 020c 	and.w	r2, r3, #12
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d1eb      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	492c      	ldr	r1, [pc, #176]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d210      	bcs.n	8003b7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 0207 	bic.w	r2, r3, #7
 8003b62:	4924      	ldr	r1, [pc, #144]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e036      	b.n	8003bea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4918      	ldr	r1, [pc, #96]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba6:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4910      	ldr	r1, [pc, #64]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bba:	f000 f825 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b4>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <HAL_RCC_ClockConfig+0x1b8>)
 8003bcc:	5cd3      	ldrb	r3, [r2, r3]
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_RCC_ClockConfig+0x1c0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd fae2 	bl	80011a8 <HAL_InitTick>
 8003be4:	4603      	mov	r3, r0
 8003be6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003be8:	7afb      	ldrb	r3, [r7, #11]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	08005940 	.word	0x08005940
 8003c00:	20000008 	.word	0x20000008
 8003c04:	2000000c 	.word	0x2000000c

08003c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b089      	sub	sp, #36	; 0x24
 8003c0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c16:	4b3d      	ldr	r3, [pc, #244]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c20:	4b3a      	ldr	r3, [pc, #232]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x34>
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	d121      	bne.n	8003c7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d11e      	bne.n	8003c7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c3c:	4b33      	ldr	r3, [pc, #204]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c48:	4b30      	ldr	r3, [pc, #192]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e005      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c58:	4b2c      	ldr	r3, [pc, #176]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c64:	4a2a      	ldr	r2, [pc, #168]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10d      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d102      	bne.n	8003c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c80:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e004      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c8c:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d133      	bne.n	8003cfe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c96:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d002      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0xa4>
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_GetSysClockFreq+0xaa>
 8003caa:	e005      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cac:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cae:	617b      	str	r3, [r7, #20]
      break;
 8003cb0:	e005      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cb2:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cb4:	617b      	str	r3, [r7, #20]
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	617b      	str	r3, [r7, #20]
      break;
 8003cbc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cbe:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	3301      	adds	r3, #1
 8003cca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	fb02 f203 	mul.w	r2, r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0e5b      	lsrs	r3, r3, #25
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3724      	adds	r7, #36	; 0x24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	08005950 	.word	0x08005950
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	007a1200 	.word	0x007a1200

08003d1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d24:	2300      	movs	r3, #0
 8003d26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d28:	4b2a      	ldr	r3, [pc, #168]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d34:	f7ff fa3c 	bl	80031b0 <HAL_PWREx_GetVoltageRange>
 8003d38:	6178      	str	r0, [r7, #20]
 8003d3a:	e014      	b.n	8003d66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	4a24      	ldr	r2, [pc, #144]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d46:	6593      	str	r3, [r2, #88]	; 0x58
 8003d48:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d54:	f7ff fa2c 	bl	80031b0 <HAL_PWREx_GetVoltageRange>
 8003d58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6c:	d10b      	bne.n	8003d86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d919      	bls.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2ba0      	cmp	r3, #160	; 0xa0
 8003d78:	d902      	bls.n	8003d80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	e013      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d80:	2301      	movs	r3, #1
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	e010      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b80      	cmp	r3, #128	; 0x80
 8003d8a:	d902      	bls.n	8003d92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	e00a      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b80      	cmp	r3, #128	; 0x80
 8003d96:	d102      	bne.n	8003d9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d98:	2302      	movs	r3, #2
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	e004      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b70      	cmp	r3, #112	; 0x70
 8003da2:	d101      	bne.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da4:	2301      	movs	r3, #1
 8003da6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f023 0207 	bic.w	r2, r3, #7
 8003db0:	4909      	ldr	r1, [pc, #36]	; (8003dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d001      	beq.n	8003dca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40022000 	.word	0x40022000

08003ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de4:	2300      	movs	r3, #0
 8003de6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003de8:	2300      	movs	r3, #0
 8003dea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d03f      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e00:	d01c      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e06:	d802      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003e0c:	e01f      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003e0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e12:	d003      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003e14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e18:	d01c      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003e1a:	e018      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e1c:	4b85      	ldr	r3, [pc, #532]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a84      	ldr	r2, [pc, #528]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e28:	e015      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fab9 	bl	80043a8 <RCCEx_PLLSAI1_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e3a:	e00c      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3320      	adds	r3, #32
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fba0 	bl	8004588 <RCCEx_PLLSAI2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e4c:	e003      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	74fb      	strb	r3, [r7, #19]
      break;
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e5c:	4b75      	ldr	r3, [pc, #468]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6a:	4972      	ldr	r1, [pc, #456]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e72:	e001      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d03f      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e8c:	d01c      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e92:	d802      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00e      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003e98:	e01f      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e9e:	d003      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003ea0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ea4:	d01c      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003ea6:	e018      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ea8:	4b62      	ldr	r3, [pc, #392]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a61      	ldr	r2, [pc, #388]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eb4:	e015      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fa73 	bl	80043a8 <RCCEx_PLLSAI1_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ec6:	e00c      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3320      	adds	r3, #32
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fb5a 	bl	8004588 <RCCEx_PLLSAI2_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ed8:	e003      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	74fb      	strb	r3, [r7, #19]
      break;
 8003ede:	e000      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee2:	7cfb      	ldrb	r3, [r7, #19]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ee8:	4b52      	ldr	r3, [pc, #328]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef6:	494f      	ldr	r1, [pc, #316]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003efe:	e001      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80a0 	beq.w	8004052 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f12:	2300      	movs	r3, #0
 8003f14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f16:	4b47      	ldr	r3, [pc, #284]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f26:	2300      	movs	r3, #0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00d      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2c:	4b41      	ldr	r3, [pc, #260]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	4a40      	ldr	r2, [pc, #256]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f36:	6593      	str	r3, [r2, #88]	; 0x58
 8003f38:	4b3e      	ldr	r3, [pc, #248]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f44:	2301      	movs	r3, #1
 8003f46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f48:	4b3b      	ldr	r3, [pc, #236]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a3a      	ldr	r2, [pc, #232]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f54:	f7fd f974 	bl	8001240 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f5a:	e009      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5c:	f7fd f970 	bl	8001240 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d902      	bls.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	74fb      	strb	r3, [r7, #19]
        break;
 8003f6e:	e005      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f70:	4b31      	ldr	r3, [pc, #196]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0ef      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d15c      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f82:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01f      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d019      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fa0:	4b24      	ldr	r3, [pc, #144]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003faa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fac:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb2:	4a20      	ldr	r2, [pc, #128]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc2:	4a1c      	ldr	r2, [pc, #112]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fcc:	4a19      	ldr	r2, [pc, #100]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd f92f 	bl	8001240 <HAL_GetTick>
 8003fe2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fe4:	e00b      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe6:	f7fd f92b 	bl	8001240 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d902      	bls.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	74fb      	strb	r3, [r7, #19]
            break;
 8003ffc:	e006      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ec      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10c      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004012:	4b08      	ldr	r3, [pc, #32]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004022:	4904      	ldr	r1, [pc, #16]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800402a:	e009      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	74bb      	strb	r3, [r7, #18]
 8004030:	e006      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000
 8004038:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004040:	7c7b      	ldrb	r3, [r7, #17]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d105      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004046:	4b9e      	ldr	r3, [pc, #632]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	4a9d      	ldr	r2, [pc, #628]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800404c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004050:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800405e:	4b98      	ldr	r3, [pc, #608]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004064:	f023 0203 	bic.w	r2, r3, #3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	4994      	ldr	r1, [pc, #592]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004080:	4b8f      	ldr	r3, [pc, #572]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004086:	f023 020c 	bic.w	r2, r3, #12
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	498c      	ldr	r1, [pc, #560]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040a2:	4b87      	ldr	r3, [pc, #540]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	4983      	ldr	r1, [pc, #524]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040c4:	4b7e      	ldr	r3, [pc, #504]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	497b      	ldr	r1, [pc, #492]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040e6:	4b76      	ldr	r3, [pc, #472]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f4:	4972      	ldr	r1, [pc, #456]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004108:	4b6d      	ldr	r3, [pc, #436]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004116:	496a      	ldr	r1, [pc, #424]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800412a:	4b65      	ldr	r3, [pc, #404]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	4961      	ldr	r1, [pc, #388]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800414c:	4b5c      	ldr	r3, [pc, #368]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800415a:	4959      	ldr	r1, [pc, #356]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800416e:	4b54      	ldr	r3, [pc, #336]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004174:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417c:	4950      	ldr	r1, [pc, #320]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004190:	4b4b      	ldr	r3, [pc, #300]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	4948      	ldr	r1, [pc, #288]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041b2:	4b43      	ldr	r3, [pc, #268]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	493f      	ldr	r1, [pc, #252]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d028      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041d4:	4b3a      	ldr	r3, [pc, #232]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e2:	4937      	ldr	r1, [pc, #220]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f2:	d106      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f4:	4b32      	ldr	r3, [pc, #200]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4a31      	ldr	r2, [pc, #196]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041fe:	60d3      	str	r3, [r2, #12]
 8004200:	e011      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004206:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800420a:	d10c      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	2101      	movs	r1, #1
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f8c8 	bl	80043a8 <RCCEx_PLLSAI1_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004222:	7cfb      	ldrb	r3, [r7, #19]
 8004224:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d028      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	491f      	ldr	r1, [pc, #124]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004250:	d106      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004252:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	4a1a      	ldr	r2, [pc, #104]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800425c:	60d3      	str	r3, [r2, #12]
 800425e:	e011      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004268:	d10c      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	2101      	movs	r1, #1
 8004270:	4618      	mov	r0, r3
 8004272:	f000 f899 	bl	80043a8 <RCCEx_PLLSAI1_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800427a:	7cfb      	ldrb	r3, [r7, #19]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02b      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429e:	4908      	ldr	r1, [pc, #32]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ae:	d109      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a02      	ldr	r2, [pc, #8]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ba:	60d3      	str	r3, [r2, #12]
 80042bc:	e014      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3304      	adds	r3, #4
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 f867 	bl	80043a8 <RCCEx_PLLSAI1_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02f      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042f4:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004302:	4928      	ldr	r1, [pc, #160]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004312:	d10d      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	2102      	movs	r1, #2
 800431a:	4618      	mov	r0, r3
 800431c:	f000 f844 	bl	80043a8 <RCCEx_PLLSAI1_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d014      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800432a:	7cfb      	ldrb	r3, [r7, #19]
 800432c:	74bb      	strb	r3, [r7, #18]
 800432e:	e011      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004338:	d10c      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3320      	adds	r3, #32
 800433e:	2102      	movs	r1, #2
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f921 	bl	8004588 <RCCEx_PLLSAI2_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800434a:	7cfb      	ldrb	r3, [r7, #19]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004360:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800436e:	490d      	ldr	r1, [pc, #52]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004392:	4904      	ldr	r1, [pc, #16]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800439a:	7cbb      	ldrb	r3, [r7, #18]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000

080043a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043b6:	4b73      	ldr	r3, [pc, #460]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d018      	beq.n	80043f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043c2:	4b70      	ldr	r3, [pc, #448]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0203 	and.w	r2, r3, #3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d10d      	bne.n	80043ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
       ||
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043da:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
       ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d044      	beq.n	8004478 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
 80043f2:	e041      	b.n	8004478 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d00c      	beq.n	8004416 <RCCEx_PLLSAI1_Config+0x6e>
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d013      	beq.n	8004428 <RCCEx_PLLSAI1_Config+0x80>
 8004400:	2b01      	cmp	r3, #1
 8004402:	d120      	bne.n	8004446 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004404:	4b5f      	ldr	r3, [pc, #380]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d11d      	bne.n	800444c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004414:	e01a      	b.n	800444c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004416:	4b5b      	ldr	r3, [pc, #364]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441e:	2b00      	cmp	r3, #0
 8004420:	d116      	bne.n	8004450 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004426:	e013      	b.n	8004450 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004428:	4b56      	ldr	r3, [pc, #344]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10f      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004434:	4b53      	ldr	r3, [pc, #332]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d109      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004444:	e006      	b.n	8004454 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
      break;
 800444a:	e004      	b.n	8004456 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800444c:	bf00      	nop
 800444e:	e002      	b.n	8004456 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004450:	bf00      	nop
 8004452:	e000      	b.n	8004456 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004454:	bf00      	nop
    }

    if(status == HAL_OK)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10d      	bne.n	8004478 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800445c:	4b49      	ldr	r3, [pc, #292]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6819      	ldr	r1, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	3b01      	subs	r3, #1
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	430b      	orrs	r3, r1
 8004472:	4944      	ldr	r1, [pc, #272]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d17d      	bne.n	800457a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800447e:	4b41      	ldr	r3, [pc, #260]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a40      	ldr	r2, [pc, #256]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004484:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448a:	f7fc fed9 	bl	8001240 <HAL_GetTick>
 800448e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004490:	e009      	b.n	80044a6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004492:	f7fc fed5 	bl	8001240 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d902      	bls.n	80044a6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	73fb      	strb	r3, [r7, #15]
        break;
 80044a4:	e005      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044a6:	4b37      	ldr	r3, [pc, #220]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1ef      	bne.n	8004492 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d160      	bne.n	800457a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d111      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6892      	ldr	r2, [r2, #8]
 80044ce:	0211      	lsls	r1, r2, #8
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	68d2      	ldr	r2, [r2, #12]
 80044d4:	0912      	lsrs	r2, r2, #4
 80044d6:	0452      	lsls	r2, r2, #17
 80044d8:	430a      	orrs	r2, r1
 80044da:	492a      	ldr	r1, [pc, #168]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
 80044e0:	e027      	b.n	8004532 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d112      	bne.n	800450e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e8:	4b26      	ldr	r3, [pc, #152]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6892      	ldr	r2, [r2, #8]
 80044f8:	0211      	lsls	r1, r2, #8
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6912      	ldr	r2, [r2, #16]
 80044fe:	0852      	lsrs	r2, r2, #1
 8004500:	3a01      	subs	r2, #1
 8004502:	0552      	lsls	r2, r2, #21
 8004504:	430a      	orrs	r2, r1
 8004506:	491f      	ldr	r1, [pc, #124]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004508:	4313      	orrs	r3, r2
 800450a:	610b      	str	r3, [r1, #16]
 800450c:	e011      	b.n	8004532 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004516:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6892      	ldr	r2, [r2, #8]
 800451e:	0211      	lsls	r1, r2, #8
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6952      	ldr	r2, [r2, #20]
 8004524:	0852      	lsrs	r2, r2, #1
 8004526:	3a01      	subs	r2, #1
 8004528:	0652      	lsls	r2, r2, #25
 800452a:	430a      	orrs	r2, r1
 800452c:	4915      	ldr	r1, [pc, #84]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a13      	ldr	r2, [pc, #76]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800453c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fc fe7f 	bl	8001240 <HAL_GetTick>
 8004542:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004544:	e009      	b.n	800455a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004546:	f7fc fe7b 	bl	8001240 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d902      	bls.n	800455a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	73fb      	strb	r3, [r7, #15]
          break;
 8004558:	e005      	b.n	8004566 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800455a:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ef      	beq.n	8004546 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d106      	bne.n	800457a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	4903      	ldr	r1, [pc, #12]	; (8004584 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000

08004588 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004596:	4b68      	ldr	r3, [pc, #416]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d018      	beq.n	80045d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045a2:	4b65      	ldr	r3, [pc, #404]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0203 	and.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d10d      	bne.n	80045ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
       ||
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045ba:	4b5f      	ldr	r3, [pc, #380]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
       ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d044      	beq.n	8004658 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
 80045d2:	e041      	b.n	8004658 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d00c      	beq.n	80045f6 <RCCEx_PLLSAI2_Config+0x6e>
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d013      	beq.n	8004608 <RCCEx_PLLSAI2_Config+0x80>
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d120      	bne.n	8004626 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045e4:	4b54      	ldr	r3, [pc, #336]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d11d      	bne.n	800462c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f4:	e01a      	b.n	800462c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045f6:	4b50      	ldr	r3, [pc, #320]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d116      	bne.n	8004630 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004606:	e013      	b.n	8004630 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004608:	4b4b      	ldr	r3, [pc, #300]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10f      	bne.n	8004634 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004614:	4b48      	ldr	r3, [pc, #288]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d109      	bne.n	8004634 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004624:	e006      	b.n	8004634 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
      break;
 800462a:	e004      	b.n	8004636 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800462c:	bf00      	nop
 800462e:	e002      	b.n	8004636 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004630:	bf00      	nop
 8004632:	e000      	b.n	8004636 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004634:	bf00      	nop
    }

    if(status == HAL_OK)
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10d      	bne.n	8004658 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800463c:	4b3e      	ldr	r3, [pc, #248]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6819      	ldr	r1, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	3b01      	subs	r3, #1
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	430b      	orrs	r3, r1
 8004652:	4939      	ldr	r1, [pc, #228]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004654:	4313      	orrs	r3, r2
 8004656:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d167      	bne.n	800472e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800465e:	4b36      	ldr	r3, [pc, #216]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a35      	ldr	r2, [pc, #212]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800466a:	f7fc fde9 	bl	8001240 <HAL_GetTick>
 800466e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004670:	e009      	b.n	8004686 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004672:	f7fc fde5 	bl	8001240 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d902      	bls.n	8004686 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	73fb      	strb	r3, [r7, #15]
        break;
 8004684:	e005      	b.n	8004692 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004686:	4b2c      	ldr	r3, [pc, #176]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1ef      	bne.n	8004672 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d14a      	bne.n	800472e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d111      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800469e:	4b26      	ldr	r3, [pc, #152]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	0211      	lsls	r1, r2, #8
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	68d2      	ldr	r2, [r2, #12]
 80046b4:	0912      	lsrs	r2, r2, #4
 80046b6:	0452      	lsls	r2, r2, #17
 80046b8:	430a      	orrs	r2, r1
 80046ba:	491f      	ldr	r1, [pc, #124]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	614b      	str	r3, [r1, #20]
 80046c0:	e011      	b.n	80046e6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6892      	ldr	r2, [r2, #8]
 80046d2:	0211      	lsls	r1, r2, #8
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6912      	ldr	r2, [r2, #16]
 80046d8:	0852      	lsrs	r2, r2, #1
 80046da:	3a01      	subs	r2, #1
 80046dc:	0652      	lsls	r2, r2, #25
 80046de:	430a      	orrs	r2, r1
 80046e0:	4915      	ldr	r1, [pc, #84]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a13      	ldr	r2, [pc, #76]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f2:	f7fc fda5 	bl	8001240 <HAL_GetTick>
 80046f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046f8:	e009      	b.n	800470e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046fa:	f7fc fda1 	bl	8001240 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d902      	bls.n	800470e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	73fb      	strb	r3, [r7, #15]
          break;
 800470c:	e005      	b.n	800471a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800470e:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0ef      	beq.n	80046fa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004722:	695a      	ldr	r2, [r3, #20]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	4903      	ldr	r1, [pc, #12]	; (8004738 <RCCEx_PLLSAI2_Config+0x1b0>)
 800472a:	4313      	orrs	r3, r2
 800472c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800472e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40021000 	.word	0x40021000

0800473c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e01d      	b.n	800478a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fc fbf8 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	4619      	mov	r1, r3
 800477a:	4610      	mov	r0, r2
 800477c:	f000 fbd2 	bl	8004f24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <HAL_TIM_Base_Start_IT+0x50>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d00b      	beq.n	80047d6 <HAL_TIM_Base_Start_IT+0x42>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	d007      	beq.n	80047d6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	00010007 	.word	0x00010007

080047e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e01d      	b.n	8004836 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc fb84 	bl	8000f1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f000 fb7c 	bl	8004f24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2201      	movs	r2, #1
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 ff70 	bl	8005738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1e      	ldr	r2, [pc, #120]	; (80048d8 <HAL_TIM_PWM_Start+0x98>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_TIM_PWM_Start+0x4a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <HAL_TIM_PWM_Start+0x9c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_TIM_PWM_Start+0x4a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <HAL_TIM_PWM_Start+0xa0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_TIM_PWM_Start+0x4a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <HAL_TIM_PWM_Start+0xa4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_TIM_PWM_Start+0x4a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <HAL_TIM_PWM_Start+0xa8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <HAL_TIM_PWM_Start+0x4e>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <HAL_TIM_PWM_Start+0x50>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <HAL_TIM_PWM_Start+0xac>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b06      	cmp	r3, #6
 80048b4:	d00b      	beq.n	80048ce <HAL_TIM_PWM_Start+0x8e>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048bc:	d007      	beq.n	80048ce <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0201 	orr.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40013400 	.word	0x40013400
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400
 80048e8:	40014800 	.word	0x40014800
 80048ec:	00010007 	.word	0x00010007

080048f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d122      	bne.n	800494c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b02      	cmp	r3, #2
 8004912:	d11b      	bne.n	800494c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0202 	mvn.w	r2, #2
 800491c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fad7 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fac9 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fada 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b04      	cmp	r3, #4
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b04      	cmp	r3, #4
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0204 	mvn.w	r2, #4
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 faad 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa9f 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fab0 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d122      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0208 	mvn.w	r2, #8
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2204      	movs	r2, #4
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fa83 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa75 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fa86 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d122      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d11b      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0210 	mvn.w	r2, #16
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fa59 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa4b 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fa5c 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d10e      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d107      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0201 	mvn.w	r2, #1
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fb fc36 	bl	80002e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b80      	cmp	r3, #128	; 0x80
 8004a80:	d10e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8c:	2b80      	cmp	r3, #128	; 0x80
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 ff04 	bl	80058a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aae:	d10e      	bne.n	8004ace <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	d107      	bne.n	8004ace <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fef7 	bl	80058bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d10e      	bne.n	8004afa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d107      	bne.n	8004afa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa0a 	bl	8004f0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d10e      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0220 	mvn.w	r2, #32
 8004b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 feb7 	bl	8005894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e105      	b.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b14      	cmp	r3, #20
 8004b5e:	f200 80f0 	bhi.w	8004d42 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004b62:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b68:	08004bbd 	.word	0x08004bbd
 8004b6c:	08004d43 	.word	0x08004d43
 8004b70:	08004d43 	.word	0x08004d43
 8004b74:	08004d43 	.word	0x08004d43
 8004b78:	08004bfd 	.word	0x08004bfd
 8004b7c:	08004d43 	.word	0x08004d43
 8004b80:	08004d43 	.word	0x08004d43
 8004b84:	08004d43 	.word	0x08004d43
 8004b88:	08004c3f 	.word	0x08004c3f
 8004b8c:	08004d43 	.word	0x08004d43
 8004b90:	08004d43 	.word	0x08004d43
 8004b94:	08004d43 	.word	0x08004d43
 8004b98:	08004c7f 	.word	0x08004c7f
 8004b9c:	08004d43 	.word	0x08004d43
 8004ba0:	08004d43 	.word	0x08004d43
 8004ba4:	08004d43 	.word	0x08004d43
 8004ba8:	08004cc1 	.word	0x08004cc1
 8004bac:	08004d43 	.word	0x08004d43
 8004bb0:	08004d43 	.word	0x08004d43
 8004bb4:	08004d43 	.word	0x08004d43
 8004bb8:	08004d01 	.word	0x08004d01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fa48 	bl	8005058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0208 	orr.w	r2, r2, #8
 8004bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0204 	bic.w	r2, r2, #4
 8004be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6999      	ldr	r1, [r3, #24]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	619a      	str	r2, [r3, #24]
      break;
 8004bfa:	e0a3      	b.n	8004d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fab8 	bl	8005178 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6999      	ldr	r1, [r3, #24]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	021a      	lsls	r2, r3, #8
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	619a      	str	r2, [r3, #24]
      break;
 8004c3c:	e082      	b.n	8004d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fb21 	bl	800528c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0208 	orr.w	r2, r2, #8
 8004c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0204 	bic.w	r2, r2, #4
 8004c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69d9      	ldr	r1, [r3, #28]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	61da      	str	r2, [r3, #28]
      break;
 8004c7c:	e062      	b.n	8004d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fb89 	bl	800539c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69d9      	ldr	r1, [r3, #28]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	021a      	lsls	r2, r3, #8
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	61da      	str	r2, [r3, #28]
      break;
 8004cbe:	e041      	b.n	8004d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fbd2 	bl	8005470 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0208 	orr.w	r2, r2, #8
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0204 	bic.w	r2, r2, #4
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cfe:	e021      	b.n	8004d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fc16 	bl	8005538 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	021a      	lsls	r2, r3, #8
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d40:	e000      	b.n	8004d44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004d42:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop

08004d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIM_ConfigClockSource+0x18>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e0a8      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x16a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	d067      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0x124>
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d80b      	bhi.n	8004dd0 <HAL_TIM_ConfigClockSource+0x70>
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d073      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x144>
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d802      	bhi.n	8004dc6 <HAL_TIM_ConfigClockSource+0x66>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d06f      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004dc4:	e078      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d06c      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x144>
 8004dca:	2b30      	cmp	r3, #48	; 0x30
 8004dcc:	d06a      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004dce:	e073      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004dd0:	2b70      	cmp	r3, #112	; 0x70
 8004dd2:	d00d      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0x90>
 8004dd4:	2b70      	cmp	r3, #112	; 0x70
 8004dd6:	d804      	bhi.n	8004de2 <HAL_TIM_ConfigClockSource+0x82>
 8004dd8:	2b50      	cmp	r3, #80	; 0x50
 8004dda:	d033      	beq.n	8004e44 <HAL_TIM_ConfigClockSource+0xe4>
 8004ddc:	2b60      	cmp	r3, #96	; 0x60
 8004dde:	d041      	beq.n	8004e64 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004de0:	e06a      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de6:	d066      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x156>
 8004de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dec:	d017      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004dee:	e063      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	6899      	ldr	r1, [r3, #8]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f000 fc7a 	bl	80056f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]
      break;
 8004e1c:	e04c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6899      	ldr	r1, [r3, #8]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f000 fc63 	bl	80056f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e40:	609a      	str	r2, [r3, #8]
      break;
 8004e42:	e039      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	461a      	mov	r2, r3
 8004e52:	f000 fbd7 	bl	8005604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2150      	movs	r1, #80	; 0x50
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fc30 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 8004e62:	e029      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	461a      	mov	r2, r3
 8004e72:	f000 fbf6 	bl	8005662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2160      	movs	r1, #96	; 0x60
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fc20 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 8004e82:	e019      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f000 fbb7 	bl	8005604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2140      	movs	r1, #64	; 0x40
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fc10 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 8004ea2:	e009      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f000 fc07 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e000      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a40      	ldr	r2, [pc, #256]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d013      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f42:	d00f      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3d      	ldr	r2, [pc, #244]	; (800503c <TIM_Base_SetConfig+0x118>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a3c      	ldr	r2, [pc, #240]	; (8005040 <TIM_Base_SetConfig+0x11c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a3b      	ldr	r2, [pc, #236]	; (8005044 <TIM_Base_SetConfig+0x120>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3a      	ldr	r2, [pc, #232]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d108      	bne.n	8004f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01f      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f84:	d01b      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2c      	ldr	r2, [pc, #176]	; (800503c <TIM_Base_SetConfig+0x118>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d017      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <TIM_Base_SetConfig+0x11c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <TIM_Base_SetConfig+0x120>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00f      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a29      	ldr	r2, [pc, #164]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00b      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a28      	ldr	r2, [pc, #160]	; (800504c <TIM_Base_SetConfig+0x128>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d007      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a27      	ldr	r2, [pc, #156]	; (8005050 <TIM_Base_SetConfig+0x12c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_Base_SetConfig+0x9a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a26      	ldr	r2, [pc, #152]	; (8005054 <TIM_Base_SetConfig+0x130>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d108      	bne.n	8004fd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a10      	ldr	r2, [pc, #64]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00f      	beq.n	800501c <TIM_Base_SetConfig+0xf8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a12      	ldr	r2, [pc, #72]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00b      	beq.n	800501c <TIM_Base_SetConfig+0xf8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a11      	ldr	r2, [pc, #68]	; (800504c <TIM_Base_SetConfig+0x128>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d007      	beq.n	800501c <TIM_Base_SetConfig+0xf8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a10      	ldr	r2, [pc, #64]	; (8005050 <TIM_Base_SetConfig+0x12c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_Base_SetConfig+0xf8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a0f      	ldr	r2, [pc, #60]	; (8005054 <TIM_Base_SetConfig+0x130>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d103      	bne.n	8005024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	615a      	str	r2, [r3, #20]
}
 800502a:	bf00      	nop
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
 8005048:	40013400 	.word	0x40013400
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800

08005058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0303 	bic.w	r3, r3, #3
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f023 0302 	bic.w	r3, r3, #2
 80050a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a2c      	ldr	r2, [pc, #176]	; (8005164 <TIM_OC1_SetConfig+0x10c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00f      	beq.n	80050d8 <TIM_OC1_SetConfig+0x80>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a2b      	ldr	r2, [pc, #172]	; (8005168 <TIM_OC1_SetConfig+0x110>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <TIM_OC1_SetConfig+0x80>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a2a      	ldr	r2, [pc, #168]	; (800516c <TIM_OC1_SetConfig+0x114>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_OC1_SetConfig+0x80>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a29      	ldr	r2, [pc, #164]	; (8005170 <TIM_OC1_SetConfig+0x118>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_OC1_SetConfig+0x80>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a28      	ldr	r2, [pc, #160]	; (8005174 <TIM_OC1_SetConfig+0x11c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d10c      	bne.n	80050f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f023 0308 	bic.w	r3, r3, #8
 80050de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 0304 	bic.w	r3, r3, #4
 80050f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a1b      	ldr	r2, [pc, #108]	; (8005164 <TIM_OC1_SetConfig+0x10c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00f      	beq.n	800511a <TIM_OC1_SetConfig+0xc2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1a      	ldr	r2, [pc, #104]	; (8005168 <TIM_OC1_SetConfig+0x110>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00b      	beq.n	800511a <TIM_OC1_SetConfig+0xc2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a19      	ldr	r2, [pc, #100]	; (800516c <TIM_OC1_SetConfig+0x114>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d007      	beq.n	800511a <TIM_OC1_SetConfig+0xc2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a18      	ldr	r2, [pc, #96]	; (8005170 <TIM_OC1_SetConfig+0x118>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d003      	beq.n	800511a <TIM_OC1_SetConfig+0xc2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a17      	ldr	r2, [pc, #92]	; (8005174 <TIM_OC1_SetConfig+0x11c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d111      	bne.n	800513e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	621a      	str	r2, [r3, #32]
}
 8005158:	bf00      	nop
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40013400 	.word	0x40013400
 800516c:	40014000 	.word	0x40014000
 8005170:	40014400 	.word	0x40014400
 8005174:	40014800 	.word	0x40014800

08005178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f023 0210 	bic.w	r2, r3, #16
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 0320 	bic.w	r3, r3, #32
 80051c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a28      	ldr	r2, [pc, #160]	; (8005278 <TIM_OC2_SetConfig+0x100>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_OC2_SetConfig+0x6c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a27      	ldr	r2, [pc, #156]	; (800527c <TIM_OC2_SetConfig+0x104>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d10d      	bne.n	8005200 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <TIM_OC2_SetConfig+0x100>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00f      	beq.n	8005228 <TIM_OC2_SetConfig+0xb0>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a1c      	ldr	r2, [pc, #112]	; (800527c <TIM_OC2_SetConfig+0x104>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00b      	beq.n	8005228 <TIM_OC2_SetConfig+0xb0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a1b      	ldr	r2, [pc, #108]	; (8005280 <TIM_OC2_SetConfig+0x108>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d007      	beq.n	8005228 <TIM_OC2_SetConfig+0xb0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a1a      	ldr	r2, [pc, #104]	; (8005284 <TIM_OC2_SetConfig+0x10c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d003      	beq.n	8005228 <TIM_OC2_SetConfig+0xb0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a19      	ldr	r2, [pc, #100]	; (8005288 <TIM_OC2_SetConfig+0x110>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d113      	bne.n	8005250 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800522e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40013400 	.word	0x40013400
 8005280:	40014000 	.word	0x40014000
 8005284:	40014400 	.word	0x40014400
 8005288:	40014800 	.word	0x40014800

0800528c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a27      	ldr	r2, [pc, #156]	; (8005388 <TIM_OC3_SetConfig+0xfc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_OC3_SetConfig+0x6a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a26      	ldr	r2, [pc, #152]	; (800538c <TIM_OC3_SetConfig+0x100>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d10d      	bne.n	8005312 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <TIM_OC3_SetConfig+0xfc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00f      	beq.n	800533a <TIM_OC3_SetConfig+0xae>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a1b      	ldr	r2, [pc, #108]	; (800538c <TIM_OC3_SetConfig+0x100>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00b      	beq.n	800533a <TIM_OC3_SetConfig+0xae>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a1a      	ldr	r2, [pc, #104]	; (8005390 <TIM_OC3_SetConfig+0x104>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d007      	beq.n	800533a <TIM_OC3_SetConfig+0xae>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a19      	ldr	r2, [pc, #100]	; (8005394 <TIM_OC3_SetConfig+0x108>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_OC3_SetConfig+0xae>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <TIM_OC3_SetConfig+0x10c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d113      	bne.n	8005362 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	621a      	str	r2, [r3, #32]
}
 800537c:	bf00      	nop
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40013400 	.word	0x40013400
 8005390:	40014000 	.word	0x40014000
 8005394:	40014400 	.word	0x40014400
 8005398:	40014800 	.word	0x40014800

0800539c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	031b      	lsls	r3, r3, #12
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a18      	ldr	r2, [pc, #96]	; (800545c <TIM_OC4_SetConfig+0xc0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00f      	beq.n	8005420 <TIM_OC4_SetConfig+0x84>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a17      	ldr	r2, [pc, #92]	; (8005460 <TIM_OC4_SetConfig+0xc4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00b      	beq.n	8005420 <TIM_OC4_SetConfig+0x84>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a16      	ldr	r2, [pc, #88]	; (8005464 <TIM_OC4_SetConfig+0xc8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_OC4_SetConfig+0x84>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a15      	ldr	r2, [pc, #84]	; (8005468 <TIM_OC4_SetConfig+0xcc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_OC4_SetConfig+0x84>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a14      	ldr	r2, [pc, #80]	; (800546c <TIM_OC4_SetConfig+0xd0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d109      	bne.n	8005434 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	019b      	lsls	r3, r3, #6
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40013400 	.word	0x40013400
 8005464:	40014000 	.word	0x40014000
 8005468:	40014400 	.word	0x40014400
 800546c:	40014800 	.word	0x40014800

08005470 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80054b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	041b      	lsls	r3, r3, #16
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a17      	ldr	r2, [pc, #92]	; (8005524 <TIM_OC5_SetConfig+0xb4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00f      	beq.n	80054ea <TIM_OC5_SetConfig+0x7a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a16      	ldr	r2, [pc, #88]	; (8005528 <TIM_OC5_SetConfig+0xb8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00b      	beq.n	80054ea <TIM_OC5_SetConfig+0x7a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a15      	ldr	r2, [pc, #84]	; (800552c <TIM_OC5_SetConfig+0xbc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <TIM_OC5_SetConfig+0x7a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a14      	ldr	r2, [pc, #80]	; (8005530 <TIM_OC5_SetConfig+0xc0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_OC5_SetConfig+0x7a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a13      	ldr	r2, [pc, #76]	; (8005534 <TIM_OC5_SetConfig+0xc4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d109      	bne.n	80054fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	021b      	lsls	r3, r3, #8
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	621a      	str	r2, [r3, #32]
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40013400 	.word	0x40013400
 800552c:	40014000 	.word	0x40014000
 8005530:	40014400 	.word	0x40014400
 8005534:	40014800 	.word	0x40014800

08005538 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800557e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	051b      	lsls	r3, r3, #20
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a18      	ldr	r2, [pc, #96]	; (80055f0 <TIM_OC6_SetConfig+0xb8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00f      	beq.n	80055b4 <TIM_OC6_SetConfig+0x7c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a17      	ldr	r2, [pc, #92]	; (80055f4 <TIM_OC6_SetConfig+0xbc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00b      	beq.n	80055b4 <TIM_OC6_SetConfig+0x7c>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <TIM_OC6_SetConfig+0xc0>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d007      	beq.n	80055b4 <TIM_OC6_SetConfig+0x7c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a15      	ldr	r2, [pc, #84]	; (80055fc <TIM_OC6_SetConfig+0xc4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d003      	beq.n	80055b4 <TIM_OC6_SetConfig+0x7c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a14      	ldr	r2, [pc, #80]	; (8005600 <TIM_OC6_SetConfig+0xc8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d109      	bne.n	80055c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	029b      	lsls	r3, r3, #10
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	621a      	str	r2, [r3, #32]
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40012c00 	.word	0x40012c00
 80055f4:	40013400 	.word	0x40013400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40014400 	.word	0x40014400
 8005600:	40014800 	.word	0x40014800

08005604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800562e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 030a 	bic.w	r3, r3, #10
 8005640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005662:	b480      	push	{r7}
 8005664:	b087      	sub	sp, #28
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0210 	bic.w	r2, r3, #16
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800568c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	031b      	lsls	r3, r3, #12
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800569e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	f043 0307 	orr.w	r3, r3, #7
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	431a      	orrs	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4313      	orrs	r3, r2
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2201      	movs	r2, #1
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1a      	ldr	r2, [r3, #32]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	43db      	mvns	r3, r3
 800575a:	401a      	ands	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005798:	2302      	movs	r3, #2
 800579a:	e068      	b.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2e      	ldr	r2, [pc, #184]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2d      	ldr	r2, [pc, #180]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d108      	bne.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1e      	ldr	r2, [pc, #120]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d01d      	beq.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580e:	d018      	beq.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1a      	ldr	r2, [pc, #104]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00e      	beq.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a18      	ldr	r2, [pc, #96]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a13      	ldr	r2, [pc, #76]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a14      	ldr	r2, [pc, #80]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d10c      	bne.n	800585c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	4313      	orrs	r3, r2
 8005852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40012c00 	.word	0x40012c00
 8005880:	40013400 	.word	0x40013400
 8005884:	40000400 	.word	0x40000400
 8005888:	40000800 	.word	0x40000800
 800588c:	40000c00 	.word	0x40000c00
 8005890:	40014000 	.word	0x40014000

08005894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <__libc_init_array>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4e0d      	ldr	r6, [pc, #52]	; (8005908 <__libc_init_array+0x38>)
 80058d4:	4c0d      	ldr	r4, [pc, #52]	; (800590c <__libc_init_array+0x3c>)
 80058d6:	1ba4      	subs	r4, r4, r6
 80058d8:	10a4      	asrs	r4, r4, #2
 80058da:	2500      	movs	r5, #0
 80058dc:	42a5      	cmp	r5, r4
 80058de:	d109      	bne.n	80058f4 <__libc_init_array+0x24>
 80058e0:	4e0b      	ldr	r6, [pc, #44]	; (8005910 <__libc_init_array+0x40>)
 80058e2:	4c0c      	ldr	r4, [pc, #48]	; (8005914 <__libc_init_array+0x44>)
 80058e4:	f000 f820 	bl	8005928 <_init>
 80058e8:	1ba4      	subs	r4, r4, r6
 80058ea:	10a4      	asrs	r4, r4, #2
 80058ec:	2500      	movs	r5, #0
 80058ee:	42a5      	cmp	r5, r4
 80058f0:	d105      	bne.n	80058fe <__libc_init_array+0x2e>
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058f8:	4798      	blx	r3
 80058fa:	3501      	adds	r5, #1
 80058fc:	e7ee      	b.n	80058dc <__libc_init_array+0xc>
 80058fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005902:	4798      	blx	r3
 8005904:	3501      	adds	r5, #1
 8005906:	e7f2      	b.n	80058ee <__libc_init_array+0x1e>
 8005908:	08005980 	.word	0x08005980
 800590c:	08005980 	.word	0x08005980
 8005910:	08005980 	.word	0x08005980
 8005914:	08005984 	.word	0x08005984

08005918 <memset>:
 8005918:	4402      	add	r2, r0
 800591a:	4603      	mov	r3, r0
 800591c:	4293      	cmp	r3, r2
 800591e:	d100      	bne.n	8005922 <memset+0xa>
 8005920:	4770      	bx	lr
 8005922:	f803 1b01 	strb.w	r1, [r3], #1
 8005926:	e7f9      	b.n	800591c <memset+0x4>

08005928 <_init>:
 8005928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592a:	bf00      	nop
 800592c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592e:	bc08      	pop	{r3}
 8005930:	469e      	mov	lr, r3
 8005932:	4770      	bx	lr

08005934 <_fini>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	bf00      	nop
 8005938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593a:	bc08      	pop	{r3}
 800593c:	469e      	mov	lr, r3
 800593e:	4770      	bx	lr
