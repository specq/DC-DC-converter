
expmpc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005eb8  08005eb8  00015eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ef8  08005ef8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ef8  08005ef8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ef8  08005ef8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005efc  08005efc  00015efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000010  08005f0c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005f0c  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001151e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020cd  00000000  00000000  0003155a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  00033628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001018  00000000  00000000  00034748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c51  00000000  00000000  00035760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c719  00000000  00000000  0005d3b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe7cd  00000000  00000000  00069aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168297  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048cc  00000000  00000000  00168314  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ea0 	.word	0x08005ea0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005ea0 	.word	0x08005ea0

080001c8 <swap>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void swap(int* a, int* b)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	int t = *a;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	60fb      	str	r3, [r7, #12]
    *a = *b;
 80001d8:	683b      	ldr	r3, [r7, #0]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	601a      	str	r2, [r3, #0]
    *b = t;
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	601a      	str	r2, [r3, #0]
}
 80001e6:	bf00      	nop
 80001e8:	3714      	adds	r7, #20
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr

080001f2 <partition>:

int partition (int arr[], int low, int high)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b088      	sub	sp, #32
 80001f6:	af00      	add	r7, sp, #0
 80001f8:	60f8      	str	r0, [r7, #12]
 80001fa:	60b9      	str	r1, [r7, #8]
 80001fc:	607a      	str	r2, [r7, #4]
	int pivot = arr[high];    // pivot
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	68fa      	ldr	r2, [r7, #12]
 8000204:	4413      	add	r3, r2
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	617b      	str	r3, [r7, #20]
	int i = (low - 1);  // Index of smaller element
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	3b01      	subs	r3, #1
 800020e:	61fb      	str	r3, [r7, #28]

    for (int j = low; j <= high- 1; j++)
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	61bb      	str	r3, [r7, #24]
 8000214:	e018      	b.n	8000248 <partition+0x56>
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
 8000216:	69bb      	ldr	r3, [r7, #24]
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	68fa      	ldr	r2, [r7, #12]
 800021c:	4413      	add	r3, r2
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	429a      	cmp	r2, r3
 8000224:	dd0d      	ble.n	8000242 <partition+0x50>
        {
            i++;    // increment index of smaller element
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	3301      	adds	r3, #1
 800022a:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 800022c:	69fb      	ldr	r3, [r7, #28]
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	18d0      	adds	r0, r2, r3
 8000234:	69bb      	ldr	r3, [r7, #24]
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	4413      	add	r3, r2
 800023c:	4619      	mov	r1, r3
 800023e:	f7ff ffc3 	bl	80001c8 <swap>
    for (int j = low; j <= high- 1; j++)
 8000242:	69bb      	ldr	r3, [r7, #24]
 8000244:	3301      	adds	r3, #1
 8000246:	61bb      	str	r3, [r7, #24]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	69ba      	ldr	r2, [r7, #24]
 800024e:	429a      	cmp	r2, r3
 8000250:	dde1      	ble.n	8000216 <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8000252:	69fb      	ldr	r3, [r7, #28]
 8000254:	3301      	adds	r3, #1
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	18d0      	adds	r0, r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	4413      	add	r3, r2
 8000264:	4619      	mov	r1, r3
 8000266:	f7ff ffaf 	bl	80001c8 <swap>
    return (i + 1);
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	3301      	adds	r3, #1
}
 800026e:	4618      	mov	r0, r3
 8000270:	3720      	adds	r7, #32
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}

08000276 <quickSort>:

void quickSort(int arr[], int low, int high)
{
 8000276:	b580      	push	{r7, lr}
 8000278:	b086      	sub	sp, #24
 800027a:	af00      	add	r7, sp, #0
 800027c:	60f8      	str	r0, [r7, #12]
 800027e:	60b9      	str	r1, [r7, #8]
 8000280:	607a      	str	r2, [r7, #4]
    if (low < high)
 8000282:	68ba      	ldr	r2, [r7, #8]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	429a      	cmp	r2, r3
 8000288:	da13      	bge.n	80002b2 <quickSort+0x3c>
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
    	int pi = partition(arr, low, high);
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	68b9      	ldr	r1, [r7, #8]
 800028e:	68f8      	ldr	r0, [r7, #12]
 8000290:	f7ff ffaf 	bl	80001f2 <partition>
 8000294:	6178      	str	r0, [r7, #20]

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	3b01      	subs	r3, #1
 800029a:	461a      	mov	r2, r3
 800029c:	68b9      	ldr	r1, [r7, #8]
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f7ff ffe9 	bl	8000276 <quickSort>
        quickSort(arr, pi + 1, high);
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	3301      	adds	r3, #1
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	4619      	mov	r1, r3
 80002ac:	68f8      	ldr	r0, [r7, #12]
 80002ae:	f7ff ffe2 	bl	8000276 <quickSort>
    }
}
 80002b2:	bf00      	nop
 80002b4:	3718      	adds	r7, #24
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <get_median>:

int get_median(int *values){
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
	int n = sizeof(values)/sizeof(values[0]);
 80002c2:	2301      	movs	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
    quickSort(values, 0, n-1);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	461a      	mov	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f7ff ffd1 	bl	8000276 <quickSort>
    return values[SIZE/2];
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68db      	ldr	r3, [r3, #12]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80002e4:	b0b2      	sub	sp, #200	; 0xc8
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	f040 8486 	bne.w	8000c04 <HAL_TIM_PeriodElapsedCallback+0x924>
    {
		if(iter < 10000){
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000300:	4293      	cmp	r3, r2
 8000302:	d807      	bhi.n	8000314 <HAL_TIM_PeriodElapsedCallback+0x34>
			iter++;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	b29a      	uxth	r2, r3
 800030c:	4b04      	ldr	r3, [pc, #16]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800030e:	801a      	strh	r2, [r3, #0]
			htim2.Instance->CCR2 = input;
			//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, input*4095/13197);
		}
	}
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
}
 8000310:	f000 bc78 	b.w	8000c04 <HAL_TIM_PeriodElapsedCallback+0x924>
			for(uint8_t i = 0; i<SIZE; i++){
 8000314:	2300      	movs	r3, #0
 8000316:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800031a:	e022      	b.n	8000362 <HAL_TIM_PeriodElapsedCallback+0x82>
 800031c:	200000d8 	.word	0x200000d8
 8000320:	20000030 	.word	0x20000030
				value0[i] = (int)adc_buf0[i];
 8000324:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000328:	4ac9      	ldr	r2, [pc, #804]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800032a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800032e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000338:	440b      	add	r3, r1
 800033a:	f843 2ca4 	str.w	r2, [r3, #-164]
				value1[i] = (int)adc_buf1[i];
 800033e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000342:	4ac4      	ldr	r2, [pc, #784]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000344:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000348:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000352:	440b      	add	r3, r1
 8000354:	f843 2cc0 	str.w	r2, [r3, #-192]
			for(uint8_t i = 0; i<SIZE; i++){
 8000358:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800035c:	3301      	adds	r3, #1
 800035e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8000362:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000366:	2b06      	cmp	r3, #6
 8000368:	d9dc      	bls.n	8000324 <HAL_TIM_PeriodElapsedCallback+0x44>
			y[0] = get_median(value0); y[0] *= 1075; y[0] /= 10000;
 800036a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ffa3 	bl	80002ba <get_median>
 8000374:	4602      	mov	r2, r0
 8000376:	4bb8      	ldr	r3, [pc, #736]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	4bb7      	ldr	r3, [pc, #732]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f240 4233 	movw	r2, #1075	; 0x433
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	4ab4      	ldr	r2, [pc, #720]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000388:	6013      	str	r3, [r2, #0]
 800038a:	4bb3      	ldr	r3, [pc, #716]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4ab3      	ldr	r2, [pc, #716]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000390:	fb82 1203 	smull	r1, r2, r2, r3
 8000394:	1312      	asrs	r2, r2, #12
 8000396:	17db      	asrs	r3, r3, #31
 8000398:	1ad3      	subs	r3, r2, r3
 800039a:	4aaf      	ldr	r2, [pc, #700]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800039c:	6013      	str	r3, [r2, #0]
			y[1] = get_median(value1);   y[1] *= 28900; y[1] /= 10000;
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff89 	bl	80002ba <get_median>
 80003a8:	4602      	mov	r2, r0
 80003aa:	4bab      	ldr	r3, [pc, #684]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	4baa      	ldr	r3, [pc, #680]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	f247 02e4 	movw	r2, #28900	; 0x70e4
 80003b6:	fb02 f303 	mul.w	r3, r2, r3
 80003ba:	4aa7      	ldr	r2, [pc, #668]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80003bc:	6053      	str	r3, [r2, #4]
 80003be:	4ba6      	ldr	r3, [pc, #664]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	4aa6      	ldr	r2, [pc, #664]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80003c4:	fb82 1203 	smull	r1, r2, r2, r3
 80003c8:	1312      	asrs	r2, r2, #12
 80003ca:	17db      	asrs	r3, r3, #31
 80003cc:	1ad3      	subs	r3, r2, r3
 80003ce:	4aa2      	ldr	r2, [pc, #648]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80003d0:	6053      	str	r3, [r2, #4]
			int x0_prev = x[0];
 80003d2:	4ba3      	ldr	r3, [pc, #652]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			int x1_prev = x[1];
 80003da:	4ba1      	ldr	r3, [pc, #644]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			x_est[0] = 97136*x0_prev - 978*x1_prev + 14878*u;    x_est[0] /= 100000;
 80003e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80003e6:	4a9f      	ldr	r2, [pc, #636]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80003e8:	fb02 f203 	mul.w	r2, r2, r3
 80003ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80003f0:	499d      	ldr	r1, [pc, #628]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80003f2:	fb01 f303 	mul.w	r3, r1, r3
 80003f6:	441a      	add	r2, r3
 80003f8:	4b9c      	ldr	r3, [pc, #624]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f643 211e 	movw	r1, #14878	; 0x3a1e
 8000400:	fb01 f303 	mul.w	r3, r1, r3
 8000404:	4413      	add	r3, r2
 8000406:	4a9a      	ldr	r2, [pc, #616]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000408:	6013      	str	r3, [r2, #0]
 800040a:	4b99      	ldr	r3, [pc, #612]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a99      	ldr	r2, [pc, #612]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000410:	fb82 1203 	smull	r1, r2, r2, r3
 8000414:	1352      	asrs	r2, r2, #13
 8000416:	17db      	asrs	r3, r3, #31
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	4a95      	ldr	r2, [pc, #596]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800041c:	6013      	str	r3, [r2, #0]
			x_est[1] = 173187*x0_prev + 97046*x1_prev + 18083*u; x_est[1] /= 100000;
 800041e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000422:	4a95      	ldr	r2, [pc, #596]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000424:	fb02 f203 	mul.w	r2, r2, r3
 8000428:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800042c:	4993      	ldr	r1, [pc, #588]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800042e:	fb01 f303 	mul.w	r3, r1, r3
 8000432:	441a      	add	r2, r3
 8000434:	4b8d      	ldr	r3, [pc, #564]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f244 61a3 	movw	r1, #18083	; 0x46a3
 800043c:	fb01 f303 	mul.w	r3, r1, r3
 8000440:	4413      	add	r3, r2
 8000442:	4a8b      	ldr	r2, [pc, #556]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000444:	6053      	str	r3, [r2, #4]
 8000446:	4b8a      	ldr	r3, [pc, #552]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	4a8a      	ldr	r2, [pc, #552]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800044c:	fb82 1203 	smull	r1, r2, r2, r3
 8000450:	1352      	asrs	r2, r2, #13
 8000452:	17db      	asrs	r3, r3, #31
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	4a86      	ldr	r2, [pc, #536]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000458:	6053      	str	r3, [r2, #4]
			int alpha = 200;
 800045a:	23c8      	movs	r3, #200	; 0xc8
 800045c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			int alpha_bar = 1000-alpha;
 8000460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000464:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			x[0] = alpha*y[0] + alpha_bar*x_est[0]; x[0] /= 1000;
 800046c:	4b7a      	ldr	r3, [pc, #488]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000474:	fb02 f203 	mul.w	r2, r2, r3
 8000478:	4b7d      	ldr	r3, [pc, #500]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000480:	fb01 f303 	mul.w	r3, r1, r3
 8000484:	4413      	add	r3, r2
 8000486:	4a76      	ldr	r2, [pc, #472]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000488:	6013      	str	r3, [r2, #0]
 800048a:	4b75      	ldr	r3, [pc, #468]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a7c      	ldr	r2, [pc, #496]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000490:	fb82 1203 	smull	r1, r2, r2, r3
 8000494:	1192      	asrs	r2, r2, #6
 8000496:	17db      	asrs	r3, r3, #31
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	4a71      	ldr	r2, [pc, #452]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800049c:	6013      	str	r3, [r2, #0]
			x[1] = alpha*y[1] + alpha_bar*x_est[1]; x[1] /= 1000;
 800049e:	4b6e      	ldr	r3, [pc, #440]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80004a6:	fb02 f203 	mul.w	r2, r2, r3
 80004aa:	4b71      	ldr	r3, [pc, #452]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80004b2:	fb01 f303 	mul.w	r3, r1, r3
 80004b6:	4413      	add	r3, r2
 80004b8:	4a69      	ldr	r2, [pc, #420]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80004ba:	6053      	str	r3, [r2, #4]
 80004bc:	4b68      	ldr	r3, [pc, #416]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	4a6f      	ldr	r2, [pc, #444]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80004c2:	fb82 1203 	smull	r1, r2, r2, r3
 80004c6:	1192      	asrs	r2, r2, #6
 80004c8:	17db      	asrs	r3, r3, #31
 80004ca:	1ad3      	subs	r3, r2, r3
 80004cc:	4a64      	ldr	r2, [pc, #400]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80004ce:	6053      	str	r3, [r2, #4]
			int dx0 = x[0] - xs0;
 80004d0:	4b63      	ldr	r3, [pc, #396]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2232      	movs	r2, #50	; 0x32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			int dx1 = x[1] - xs1;
 80004dc:	4b60      	ldr	r3, [pc, #384]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			int H11 = -1000*dx0-49999;              H11 = H11<=0;
 80004ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80004ee:	4a65      	ldr	r2, [pc, #404]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80004f0:	fb02 f303 	mul.w	r3, r2, r3
 80004f4:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 80004f8:	3b4f      	subs	r3, #79	; 0x4f
 80004fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80004fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000502:	2b00      	cmp	r3, #0
 8000504:	bfd4      	ite	le
 8000506:	2301      	movle	r3, #1
 8000508:	2300      	movgt	r3, #0
 800050a:	b2db      	uxtb	r3, r3
 800050c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			int H12 = -948*dx0+317*dx1-246980;      H12 = H12<=0;
 8000510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000514:	4a5c      	ldr	r2, [pc, #368]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000516:	fb02 f203 	mul.w	r2, r2, r3
 800051a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800051e:	f240 113d 	movw	r1, #317	; 0x13d
 8000522:	fb01 f303 	mul.w	r3, r1, r3
 8000526:	4413      	add	r3, r2
 8000528:	f5a3 3371 	sub.w	r3, r3, #246784	; 0x3c400
 800052c:	3bc4      	subs	r3, #196	; 0xc4
 800052e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000536:	2b00      	cmp	r3, #0
 8000538:	bfd4      	ite	le
 800053a:	2301      	movle	r3, #1
 800053c:	2300      	movgt	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			int H13 = 948*dx0-317*dx1-740942;       H13 = H13<=0;
 8000544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000548:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 800054c:	fb02 f203 	mul.w	r2, r2, r3
 8000550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000554:	f46f 719e 	mvn.w	r1, #316	; 0x13c
 8000558:	fb01 f303 	mul.w	r3, r1, r3
 800055c:	4413      	add	r3, r2
 800055e:	f5a3 2334 	sub.w	r3, r3, #737280	; 0xb4000
 8000562:	f6a3 634e 	subw	r3, r3, #3662	; 0xe4e
 8000566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800056a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800056e:	2b00      	cmp	r3, #0
 8000570:	bfd4      	ite	le
 8000572:	2301      	movle	r3, #1
 8000574:	2300      	movgt	r3, #0
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			int H14 = 997*dx0+69*dx1-64337;         H14 = H14<=0;
 800057c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000580:	f240 32e5 	movw	r2, #997	; 0x3e5
 8000584:	fb02 f103 	mul.w	r1, r2, r3
 8000588:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800058c:	4613      	mov	r3, r2
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	4413      	add	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	440b      	add	r3, r1
 8000598:	f5a3 437b 	sub.w	r3, r3, #64256	; 0xfb00
 800059c:	3b51      	subs	r3, #81	; 0x51
 800059e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80005a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	bfd4      	ite	le
 80005aa:	2301      	movle	r3, #1
 80005ac:	2300      	movgt	r3, #0
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			int H15 = -997*dx0-69*dx1-126088;       H15 = H15<=0;
 80005b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80005b8:	f46f 7279 	mvn.w	r2, #996	; 0x3e4
 80005bc:	fb02 f203 	mul.w	r2, r2, r3
 80005c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005c4:	f06f 0144 	mvn.w	r1, #68	; 0x44
 80005c8:	fb01 f303 	mul.w	r3, r1, r3
 80005cc:	4413      	add	r3, r2
 80005ce:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80005d2:	3b88      	subs	r3, #136	; 0x88
 80005d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80005d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80005dc:	2b00      	cmp	r3, #0
 80005de:	bfd4      	ite	le
 80005e0:	2301      	movle	r3, #1
 80005e2:	2300      	movgt	r3, #0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			int H16 = 1000*dx0-150000;              H16 = H16<=0;
 80005ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80005ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f2:	fb02 f303 	mul.w	r3, r2, r3
 80005f6:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 80005fa:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80005fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000602:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000606:	2b00      	cmp	r3, #0
 8000608:	bfd4      	ite	le
 800060a:	2301      	movle	r3, #1
 800060c:	2300      	movgt	r3, #0
 800060e:	b2db      	uxtb	r3, r3
 8000610:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			if(H11 && H12 && H13 && H14 && H15 && H16){
 8000614:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000618:	2b00      	cmp	r3, #0
 800061a:	f000 8098 	beq.w	800074e <HAL_TIM_PeriodElapsedCallback+0x46e>
 800061e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000622:	2b00      	cmp	r3, #0
 8000624:	f000 8093 	beq.w	800074e <HAL_TIM_PeriodElapsedCallback+0x46e>
 8000628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800062c:	2b00      	cmp	r3, #0
 800062e:	f000 808e 	beq.w	800074e <HAL_TIM_PeriodElapsedCallback+0x46e>
 8000632:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000636:	2b00      	cmp	r3, #0
 8000638:	f000 8089 	beq.w	800074e <HAL_TIM_PeriodElapsedCallback+0x46e>
 800063c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000640:	2b00      	cmp	r3, #0
 8000642:	f000 8084 	beq.w	800074e <HAL_TIM_PeriodElapsedCallback+0x46e>
 8000646:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800064a:	2b00      	cmp	r3, #0
 800064c:	d07f      	beq.n	800074e <HAL_TIM_PeriodElapsedCallback+0x46e>
 800064e:	e01d      	b.n	800068c <HAL_TIM_PeriodElapsedCallback+0x3ac>
 8000650:	2000025c 	.word	0x2000025c
 8000654:	20000118 	.word	0x20000118
 8000658:	2000003c 	.word	0x2000003c
 800065c:	68db8bad 	.word	0x68db8bad
 8000660:	20000034 	.word	0x20000034
 8000664:	00017b70 	.word	0x00017b70
 8000668:	fffffc2e 	.word	0xfffffc2e
 800066c:	2000002c 	.word	0x2000002c
 8000670:	20000044 	.word	0x20000044
 8000674:	14f8b589 	.word	0x14f8b589
 8000678:	0002a483 	.word	0x0002a483
 800067c:	00017b16 	.word	0x00017b16
 8000680:	10624dd3 	.word	0x10624dd3
 8000684:	fffffc18 	.word	0xfffffc18
 8000688:	fffffc4c 	.word	0xfffffc4c
				u = -5237*dx0; u -= 366*dx1;
 800068c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000690:	4a9e      	ldr	r2, [pc, #632]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8000692:	fb02 f303 	mul.w	r3, r2, r3
 8000696:	4a9e      	ldr	r2, [pc, #632]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8000698:	6013      	str	r3, [r2, #0]
 800069a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800069e:	4a9d      	ldr	r2, [pc, #628]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x634>)
 80006a0:	fb02 f203 	mul.w	r2, r2, r3
 80006a4:	4b9a      	ldr	r3, [pc, #616]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a99      	ldr	r2, [pc, #612]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80006ac:	6013      	str	r3, [r2, #0]
				if(!settled){
 80006ae:	4b9a      	ldr	r3, [pc, #616]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	f083 0301 	eor.w	r3, r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d021      	beq.n	8000700 <HAL_TIM_PeriodElapsedCallback+0x420>
					int diff = x[0]-x0_prev;
 80006bc:	4b97      	ldr	r3, [pc, #604]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					if(diff > -100 && diff < 100){
 80006ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006ce:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80006d2:	db11      	blt.n	80006f8 <HAL_TIM_PeriodElapsedCallback+0x418>
 80006d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006d8:	2b63      	cmp	r3, #99	; 0x63
 80006da:	dc0d      	bgt.n	80006f8 <HAL_TIM_PeriodElapsedCallback+0x418>
						settling_iter++;
 80006dc:	4b90      	ldr	r3, [pc, #576]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b8e      	ldr	r3, [pc, #568]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80006e6:	701a      	strb	r2, [r3, #0]
						if(settling_iter == 100){
 80006e8:	4b8d      	ldr	r3, [pc, #564]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b64      	cmp	r3, #100	; 0x64
 80006ee:	d12d      	bne.n	800074c <HAL_TIM_PeriodElapsedCallback+0x46c>
							settled = true;
 80006f0:	4b89      	ldr	r3, [pc, #548]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
						if(settling_iter == 100){
 80006f6:	e029      	b.n	800074c <HAL_TIM_PeriodElapsedCallback+0x46c>
						settling_iter = 0;
 80006f8:	4b89      	ldr	r3, [pc, #548]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
				if(!settled){
 80006fe:	e24d      	b.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x8bc>
					int error = 5000-y[1];
 8000700:	4b88      	ldr	r3, [pc, #544]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8000708:	3308      	adds	r3, #8
 800070a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					integral += error;
 800070e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000712:	4619      	mov	r1, r3
 8000714:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000718:	4b83      	ldr	r3, [pc, #524]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800071a:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800071e:	eb1b 0301 	adds.w	r3, fp, r1
 8000722:	eb4c 0402 	adc.w	r4, ip, r2
 8000726:	4a80      	ldr	r2, [pc, #512]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8000728:	e9c2 3400 	strd	r3, r4, [r2]
					u += 40*integral;
 800072c:	4b7e      	ldr	r3, [pc, #504]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800072e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000732:	461a      	mov	r2, r3
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	461a      	mov	r2, r3
 800073e:	4b74      	ldr	r3, [pc, #464]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4413      	add	r3, r2
 8000744:	461a      	mov	r2, r3
 8000746:	4b72      	ldr	r3, [pc, #456]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8000748:	601a      	str	r2, [r3, #0]
				if(!settled){
 800074a:	e227      	b.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x8bc>
 800074c:	e226      	b.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x8bc>
				int H51 = 998*dx0+70*dx1+126100;  H51 = H51<=0;
 800074e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000752:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000756:	fb02 f203 	mul.w	r2, r2, r3
 800075a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800075e:	2146      	movs	r1, #70	; 0x46
 8000760:	fb01 f303 	mul.w	r3, r1, r3
 8000764:	4413      	add	r3, r2
 8000766:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800076a:	3394      	adds	r3, #148	; 0x94
 800076c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000770:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000774:	2b00      	cmp	r3, #0
 8000776:	bfd4      	ite	le
 8000778:	2301      	movle	r3, #1
 800077a:	2300      	movgt	r3, #0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				int H52 = -1000*dx0-50000;       H52 = H52<=0;
 8000782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000786:	4a69      	ldr	r2, [pc, #420]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8000788:	fb02 f303 	mul.w	r3, r2, r3
 800078c:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8000790:	3b50      	subs	r3, #80	; 0x50
 8000792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800079a:	2b00      	cmp	r3, #0
 800079c:	bfd4      	ite	le
 800079e:	2301      	movle	r3, #1
 80007a0:	2300      	movgt	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				int H53 = -1000*dx1-5000000;     H53 = H53<=0;
 80007a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007ac:	4a5f      	ldr	r2, [pc, #380]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80007ae:	fb02 f203 	mul.w	r2, r2, r3
 80007b2:	4b5f      	ldr	r3, [pc, #380]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x650>)
 80007b4:	4413      	add	r3, r2
 80007b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80007b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bfd4      	ite	le
 80007be:	2301      	movle	r3, #1
 80007c0:	2300      	movgt	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	67fb      	str	r3, [r7, #124]	; 0x7c
				int H54 = 1000*dx0-10*dx1-53000;  H54 = H54<=0;
 80007c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80007ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ce:	fb02 f203 	mul.w	r2, r2, r3
 80007d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007d6:	f06f 0109 	mvn.w	r1, #9
 80007da:	fb01 f303 	mul.w	r3, r1, r3
 80007de:	4413      	add	r3, r2
 80007e0:	f5a3 434f 	sub.w	r3, r3, #52992	; 0xcf00
 80007e4:	3b08      	subs	r3, #8
 80007e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80007e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bfd4      	ite	le
 80007ee:	2301      	movle	r3, #1
 80007f0:	2300      	movgt	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	67bb      	str	r3, [r7, #120]	; 0x78
				if(H51 && H52 && H53 && H54){
 80007f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d00d      	beq.n	800081a <HAL_TIM_PeriodElapsedCallback+0x53a>
 80007fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000802:	2b00      	cmp	r3, #0
 8000804:	d009      	beq.n	800081a <HAL_TIM_PeriodElapsedCallback+0x53a>
 8000806:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000808:	2b00      	cmp	r3, #0
 800080a:	d006      	beq.n	800081a <HAL_TIM_PeriodElapsedCallback+0x53a>
 800080c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800080e:	2b00      	cmp	r3, #0
 8000810:	d003      	beq.n	800081a <HAL_TIM_PeriodElapsedCallback+0x53a>
					u = 662000;
 8000812:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8000814:	4a47      	ldr	r2, [pc, #284]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	e1c0      	b.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x8bc>
					int H31 = -1000*dx1-5000000;         H31 = H31<=0;
 800081a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800081e:	4a43      	ldr	r2, [pc, #268]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8000820:	fb02 f203 	mul.w	r2, r2, r3
 8000824:	4b42      	ldr	r3, [pc, #264]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8000826:	4413      	add	r3, r2
 8000828:	677b      	str	r3, [r7, #116]	; 0x74
 800082a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800082c:	2b00      	cmp	r3, #0
 800082e:	bfd4      	ite	le
 8000830:	2301      	movle	r3, #1
 8000832:	2300      	movgt	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	677b      	str	r3, [r7, #116]	; 0x74
					int H32 = -1000*dx0+10*dx1+53000;     H32 = H32<=0;
 8000838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800083c:	4a3b      	ldr	r2, [pc, #236]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800083e:	fb02 f103 	mul.w	r1, r2, r3
 8000842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000846:	4613      	mov	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	440b      	add	r3, r1
 8000850:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8000854:	3308      	adds	r3, #8
 8000856:	673b      	str	r3, [r7, #112]	; 0x70
 8000858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800085a:	2b00      	cmp	r3, #0
 800085c:	bfd4      	ite	le
 800085e:	2301      	movle	r3, #1
 8000860:	2300      	movgt	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	673b      	str	r3, [r7, #112]	; 0x70
					int H33 = -948*dx0+318*dx1+740900;    H33 = H33<=0;
 8000866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800086a:	4a33      	ldr	r2, [pc, #204]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800086c:	fb02 f203 	mul.w	r2, r2, r3
 8000870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000874:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8000878:	fb01 f303 	mul.w	r3, r1, r3
 800087c:	4413      	add	r3, r2
 800087e:	f503 2334 	add.w	r3, r3, #737280	; 0xb4000
 8000882:	f603 6324 	addw	r3, r3, #3620	; 0xe24
 8000886:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800088a:	2b00      	cmp	r3, #0
 800088c:	bfd4      	ite	le
 800088e:	2301      	movle	r3, #1
 8000890:	2300      	movgt	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	66fb      	str	r3, [r7, #108]	; 0x6c
					int H34 = 1000*dx0-150000;           H34 = H34<=0;
 8000896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800089a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800089e:	fb02 f303 	mul.w	r3, r2, r3
 80008a2:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 80008a6:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80008aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80008ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	bfd4      	ite	le
 80008b2:	2301      	movle	r3, #1
 80008b4:	2300      	movgt	r3, #0
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	66bb      	str	r3, [r7, #104]	; 0x68
					if(H31 && H32 && H33 && H34){
 80008ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d03f      	beq.n	8000940 <HAL_TIM_PeriodElapsedCallback+0x660>
 80008c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d03c      	beq.n	8000940 <HAL_TIM_PeriodElapsedCallback+0x660>
 80008c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d039      	beq.n	8000940 <HAL_TIM_PeriodElapsedCallback+0x660>
 80008cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d036      	beq.n	8000940 <HAL_TIM_PeriodElapsedCallback+0x660>
						u = -6528*dx0; u += 66*dx1; u += 1000000;
 80008d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80008d6:	4a19      	ldr	r2, [pc, #100]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80008d8:	fb02 f303 	mul.w	r3, r2, r3
 80008dc:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80008e4:	4613      	mov	r3, r2
 80008e6:	015b      	lsls	r3, r3, #5
 80008e8:	4413      	add	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a06      	ldr	r2, [pc, #24]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 8000900:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000904:	4a02      	ldr	r2, [pc, #8]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	e148      	b.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x8bc>
 800090a:	bf00      	nop
 800090c:	ffffeb8b 	.word	0xffffeb8b
 8000910:	2000002c 	.word	0x2000002c
 8000914:	fffffe92 	.word	0xfffffe92
 8000918:	20000058 	.word	0x20000058
 800091c:	20000034 	.word	0x20000034
 8000920:	20000059 	.word	0x20000059
 8000924:	2000003c 	.word	0x2000003c
 8000928:	20000050 	.word	0x20000050
 800092c:	fffffc18 	.word	0xfffffc18
 8000930:	ffb3b4c0 	.word	0xffb3b4c0
 8000934:	000a19f0 	.word	0x000a19f0
 8000938:	fffffc4c 	.word	0xfffffc4c
 800093c:	ffffe680 	.word	0xffffe680
						int H21 = -1000*dx0-50000;          H21 = H21<=0;
 8000940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000944:	4ab2      	ldr	r2, [pc, #712]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8000946:	fb02 f303 	mul.w	r3, r2, r3
 800094a:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800094e:	3b50      	subs	r3, #80	; 0x50
 8000950:	667b      	str	r3, [r7, #100]	; 0x64
 8000952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000954:	2b00      	cmp	r3, #0
 8000956:	bfd4      	ite	le
 8000958:	2301      	movle	r3, #1
 800095a:	2300      	movgt	r3, #0
 800095c:	b2db      	uxtb	r3, r3
 800095e:	667b      	str	r3, [r7, #100]	; 0x64
						int H22 = 489*dx0+872*dx1-1533900;  H22 = H22<=0;
 8000960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000964:	f240 12e9 	movw	r2, #489	; 0x1e9
 8000968:	fb02 f203 	mul.w	r2, r2, r3
 800096c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000970:	f44f 715a 	mov.w	r1, #872	; 0x368
 8000974:	fb01 f303 	mul.w	r3, r1, r3
 8000978:	4413      	add	r3, r2
 800097a:	f5a3 13bb 	sub.w	r3, r3, #1531904	; 0x176000
 800097e:	f2a3 73cc 	subw	r3, r3, #1996	; 0x7cc
 8000982:	663b      	str	r3, [r7, #96]	; 0x60
 8000984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000986:	2b00      	cmp	r3, #0
 8000988:	bfd4      	ite	le
 800098a:	2301      	movle	r3, #1
 800098c:	2300      	movgt	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	663b      	str	r3, [r7, #96]	; 0x60
						int H23 = 1000*dx0-10*dx1-300;      H23 = H23<=0;
 8000992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000996:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800099a:	fb02 f203 	mul.w	r2, r2, r3
 800099e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009a2:	f06f 0109 	mvn.w	r1, #9
 80009a6:	fb01 f303 	mul.w	r3, r1, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80009b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bfd4      	ite	le
 80009b8:	2301      	movle	r3, #1
 80009ba:	2300      	movgt	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	65fb      	str	r3, [r7, #92]	; 0x5c
						int H24 = 948*dx0-318*dx1+247000;   H24 = H24<=0;
 80009c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80009c4:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 80009c8:	fb02 f203 	mul.w	r2, r2, r3
 80009cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009d0:	4990      	ldr	r1, [pc, #576]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x934>)
 80009d2:	fb01 f303 	mul.w	r3, r1, r3
 80009d6:	4413      	add	r3, r2
 80009d8:	f503 3371 	add.w	r3, r3, #246784	; 0x3c400
 80009dc:	33d8      	adds	r3, #216	; 0xd8
 80009de:	65bb      	str	r3, [r7, #88]	; 0x58
 80009e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bfd4      	ite	le
 80009e6:	2301      	movle	r3, #1
 80009e8:	2300      	movgt	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	65bb      	str	r3, [r7, #88]	; 0x58
						if(H21 && H22 && H23 && H24){
 80009ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d024      	beq.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x75e>
 80009f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d021      	beq.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x75e>
 80009fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d01e      	beq.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x75e>
 8000a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d01b      	beq.n	8000a3e <HAL_TIM_PeriodElapsedCallback+0x75e>
							u = -6527*dx0; u += 66*dx1;  u -= 335700;
 8000a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a0a:	4a83      	ldr	r2, [pc, #524]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8000a0c:	fb02 f303 	mul.w	r3, r2, r3
 8000a10:	4a82      	ldr	r2, [pc, #520]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000a18:	4613      	mov	r3, r2
 8000a1a:	015b      	lsls	r3, r3, #5
 8000a1c:	4413      	add	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b7e      	ldr	r3, [pc, #504]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a7c      	ldr	r2, [pc, #496]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	4b7b      	ldr	r3, [pc, #492]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f5a3 23a3 	sub.w	r3, r3, #333824	; 0x51800
 8000a34:	f2a3 7354 	subw	r3, r3, #1876	; 0x754
 8000a38:	4a78      	ldr	r2, [pc, #480]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	e0ae      	b.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x8bc>
							int H41 = 921*dx0+390*dx1-698900;             H41 = H41<=0;
 8000a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a42:	f240 3299 	movw	r2, #921	; 0x399
 8000a46:	fb02 f203 	mul.w	r2, r2, r3
 8000a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a4e:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8000a52:	fb01 f303 	mul.w	r3, r1, r3
 8000a56:	4413      	add	r3, r2
 8000a58:	f5a3 232a 	sub.w	r3, r3, #696320	; 0xaa000
 8000a5c:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000a60:	657b      	str	r3, [r7, #84]	; 0x54
 8000a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bfd4      	ite	le
 8000a68:	2301      	movle	r3, #1
 8000a6a:	2300      	movgt	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	657b      	str	r3, [r7, #84]	; 0x54
							int H42 = 973*dx0+229*dx1-447200;             H42 = H42<=0;
 8000a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a74:	f240 32cd 	movw	r2, #973	; 0x3cd
 8000a78:	fb02 f203 	mul.w	r2, r2, r3
 8000a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a80:	21e5      	movs	r1, #229	; 0xe5
 8000a82:	fb01 f303 	mul.w	r3, r1, r3
 8000a86:	4413      	add	r3, r2
 8000a88:	f5a3 23da 	sub.w	r3, r3, #446464	; 0x6d000
 8000a8c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000a90:	653b      	str	r3, [r7, #80]	; 0x50
 8000a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bfd4      	ite	le
 8000a98:	2301      	movle	r3, #1
 8000a9a:	2300      	movgt	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	653b      	str	r3, [r7, #80]	; 0x50
							int H43 = 988*dx0+157*dx1-354000;             H43 = H43<=0;
 8000aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000aa4:	f44f 7277 	mov.w	r2, #988	; 0x3dc
 8000aa8:	fb02 f203 	mul.w	r2, r2, r3
 8000aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ab0:	219d      	movs	r1, #157	; 0x9d
 8000ab2:	fb01 f303 	mul.w	r3, r1, r3
 8000ab6:	4413      	add	r3, r2
 8000ab8:	f5a3 23ac 	sub.w	r3, r3, #352256	; 0x56000
 8000abc:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	bfd4      	ite	le
 8000ac8:	2301      	movle	r3, #1
 8000aca:	2300      	movgt	r3, #0
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
							int H44 = -1000*dx0+10*dx1+300;               H43 = H43<=0;
 8000ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ad4:	4a4e      	ldr	r2, [pc, #312]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x930>)
 8000ad6:	fb02 f103 	mul.w	r1, r2, r3
 8000ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8000aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bfd4      	ite	le
 8000af4:	2301      	movle	r3, #1
 8000af6:	2300      	movgt	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	64fb      	str	r3, [r7, #76]	; 0x4c
							int H45 = -998*dx0-70*dx1+64300;              H45 = H45<=0;
 8000afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b00:	4a47      	ldr	r2, [pc, #284]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8000b02:	fb02 f203 	mul.w	r2, r2, r3
 8000b06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b0a:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8000b0e:	fb01 f303 	mul.w	r3, r1, r3
 8000b12:	4413      	add	r3, r2
 8000b14:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8000b18:	332c      	adds	r3, #44	; 0x2c
 8000b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8000b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bfd4      	ite	le
 8000b22:	2301      	movle	r3, #1
 8000b24:	2300      	movgt	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	647b      	str	r3, [r7, #68]	; 0x44
							int H46 = 1000*dx0-150000;                    H46 = H46<=0;
 8000b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b32:	fb02 f303 	mul.w	r3, r2, r3
 8000b36:	f5a3 3312 	sub.w	r3, r3, #149504	; 0x24800
 8000b3a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8000b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bfd4      	ite	le
 8000b46:	2301      	movle	r3, #1
 8000b48:	2300      	movgt	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	643b      	str	r3, [r7, #64]	; 0x40
							if(H41 && H42 && H43 && H44 && H45 && H46){
 8000b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d012      	beq.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x89a>
 8000b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00f      	beq.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x89a>
 8000b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00c      	beq.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x89a>
 8000b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d009      	beq.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x89a>
 8000b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d006      	beq.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x89a>
 8000b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x89a>
								u = -338000;
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000b74:	4a2b      	ldr	r2, [pc, #172]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x944>)
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	e010      	b.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x8bc>
								u = -4854*dx0; u += 53*dx1;
 8000b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b7e:	4a2a      	ldr	r2, [pc, #168]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8000b80:	fb02 f303 	mul.w	r3, r2, r3
 8000b84:	4a25      	ldr	r2, [pc, #148]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b8c:	2235      	movs	r2, #53	; 0x35
 8000b8e:	fb02 f203 	mul.w	r2, r2, r3
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000b9a:	6013      	str	r3, [r2, #0]
			u += us; u /= 1000;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a22      	ldr	r2, [pc, #136]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a20      	ldr	r2, [pc, #128]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8000bae:	fb82 1203 	smull	r1, r2, r2, r3
 8000bb2:	1192      	asrs	r2, r2, #6
 8000bb4:	17db      	asrs	r3, r3, #31
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000bba:	6013      	str	r3, [r2, #0]
			int input = u*COUNTER_PERIOD/1000;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	015b      	lsls	r3, r3, #5
 8000bc4:	1a9b      	subs	r3, r3, r2
 8000bc6:	01da      	lsls	r2, r3, #7
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8000bcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd0:	1192      	asrs	r2, r2, #6
 8000bd2:	17db      	asrs	r3, r3, #31
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			if(input < 0) input = 0;
 8000bda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	da02      	bge.n	8000be8 <HAL_TIM_PeriodElapsedCallback+0x908>
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			if(input > COUNTER_PERIOD) input = COUNTER_PERIOD;
 8000be8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000bec:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000bf0:	db03      	blt.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x91a>
 8000bf2:	f640 739f 	movw	r3, #3999	; 0xf9f
 8000bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			htim2.Instance->CCR2 = input;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000c02:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c04:	bf00      	nop
 8000c06:	37c8      	adds	r7, #200	; 0xc8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000c0e:	bf00      	nop
 8000c10:	fffffc18 	.word	0xfffffc18
 8000c14:	fffffec2 	.word	0xfffffec2
 8000c18:	ffffe681 	.word	0xffffe681
 8000c1c:	2000002c 	.word	0x2000002c
 8000c20:	fffffc1a 	.word	0xfffffc1a
 8000c24:	fffad7b0 	.word	0xfffad7b0
 8000c28:	ffffed0a 	.word	0xffffed0a
 8000c2c:	000527ec 	.word	0x000527ec
 8000c30:	10624dd3 	.word	0x10624dd3
 8000c34:	200001d4 	.word	0x200001d4

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3c:	f000 fd76 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c40:	f000 f836 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c44:	f000 fa9a 	bl	800117c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c48:	f000 fa72 	bl	8001130 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c4c:	f000 f8b6 	bl	8000dbc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c50:	f000 f92e 	bl	8000eb0 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000c54:	f000 f992 	bl	8000f7c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000c58:	f000 f9c2 	bl	8000fe0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c5c:	f000 fa1a 	bl	8001094 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <main+0x5c>)
 8000c64:	f002 f841 	bl	8002cea <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf0, SIZE);
 8000c68:	2207      	movs	r2, #7
 8000c6a:	490b      	ldr	r1, [pc, #44]	; (8000c98 <main+0x60>)
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <main+0x64>)
 8000c6e:	f001 f913 	bl	8001e98 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf1, SIZE);
 8000c72:	2207      	movs	r2, #7
 8000c74:	490a      	ldr	r1, [pc, #40]	; (8000ca0 <main+0x68>)
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <main+0x6c>)
 8000c78:	f001 f90e 	bl	8001e98 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8000c7c:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <main+0x70>)
 8000c7e:	f004 f845 	bl	8004d0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c82:	2104      	movs	r1, #4
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <main+0x74>)
 8000c86:	f004 f897 	bl	8004db8 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <main+0x74>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <main+0x5a>
 8000c94:	20000060 	.word	0x20000060
 8000c98:	2000025c 	.word	0x2000025c
 8000c9c:	20000074 	.word	0x20000074
 8000ca0:	20000118 	.word	0x20000118
 8000ca4:	20000128 	.word	0x20000128
 8000ca8:	200000d8 	.word	0x200000d8
 8000cac:	200001d4 	.word	0x200001d4

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0b8      	sub	sp, #224	; 0xe0
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cba:	2244      	movs	r2, #68	; 0x44
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f005 f8e6 	bl	8005e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2288      	movs	r2, #136	; 0x88
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f005 f8d8 	bl	8005e90 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cee:	2310      	movs	r3, #16
 8000cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d06:	230a      	movs	r3, #10
 8000d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 fd64 	bl	80037f0 <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d2e:	f000 fa8f 	bl	8001250 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d54:	2104      	movs	r1, #4
 8000d56:	4618      	mov	r0, r3
 8000d58:	f003 f930 	bl	8003fbc <HAL_RCC_ClockConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d62:	f000 fa75 	bl	8001250 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d6a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d70:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000d72:	2302      	movs	r3, #2
 8000d74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d8e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fade 	bl	8004354 <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000d9e:	f000 fa57 	bl	8001250 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000da2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000da6:	f002 fccd 	bl	8003744 <HAL_PWREx_ControlVoltageScaling>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000db0:	f000 fa4e 	bl	8001250 <Error_Handler>
  }
}
 8000db4:	bf00      	nop
 8000db6:	37e0      	adds	r7, #224	; 0xe0
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000de0:	4a31      	ldr	r2, [pc, #196]	; (8000ea8 <MX_ADC1_Init+0xec>)
 8000de2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000de4:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000df6:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfc:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000dfe:	2204      	movs	r2, #4
 8000e00:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e1c:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e44:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e46:	f000 fed3 	bl	8001bf0 <HAL_ADC_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e50:	f000 f9fe 	bl	8001250 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4811      	ldr	r0, [pc, #68]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e60:	f001 fd64 	bl	800292c <HAL_ADCEx_MultiModeConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e6a:	f000 f9f1 	bl	8001250 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_ADC1_Init+0xf0>)
 8000e70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e72:	2306      	movs	r3, #6
 8000e74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000e76:	2305      	movs	r3, #5
 8000e78:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e7a:	237f      	movs	r3, #127	; 0x7f
 8000e7c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_ADC1_Init+0xe8>)
 8000e8c:	f001 f8d6 	bl	800203c <HAL_ADC_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e96:	f000 f9db 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000128 	.word	0x20000128
 8000ea8:	50040000 	.word	0x50040000
 8000eac:	14f00020 	.word	0x14f00020

08000eb0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000ec8:	4a2a      	ldr	r2, [pc, #168]	; (8000f74 <MX_ADC2_Init+0xc4>)
 8000eca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ecc:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f2c:	4810      	ldr	r0, [pc, #64]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000f2e:	f000 fe5f 	bl	8001bf0 <HAL_ADC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000f38:	f000 f98a 	bl	8001250 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_ADC2_Init+0xc8>)
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f40:	2306      	movs	r3, #6
 8000f42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000f44:	2305      	movs	r3, #5
 8000f46:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f48:	237f      	movs	r3, #127	; 0x7f
 8000f4a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_ADC2_Init+0xc0>)
 8000f5a:	f001 f86f 	bl	800203c <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000f64:	f000 f974 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000074 	.word	0x20000074
 8000f74:	50040100 	.word	0x50040100
 8000f78:	19200040 	.word	0x19200040

08000f7c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2224      	movs	r2, #36	; 0x24
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f004 ff81 	bl	8005e90 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_DAC1_Init+0x5c>)
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MX_DAC1_Init+0x60>)
 8000f92:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <MX_DAC1_Init+0x5c>)
 8000f96:	f001 fe86 	bl	8002ca6 <HAL_DAC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000fa0:	f000 f956 	bl	8001250 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_DAC1_Init+0x5c>)
 8000fc0:	f001 fee0 	bl	8002d84 <HAL_DAC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000fca:	f000 f941 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000060 	.word	0x20000060
 8000fdc:	40007400 	.word	0x40007400

08000fe0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	615a      	str	r2, [r3, #20]
 8001002:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_TIM2_Init+0xb0>)
 8001006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_TIM2_Init+0xb0>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_TIM2_Init+0xb0>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_TIM2_Init+0xb0>)
 800101a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800101e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_TIM2_Init+0xb0>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_TIM2_Init+0xb0>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800102c:	4818      	ldr	r0, [pc, #96]	; (8001090 <MX_TIM2_Init+0xb0>)
 800102e:	f003 fe97 	bl	8004d60 <HAL_TIM_PWM_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001038:	f000 f90a 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <MX_TIM2_Init+0xb0>)
 800104c:	f004 fe56 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001056:	f000 f8fb 	bl	8001250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105a:	2360      	movs	r3, #96	; 0x60
 800105c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	2204      	movs	r2, #4
 800106e:	4619      	mov	r1, r3
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <MX_TIM2_Init+0xb0>)
 8001072:	f004 f819 	bl	80050a8 <HAL_TIM_PWM_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800107c:	f000 f8e8 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <MX_TIM2_Init+0xb0>)
 8001082:	f000 fa71 	bl	8001568 <HAL_TIM_MspPostInit>

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001d4 	.word	0x200001d4

08001094 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_TIM3_Init+0x94>)
 80010b4:	4a1d      	ldr	r2, [pc, #116]	; (800112c <MX_TIM3_Init+0x98>)
 80010b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_TIM3_Init+0x94>)
 80010ba:	224f      	movs	r2, #79	; 0x4f
 80010bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_TIM3_Init+0x94>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_TIM3_Init+0x94>)
 80010c6:	2263      	movs	r2, #99	; 0x63
 80010c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_TIM3_Init+0x94>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_TIM3_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010d6:	4814      	ldr	r0, [pc, #80]	; (8001128 <MX_TIM3_Init+0x94>)
 80010d8:	f003 fdec 	bl	8004cb4 <HAL_TIM_Base_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010e2:	f000 f8b5 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_TIM3_Init+0x94>)
 80010f4:	f004 f8f0 	bl	80052d8 <HAL_TIM_ConfigClockSource>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80010fe:	f000 f8a7 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_TIM3_Init+0x94>)
 8001110:	f004 fdf4 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800111a:	f000 f899 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000d8 	.word	0x200000d8
 800112c:	40000400 	.word	0x40000400

08001130 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_DMA_Init+0x48>)
 8001138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <MX_DMA_Init+0x48>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6493      	str	r3, [r2, #72]	; 0x48
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <MX_DMA_Init+0x48>)
 8001144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	200b      	movs	r0, #11
 8001154:	f001 fd71 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001158:	200b      	movs	r0, #11
 800115a:	f001 fd8a 	bl	8002c72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	200c      	movs	r0, #12
 8001164:	f001 fd69 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001168:	200c      	movs	r0, #12
 800116a:	f001 fd82 	bl	8002c72 <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <MX_GPIO_Init+0xc8>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a2b      	ldr	r2, [pc, #172]	; (8001244 <MX_GPIO_Init+0xc8>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <MX_GPIO_Init+0xc8>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <MX_GPIO_Init+0xc8>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a25      	ldr	r2, [pc, #148]	; (8001244 <MX_GPIO_Init+0xc8>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <MX_GPIO_Init+0xc8>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <MX_GPIO_Init+0xc8>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <MX_GPIO_Init+0xc8>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_GPIO_Init+0xc8>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_GPIO_Init+0xc8>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <MX_GPIO_Init+0xc8>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_GPIO_Init+0xc8>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f002 fa7c 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_GPIO_Init+0xcc>)
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_GPIO_Init+0xd0>)
 8001216:	f002 f8c7 	bl	80033a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800121a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f002 f8b7 	bl	80033a8 <HAL_GPIO_Init>

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	10210000 	.word	0x10210000
 800124c:	48000800 	.word	0x48000800

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_MspInit+0x44>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_MspInit+0x44>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6613      	str	r3, [r2, #96]	; 0x60
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_MspInit+0x44>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x44>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x44>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6593      	str	r3, [r2, #88]	; 0x58
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x44>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_ADC_MspInit+0x19c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d159      	bne.n	800137e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80012ca:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <HAL_ADC_MspInit+0x1a0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a5d      	ldr	r2, [pc, #372]	; (8001448 <HAL_ADC_MspInit+0x1a0>)
 80012d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80012d4:	4b5c      	ldr	r3, [pc, #368]	; (8001448 <HAL_ADC_MspInit+0x1a0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10b      	bne.n	80012f4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	4a5a      	ldr	r2, [pc, #360]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 80012e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e8:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b55      	ldr	r3, [pc, #340]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	4a54      	ldr	r2, [pc, #336]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001300:	4b52      	ldr	r3, [pc, #328]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130c:	2301      	movs	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001310:	230b      	movs	r3, #11
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f002 f841 	bl	80033a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 8001328:	4a4a      	ldr	r2, [pc, #296]	; (8001454 <HAL_ADC_MspInit+0x1ac>)
 800132a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800132c:	4b48      	ldr	r3, [pc, #288]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001332:	4b47      	ldr	r3, [pc, #284]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b45      	ldr	r3, [pc, #276]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b44      	ldr	r3, [pc, #272]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001344:	4b42      	ldr	r3, [pc, #264]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 8001346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800134a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800134c:	4b40      	ldr	r3, [pc, #256]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 800134e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001352:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001354:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 8001356:	2220      	movs	r2, #32
 8001358:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001360:	483b      	ldr	r0, [pc, #236]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 8001362:	f001 fe29 	bl	8002fb8 <HAL_DMA_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800136c:	f7ff ff70 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a37      	ldr	r2, [pc, #220]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 8001374:	64da      	str	r2, [r3, #76]	; 0x4c
 8001376:	4a36      	ldr	r2, [pc, #216]	; (8001450 <HAL_ADC_MspInit+0x1a8>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800137c:	e05d      	b.n	800143a <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a35      	ldr	r2, [pc, #212]	; (8001458 <HAL_ADC_MspInit+0x1b0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d158      	bne.n	800143a <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001388:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <HAL_ADC_MspInit+0x1a0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <HAL_ADC_MspInit+0x1a0>)
 8001390:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_ADC_MspInit+0x1a0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d10b      	bne.n	80013b2 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a2b      	ldr	r2, [pc, #172]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 80013a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4a25      	ldr	r2, [pc, #148]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_ADC_MspInit+0x1a4>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013ce:	230b      	movs	r3, #11
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f001 ffe2 	bl	80033a8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 80013e6:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <HAL_ADC_MspInit+0x1b8>)
 80013e8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 8001404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001408:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 800140c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001410:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 8001414:	2220      	movs	r2, #32
 8001416:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800141e:	480f      	ldr	r0, [pc, #60]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 8001420:	f001 fdca 	bl	8002fb8 <HAL_DMA_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_ADC_MspInit+0x186>
      Error_Handler();
 800142a:	f7ff ff11 	bl	8001250 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 8001432:	64da      	str	r2, [r3, #76]	; 0x4c
 8001434:	4a09      	ldr	r2, [pc, #36]	; (800145c <HAL_ADC_MspInit+0x1b4>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6293      	str	r3, [r2, #40]	; 0x28
}
 800143a:	bf00      	nop
 800143c:	3730      	adds	r7, #48	; 0x30
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	50040000 	.word	0x50040000
 8001448:	2000005c 	.word	0x2000005c
 800144c:	40021000 	.word	0x40021000
 8001450:	2000018c 	.word	0x2000018c
 8001454:	40020008 	.word	0x40020008
 8001458:	50040100 	.word	0x50040100
 800145c:	20000214 	.word	0x20000214
 8001460:	4002001c 	.word	0x4002001c

08001464 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <HAL_DAC_MspInit+0x74>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d124      	bne.n	80014d0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_DAC_MspInit+0x78>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <HAL_DAC_MspInit+0x78>)
 800148c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001490:	6593      	str	r3, [r2, #88]	; 0x58
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_DAC_MspInit+0x78>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_DAC_MspInit+0x78>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_DAC_MspInit+0x78>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_DAC_MspInit+0x78>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014b6:	2310      	movs	r3, #16
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ba:	2303      	movs	r3, #3
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014cc:	f001 ff6c 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40007400 	.word	0x40007400
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f0:	d10b      	bne.n	800150a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_TIM_PWM_MspInit+0x38>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_TIM_PWM_MspInit+0x38>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6593      	str	r3, [r2, #88]	; 0x58
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_TIM_PWM_MspInit+0x38>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <HAL_TIM_Base_MspInit+0x44>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d113      	bne.n	8001556 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_TIM_Base_MspInit+0x48>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	4a0c      	ldr	r2, [pc, #48]	; (8001564 <HAL_TIM_Base_MspInit+0x48>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6593      	str	r3, [r2, #88]	; 0x58
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_TIM_Base_MspInit+0x48>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	201d      	movs	r0, #29
 800154c:	f001 fb75 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001550:	201d      	movs	r0, #29
 8001552:	f001 fb8e 	bl	8002c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40000400 	.word	0x40000400
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001588:	d11b      	bne.n	80015c2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_TIM_MspPostInit+0x64>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <HAL_TIM_MspPostInit+0x64>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_TIM_MspPostInit+0x64>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015a2:	2308      	movs	r3, #8
 80015a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4619      	mov	r1, r3
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <HAL_TIM_MspPostInit+0x68>)
 80015be:	f001 fef3 	bl	80033a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	48000400 	.word	0x48000400

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 f8da 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <DMA1_Channel1_IRQHandler+0x10>)
 8001636:	f001 fdd7 	bl	80031e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000018c 	.word	0x2000018c

08001644 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <DMA1_Channel2_IRQHandler+0x10>)
 800164a:	f001 fdcd 	bl	80031e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000214 	.word	0x20000214

08001658 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <TIM3_IRQHandler+0x10>)
 800165e:	f003 fc03 	bl	8004e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200000d8 	.word	0x200000d8

0800166c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <SystemInit+0x64>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <SystemInit+0x64>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <SystemInit+0x68>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <SystemInit+0x68>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <SystemInit+0x68>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <SystemInit+0x68>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <SystemInit+0x68>)
 8001698:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800169c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <SystemInit+0x68>)
 80016a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <SystemInit+0x68>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <SystemInit+0x68>)
 80016b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <SystemInit+0x68>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SystemInit+0x64>)
 80016be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016c2:	609a      	str	r2, [r3, #8]
#endif
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00
 80016d4:	40021000 	.word	0x40021000

080016d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016de:	e003      	b.n	80016e8 <LoopCopyDataInit>

080016e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016e6:	3104      	adds	r1, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <LoopForever+0xe>)
	adds	r2, r0, r1
 80016ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016f0:	d3f6      	bcc.n	80016e0 <CopyDataInit>
	ldr	r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016f4:	e002      	b.n	80016fc <LoopFillZerobss>

080016f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016f8:	f842 3b04 	str.w	r3, [r2], #4

080016fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <LoopForever+0x16>)
	cmp	r2, r3
 80016fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001700:	d3f9      	bcc.n	80016f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001702:	f7ff ffb3 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001706:	f004 fb9f 	bl	8005e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800170a:	f7ff fa95 	bl	8000c38 <main>

0800170e <LoopForever>:

LoopForever:
    b LoopForever
 800170e:	e7fe      	b.n	800170e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001710:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001714:	08005f00 	.word	0x08005f00
	ldr	r0, =_sdata
 8001718:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800171c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001720:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001724:	20000270 	.word	0x20000270

08001728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC1_2_IRQHandler>
	...

0800172c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_Init+0x3c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <HAL_Init+0x3c>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001742:	2003      	movs	r0, #3
 8001744:	f001 fa6e 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001748:	2000      	movs	r0, #0
 800174a:	f000 f80f 	bl	800176c <HAL_InitTick>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	e001      	b.n	800175e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800175a:	f7ff fd81 	bl	8001260 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800175e:	79fb      	ldrb	r3, [r7, #7]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40022000 	.word	0x40022000

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_InitTick+0x68>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d022      	beq.n	80017c6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_InitTick+0x6c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_InitTick+0x68>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800178c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001790:	fbb2 f3f3 	udiv	r3, r2, r3
 8001794:	4618      	mov	r0, r3
 8001796:	f001 fa7a 	bl	8002c8e <HAL_SYSTICK_Config>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10f      	bne.n	80017c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	d809      	bhi.n	80017ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a6:	2200      	movs	r2, #0
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	f04f 30ff 	mov.w	r0, #4294967295
 80017ae:	f001 fa44 	bl	8002c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_InitTick+0x70>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e007      	b.n	80017ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e004      	b.n	80017ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e001      	b.n	80017ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_IncTick+0x1c>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_IncTick+0x20>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a03      	ldr	r2, [pc, #12]	; (80017fc <HAL_IncTick+0x1c>)
 80017f0:	6013      	str	r3, [r2, #0]
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	2000026c 	.word	0x2000026c
 8001800:	20000008 	.word	0x20000008

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2000026c 	.word	0x2000026c

0800181c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff ffee 	bl	8001804 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d004      	beq.n	8001840 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_Delay+0x40>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001840:	bf00      	nop
 8001842:	f7ff ffdf 	bl	8001804 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	429a      	cmp	r2, r3
 8001850:	d8f7      	bhi.n	8001842 <HAL_Delay+0x26>
  {
  }
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008

08001860 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	609a      	str	r2, [r3, #8]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	609a      	str	r2, [r3, #8]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018c8:	b490      	push	{r4, r7}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3360      	adds	r3, #96	; 0x60
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80018e4:	6822      	ldr	r2, [r4, #0]
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <LL_ADC_SetOffset+0x40>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	4313      	orrs	r3, r2
 80018f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018fa:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bc90      	pop	{r4, r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	03fff000 	.word	0x03fff000

0800190c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800190c:	b490      	push	{r4, r7}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3360      	adds	r3, #96	; 0x60
 800191a:	461a      	mov	r2, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bc90      	pop	{r4, r7}
 8001932:	4770      	bx	lr

08001934 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001934:	b490      	push	{r4, r7}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3360      	adds	r3, #96	; 0x60
 8001944:	461a      	mov	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4313      	orrs	r3, r2
 8001958:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bc90      	pop	{r4, r7}
 8001962:	4770      	bx	lr

08001964 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800198a:	b490      	push	{r4, r7}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3330      	adds	r3, #48	; 0x30
 800199a:	461a      	mov	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	4413      	add	r3, r2
 80019a8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80019aa:	6822      	ldr	r2, [r4, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	211f      	movs	r1, #31
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0e9b      	lsrs	r3, r3, #26
 80019c0:	f003 011f 	and.w	r1, r3, #31
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	4313      	orrs	r3, r2
 80019d0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc90      	pop	{r4, r7}
 80019da:	4770      	bx	lr

080019dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019dc:	b490      	push	{r4, r7}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3314      	adds	r3, #20
 80019ec:	461a      	mov	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	0e5b      	lsrs	r3, r3, #25
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80019fc:	6822      	ldr	r2, [r4, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	0d1b      	lsrs	r3, r3, #20
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	2107      	movs	r1, #7
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	0d1b      	lsrs	r3, r3, #20
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc90      	pop	{r4, r7}
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a44:	43db      	mvns	r3, r3
 8001a46:	401a      	ands	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0318 	and.w	r3, r3, #24
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a50:	40d9      	lsrs	r1, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	400b      	ands	r3, r1
 8001a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	0007ffff 	.word	0x0007ffff

08001a74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 031f 	and.w	r3, r3, #31
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001aa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6093      	str	r3, [r2, #8]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ac8:	d101      	bne.n	8001ace <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001aec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001af0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b18:	d101      	bne.n	8001b1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <LL_ADC_IsEnabled+0x18>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <LL_ADC_IsEnabled+0x1a>
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b8e:	f043 0204 	orr.w	r2, r3, #4
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d101      	bne.n	8001bba <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d101      	bne.n	8001be0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e134      	b.n	8001e74 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fb45 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff3f 	bl	8001ab4 <LL_ADC_IsDeepPowerDownEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff25 	bl	8001a90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff5a 	bl	8001b04 <LL_ADC_IsInternalRegulatorEnabled>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d113      	bne.n	8001c7e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff3e 	bl	8001adc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c60:	4b86      	ldr	r3, [pc, #536]	; (8001e7c <HAL_ADC_Init+0x28c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	4a86      	ldr	r2, [pc, #536]	; (8001e80 <HAL_ADC_Init+0x290>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c70:	e002      	b.n	8001c78 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f9      	bne.n	8001c72 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff3e 	bl	8001b04 <LL_ADC_IsInternalRegulatorEnabled>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10d      	bne.n	8001caa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c92:	f043 0210 	orr.w	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff77 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001cb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f040 80cf 	bne.w	8001e62 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f040 80cb 	bne.w	8001e62 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cd4:	f043 0202 	orr.w	r2, r3, #2
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff37 	bl	8001b54 <LL_ADC_IsEnabled>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d115      	bne.n	8001d18 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cec:	4865      	ldr	r0, [pc, #404]	; (8001e84 <HAL_ADC_Init+0x294>)
 8001cee:	f7ff ff31 	bl	8001b54 <LL_ADC_IsEnabled>
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	4864      	ldr	r0, [pc, #400]	; (8001e88 <HAL_ADC_Init+0x298>)
 8001cf6:	f7ff ff2d 	bl	8001b54 <LL_ADC_IsEnabled>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	431c      	orrs	r4, r3
 8001cfe:	4863      	ldr	r0, [pc, #396]	; (8001e8c <HAL_ADC_Init+0x29c>)
 8001d00:	f7ff ff28 	bl	8001b54 <LL_ADC_IsEnabled>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4323      	orrs	r3, r4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4619      	mov	r1, r3
 8001d12:	485f      	ldr	r0, [pc, #380]	; (8001e90 <HAL_ADC_Init+0x2a0>)
 8001d14:	f7ff fda4 	bl	8001860 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	7e5b      	ldrb	r3, [r3, #25]
 8001d1c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d22:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d28:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d2e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d36:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d106      	bne.n	8001d54 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	045b      	lsls	r3, r3, #17
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d009      	beq.n	8001d70 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <HAL_ADC_Init+0x2a4>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	69b9      	ldr	r1, [r7, #24]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff0a 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001d8e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff17 	bl	8001bc8 <LL_ADC_INJ_IsConversionOngoing>
 8001d9a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d13d      	bne.n	8001e1e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d13a      	bne.n	8001e1e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001db4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc4:	f023 0302 	bic.w	r3, r3, #2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	69b9      	ldr	r1, [r7, #24]
 8001dce:	430b      	orrs	r3, r1
 8001dd0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d118      	bne.n	8001e0e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001de6:	f023 0304 	bic.w	r3, r3, #4
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001df2:	4311      	orrs	r1, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001df8:	4311      	orrs	r1, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	611a      	str	r2, [r3, #16]
 8001e0c:	e007      	b.n	8001e1e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10c      	bne.n	8001e40 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f023 010f 	bic.w	r1, r3, #15
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e3e:	e007      	b.n	8001e50 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 020f 	bic.w	r2, r2, #15
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f023 0303 	bic.w	r3, r3, #3
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
 8001e60:	e007      	b.n	8001e72 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3724      	adds	r7, #36	; 0x24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	053e2d63 	.word	0x053e2d63
 8001e84:	50040000 	.word	0x50040000
 8001e88:	50040100 	.word	0x50040100
 8001e8c:	50040200 	.word	0x50040200
 8001e90:	50040300 	.word	0x50040300
 8001e94:	fff0c007 	.word	0xfff0c007

08001e98 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ea4:	4850      	ldr	r0, [pc, #320]	; (8001fe8 <HAL_ADC_Start_DMA+0x150>)
 8001ea6:	f7ff fde5 	bl	8001a74 <LL_ADC_GetMultimode>
 8001eaa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fe76 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f040 808e 	bne.w	8001fda <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_Start_DMA+0x34>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e089      	b.n	8001fe0 <HAL_ADC_Start_DMA+0x148>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d002      	beq.n	8001ee6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b09      	cmp	r3, #9
 8001ee4:	d172      	bne.n	8001fcc <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fc0c 	bl	8002704 <ADC_Enable>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d165      	bne.n	8001fc2 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a37      	ldr	r2, [pc, #220]	; (8001fec <HAL_ADC_Start_DMA+0x154>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d002      	beq.n	8001f1a <HAL_ADC_Start_DMA+0x82>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	e000      	b.n	8001f1c <HAL_ADC_Start_DMA+0x84>
 8001f1a:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <HAL_ADC_Start_DMA+0x158>)
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d002      	beq.n	8001f2a <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f023 0206 	bic.w	r2, r3, #6
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001f4e:	e002      	b.n	8001f56 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	4a26      	ldr	r2, [pc, #152]	; (8001ff4 <HAL_ADC_Start_DMA+0x15c>)
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <HAL_ADC_Start_DMA+0x160>)
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	4a24      	ldr	r2, [pc, #144]	; (8001ffc <HAL_ADC_Start_DMA+0x164>)
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	221c      	movs	r2, #28
 8001f74:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0210 	orr.w	r2, r2, #16
 8001f8c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0201 	orr.w	r2, r2, #1
 8001f9c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3340      	adds	r3, #64	; 0x40
 8001fa8:	4619      	mov	r1, r3
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f001 f8bb 	bl	8003128 <HAL_DMA_Start_IT>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fddd 	bl	8001b7a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001fc0:	e00d      	b.n	8001fde <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001fca:	e008      	b.n	8001fde <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001fd8:	e001      	b.n	8001fde <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	50040300 	.word	0x50040300
 8001fec:	50040100 	.word	0x50040100
 8001ff0:	50040000 	.word	0x50040000
 8001ff4:	080027b9 	.word	0x080027b9
 8001ff8:	08002891 	.word	0x08002891
 8001ffc:	080028ad 	.word	0x080028ad

08002000 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0a6      	sub	sp, #152	; 0x98
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_ADC_ConfigChannel+0x22>
 800205a:	2302      	movs	r3, #2
 800205c:	e348      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x6b4>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fd99 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 8329 	bne.w	80026ca <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d824      	bhi.n	80020ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	3b02      	subs	r3, #2
 8002086:	2b03      	cmp	r3, #3
 8002088:	d81b      	bhi.n	80020c2 <HAL_ADC_ConfigChannel+0x86>
 800208a:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <HAL_ADC_ConfigChannel+0x54>)
 800208c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002090:	080020a1 	.word	0x080020a1
 8002094:	080020a9 	.word	0x080020a9
 8002098:	080020b1 	.word	0x080020b1
 800209c:	080020b9 	.word	0x080020b9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	220c      	movs	r2, #12
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	e011      	b.n	80020cc <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2212      	movs	r2, #18
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	e00d      	b.n	80020cc <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2218      	movs	r2, #24
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	e009      	b.n	80020cc <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	e004      	b.n	80020cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2206      	movs	r2, #6
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	e000      	b.n	80020cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80020ca:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	f7ff fc56 	bl	800198a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fd5d 	bl	8001ba2 <LL_ADC_REG_IsConversionOngoing>
 80020e8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fd69 	bl	8001bc8 <LL_ADC_INJ_IsConversionOngoing>
 80020f6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 8148 	bne.w	8002394 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002108:	2b00      	cmp	r3, #0
 800210a:	f040 8143 	bne.w	8002394 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6819      	ldr	r1, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	461a      	mov	r2, r3
 800211c:	f7ff fc5e 	bl	80019dc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	08db      	lsrs	r3, r3, #3
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b04      	cmp	r3, #4
 8002140:	d00a      	beq.n	8002158 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6919      	ldr	r1, [r3, #16]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002152:	f7ff fbb9 	bl	80018c8 <LL_ADC_SetOffset>
 8002156:	e11d      	b.n	8002394 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fbd4 	bl	800190c <LL_ADC_GetOffsetChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10a      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x148>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fbc9 	bl	800190c <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	f003 021f 	and.w	r2, r3, #31
 8002182:	e012      	b.n	80021aa <HAL_ADC_ConfigChannel+0x16e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fbbe 	bl	800190c <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x186>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0e9b      	lsrs	r3, r3, #26
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	e00a      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x19c>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80021d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	429a      	cmp	r2, r3
 80021da:	d106      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fba5 	bl	8001934 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fb8b 	bl	800190c <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x1da>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fb80 	bl	800190c <LL_ADC_GetOffsetChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	f003 021f 	and.w	r2, r3, #31
 8002214:	e010      	b.n	8002238 <HAL_ADC_ConfigChannel+0x1fc>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2101      	movs	r1, #1
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fb75 	bl	800190c <LL_ADC_GetOffsetChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800222e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x214>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	e00a      	b.n	8002266 <HAL_ADC_ConfigChannel+0x22a>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800225e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	429a      	cmp	r2, r3
 8002268:	d106      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	2101      	movs	r1, #1
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fb5e 	bl	8001934 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2102      	movs	r1, #2
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fb44 	bl	800190c <LL_ADC_GetOffsetChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10a      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x268>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2102      	movs	r1, #2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fb39 	bl	800190c <LL_ADC_GetOffsetChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	f003 021f 	and.w	r2, r3, #31
 80022a2:	e010      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x28a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2102      	movs	r1, #2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fb2e 	bl	800190c <LL_ADC_GetOffsetChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80022bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_ADC_ConfigChannel+0x2a2>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	0e9b      	lsrs	r3, r3, #26
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	e00a      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x2b8>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d106      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2200      	movs	r2, #0
 80022fe:	2102      	movs	r1, #2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fb17 	bl	8001934 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2103      	movs	r1, #3
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fafd 	bl	800190c <LL_ADC_GetOffsetChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10a      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x2f6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2103      	movs	r1, #3
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff faf2 	bl	800190c <LL_ADC_GetOffsetChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	0e9b      	lsrs	r3, r3, #26
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	e010      	b.n	8002354 <HAL_ADC_ConfigChannel+0x318>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2103      	movs	r1, #3
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fae7 	bl	800190c <LL_ADC_GetOffsetChannel>
 800233e:	4603      	mov	r3, r0
 8002340:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800234a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_ADC_ConfigChannel+0x330>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	e00a      	b.n	8002382 <HAL_ADC_ConfigChannel+0x346>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800237a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	429a      	cmp	r2, r3
 8002384:	d106      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2200      	movs	r2, #0
 800238c:	2103      	movs	r1, #3
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fad0 	bl	8001934 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fbdb 	bl	8001b54 <LL_ADC_IsEnabled>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 810c 	bne.w	80025be <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f7ff fb3a 	bl	8001a2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4aad      	ldr	r2, [pc, #692]	; (8002674 <HAL_ADC_ConfigChannel+0x638>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	f040 80fd 	bne.w	80025be <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x3b0>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e9b      	lsrs	r3, r3, #26
 80023da:	3301      	adds	r3, #1
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2b09      	cmp	r3, #9
 80023e2:	bf94      	ite	ls
 80023e4:	2301      	movls	r3, #1
 80023e6:	2300      	movhi	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	e012      	b.n	8002412 <HAL_ADC_ConfigChannel+0x3d6>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2b09      	cmp	r3, #9
 800240a:	bf94      	ite	ls
 800240c:	2301      	movls	r3, #1
 800240e:	2300      	movhi	r3, #0
 8002410:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002412:	2b00      	cmp	r3, #0
 8002414:	d064      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x3f6>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0e9b      	lsrs	r3, r3, #26
 8002428:	3301      	adds	r3, #1
 800242a:	069b      	lsls	r3, r3, #26
 800242c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002430:	e00e      	b.n	8002450 <HAL_ADC_ConfigChannel+0x414>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	069b      	lsls	r3, r3, #26
 800244c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x434>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	3301      	adds	r3, #1
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	e010      	b.n	8002492 <HAL_ADC_ConfigChannel+0x456>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	ea42 0103 	orr.w	r1, r2, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x47c>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0e9b      	lsrs	r3, r3, #26
 80024a8:	3301      	adds	r3, #1
 80024aa:	f003 021f 	and.w	r2, r3, #31
 80024ae:	4613      	mov	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	051b      	lsls	r3, r3, #20
 80024b6:	e011      	b.n	80024dc <HAL_ADC_ConfigChannel+0x4a0>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024dc:	430b      	orrs	r3, r1
 80024de:	e069      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x4c0>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	069b      	lsls	r3, r3, #26
 80024f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fa:	e00e      	b.n	800251a <HAL_ADC_ConfigChannel+0x4de>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	61fb      	str	r3, [r7, #28]
  return result;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	3301      	adds	r3, #1
 8002514:	069b      	lsls	r3, r3, #26
 8002516:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_ADC_ConfigChannel+0x4fe>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	3301      	adds	r3, #1
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2101      	movs	r1, #1
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	e010      	b.n	800255c <HAL_ADC_ConfigChannel+0x520>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	617b      	str	r3, [r7, #20]
  return result;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3301      	adds	r3, #1
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	ea42 0103 	orr.w	r1, r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10d      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x54c>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0e9b      	lsrs	r3, r3, #26
 8002572:	3301      	adds	r3, #1
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	3b1e      	subs	r3, #30
 8002580:	051b      	lsls	r3, r3, #20
 8002582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002586:	e014      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x576>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	60fb      	str	r3, [r7, #12]
  return result;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	3b1e      	subs	r3, #30
 80025ac:	051b      	lsls	r3, r3, #20
 80025ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b2:	430b      	orrs	r3, r1
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	6892      	ldr	r2, [r2, #8]
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7ff fa0f 	bl	80019dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_ADC_ConfigChannel+0x63c>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 808c 	beq.w	80026e4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025cc:	482b      	ldr	r0, [pc, #172]	; (800267c <HAL_ADC_ConfigChannel+0x640>)
 80025ce:	f7ff f96d 	bl	80018ac <LL_ADC_GetCommonPathInternalCh>
 80025d2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a29      	ldr	r2, [pc, #164]	; (8002680 <HAL_ADC_ConfigChannel+0x644>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d12b      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x5fc>
 80025e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d125      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a24      	ldr	r2, [pc, #144]	; (8002684 <HAL_ADC_ConfigChannel+0x648>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <HAL_ADC_ConfigChannel+0x5c4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a23      	ldr	r2, [pc, #140]	; (8002688 <HAL_ADC_ConfigChannel+0x64c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d16e      	bne.n	80026de <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002608:	4619      	mov	r1, r3
 800260a:	481c      	ldr	r0, [pc, #112]	; (800267c <HAL_ADC_ConfigChannel+0x640>)
 800260c:	f7ff f93b 	bl	8001886 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_ADC_ConfigChannel+0x650>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <HAL_ADC_ConfigChannel+0x654>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	099a      	lsrs	r2, r3, #6
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002628:	e002      	b.n	8002630 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3b01      	subs	r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f9      	bne.n	800262a <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002636:	e052      	b.n	80026de <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a15      	ldr	r2, [pc, #84]	; (8002694 <HAL_ADC_ConfigChannel+0x658>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d12a      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x65c>
 8002642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d124      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a0c      	ldr	r2, [pc, #48]	; (8002684 <HAL_ADC_ConfigChannel+0x648>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <HAL_ADC_ConfigChannel+0x626>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_ADC_ConfigChannel+0x64c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d13f      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266a:	4619      	mov	r1, r3
 800266c:	4803      	ldr	r0, [pc, #12]	; (800267c <HAL_ADC_ConfigChannel+0x640>)
 800266e:	f7ff f90a 	bl	8001886 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002672:	e036      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x6a6>
 8002674:	407f0000 	.word	0x407f0000
 8002678:	80080000 	.word	0x80080000
 800267c:	50040300 	.word	0x50040300
 8002680:	c7520000 	.word	0xc7520000
 8002684:	50040000 	.word	0x50040000
 8002688:	50040200 	.word	0x50040200
 800268c:	20000000 	.word	0x20000000
 8002690:	053e2d63 	.word	0x053e2d63
 8002694:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_ADC_ConfigChannel+0x6bc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d120      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d11a      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_ADC_ConfigChannel+0x6c0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d115      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026c0:	4619      	mov	r1, r3
 80026c2:	480f      	ldr	r0, [pc, #60]	; (8002700 <HAL_ADC_ConfigChannel+0x6c4>)
 80026c4:	f7ff f8df 	bl	8001886 <LL_ADC_SetCommonPathInternalCh>
 80026c8:	e00c      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f043 0220 	orr.w	r2, r3, #32
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80026dc:	e002      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026de:	bf00      	nop
 80026e0:	e000      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3798      	adds	r7, #152	; 0x98
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	80000001 	.word	0x80000001
 80026fc:	50040000 	.word	0x50040000
 8002700:	50040300 	.word	0x50040300

08002704 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fa1f 	bl	8001b54 <LL_ADC_IsEnabled>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d146      	bne.n	80027aa <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <ADC_Enable+0xb0>)
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f043 0210 	orr.w	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e032      	b.n	80027ac <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f9ee 	bl	8001b2c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002750:	f7ff f858 	bl	8001804 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002756:	e021      	b.n	800279c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff f9f9 	bl	8001b54 <LL_ADC_IsEnabled>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff f9dd 	bl	8001b2c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002772:	f7ff f847 	bl	8001804 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d90d      	bls.n	800279c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	f043 0210 	orr.w	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	f043 0201 	orr.w	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e007      	b.n	80027ac <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d1d6      	bne.n	8002758 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	8000003f 	.word	0x8000003f

080027b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d14b      	bne.n	800286a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d021      	beq.n	8002830 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff f8b7 	bl	8001964 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d032      	beq.n	8002862 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d12b      	bne.n	8002862 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11f      	bne.n	8002862 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
 800282e:	e018      	b.n	8002862 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d111      	bne.n	8002862 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7ff fbcc 	bl	8002000 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002868:	e00e      	b.n	8002888 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff fbd6 	bl	8002028 <HAL_ADC_ErrorCallback>
}
 800287c:	e004      	b.n	8002888 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	4798      	blx	r3
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff fbb8 	bl	8002014 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	f043 0204 	orr.w	r2, r3, #4
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff fba8 	bl	8002028 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <LL_ADC_IsEnabled>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <LL_ADC_IsEnabled+0x18>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <LL_ADC_IsEnabled+0x1a>
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_ADC_REG_IsConversionOngoing>:
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d101      	bne.n	800291e <LL_ADC_REG_IsConversionOngoing+0x18>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b09f      	sub	sp, #124	; 0x7c
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002946:	2302      	movs	r3, #2
 8002948:	e08f      	b.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a47      	ldr	r2, [pc, #284]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d102      	bne.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800295c:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	e001      	b.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e072      	b.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ffbd 	bl	8002906 <LL_ADC_REG_IsConversionOngoing>
 800298c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ffb7 	bl	8002906 <LL_ADC_REG_IsConversionOngoing>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d154      	bne.n	8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800299e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d151      	bne.n	8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029a4:	4b35      	ldr	r3, [pc, #212]	; (8002a7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02c      	beq.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6859      	ldr	r1, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029c2:	035b      	lsls	r3, r3, #13
 80029c4:	430b      	orrs	r3, r1
 80029c6:	431a      	orrs	r2, r3
 80029c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029cc:	4829      	ldr	r0, [pc, #164]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80029ce:	f7ff ff87 	bl	80028e0 <LL_ADC_IsEnabled>
 80029d2:	4604      	mov	r4, r0
 80029d4:	4828      	ldr	r0, [pc, #160]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80029d6:	f7ff ff83 	bl	80028e0 <LL_ADC_IsEnabled>
 80029da:	4603      	mov	r3, r0
 80029dc:	431c      	orrs	r4, r3
 80029de:	4828      	ldr	r0, [pc, #160]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029e0:	f7ff ff7e 	bl	80028e0 <LL_ADC_IsEnabled>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4323      	orrs	r3, r4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d137      	bne.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029f4:	f023 030f 	bic.w	r3, r3, #15
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	6811      	ldr	r1, [r2, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	6892      	ldr	r2, [r2, #8]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a06:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a08:	e028      	b.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a14:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a16:	4817      	ldr	r0, [pc, #92]	; (8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002a18:	f7ff ff62 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	4816      	ldr	r0, [pc, #88]	; (8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002a20:	f7ff ff5e 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	431c      	orrs	r4, r3
 8002a28:	4815      	ldr	r0, [pc, #84]	; (8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a2a:	f7ff ff59 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4323      	orrs	r3, r4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d112      	bne.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a3e:	f023 030f 	bic.w	r3, r3, #15
 8002a42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a44:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a46:	e009      	b.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f043 0220 	orr.w	r2, r3, #32
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a5a:	e000      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a66:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	377c      	adds	r7, #124	; 0x7c
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd90      	pop	{r4, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	50040000 	.word	0x50040000
 8002a78:	50040100 	.word	0x50040100
 8002a7c:	50040300 	.word	0x50040300
 8002a80:	50040200 	.word	0x50040200

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	60d3      	str	r3, [r2, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <__NVIC_EnableIRQ+0x38>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
         );
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf0:	d301      	bcc.n	8002bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00f      	b.n	8002c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <SysTick_Config+0x40>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfe:	210f      	movs	r1, #15
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f7ff ff8e 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <SysTick_Config+0x40>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0e:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <SysTick_Config+0x40>)
 8002c10:	2207      	movs	r2, #7
 8002c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	e000e010 	.word	0xe000e010

08002c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff29 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c4c:	f7ff ff3e 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	6978      	ldr	r0, [r7, #20]
 8002c58:	f7ff ff8e 	bl	8002b78 <NVIC_EncodePriority>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff5d 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff31 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ffa2 	bl	8002be0 <SysTick_Config>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e014      	b.n	8002ce2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	791b      	ldrb	r3, [r3, #4]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7fe fbcb 	bl	8001464 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	795b      	ldrb	r3, [r3, #5]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_DAC_Start+0x16>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e03b      	b.n	8002d78 <HAL_DAC_Start+0x8e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2201      	movs	r2, #1
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10f      	bne.n	8002d4a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d118      	bne.n	8002d6a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	e00f      	b.n	8002d6a <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d58:	d107      	bne.n	8002d6a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0202 	orr.w	r2, r2, #2
 8002d68:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	795b      	ldrb	r3, [r3, #5]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_DAC_ConfigChannel+0x1c>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e107      	b.n	8002fb0 <HAL_DAC_ConfigChannel+0x22c>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2202      	movs	r2, #2
 8002daa:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d174      	bne.n	8002e9e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d137      	bne.n	8002e2a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fd23 	bl	8001804 <HAL_GetTick>
 8002dbe:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002dc0:	e011      	b.n	8002de6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002dc2:	f7fe fd1f 	bl	8001804 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d90a      	bls.n	8002de6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f043 0208 	orr.w	r2, r3, #8
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2203      	movs	r2, #3
 8002de0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0e4      	b.n	8002fb0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e6      	bne.n	8002dc2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002df4:	2001      	movs	r0, #1
 8002df6:	f7fe fd11 	bl	800181c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	6992      	ldr	r2, [r2, #24]
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40
 8002e04:	e01e      	b.n	8002e44 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e06:	f7fe fcfd 	bl	8001804 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d90a      	bls.n	8002e2a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f043 0208 	orr.w	r2, r3, #8
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2203      	movs	r2, #3
 8002e24:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0c2      	b.n	8002fb0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	dbe8      	blt.n	8002e06 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002e34:	2001      	movs	r0, #1
 8002e36:	f7fe fcf1 	bl	800181c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	6992      	ldr	r2, [r2, #24]
 8002e42:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	ea02 0103 	and.w	r1, r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	21ff      	movs	r1, #255	; 0xff
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	ea02 0103 	and.w	r1, r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	409a      	lsls	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d11d      	bne.n	8002ee2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	221f      	movs	r2, #31
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0310 	and.w	r3, r3, #16
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6819      	ldr	r1, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	400a      	ands	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	22c0      	movs	r2, #192	; 0xc0
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e098      	b.n	80030fc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <HAL_DMA_Init+0x150>)
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d80f      	bhi.n	8002ff6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_DMA_Init+0x154>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	4a4b      	ldr	r2, [pc, #300]	; (8003110 <HAL_DMA_Init+0x158>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	009a      	lsls	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a48      	ldr	r2, [pc, #288]	; (8003114 <HAL_DMA_Init+0x15c>)
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ff4:	e00e      	b.n	8003014 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b46      	ldr	r3, [pc, #280]	; (8003118 <HAL_DMA_Init+0x160>)
 8002ffe:	4413      	add	r3, r2
 8003000:	4a43      	ldr	r2, [pc, #268]	; (8003110 <HAL_DMA_Init+0x158>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	009a      	lsls	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a42      	ldr	r2, [pc, #264]	; (800311c <HAL_DMA_Init+0x164>)
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800302a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800306e:	d039      	beq.n	80030e4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	4a27      	ldr	r2, [pc, #156]	; (8003114 <HAL_DMA_Init+0x15c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d11a      	bne.n	80030b0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <HAL_DMA_Init+0x168>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f003 031c 	and.w	r3, r3, #28
 8003086:	210f      	movs	r1, #15
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	4924      	ldr	r1, [pc, #144]	; (8003120 <HAL_DMA_Init+0x168>)
 8003090:	4013      	ands	r3, r2
 8003092:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003094:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_DMA_Init+0x168>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	f003 031c 	and.w	r3, r3, #28
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	491d      	ldr	r1, [pc, #116]	; (8003120 <HAL_DMA_Init+0x168>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
 80030ae:	e019      	b.n	80030e4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_DMA_Init+0x16c>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f003 031c 	and.w	r3, r3, #28
 80030bc:	210f      	movs	r1, #15
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	4917      	ldr	r1, [pc, #92]	; (8003124 <HAL_DMA_Init+0x16c>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <HAL_DMA_Init+0x16c>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	f003 031c 	and.w	r3, r3, #28
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	4911      	ldr	r1, [pc, #68]	; (8003124 <HAL_DMA_Init+0x16c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40020407 	.word	0x40020407
 800310c:	bffdfff8 	.word	0xbffdfff8
 8003110:	cccccccd 	.word	0xcccccccd
 8003114:	40020000 	.word	0x40020000
 8003118:	bffdfbf8 	.word	0xbffdfbf8
 800311c:	40020400 	.word	0x40020400
 8003120:	400200a8 	.word	0x400200a8
 8003124:	400204a8 	.word	0x400204a8

08003128 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_DMA_Start_IT+0x20>
 8003144:	2302      	movs	r3, #2
 8003146:	e04b      	b.n	80031e0 <HAL_DMA_Start_IT+0xb8>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	d13a      	bne.n	80031d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f8e0 	bl	8003346 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 020e 	orr.w	r2, r2, #14
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	e00f      	b.n	80031c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0204 	bic.w	r2, r2, #4
 80031ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 020a 	orr.w	r2, r2, #10
 80031be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e005      	b.n	80031de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031da:	2302      	movs	r3, #2
 80031dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f003 031c 	and.w	r3, r3, #28
 8003208:	2204      	movs	r2, #4
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d026      	beq.n	8003262 <HAL_DMA_IRQHandler+0x7a>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d021      	beq.n	8003262 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0204 	bic.w	r2, r2, #4
 800323a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	f003 021c 	and.w	r2, r3, #28
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	2104      	movs	r1, #4
 800324a:	fa01 f202 	lsl.w	r2, r1, r2
 800324e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	2b00      	cmp	r3, #0
 8003256:	d071      	beq.n	800333c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003260:	e06c      	b.n	800333c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f003 031c 	and.w	r3, r3, #28
 800326a:	2202      	movs	r2, #2
 800326c:	409a      	lsls	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d02e      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xec>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d029      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10b      	bne.n	80032a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 020a 	bic.w	r2, r2, #10
 800329c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	f003 021c 	and.w	r2, r3, #28
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	2102      	movs	r1, #2
 80032b4:	fa01 f202 	lsl.w	r2, r1, r2
 80032b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d038      	beq.n	800333c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032d2:	e033      	b.n	800333c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f003 031c 	and.w	r3, r3, #28
 80032dc:	2208      	movs	r2, #8
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d02a      	beq.n	800333e <HAL_DMA_IRQHandler+0x156>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d025      	beq.n	800333e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 020e 	bic.w	r2, r2, #14
 8003300:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	f003 021c 	and.w	r2, r3, #28
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	2101      	movs	r1, #1
 8003310:	fa01 f202 	lsl.w	r2, r1, r2
 8003314:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800333c:	bf00      	nop
 800333e:	bf00      	nop
}
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f003 021c 	and.w	r2, r3, #28
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2101      	movs	r1, #1
 8003362:	fa01 f202 	lsl.w	r2, r1, r2
 8003366:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b10      	cmp	r3, #16
 8003376:	d108      	bne.n	800338a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003388:	e007      	b.n	800339a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	60da      	str	r2, [r3, #12]
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b6:	e17f      	b.n	80036b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2101      	movs	r1, #1
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	4013      	ands	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8171 	beq.w	80036b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d00b      	beq.n	80033f0 <HAL_GPIO_Init+0x48>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d007      	beq.n	80033f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033e4:	2b11      	cmp	r3, #17
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b12      	cmp	r3, #18
 80033ee:	d130      	bne.n	8003452 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	2203      	movs	r2, #3
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003426:	2201      	movs	r2, #1
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	f003 0201 	and.w	r2, r3, #1
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b03      	cmp	r3, #3
 800345c:	d118      	bne.n	8003490 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003464:	2201      	movs	r2, #1
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4013      	ands	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	08db      	lsrs	r3, r3, #3
 800347a:	f003 0201 	and.w	r2, r3, #1
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x128>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b12      	cmp	r3, #18
 80034ce:	d123      	bne.n	8003518 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	08da      	lsrs	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3208      	adds	r2, #8
 80034d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	08da      	lsrs	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3208      	adds	r2, #8
 8003512:	6939      	ldr	r1, [r7, #16]
 8003514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	2203      	movs	r2, #3
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0203 	and.w	r2, r3, #3
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80ac 	beq.w	80036b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355a:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <HAL_GPIO_Init+0x32c>)
 800355c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355e:	4a5d      	ldr	r2, [pc, #372]	; (80036d4 <HAL_GPIO_Init+0x32c>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6613      	str	r3, [r2, #96]	; 0x60
 8003566:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <HAL_GPIO_Init+0x32c>)
 8003568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003572:	4a59      	ldr	r2, [pc, #356]	; (80036d8 <HAL_GPIO_Init+0x330>)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	3302      	adds	r3, #2
 800357a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	220f      	movs	r2, #15
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800359c:	d025      	beq.n	80035ea <HAL_GPIO_Init+0x242>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4e      	ldr	r2, [pc, #312]	; (80036dc <HAL_GPIO_Init+0x334>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01f      	beq.n	80035e6 <HAL_GPIO_Init+0x23e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4d      	ldr	r2, [pc, #308]	; (80036e0 <HAL_GPIO_Init+0x338>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d019      	beq.n	80035e2 <HAL_GPIO_Init+0x23a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4c      	ldr	r2, [pc, #304]	; (80036e4 <HAL_GPIO_Init+0x33c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_GPIO_Init+0x236>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4b      	ldr	r2, [pc, #300]	; (80036e8 <HAL_GPIO_Init+0x340>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00d      	beq.n	80035da <HAL_GPIO_Init+0x232>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4a      	ldr	r2, [pc, #296]	; (80036ec <HAL_GPIO_Init+0x344>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <HAL_GPIO_Init+0x22e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a49      	ldr	r2, [pc, #292]	; (80036f0 <HAL_GPIO_Init+0x348>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_GPIO_Init+0x22a>
 80035ce:	2306      	movs	r3, #6
 80035d0:	e00c      	b.n	80035ec <HAL_GPIO_Init+0x244>
 80035d2:	2307      	movs	r3, #7
 80035d4:	e00a      	b.n	80035ec <HAL_GPIO_Init+0x244>
 80035d6:	2305      	movs	r3, #5
 80035d8:	e008      	b.n	80035ec <HAL_GPIO_Init+0x244>
 80035da:	2304      	movs	r3, #4
 80035dc:	e006      	b.n	80035ec <HAL_GPIO_Init+0x244>
 80035de:	2303      	movs	r3, #3
 80035e0:	e004      	b.n	80035ec <HAL_GPIO_Init+0x244>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e002      	b.n	80035ec <HAL_GPIO_Init+0x244>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_GPIO_Init+0x244>
 80035ea:	2300      	movs	r3, #0
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	f002 0203 	and.w	r2, r2, #3
 80035f2:	0092      	lsls	r2, r2, #2
 80035f4:	4093      	lsls	r3, r2
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035fc:	4936      	ldr	r1, [pc, #216]	; (80036d8 <HAL_GPIO_Init+0x330>)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	3302      	adds	r3, #2
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800360a:	4b3a      	ldr	r3, [pc, #232]	; (80036f4 <HAL_GPIO_Init+0x34c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800362e:	4a31      	ldr	r2, [pc, #196]	; (80036f4 <HAL_GPIO_Init+0x34c>)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003634:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <HAL_GPIO_Init+0x34c>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	43db      	mvns	r3, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003658:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <HAL_GPIO_Init+0x34c>)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800365e:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <HAL_GPIO_Init+0x34c>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	43db      	mvns	r3, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003682:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <HAL_GPIO_Init+0x34c>)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003688:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <HAL_GPIO_Init+0x34c>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	43db      	mvns	r3, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036ac:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_GPIO_Init+0x34c>)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	3301      	adds	r3, #1
 80036b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fa22 f303 	lsr.w	r3, r2, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f47f ae78 	bne.w	80033b8 <HAL_GPIO_Init+0x10>
  }
}
 80036c8:	bf00      	nop
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40010000 	.word	0x40010000
 80036dc:	48000400 	.word	0x48000400
 80036e0:	48000800 	.word	0x48000800
 80036e4:	48000c00 	.word	0x48000c00
 80036e8:	48001000 	.word	0x48001000
 80036ec:	48001400 	.word	0x48001400
 80036f0:	48001800 	.word	0x48001800
 80036f4:	40010400 	.word	0x40010400

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003714:	e002      	b.n	800371c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <HAL_PWREx_GetVoltageRange+0x18>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40007000 	.word	0x40007000

08003744 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003752:	d130      	bne.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003754:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800375c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003760:	d038      	beq.n	80037d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003762:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800376a:	4a1e      	ldr	r2, [pc, #120]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003770:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003772:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2232      	movs	r2, #50	; 0x32
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	0c9b      	lsrs	r3, r3, #18
 8003784:	3301      	adds	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003788:	e002      	b.n	8003790 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3b01      	subs	r3, #1
 800378e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003790:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379c:	d102      	bne.n	80037a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f2      	bne.n	800378a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037a4:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b0:	d110      	bne.n	80037d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e00f      	b.n	80037d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037b6:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c2:	d007      	beq.n	80037d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037cc:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40007000 	.word	0x40007000
 80037e8:	20000000 	.word	0x20000000
 80037ec:	431bde83 	.word	0x431bde83

080037f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e3d4      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003802:	4ba1      	ldr	r3, [pc, #644]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800380c:	4b9e      	ldr	r3, [pc, #632]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80e4 	beq.w	80039ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <HAL_RCC_OscConfig+0x4a>
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b0c      	cmp	r3, #12
 800382e:	f040 808b 	bne.w	8003948 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 8087 	bne.w	8003948 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800383a:	4b93      	ldr	r3, [pc, #588]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x62>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e3ac      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1a      	ldr	r2, [r3, #32]
 8003856:	4b8c      	ldr	r3, [pc, #560]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_RCC_OscConfig+0x7c>
 8003862:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386a:	e005      	b.n	8003878 <HAL_RCC_OscConfig+0x88>
 800386c:	4b86      	ldr	r3, [pc, #536]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003878:	4293      	cmp	r3, r2
 800387a:	d223      	bcs.n	80038c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fd07 	bl	8004294 <RCC_SetFlashLatencyFromMSIRange>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e38d      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003890:	4b7d      	ldr	r3, [pc, #500]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a7c      	ldr	r2, [pc, #496]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003896:	f043 0308 	orr.w	r3, r3, #8
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b7a      	ldr	r3, [pc, #488]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4977      	ldr	r1, [pc, #476]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ae:	4b76      	ldr	r3, [pc, #472]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	4972      	ldr	r1, [pc, #456]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
 80038c2:	e025      	b.n	8003910 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038c4:	4b70      	ldr	r3, [pc, #448]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6f      	ldr	r2, [pc, #444]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80038ca:	f043 0308 	orr.w	r3, r3, #8
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b6d      	ldr	r3, [pc, #436]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	496a      	ldr	r1, [pc, #424]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e2:	4b69      	ldr	r3, [pc, #420]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	4965      	ldr	r1, [pc, #404]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fcc7 	bl	8004294 <RCC_SetFlashLatencyFromMSIRange>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e34d      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003910:	f000 fc36 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8003914:	4601      	mov	r1, r0
 8003916:	4b5c      	ldr	r3, [pc, #368]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	4a5a      	ldr	r2, [pc, #360]	; (8003a8c <HAL_RCC_OscConfig+0x29c>)
 8003922:	5cd3      	ldrb	r3, [r2, r3]
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	fa21 f303 	lsr.w	r3, r1, r3
 800392c:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_OscConfig+0x2a0>)
 800392e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003930:	4b58      	ldr	r3, [pc, #352]	; (8003a94 <HAL_RCC_OscConfig+0x2a4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fd ff19 	bl	800176c <HAL_InitTick>
 800393a:	4603      	mov	r3, r0
 800393c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d052      	beq.n	80039ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	e331      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d032      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003950:	4b4d      	ldr	r3, [pc, #308]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a4c      	ldr	r2, [pc, #304]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003956:	f043 0301 	orr.w	r3, r3, #1
 800395a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800395c:	f7fd ff52 	bl	8001804 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003964:	f7fd ff4e 	bl	8001804 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e31a      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003976:	4b44      	ldr	r3, [pc, #272]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003982:	4b41      	ldr	r3, [pc, #260]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a40      	ldr	r2, [pc, #256]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	4b3e      	ldr	r3, [pc, #248]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	493b      	ldr	r1, [pc, #236]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a0:	4b39      	ldr	r3, [pc, #228]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	4936      	ldr	r1, [pc, #216]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
 80039b4:	e01a      	b.n	80039ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039b6:	4b34      	ldr	r3, [pc, #208]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a33      	ldr	r2, [pc, #204]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039c2:	f7fd ff1f 	bl	8001804 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ca:	f7fd ff1b 	bl	8001804 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e2e7      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039dc:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x1da>
 80039e8:	e000      	b.n	80039ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d074      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d005      	beq.n	8003a0a <HAL_RCC_OscConfig+0x21a>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b0c      	cmp	r3, #12
 8003a02:	d10e      	bne.n	8003a22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d10b      	bne.n	8003a22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0a:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d064      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x2f0>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d160      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e2c4      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x24a>
 8003a2c:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	e01d      	b.n	8003a76 <HAL_RCC_OscConfig+0x286>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCC_OscConfig+0x26e>
 8003a44:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0f      	ldr	r2, [pc, #60]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0c      	ldr	r2, [pc, #48]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	e00b      	b.n	8003a76 <HAL_RCC_OscConfig+0x286>
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a06      	ldr	r2, [pc, #24]	; (8003a88 <HAL_RCC_OscConfig+0x298>)
 8003a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01c      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fec1 	bl	8001804 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a84:	e011      	b.n	8003aaa <HAL_RCC_OscConfig+0x2ba>
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	08005eb8 	.word	0x08005eb8
 8003a90:	20000000 	.word	0x20000000
 8003a94:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fd feb4 	bl	8001804 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e280      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aaa:	4baf      	ldr	r3, [pc, #700]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x2a8>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fea4 	bl	8001804 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fd fea0 	bl	8001804 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e26c      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ad2:	4ba5      	ldr	r3, [pc, #660]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x2d0>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d060      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_OscConfig+0x310>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d119      	bne.n	8003b2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d116      	bne.n	8003b2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b00:	4b99      	ldr	r3, [pc, #612]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_OscConfig+0x328>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e249      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	4b93      	ldr	r3, [pc, #588]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	061b      	lsls	r3, r3, #24
 8003b26:	4990      	ldr	r1, [pc, #576]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b2c:	e040      	b.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d023      	beq.n	8003b7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b36:	4b8c      	ldr	r3, [pc, #560]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a8b      	ldr	r2, [pc, #556]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fd fe5f 	bl	8001804 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7fd fe5b 	bl	8001804 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e227      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b5c:	4b82      	ldr	r3, [pc, #520]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	061b      	lsls	r3, r3, #24
 8003b76:	497c      	ldr	r1, [pc, #496]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]
 8003b7c:	e018      	b.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	4b7a      	ldr	r3, [pc, #488]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a79      	ldr	r2, [pc, #484]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fd fe3b 	bl	8001804 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b92:	f7fd fe37 	bl	8001804 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e203      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba4:	4b70      	ldr	r3, [pc, #448]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d03c      	beq.n	8003c36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01c      	beq.n	8003bfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc4:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bca:	4a67      	ldr	r2, [pc, #412]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fd fe16 	bl	8001804 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bdc:	f7fd fe12 	bl	8001804 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1de      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bee:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ef      	beq.n	8003bdc <HAL_RCC_OscConfig+0x3ec>
 8003bfc:	e01b      	b.n	8003c36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfe:	4b5a      	ldr	r3, [pc, #360]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c04:	4a58      	ldr	r2, [pc, #352]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0e:	f7fd fdf9 	bl	8001804 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c16:	f7fd fdf5 	bl	8001804 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e1c1      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c28:	4b4f      	ldr	r3, [pc, #316]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ef      	bne.n	8003c16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80a6 	beq.w	8003d90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c44:	2300      	movs	r3, #0
 8003c46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c48:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10d      	bne.n	8003c70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c54:	4b44      	ldr	r3, [pc, #272]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	4a43      	ldr	r2, [pc, #268]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c60:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c70:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <HAL_RCC_OscConfig+0x57c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d118      	bne.n	8003cae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7c:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_RCC_OscConfig+0x57c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3a      	ldr	r2, [pc, #232]	; (8003d6c <HAL_RCC_OscConfig+0x57c>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c88:	f7fd fdbc 	bl	8001804 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c90:	f7fd fdb8 	bl	8001804 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e184      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca2:	4b32      	ldr	r3, [pc, #200]	; (8003d6c <HAL_RCC_OscConfig+0x57c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d108      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x4d8>
 8003cb6:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbc:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc6:	e024      	b.n	8003d12 <HAL_RCC_OscConfig+0x522>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b05      	cmp	r3, #5
 8003cce:	d110      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x502>
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	4a24      	ldr	r2, [pc, #144]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	4a20      	ldr	r2, [pc, #128]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf0:	e00f      	b.n	8003d12 <HAL_RCC_OscConfig+0x522>
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003cfa:	f023 0301 	bic.w	r3, r3, #1
 8003cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	4a17      	ldr	r2, [pc, #92]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003d0a:	f023 0304 	bic.w	r3, r3, #4
 8003d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fd fd73 	bl	8001804 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fd fd6f 	bl	8001804 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e139      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_OscConfig+0x578>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0ed      	beq.n	8003d22 <HAL_RCC_OscConfig+0x532>
 8003d46:	e01a      	b.n	8003d7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d48:	f7fd fd5c 	bl	8001804 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d4e:	e00f      	b.n	8003d70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d50:	f7fd fd58 	bl	8001804 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d906      	bls.n	8003d70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e122      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d70:	4b90      	ldr	r3, [pc, #576]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e8      	bne.n	8003d50 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7e:	7ffb      	ldrb	r3, [r7, #31]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d105      	bne.n	8003d90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d84:	4b8b      	ldr	r3, [pc, #556]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	4a8a      	ldr	r2, [pc, #552]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8108 	beq.w	8003faa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	f040 80d0 	bne.w	8003f44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003da4:	4b83      	ldr	r3, [pc, #524]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0203 	and.w	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d130      	bne.n	8003e1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d127      	bne.n	8003e1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d11f      	bne.n	8003e1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de4:	2a07      	cmp	r2, #7
 8003de6:	bf14      	ite	ne
 8003de8:	2201      	movne	r2, #1
 8003dea:	2200      	moveq	r2, #0
 8003dec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d113      	bne.n	8003e1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d109      	bne.n	8003e1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	085b      	lsrs	r3, r3, #1
 8003e12:	3b01      	subs	r3, #1
 8003e14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d06e      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d069      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e20:	4b64      	ldr	r3, [pc, #400]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e2c:	4b61      	ldr	r3, [pc, #388]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0b7      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e3c:	4b5d      	ldr	r3, [pc, #372]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a5c      	ldr	r2, [pc, #368]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e48:	f7fd fcdc 	bl	8001804 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fd fcd8 	bl	8001804 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0a4      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e62:	4b54      	ldr	r3, [pc, #336]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6e:	4b51      	ldr	r3, [pc, #324]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	4b51      	ldr	r3, [pc, #324]	; (8003fb8 <HAL_RCC_OscConfig+0x7c8>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e7e:	3a01      	subs	r2, #1
 8003e80:	0112      	lsls	r2, r2, #4
 8003e82:	4311      	orrs	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e88:	0212      	lsls	r2, r2, #8
 8003e8a:	4311      	orrs	r1, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e90:	0852      	lsrs	r2, r2, #1
 8003e92:	3a01      	subs	r2, #1
 8003e94:	0552      	lsls	r2, r2, #21
 8003e96:	4311      	orrs	r1, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e9c:	0852      	lsrs	r2, r2, #1
 8003e9e:	3a01      	subs	r2, #1
 8003ea0:	0652      	lsls	r2, r2, #25
 8003ea2:	4311      	orrs	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ea8:	0912      	lsrs	r2, r2, #4
 8003eaa:	0452      	lsls	r2, r2, #17
 8003eac:	430a      	orrs	r2, r1
 8003eae:	4941      	ldr	r1, [pc, #260]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eb4:	4b3f      	ldr	r3, [pc, #252]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a3e      	ldr	r2, [pc, #248]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ebe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ec0:	4b3c      	ldr	r3, [pc, #240]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a3b      	ldr	r2, [pc, #236]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ecc:	f7fd fc9a 	bl	8001804 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fd fc96 	bl	8001804 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e062      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee6:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ef2:	e05a      	b.n	8003faa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e059      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef8:	4b2e      	ldr	r3, [pc, #184]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d152      	bne.n	8003faa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f10:	4b28      	ldr	r3, [pc, #160]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a27      	ldr	r2, [pc, #156]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f1c:	f7fd fc72 	bl	8001804 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fd fc6e 	bl	8001804 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e03a      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f36:	4b1f      	ldr	r3, [pc, #124]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f0      	beq.n	8003f24 <HAL_RCC_OscConfig+0x734>
 8003f42:	e032      	b.n	8003faa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b0c      	cmp	r3, #12
 8003f48:	d02d      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f54:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f56:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f62:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f68:	f023 0303 	bic.w	r3, r3, #3
 8003f6c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	4a10      	ldr	r2, [pc, #64]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fd fc41 	bl	8001804 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f86:	f7fd fc3d 	bl	8001804 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e009      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RCC_OscConfig+0x7c4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f0      	bne.n	8003f86 <HAL_RCC_OscConfig+0x796>
 8003fa4:	e001      	b.n	8003faa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	f99d808c 	.word	0xf99d808c

08003fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0c8      	b.n	8004162 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b66      	ldr	r3, [pc, #408]	; (800416c <HAL_RCC_ClockConfig+0x1b0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d910      	bls.n	8004000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCC_ClockConfig+0x1b0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 0207 	bic.w	r2, r3, #7
 8003fe6:	4961      	ldr	r1, [pc, #388]	; (800416c <HAL_RCC_ClockConfig+0x1b0>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b5f      	ldr	r3, [pc, #380]	; (800416c <HAL_RCC_ClockConfig+0x1b0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0b0      	b.n	8004162 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d04c      	beq.n	80040a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b03      	cmp	r3, #3
 8004012:	d107      	bne.n	8004024 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004014:	4b56      	ldr	r3, [pc, #344]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d121      	bne.n	8004064 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e09e      	b.n	8004162 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d107      	bne.n	800403c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402c:	4b50      	ldr	r3, [pc, #320]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d115      	bne.n	8004064 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e092      	b.n	8004162 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004044:	4b4a      	ldr	r3, [pc, #296]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e086      	b.n	8004162 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004054:	4b46      	ldr	r3, [pc, #280]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e07e      	b.n	8004162 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004064:	4b42      	ldr	r3, [pc, #264]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 0203 	bic.w	r2, r3, #3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	493f      	ldr	r1, [pc, #252]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004076:	f7fd fbc5 	bl	8001804 <HAL_GetTick>
 800407a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407c:	e00a      	b.n	8004094 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407e:	f7fd fbc1 	bl	8001804 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e066      	b.n	8004162 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004094:	4b36      	ldr	r3, [pc, #216]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 020c 	and.w	r2, r3, #12
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d1eb      	bne.n	800407e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b2:	4b2f      	ldr	r3, [pc, #188]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	492c      	ldr	r1, [pc, #176]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b29      	ldr	r3, [pc, #164]	; (800416c <HAL_RCC_ClockConfig+0x1b0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d210      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b26      	ldr	r3, [pc, #152]	; (800416c <HAL_RCC_ClockConfig+0x1b0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 0207 	bic.w	r2, r3, #7
 80040da:	4924      	ldr	r1, [pc, #144]	; (800416c <HAL_RCC_ClockConfig+0x1b0>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_RCC_ClockConfig+0x1b0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e036      	b.n	8004162 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4918      	ldr	r1, [pc, #96]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4910      	ldr	r1, [pc, #64]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004132:	f000 f825 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 8004136:	4601      	mov	r1, r0
 8004138:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <HAL_RCC_ClockConfig+0x1b4>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	fa21 f303 	lsr.w	r3, r1, r3
 800414e:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004152:	4b0a      	ldr	r3, [pc, #40]	; (800417c <HAL_RCC_ClockConfig+0x1c0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fd fb08 	bl	800176c <HAL_InitTick>
 800415c:	4603      	mov	r3, r0
 800415e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004160:	7afb      	ldrb	r3, [r7, #11]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40022000 	.word	0x40022000
 8004170:	40021000 	.word	0x40021000
 8004174:	08005eb8 	.word	0x08005eb8
 8004178:	20000000 	.word	0x20000000
 800417c:	20000004 	.word	0x20000004

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800418e:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <HAL_RCC_GetSysClockFreq+0x104>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004198:	4b3a      	ldr	r3, [pc, #232]	; (8004284 <HAL_RCC_GetSysClockFreq+0x104>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x34>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d121      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d11e      	bne.n	80041f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041b4:	4b33      	ldr	r3, [pc, #204]	; (8004284 <HAL_RCC_GetSysClockFreq+0x104>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041c0:	4b30      	ldr	r3, [pc, #192]	; (8004284 <HAL_RCC_GetSysClockFreq+0x104>)
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	e005      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041d0:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <HAL_RCC_GetSysClockFreq+0x104>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041dc:	4a2a      	ldr	r2, [pc, #168]	; (8004288 <HAL_RCC_GetSysClockFreq+0x108>)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d102      	bne.n	80041fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	e004      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d101      	bne.n	8004208 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004204:	4b22      	ldr	r3, [pc, #136]	; (8004290 <HAL_RCC_GetSysClockFreq+0x110>)
 8004206:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d133      	bne.n	8004276 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCC_GetSysClockFreq+0x104>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d002      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0xa4>
 800421e:	2b03      	cmp	r3, #3
 8004220:	d003      	beq.n	800422a <HAL_RCC_GetSysClockFreq+0xaa>
 8004222:	e005      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004226:	617b      	str	r3, [r7, #20]
      break;
 8004228:	e005      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800422a:	4b19      	ldr	r3, [pc, #100]	; (8004290 <HAL_RCC_GetSysClockFreq+0x110>)
 800422c:	617b      	str	r3, [r7, #20]
      break;
 800422e:	e002      	b.n	8004236 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	617b      	str	r3, [r7, #20]
      break;
 8004234:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004236:	4b13      	ldr	r3, [pc, #76]	; (8004284 <HAL_RCC_GetSysClockFreq+0x104>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	3301      	adds	r3, #1
 8004242:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <HAL_RCC_GetSysClockFreq+0x104>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	fb02 f203 	mul.w	r2, r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_RCC_GetSysClockFreq+0x104>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	0e5b      	lsrs	r3, r3, #25
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	3301      	adds	r3, #1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	fbb2 f3f3 	udiv	r3, r2, r3
 8004274:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004276:	69bb      	ldr	r3, [r7, #24]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3724      	adds	r7, #36	; 0x24
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40021000 	.word	0x40021000
 8004288:	08005ec8 	.word	0x08005ec8
 800428c:	00f42400 	.word	0x00f42400
 8004290:	007a1200 	.word	0x007a1200

08004294 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042a0:	4b2a      	ldr	r3, [pc, #168]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042ac:	f7ff fa3c 	bl	8003728 <HAL_PWREx_GetVoltageRange>
 80042b0:	6178      	str	r0, [r7, #20]
 80042b2:	e014      	b.n	80042de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	4a24      	ldr	r2, [pc, #144]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042be:	6593      	str	r3, [r2, #88]	; 0x58
 80042c0:	4b22      	ldr	r3, [pc, #136]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042cc:	f7ff fa2c 	bl	8003728 <HAL_PWREx_GetVoltageRange>
 80042d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042d2:	4b1e      	ldr	r3, [pc, #120]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d6:	4a1d      	ldr	r2, [pc, #116]	; (800434c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e4:	d10b      	bne.n	80042fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b80      	cmp	r3, #128	; 0x80
 80042ea:	d919      	bls.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2ba0      	cmp	r3, #160	; 0xa0
 80042f0:	d902      	bls.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042f2:	2302      	movs	r3, #2
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	e013      	b.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042f8:	2301      	movs	r3, #1
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	e010      	b.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b80      	cmp	r3, #128	; 0x80
 8004302:	d902      	bls.n	800430a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004304:	2303      	movs	r3, #3
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	e00a      	b.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d102      	bne.n	8004316 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004310:	2302      	movs	r3, #2
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	e004      	b.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b70      	cmp	r3, #112	; 0x70
 800431a:	d101      	bne.n	8004320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800431c:	2301      	movs	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f023 0207 	bic.w	r2, r3, #7
 8004328:	4909      	ldr	r1, [pc, #36]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004330:	4b07      	ldr	r3, [pc, #28]	; (8004350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	429a      	cmp	r2, r3
 800433c:	d001      	beq.n	8004342 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000
 8004350:	40022000 	.word	0x40022000

08004354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800435c:	2300      	movs	r3, #0
 800435e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004360:	2300      	movs	r3, #0
 8004362:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800436c:	2b00      	cmp	r3, #0
 800436e:	d03f      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004378:	d01c      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800437a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800437e:	d802      	bhi.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004384:	e01f      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004386:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800438c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004390:	d01c      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004392:	e018      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004394:	4b85      	ldr	r3, [pc, #532]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4a84      	ldr	r2, [pc, #528]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800439a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043a0:	e015      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 fab9 	bl	8004920 <RCCEx_PLLSAI1_Config>
 80043ae:	4603      	mov	r3, r0
 80043b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043b2:	e00c      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3320      	adds	r3, #32
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fba0 	bl	8004b00 <RCCEx_PLLSAI2_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043c4:	e003      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	74fb      	strb	r3, [r7, #19]
      break;
 80043ca:	e000      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80043cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043d4:	4b75      	ldr	r3, [pc, #468]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043e2:	4972      	ldr	r1, [pc, #456]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043ea:	e001      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ec:	7cfb      	ldrb	r3, [r7, #19]
 80043ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d03f      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004404:	d01c      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004406:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800440a:	d802      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00e      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004410:	e01f      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004418:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800441c:	d01c      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800441e:	e018      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004420:	4b62      	ldr	r3, [pc, #392]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4a61      	ldr	r2, [pc, #388]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800442c:	e015      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fa73 	bl	8004920 <RCCEx_PLLSAI1_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800443e:	e00c      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3320      	adds	r3, #32
 8004444:	2100      	movs	r1, #0
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fb5a 	bl	8004b00 <RCCEx_PLLSAI2_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	74fb      	strb	r3, [r7, #19]
      break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004460:	4b52      	ldr	r3, [pc, #328]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800446e:	494f      	ldr	r1, [pc, #316]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004476:	e001      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a0 	beq.w	80045ca <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448a:	2300      	movs	r3, #0
 800448c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800448e:	4b47      	ldr	r3, [pc, #284]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800449e:	2300      	movs	r3, #0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b41      	ldr	r3, [pc, #260]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	4a40      	ldr	r2, [pc, #256]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ae:	6593      	str	r3, [r2, #88]	; 0x58
 80044b0:	4b3e      	ldr	r3, [pc, #248]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044bc:	2301      	movs	r3, #1
 80044be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044c0:	4b3b      	ldr	r3, [pc, #236]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a3a      	ldr	r2, [pc, #232]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044cc:	f7fd f99a 	bl	8001804 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044d2:	e009      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d4:	f7fd f996 	bl	8001804 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d902      	bls.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	74fb      	strb	r3, [r7, #19]
        break;
 80044e6:	e005      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044e8:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ef      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80044f4:	7cfb      	ldrb	r3, [r7, #19]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d15c      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044fa:	4b2c      	ldr	r3, [pc, #176]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004504:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01f      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	429a      	cmp	r2, r3
 8004516:	d019      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004522:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452a:	4a20      	ldr	r2, [pc, #128]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453a:	4a1c      	ldr	r2, [pc, #112]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800453c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004544:	4a19      	ldr	r2, [pc, #100]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fd f955 	bl	8001804 <HAL_GetTick>
 800455a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455c:	e00b      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fd f951 	bl	8001804 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	; 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d902      	bls.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	74fb      	strb	r3, [r7, #19]
            break;
 8004574:	e006      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ec      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10c      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458a:	4b08      	ldr	r3, [pc, #32]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459a:	4904      	ldr	r1, [pc, #16]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045a2:	e009      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	74bb      	strb	r3, [r7, #18]
 80045a8:	e006      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b8:	7c7b      	ldrb	r3, [r7, #17]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d105      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045be:	4b9e      	ldr	r3, [pc, #632]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	4a9d      	ldr	r2, [pc, #628]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045d6:	4b98      	ldr	r3, [pc, #608]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f023 0203 	bic.w	r2, r3, #3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	4994      	ldr	r1, [pc, #592]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045f8:	4b8f      	ldr	r3, [pc, #572]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f023 020c 	bic.w	r2, r3, #12
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	498c      	ldr	r1, [pc, #560]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800461a:	4b87      	ldr	r3, [pc, #540]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	4983      	ldr	r1, [pc, #524]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800463c:	4b7e      	ldr	r3, [pc, #504]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	497b      	ldr	r1, [pc, #492]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800465e:	4b76      	ldr	r3, [pc, #472]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466c:	4972      	ldr	r1, [pc, #456]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004680:	4b6d      	ldr	r3, [pc, #436]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	496a      	ldr	r1, [pc, #424]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046a2:	4b65      	ldr	r3, [pc, #404]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b0:	4961      	ldr	r1, [pc, #388]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046c4:	4b5c      	ldr	r3, [pc, #368]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d2:	4959      	ldr	r1, [pc, #356]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046e6:	4b54      	ldr	r3, [pc, #336]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f4:	4950      	ldr	r1, [pc, #320]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004708:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	4948      	ldr	r1, [pc, #288]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800472a:	4b43      	ldr	r3, [pc, #268]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	493f      	ldr	r1, [pc, #252]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d028      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800474c:	4b3a      	ldr	r3, [pc, #232]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475a:	4937      	ldr	r1, [pc, #220]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800476a:	d106      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800476c:	4b32      	ldr	r3, [pc, #200]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4a31      	ldr	r2, [pc, #196]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004776:	60d3      	str	r3, [r2, #12]
 8004778:	e011      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800477e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004782:	d10c      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	2101      	movs	r1, #1
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f8c8 	bl	8004920 <RCCEx_PLLSAI1_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d028      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047aa:	4b23      	ldr	r3, [pc, #140]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	491f      	ldr	r1, [pc, #124]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c8:	d106      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d4:	60d3      	str	r3, [r2, #12]
 80047d6:	e011      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e0:	d10c      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	2101      	movs	r1, #1
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 f899 	bl	8004920 <RCCEx_PLLSAI1_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047f2:	7cfb      	ldrb	r3, [r7, #19]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80047f8:	7cfb      	ldrb	r3, [r7, #19]
 80047fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02b      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004816:	4908      	ldr	r1, [pc, #32]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004826:	d109      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004828:	4b03      	ldr	r3, [pc, #12]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4a02      	ldr	r2, [pc, #8]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800482e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004832:	60d3      	str	r3, [r2, #12]
 8004834:	e014      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004844:	d10c      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	2101      	movs	r1, #1
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f867 	bl	8004920 <RCCEx_PLLSAI1_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004856:	7cfb      	ldrb	r3, [r7, #19]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d02f      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800486c:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800487a:	4928      	ldr	r1, [pc, #160]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800488a:	d10d      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	2102      	movs	r1, #2
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f844 	bl	8004920 <RCCEx_PLLSAI1_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d014      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80048a2:	7cfb      	ldrb	r3, [r7, #19]
 80048a4:	74bb      	strb	r3, [r7, #18]
 80048a6:	e011      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048b0:	d10c      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3320      	adds	r3, #32
 80048b6:	2102      	movs	r1, #2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f921 	bl	8004b00 <RCCEx_PLLSAI2_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048c2:	7cfb      	ldrb	r3, [r7, #19]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048d8:	4b10      	ldr	r3, [pc, #64]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e6:	490d      	ldr	r1, [pc, #52]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048fa:	4b08      	ldr	r3, [pc, #32]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800490a:	4904      	ldr	r1, [pc, #16]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004912:	7cbb      	ldrb	r3, [r7, #18]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40021000 	.word	0x40021000

08004920 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800492e:	4b73      	ldr	r3, [pc, #460]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d018      	beq.n	800496c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800493a:	4b70      	ldr	r3, [pc, #448]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0203 	and.w	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d10d      	bne.n	8004966 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
       ||
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004952:	4b6a      	ldr	r3, [pc, #424]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
       ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d044      	beq.n	80049f0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	e041      	b.n	80049f0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d00c      	beq.n	800498e <RCCEx_PLLSAI1_Config+0x6e>
 8004974:	2b03      	cmp	r3, #3
 8004976:	d013      	beq.n	80049a0 <RCCEx_PLLSAI1_Config+0x80>
 8004978:	2b01      	cmp	r3, #1
 800497a:	d120      	bne.n	80049be <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800497c:	4b5f      	ldr	r3, [pc, #380]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d11d      	bne.n	80049c4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498c:	e01a      	b.n	80049c4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800498e:	4b5b      	ldr	r3, [pc, #364]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004996:	2b00      	cmp	r3, #0
 8004998:	d116      	bne.n	80049c8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800499e:	e013      	b.n	80049c8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049a0:	4b56      	ldr	r3, [pc, #344]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10f      	bne.n	80049cc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ac:	4b53      	ldr	r3, [pc, #332]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049bc:	e006      	b.n	80049cc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
      break;
 80049c2:	e004      	b.n	80049ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049c4:	bf00      	nop
 80049c6:	e002      	b.n	80049ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049c8:	bf00      	nop
 80049ca:	e000      	b.n	80049ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80049cc:	bf00      	nop
    }

    if(status == HAL_OK)
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10d      	bne.n	80049f0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049d4:	4b49      	ldr	r3, [pc, #292]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6819      	ldr	r1, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	430b      	orrs	r3, r1
 80049ea:	4944      	ldr	r1, [pc, #272]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d17d      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049f6:	4b41      	ldr	r3, [pc, #260]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a40      	ldr	r2, [pc, #256]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 80049fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a02:	f7fc feff 	bl	8001804 <HAL_GetTick>
 8004a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a08:	e009      	b.n	8004a1e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a0a:	f7fc fefb 	bl	8001804 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d902      	bls.n	8004a1e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1c:	e005      	b.n	8004a2a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a1e:	4b37      	ldr	r3, [pc, #220]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1ef      	bne.n	8004a0a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d160      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d111      	bne.n	8004a5a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a36:	4b31      	ldr	r3, [pc, #196]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6892      	ldr	r2, [r2, #8]
 8004a46:	0211      	lsls	r1, r2, #8
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68d2      	ldr	r2, [r2, #12]
 8004a4c:	0912      	lsrs	r2, r2, #4
 8004a4e:	0452      	lsls	r2, r2, #17
 8004a50:	430a      	orrs	r2, r1
 8004a52:	492a      	ldr	r1, [pc, #168]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]
 8004a58:	e027      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d112      	bne.n	8004a86 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a60:	4b26      	ldr	r3, [pc, #152]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6892      	ldr	r2, [r2, #8]
 8004a70:	0211      	lsls	r1, r2, #8
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6912      	ldr	r2, [r2, #16]
 8004a76:	0852      	lsrs	r2, r2, #1
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	0552      	lsls	r2, r2, #21
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	491f      	ldr	r1, [pc, #124]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	610b      	str	r3, [r1, #16]
 8004a84:	e011      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a86:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6892      	ldr	r2, [r2, #8]
 8004a96:	0211      	lsls	r1, r2, #8
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6952      	ldr	r2, [r2, #20]
 8004a9c:	0852      	lsrs	r2, r2, #1
 8004a9e:	3a01      	subs	r2, #1
 8004aa0:	0652      	lsls	r2, r2, #25
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	4915      	ldr	r1, [pc, #84]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a13      	ldr	r2, [pc, #76]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ab0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab6:	f7fc fea5 	bl	8001804 <HAL_GetTick>
 8004aba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004abc:	e009      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004abe:	f7fc fea1 	bl	8001804 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d902      	bls.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	73fb      	strb	r3, [r7, #15]
          break;
 8004ad0:	e005      	b.n	8004ade <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0ef      	beq.n	8004abe <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	4903      	ldr	r1, [pc, #12]	; (8004afc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40021000 	.word	0x40021000

08004b00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b0e:	4b68      	ldr	r3, [pc, #416]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d018      	beq.n	8004b4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b1a:	4b65      	ldr	r3, [pc, #404]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0203 	and.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d10d      	bne.n	8004b46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
       ||
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b32:	4b5f      	ldr	r3, [pc, #380]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
       ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d044      	beq.n	8004bd0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
 8004b4a:	e041      	b.n	8004bd0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d00c      	beq.n	8004b6e <RCCEx_PLLSAI2_Config+0x6e>
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d013      	beq.n	8004b80 <RCCEx_PLLSAI2_Config+0x80>
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d120      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b5c:	4b54      	ldr	r3, [pc, #336]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d11d      	bne.n	8004ba4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b6c:	e01a      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b6e:	4b50      	ldr	r3, [pc, #320]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d116      	bne.n	8004ba8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b7e:	e013      	b.n	8004ba8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b80:	4b4b      	ldr	r3, [pc, #300]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10f      	bne.n	8004bac <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b8c:	4b48      	ldr	r3, [pc, #288]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b9c:	e006      	b.n	8004bac <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba2:	e004      	b.n	8004bae <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ba4:	bf00      	nop
 8004ba6:	e002      	b.n	8004bae <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ba8:	bf00      	nop
 8004baa:	e000      	b.n	8004bae <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004bac:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10d      	bne.n	8004bd0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6819      	ldr	r1, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	4939      	ldr	r1, [pc, #228]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d167      	bne.n	8004ca6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bd6:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a35      	ldr	r2, [pc, #212]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be2:	f7fc fe0f 	bl	8001804 <HAL_GetTick>
 8004be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004be8:	e009      	b.n	8004bfe <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bea:	f7fc fe0b 	bl	8001804 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d902      	bls.n	8004bfe <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	73fb      	strb	r3, [r7, #15]
        break;
 8004bfc:	e005      	b.n	8004c0a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bfe:	4b2c      	ldr	r3, [pc, #176]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1ef      	bne.n	8004bea <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d14a      	bne.n	8004ca6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d111      	bne.n	8004c3a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c16:	4b26      	ldr	r3, [pc, #152]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6892      	ldr	r2, [r2, #8]
 8004c26:	0211      	lsls	r1, r2, #8
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68d2      	ldr	r2, [r2, #12]
 8004c2c:	0912      	lsrs	r2, r2, #4
 8004c2e:	0452      	lsls	r2, r2, #17
 8004c30:	430a      	orrs	r2, r1
 8004c32:	491f      	ldr	r1, [pc, #124]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	614b      	str	r3, [r1, #20]
 8004c38:	e011      	b.n	8004c5e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c3a:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6892      	ldr	r2, [r2, #8]
 8004c4a:	0211      	lsls	r1, r2, #8
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6912      	ldr	r2, [r2, #16]
 8004c50:	0852      	lsrs	r2, r2, #1
 8004c52:	3a01      	subs	r2, #1
 8004c54:	0652      	lsls	r2, r2, #25
 8004c56:	430a      	orrs	r2, r1
 8004c58:	4915      	ldr	r1, [pc, #84]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6a:	f7fc fdcb 	bl	8001804 <HAL_GetTick>
 8004c6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c70:	e009      	b.n	8004c86 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c72:	f7fc fdc7 	bl	8001804 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d902      	bls.n	8004c86 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	73fb      	strb	r3, [r7, #15]
          break;
 8004c84:	e005      	b.n	8004c92 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c86:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ef      	beq.n	8004c72 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c9a:	695a      	ldr	r2, [r3, #20]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	4903      	ldr	r1, [pc, #12]	; (8004cb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000

08004cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e01d      	b.n	8004d02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fc fc1e 	bl	800151c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f000 fbd2 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <HAL_TIM_Base_Start_IT+0x50>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d00b      	beq.n	8004d4e <HAL_TIM_Base_Start_IT+0x42>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3c:	d007      	beq.n	8004d4e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	00010007 	.word	0x00010007

08004d60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e01d      	b.n	8004dae <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fc fbaa 	bl	80014e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f000 fb7c 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 ff70 	bl	8005cb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <HAL_TIM_PWM_Start+0x98>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x4a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1d      	ldr	r2, [pc, #116]	; (8004e54 <HAL_TIM_PWM_Start+0x9c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x4a>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <HAL_TIM_PWM_Start+0xa0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d009      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x4a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <HAL_TIM_PWM_Start+0xa4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d004      	beq.n	8004e02 <HAL_TIM_PWM_Start+0x4a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <HAL_TIM_PWM_Start+0xa8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_PWM_Start+0x4e>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_TIM_PWM_Start+0x50>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <HAL_TIM_PWM_Start+0xac>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b06      	cmp	r3, #6
 8004e2c:	d00b      	beq.n	8004e46 <HAL_TIM_PWM_Start+0x8e>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e34:	d007      	beq.n	8004e46 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40013400 	.word	0x40013400
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	40014400 	.word	0x40014400
 8004e60:	40014800 	.word	0x40014800
 8004e64:	00010007 	.word	0x00010007

08004e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d122      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d11b      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0202 	mvn.w	r2, #2
 8004e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fad7 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fac9 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fada 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d122      	bne.n	8004f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d11b      	bne.n	8004f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0204 	mvn.w	r2, #4
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 faad 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fa9f 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fab0 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d122      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d11b      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0208 	mvn.w	r2, #8
 8004f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2204      	movs	r2, #4
 8004f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fa83 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa75 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fa86 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b10      	cmp	r3, #16
 8004f78:	d122      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d11b      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0210 	mvn.w	r2, #16
 8004f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2208      	movs	r2, #8
 8004f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fa59 	bl	800545e <HAL_TIM_IC_CaptureCallback>
 8004fac:	e005      	b.n	8004fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa4b 	bl	800544a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fa5c 	bl	8005472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0201 	mvn.w	r2, #1
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fb f97a 	bl	80002e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b80      	cmp	r3, #128	; 0x80
 8005006:	d107      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 ff04 	bl	8005e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005026:	d10e      	bne.n	8005046 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005032:	2b80      	cmp	r3, #128	; 0x80
 8005034:	d107      	bne.n	8005046 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800503e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fef7 	bl	8005e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d10e      	bne.n	8005072 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d107      	bne.n	8005072 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fa0a 	bl	8005486 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b20      	cmp	r3, #32
 800507e:	d10e      	bne.n	800509e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b20      	cmp	r3, #32
 800508c:	d107      	bne.n	800509e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f06f 0220 	mvn.w	r2, #32
 8005096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 feb7 	bl	8005e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050be:	2302      	movs	r3, #2
 80050c0:	e105      	b.n	80052ce <HAL_TIM_PWM_ConfigChannel+0x226>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b14      	cmp	r3, #20
 80050d6:	f200 80f0 	bhi.w	80052ba <HAL_TIM_PWM_ConfigChannel+0x212>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	08005135 	.word	0x08005135
 80050e4:	080052bb 	.word	0x080052bb
 80050e8:	080052bb 	.word	0x080052bb
 80050ec:	080052bb 	.word	0x080052bb
 80050f0:	08005175 	.word	0x08005175
 80050f4:	080052bb 	.word	0x080052bb
 80050f8:	080052bb 	.word	0x080052bb
 80050fc:	080052bb 	.word	0x080052bb
 8005100:	080051b7 	.word	0x080051b7
 8005104:	080052bb 	.word	0x080052bb
 8005108:	080052bb 	.word	0x080052bb
 800510c:	080052bb 	.word	0x080052bb
 8005110:	080051f7 	.word	0x080051f7
 8005114:	080052bb 	.word	0x080052bb
 8005118:	080052bb 	.word	0x080052bb
 800511c:	080052bb 	.word	0x080052bb
 8005120:	08005239 	.word	0x08005239
 8005124:	080052bb 	.word	0x080052bb
 8005128:	080052bb 	.word	0x080052bb
 800512c:	080052bb 	.word	0x080052bb
 8005130:	08005279 	.word	0x08005279
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fa48 	bl	80055d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0208 	orr.w	r2, r2, #8
 800514e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0204 	bic.w	r2, r2, #4
 800515e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6999      	ldr	r1, [r3, #24]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	619a      	str	r2, [r3, #24]
      break;
 8005172:	e0a3      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fab8 	bl	80056f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800518e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6999      	ldr	r1, [r3, #24]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	021a      	lsls	r2, r3, #8
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	619a      	str	r2, [r3, #24]
      break;
 80051b4:	e082      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fb21 	bl	8005804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0208 	orr.w	r2, r2, #8
 80051d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0204 	bic.w	r2, r2, #4
 80051e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69d9      	ldr	r1, [r3, #28]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	61da      	str	r2, [r3, #28]
      break;
 80051f4:	e062      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fb89 	bl	8005914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69d9      	ldr	r1, [r3, #28]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	021a      	lsls	r2, r3, #8
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	61da      	str	r2, [r3, #28]
      break;
 8005236:	e041      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fbd2 	bl	80059e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0208 	orr.w	r2, r2, #8
 8005252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0204 	bic.w	r2, r2, #4
 8005262:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005276:	e021      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fc16 	bl	8005ab0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005292:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	021a      	lsls	r2, r3, #8
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052b8:	e000      	b.n	80052bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80052ba:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop

080052d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_TIM_ConfigClockSource+0x18>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e0a8      	b.n	8005442 <HAL_TIM_ConfigClockSource+0x16a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005312:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d067      	beq.n	80053fc <HAL_TIM_ConfigClockSource+0x124>
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d80b      	bhi.n	8005348 <HAL_TIM_ConfigClockSource+0x70>
 8005330:	2b10      	cmp	r3, #16
 8005332:	d073      	beq.n	800541c <HAL_TIM_ConfigClockSource+0x144>
 8005334:	2b10      	cmp	r3, #16
 8005336:	d802      	bhi.n	800533e <HAL_TIM_ConfigClockSource+0x66>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d06f      	beq.n	800541c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800533c:	e078      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800533e:	2b20      	cmp	r3, #32
 8005340:	d06c      	beq.n	800541c <HAL_TIM_ConfigClockSource+0x144>
 8005342:	2b30      	cmp	r3, #48	; 0x30
 8005344:	d06a      	beq.n	800541c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005346:	e073      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005348:	2b70      	cmp	r3, #112	; 0x70
 800534a:	d00d      	beq.n	8005368 <HAL_TIM_ConfigClockSource+0x90>
 800534c:	2b70      	cmp	r3, #112	; 0x70
 800534e:	d804      	bhi.n	800535a <HAL_TIM_ConfigClockSource+0x82>
 8005350:	2b50      	cmp	r3, #80	; 0x50
 8005352:	d033      	beq.n	80053bc <HAL_TIM_ConfigClockSource+0xe4>
 8005354:	2b60      	cmp	r3, #96	; 0x60
 8005356:	d041      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005358:	e06a      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535e:	d066      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x156>
 8005360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005364:	d017      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005366:	e063      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6899      	ldr	r1, [r3, #8]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f000 fc7a 	bl	8005c70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800538a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	609a      	str	r2, [r3, #8]
      break;
 8005394:	e04c      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6899      	ldr	r1, [r3, #8]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f000 fc63 	bl	8005c70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053b8:	609a      	str	r2, [r3, #8]
      break;
 80053ba:	e039      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6859      	ldr	r1, [r3, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	461a      	mov	r2, r3
 80053ca:	f000 fbd7 	bl	8005b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2150      	movs	r1, #80	; 0x50
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fc30 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 80053da:	e029      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6859      	ldr	r1, [r3, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	461a      	mov	r2, r3
 80053ea:	f000 fbf6 	bl	8005bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2160      	movs	r1, #96	; 0x60
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fc20 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 80053fa:	e019      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	6859      	ldr	r1, [r3, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	461a      	mov	r2, r3
 800540a:	f000 fbb7 	bl	8005b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2140      	movs	r1, #64	; 0x40
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fc10 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 800541a:	e009      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f000 fc07 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 800542c:	e000      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800542e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a40      	ldr	r2, [pc, #256]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d00f      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3d      	ldr	r2, [pc, #244]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3c      	ldr	r2, [pc, #240]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3b      	ldr	r2, [pc, #236]	; (80055bc <TIM_Base_SetConfig+0x120>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a3a      	ldr	r2, [pc, #232]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2f      	ldr	r2, [pc, #188]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01f      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d01b      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2c      	ldr	r2, [pc, #176]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d017      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <TIM_Base_SetConfig+0x120>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00f      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a28      	ldr	r2, [pc, #160]	; (80055c4 <TIM_Base_SetConfig+0x128>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a27      	ldr	r2, [pc, #156]	; (80055c8 <TIM_Base_SetConfig+0x12c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a26      	ldr	r2, [pc, #152]	; (80055cc <TIM_Base_SetConfig+0x130>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a10      	ldr	r2, [pc, #64]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00f      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a12      	ldr	r2, [pc, #72]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00b      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a11      	ldr	r2, [pc, #68]	; (80055c4 <TIM_Base_SetConfig+0x128>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <TIM_Base_SetConfig+0x12c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a0f      	ldr	r2, [pc, #60]	; (80055cc <TIM_Base_SetConfig+0x130>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d103      	bne.n	800559c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	615a      	str	r2, [r3, #20]
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40013400 	.word	0x40013400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800

080055d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 0302 	bic.w	r3, r3, #2
 800561c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a2c      	ldr	r2, [pc, #176]	; (80056dc <TIM_OC1_SetConfig+0x10c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00f      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a2b      	ldr	r2, [pc, #172]	; (80056e0 <TIM_OC1_SetConfig+0x110>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <TIM_OC1_SetConfig+0x114>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <TIM_OC1_SetConfig+0x118>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a28      	ldr	r2, [pc, #160]	; (80056ec <TIM_OC1_SetConfig+0x11c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d10c      	bne.n	800566a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 0308 	bic.w	r3, r3, #8
 8005656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 0304 	bic.w	r3, r3, #4
 8005668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a1b      	ldr	r2, [pc, #108]	; (80056dc <TIM_OC1_SetConfig+0x10c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00f      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1a      	ldr	r2, [pc, #104]	; (80056e0 <TIM_OC1_SetConfig+0x110>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00b      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a19      	ldr	r2, [pc, #100]	; (80056e4 <TIM_OC1_SetConfig+0x114>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d007      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <TIM_OC1_SetConfig+0x118>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a17      	ldr	r2, [pc, #92]	; (80056ec <TIM_OC1_SetConfig+0x11c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d111      	bne.n	80056b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	621a      	str	r2, [r3, #32]
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40012c00 	.word	0x40012c00
 80056e0:	40013400 	.word	0x40013400
 80056e4:	40014000 	.word	0x40014000
 80056e8:	40014400 	.word	0x40014400
 80056ec:	40014800 	.word	0x40014800

080056f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0210 	bic.w	r2, r3, #16
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0320 	bic.w	r3, r3, #32
 800573e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a28      	ldr	r2, [pc, #160]	; (80057f0 <TIM_OC2_SetConfig+0x100>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_OC2_SetConfig+0x6c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a27      	ldr	r2, [pc, #156]	; (80057f4 <TIM_OC2_SetConfig+0x104>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d10d      	bne.n	8005778 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <TIM_OC2_SetConfig+0x100>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00f      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1c      	ldr	r2, [pc, #112]	; (80057f4 <TIM_OC2_SetConfig+0x104>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00b      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1b      	ldr	r2, [pc, #108]	; (80057f8 <TIM_OC2_SetConfig+0x108>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d007      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a1a      	ldr	r2, [pc, #104]	; (80057fc <TIM_OC2_SetConfig+0x10c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a19      	ldr	r2, [pc, #100]	; (8005800 <TIM_OC2_SetConfig+0x110>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d113      	bne.n	80057c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40013400 	.word	0x40013400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800

08005804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a27      	ldr	r2, [pc, #156]	; (8005900 <TIM_OC3_SetConfig+0xfc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_OC3_SetConfig+0x6a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a26      	ldr	r2, [pc, #152]	; (8005904 <TIM_OC3_SetConfig+0x100>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d10d      	bne.n	800588a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1c      	ldr	r2, [pc, #112]	; (8005900 <TIM_OC3_SetConfig+0xfc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <TIM_OC3_SetConfig+0x100>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1a      	ldr	r2, [pc, #104]	; (8005908 <TIM_OC3_SetConfig+0x104>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a19      	ldr	r2, [pc, #100]	; (800590c <TIM_OC3_SetConfig+0x108>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <TIM_OC3_SetConfig+0x10c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d113      	bne.n	80058da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	621a      	str	r2, [r3, #32]
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40013400 	.word	0x40013400
 8005908:	40014000 	.word	0x40014000
 800590c:	40014400 	.word	0x40014400
 8005910:	40014800 	.word	0x40014800

08005914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	031b      	lsls	r3, r3, #12
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <TIM_OC4_SetConfig+0xc0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <TIM_OC4_SetConfig+0xc4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a16      	ldr	r2, [pc, #88]	; (80059dc <TIM_OC4_SetConfig+0xc8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <TIM_OC4_SetConfig+0xcc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a14      	ldr	r2, [pc, #80]	; (80059e4 <TIM_OC4_SetConfig+0xd0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d109      	bne.n	80059ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800599e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	019b      	lsls	r3, r3, #6
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40013400 	.word	0x40013400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800

080059e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <TIM_OC5_SetConfig+0xb4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00f      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a16      	ldr	r2, [pc, #88]	; (8005aa0 <TIM_OC5_SetConfig+0xb8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00b      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <TIM_OC5_SetConfig+0xbc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <TIM_OC5_SetConfig+0xc0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a13      	ldr	r2, [pc, #76]	; (8005aac <TIM_OC5_SetConfig+0xc4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d109      	bne.n	8005a76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	621a      	str	r2, [r3, #32]
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40013400 	.word	0x40013400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800

08005ab0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	051b      	lsls	r3, r3, #20
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <TIM_OC6_SetConfig+0xb8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00f      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a17      	ldr	r2, [pc, #92]	; (8005b6c <TIM_OC6_SetConfig+0xbc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00b      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <TIM_OC6_SetConfig+0xc0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <TIM_OC6_SetConfig+0xc4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <TIM_OC6_SetConfig+0xc8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d109      	bne.n	8005b40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40013400 	.word	0x40013400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f023 0201 	bic.w	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 030a 	bic.w	r3, r3, #10
 8005bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b087      	sub	sp, #28
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0210 	bic.w	r2, r3, #16
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	031b      	lsls	r3, r3, #12
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f043 0307 	orr.w	r3, r3, #7
 8005c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	609a      	str	r2, [r3, #8]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	021a      	lsls	r2, r3, #8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	609a      	str	r2, [r3, #8]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a1a      	ldr	r2, [r3, #32]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 031f 	and.w	r3, r3, #31
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e068      	b.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a2e      	ldr	r2, [pc, #184]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2d      	ldr	r2, [pc, #180]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d108      	bne.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1e      	ldr	r2, [pc, #120]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01d      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d86:	d018      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d10c      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40014000 	.word	0x40014000

08005e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <__libc_init_array>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4e0d      	ldr	r6, [pc, #52]	; (8005e80 <__libc_init_array+0x38>)
 8005e4c:	4c0d      	ldr	r4, [pc, #52]	; (8005e84 <__libc_init_array+0x3c>)
 8005e4e:	1ba4      	subs	r4, r4, r6
 8005e50:	10a4      	asrs	r4, r4, #2
 8005e52:	2500      	movs	r5, #0
 8005e54:	42a5      	cmp	r5, r4
 8005e56:	d109      	bne.n	8005e6c <__libc_init_array+0x24>
 8005e58:	4e0b      	ldr	r6, [pc, #44]	; (8005e88 <__libc_init_array+0x40>)
 8005e5a:	4c0c      	ldr	r4, [pc, #48]	; (8005e8c <__libc_init_array+0x44>)
 8005e5c:	f000 f820 	bl	8005ea0 <_init>
 8005e60:	1ba4      	subs	r4, r4, r6
 8005e62:	10a4      	asrs	r4, r4, #2
 8005e64:	2500      	movs	r5, #0
 8005e66:	42a5      	cmp	r5, r4
 8005e68:	d105      	bne.n	8005e76 <__libc_init_array+0x2e>
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e70:	4798      	blx	r3
 8005e72:	3501      	adds	r5, #1
 8005e74:	e7ee      	b.n	8005e54 <__libc_init_array+0xc>
 8005e76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e7a:	4798      	blx	r3
 8005e7c:	3501      	adds	r5, #1
 8005e7e:	e7f2      	b.n	8005e66 <__libc_init_array+0x1e>
 8005e80:	08005ef8 	.word	0x08005ef8
 8005e84:	08005ef8 	.word	0x08005ef8
 8005e88:	08005ef8 	.word	0x08005ef8
 8005e8c:	08005efc 	.word	0x08005efc

08005e90 <memset>:
 8005e90:	4402      	add	r2, r0
 8005e92:	4603      	mov	r3, r0
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d100      	bne.n	8005e9a <memset+0xa>
 8005e98:	4770      	bx	lr
 8005e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9e:	e7f9      	b.n	8005e94 <memset+0x4>

08005ea0 <_init>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	bf00      	nop
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr

08005eac <_fini>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr
