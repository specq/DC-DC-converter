
nn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab8  08007ab8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ab8  08007ab8  00017ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac0  08007ac0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac4  08007ac4  00017ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000010  08007ad4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08007ad4  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ce0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002359  00000000  00000000  00033d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  00036078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  000373c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029219  00000000  00000000  000385f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e017  00000000  00000000  00061809  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010792a  00000000  00000000  0006f820  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017714a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005424  00000000  00000000  001771c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a58 	.word	0x08007a58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08007a58 	.word	0x08007a58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <swap>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void swap(int* a, int* b)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
	int t = *a;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	60fb      	str	r3, [r7, #12]
    *a = *b;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	601a      	str	r2, [r3, #0]
    *b = t;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	601a      	str	r2, [r3, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <partition>:

int partition (int arr[], int low, int high)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b088      	sub	sp, #32
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
	int pivot = arr[high];    // pivot
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	617b      	str	r3, [r7, #20]
	int i = (low - 1);  // Index of smaller element
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	61fb      	str	r3, [r7, #28]

    for (int j = low; j <= high- 1; j++)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	61bb      	str	r3, [r7, #24]
 8000d00:	e018      	b.n	8000d34 <partition+0x56>
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4413      	add	r3, r2
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	dd0d      	ble.n	8000d2e <partition+0x50>
        {
            i++;    // increment index of smaller element
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3301      	adds	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
            swap(&arr[i], &arr[j]);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	18d0      	adds	r0, r2, r3
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f7ff ffc3 	bl	8000cb4 <swap>
    for (int j = low; j <= high- 1; j++)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	3301      	adds	r3, #1
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dde1      	ble.n	8000d02 <partition+0x24>
        }
    }
    swap(&arr[i + 1], &arr[high]);
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3301      	adds	r3, #1
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	18d0      	adds	r0, r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff ffaf 	bl	8000cb4 <swap>
    return (i + 1);
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3301      	adds	r3, #1
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <quickSort>:

void quickSort(int arr[], int low, int high)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
    if (low < high)
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	da13      	bge.n	8000d9e <quickSort+0x3c>
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
    	int pi = partition(arr, low, high);
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff ffaf 	bl	8000cde <partition>
 8000d80:	6178      	str	r0, [r7, #20]

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	461a      	mov	r2, r3
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f7ff ffe9 	bl	8000d62 <quickSort>
        quickSort(arr, pi + 1, high);
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	4619      	mov	r1, r3
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff ffe2 	bl	8000d62 <quickSort>
    }
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <get_median>:

int get_median(int *values){
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	int n = sizeof(values)/sizeof(values[0]);
 8000dae:	2301      	movs	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
    quickSort(values, 0, n-1);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	461a      	mov	r2, r3
 8000db8:	2100      	movs	r1, #0
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffd1 	bl	8000d62 <quickSort>
    return values[SIZE/2];
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	0000      	movs	r0, r0
	...

08000dd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	b0bd      	sub	sp, #244	; 0xf4
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 86ed 	bne.w	8001bc0 <HAL_TIM_PeriodElapsedCallback+0xdf0>
    {
		if(iter < 10000){
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d807      	bhi.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x32>
			iter++;
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dfc:	801a      	strh	r2, [r3, #0]
			htim2.Instance->CCR2 = input;
			//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, input*4095/13197);
		}
	}
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_RESET);
}
 8000dfe:	f000 bedf 	b.w	8001bc0 <HAL_TIM_PeriodElapsedCallback+0xdf0>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f003 fcf6 	bl	80047fc <HAL_GPIO_WritePin>
			for(uint8_t i = 0; i<SIZE; i++){
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8000e16:	e022      	b.n	8000e5e <HAL_TIM_PeriodElapsedCallback+0x8e>
 8000e18:	200000d8 	.word	0x200000d8
 8000e1c:	20000030 	.word	0x20000030
				value0[i] = (int)adc_buf0[i];
 8000e20:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e24:	4ac9      	ldr	r2, [pc, #804]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000e26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e2a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000e34:	440b      	add	r3, r1
 8000e36:	f843 2cc8 	str.w	r2, [r3, #-200]
				value1[i] = (int)adc_buf1[i];
 8000e3a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e3e:	4ac4      	ldr	r2, [pc, #784]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000e40:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e44:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000e4e:	440b      	add	r3, r1
 8000e50:	f843 2ce4 	str.w	r2, [r3, #-228]
			for(uint8_t i = 0; i<SIZE; i++){
 8000e54:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e58:	3301      	adds	r3, #1
 8000e5a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8000e5e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d9dc      	bls.n	8000e20 <HAL_TIM_PeriodElapsedCallback+0x50>
			y[0] = get_median(value0); y[0] *= 1075; y[0] /= 10000;
 8000e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff9b 	bl	8000da6 <get_median>
 8000e70:	4602      	mov	r2, r0
 8000e72:	4bb8      	ldr	r3, [pc, #736]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	4bb7      	ldr	r3, [pc, #732]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f240 4233 	movw	r2, #1075	; 0x433
 8000e7e:	fb02 f303 	mul.w	r3, r2, r3
 8000e82:	4ab4      	ldr	r2, [pc, #720]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	4bb3      	ldr	r3, [pc, #716]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4ab3      	ldr	r2, [pc, #716]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e90:	1312      	asrs	r2, r2, #12
 8000e92:	17db      	asrs	r3, r3, #31
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	4aaf      	ldr	r2, [pc, #700]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000e98:	6013      	str	r3, [r2, #0]
			y[1] = get_median(value1);   y[1] *= 29500; y[1] /= 10000;
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff81 	bl	8000da6 <get_median>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4bab      	ldr	r3, [pc, #684]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	4baa      	ldr	r3, [pc, #680]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f247 323c 	movw	r2, #29500	; 0x733c
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	4aa7      	ldr	r2, [pc, #668]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000eb8:	6053      	str	r3, [r2, #4]
 8000eba:	4ba6      	ldr	r3, [pc, #664]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4aa6      	ldr	r2, [pc, #664]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec4:	1312      	asrs	r2, r2, #12
 8000ec6:	17db      	asrs	r3, r3, #31
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	4aa2      	ldr	r2, [pc, #648]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000ecc:	6053      	str	r3, [r2, #4]
			int x0_prev = x[0];
 8000ece:	4ba3      	ldr	r3, [pc, #652]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			int x1_prev = x[1];
 8000ed6:	4ba1      	ldr	r3, [pc, #644]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			x_est[0] = 97136*x0_prev - 978*x1_prev + 14878*u;    x_est[0] /= 100000;
 8000ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ee2:	4a9f      	ldr	r2, [pc, #636]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000ee4:	fb02 f203 	mul.w	r2, r2, r3
 8000ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000eec:	499d      	ldr	r1, [pc, #628]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000eee:	fb01 f303 	mul.w	r3, r1, r3
 8000ef2:	441a      	add	r2, r3
 8000ef4:	4b9c      	ldr	r3, [pc, #624]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f643 211e 	movw	r1, #14878	; 0x3a1e
 8000efc:	fb01 f303 	mul.w	r3, r1, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	4a9a      	ldr	r2, [pc, #616]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b99      	ldr	r3, [pc, #612]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a99      	ldr	r2, [pc, #612]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f10:	1352      	asrs	r2, r2, #13
 8000f12:	17db      	asrs	r3, r3, #31
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4a95      	ldr	r2, [pc, #596]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000f18:	6013      	str	r3, [r2, #0]
			x_est[1] = 173187*x0_prev + 97046*x1_prev + 18083*u; x_est[1] /= 100000;
 8000f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f1e:	4a95      	ldr	r2, [pc, #596]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8000f20:	fb02 f203 	mul.w	r2, r2, r3
 8000f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f28:	4993      	ldr	r1, [pc, #588]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000f2a:	fb01 f303 	mul.w	r3, r1, r3
 8000f2e:	441a      	add	r2, r3
 8000f30:	4b8d      	ldr	r3, [pc, #564]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f244 61a3 	movw	r1, #18083	; 0x46a3
 8000f38:	fb01 f303 	mul.w	r3, r1, r3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a8b      	ldr	r2, [pc, #556]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000f40:	6053      	str	r3, [r2, #4]
 8000f42:	4b8a      	ldr	r3, [pc, #552]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	4a8a      	ldr	r2, [pc, #552]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000f48:	fb82 1203 	smull	r1, r2, r2, r3
 8000f4c:	1352      	asrs	r2, r2, #13
 8000f4e:	17db      	asrs	r3, r3, #31
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	4a86      	ldr	r2, [pc, #536]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000f54:	6053      	str	r3, [r2, #4]
			int alpha = 250;
 8000f56:	23fa      	movs	r3, #250	; 0xfa
 8000f58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			int alpha_bar = 1000-alpha;
 8000f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f60:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000f64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			x[0] = alpha*y[0] + alpha_bar*x_est[0]; x[0] /= 1000;
 8000f68:	4b7a      	ldr	r3, [pc, #488]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f70:	fb02 f203 	mul.w	r2, r2, r3
 8000f74:	4b7d      	ldr	r3, [pc, #500]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000f7c:	fb01 f303 	mul.w	r3, r1, r3
 8000f80:	4413      	add	r3, r2
 8000f82:	4a76      	ldr	r2, [pc, #472]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b75      	ldr	r3, [pc, #468]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a7c      	ldr	r2, [pc, #496]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f90:	1192      	asrs	r2, r2, #6
 8000f92:	17db      	asrs	r3, r3, #31
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	4a71      	ldr	r2, [pc, #452]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000f98:	6013      	str	r3, [r2, #0]
			x[1] = alpha*y[1] + alpha_bar*x_est[1]; x[1] /= 1000;
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000fa2:	fb02 f203 	mul.w	r2, r2, r3
 8000fa6:	4b71      	ldr	r3, [pc, #452]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000fae:	fb01 f303 	mul.w	r3, r1, r3
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a69      	ldr	r2, [pc, #420]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000fb6:	6053      	str	r3, [r2, #4]
 8000fb8:	4b68      	ldr	r3, [pc, #416]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4a6f      	ldr	r2, [pc, #444]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000fbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc2:	1192      	asrs	r2, r2, #6
 8000fc4:	17db      	asrs	r3, r3, #31
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	4a64      	ldr	r2, [pc, #400]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000fca:	6053      	str	r3, [r2, #4]
			int dx0 = x[0] - xs0;
 8000fcc:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2232      	movs	r2, #50	; 0x32
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			int dx1 = x[1] - xs1;
 8000fd8:	4b60      	ldr	r3, [pc, #384]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			dx0 -= X0_MIN;  dx0 *= 1000; dx0 /= DELTA_X0;
 8000fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000fea:	3332      	adds	r3, #50	; 0x32
 8000fec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ff8:	fb02 f303 	mul.w	r3, r2, r3
 8000ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001004:	4a5e      	ldr	r2, [pc, #376]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001006:	fb82 1203 	smull	r1, r2, r2, r3
 800100a:	1192      	asrs	r2, r2, #6
 800100c:	17db      	asrs	r3, r3, #31
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			dx1 -= X1_MIN;  dx1 *= 1000; dx1 /= DELTA_X1;
 8001014:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001018:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800101c:	3308      	adds	r3, #8
 800101e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001022:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001026:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001032:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001036:	4a53      	ldr	r2, [pc, #332]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001038:	fb82 1203 	smull	r1, r2, r2, r3
 800103c:	1292      	asrs	r2, r2, #10
 800103e:	17db      	asrs	r3, r3, #31
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			int H11 = -84*dx0+996*dx1-357663;       H11 = H11<=0;
 8001046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800104a:	f06f 0253 	mvn.w	r2, #83	; 0x53
 800104e:	fb02 f203 	mul.w	r2, r2, r3
 8001052:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001056:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 800105a:	fb01 f303 	mul.w	r3, r1, r3
 800105e:	4413      	add	r3, r2
 8001060:	f5a3 23ae 	sub.w	r3, r3, #356352	; 0x57000
 8001064:	f2a3 531f 	subw	r3, r3, #1311	; 0x51f
 8001068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800106c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001070:	2b00      	cmp	r3, #0
 8001072:	bfd4      	ite	le
 8001074:	2301      	movle	r3, #1
 8001076:	2300      	movgt	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			int H12 = 1000*dx0-1000000;             H12 = H12<=0;
 800107e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800108e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001092:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800109a:	2b00      	cmp	r3, #0
 800109c:	bfd4      	ite	le
 800109e:	2301      	movle	r3, #1
 80010a0:	2300      	movgt	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			int H13 = -1000*dx1;                    H13 = H13<=0;
 80010a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010ac:	4a36      	ldr	r2, [pc, #216]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80010b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bfd4      	ite	le
 80010be:	2301      	movle	r3, #1
 80010c0:	2300      	movgt	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			int H14 = -1000*dx0;                    H14 = H14<=0;
 80010c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010cc:	4a2e      	ldr	r2, [pc, #184]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80010d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bfd4      	ite	le
 80010de:	2301      	movle	r3, #1
 80010e0:	2300      	movgt	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			int H15 = 948*dx0-317*dx1-939649;       H15 = H15<=0;
 80010e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010ec:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 80010f0:	fb02 f203 	mul.w	r2, r2, r3
 80010f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010f8:	f46f 719e 	mvn.w	r1, #316	; 0x13c
 80010fc:	fb01 f303 	mul.w	r3, r1, r3
 8001100:	4413      	add	r3, r2
 8001102:	f5a3 2365 	sub.w	r3, r3, #937984	; 0xe5000
 8001106:	f2a3 6381 	subw	r3, r3, #1665	; 0x681
 800110a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800110e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001112:	2b00      	cmp	r3, #0
 8001114:	bfd4      	ite	le
 8001116:	2301      	movle	r3, #1
 8001118:	2300      	movgt	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			if(H11 && H12 && H13 && H14 && H15){
 8001120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8091 	beq.w	800124c <HAL_TIM_PeriodElapsedCallback+0x47c>
 800112a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 808c 	beq.w	800124c <HAL_TIM_PeriodElapsedCallback+0x47c>
 8001134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 8087 	beq.w	800124c <HAL_TIM_PeriodElapsedCallback+0x47c>
 800113e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8082 	beq.w	800124c <HAL_TIM_PeriodElapsedCallback+0x47c>
 8001148:	e020      	b.n	800118c <HAL_TIM_PeriodElapsedCallback+0x3bc>
 800114a:	bf00      	nop
 800114c:	200002dc 	.word	0x200002dc
 8001150:	20000118 	.word	0x20000118
 8001154:	2000003c 	.word	0x2000003c
 8001158:	68db8bad 	.word	0x68db8bad
 800115c:	20000034 	.word	0x20000034
 8001160:	00017b70 	.word	0x00017b70
 8001164:	fffffc2e 	.word	0xfffffc2e
 8001168:	2000002c 	.word	0x2000002c
 800116c:	20000044 	.word	0x20000044
 8001170:	14f8b589 	.word	0x14f8b589
 8001174:	0002a483 	.word	0x0002a483
 8001178:	00017b16 	.word	0x00017b16
 800117c:	10624dd3 	.word	0x10624dd3
 8001180:	51eb851f 	.word	0x51eb851f
 8001184:	2572fb07 	.word	0x2572fb07
 8001188:	fffffc18 	.word	0xfffffc18
 800118c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001190:	2b00      	cmp	r3, #0
 8001192:	d05b      	beq.n	800124c <HAL_TIM_PeriodElapsedCallback+0x47c>
				n1 = -1*dx0-276*dx1+1048587;
 8001194:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001198:	4acf      	ldr	r2, [pc, #828]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x708>)
 800119a:	fb02 f203 	mul.w	r2, r2, r3
 800119e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80011a8:	330b      	adds	r3, #11
 80011aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				n2 = -1238*dx0+414*dx1+1226741;
 80011ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80011b2:	4aca      	ldr	r2, [pc, #808]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x70c>)
 80011b4:	fb02 f203 	mul.w	r2, r2, r3
 80011b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80011bc:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80011c0:	fb01 f303 	mul.w	r3, r1, r3
 80011c4:	441a      	add	r2, r3
 80011c6:	4bc6      	ldr	r3, [pc, #792]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 80011c8:	4413      	add	r3, r2
 80011ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				int u_temp = -0.0959*n1+1.0614*n2+141619;
 80011ce:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80011d2:	f7ff f94b 	bl	800046c <__aeabi_i2d>
 80011d6:	a3b8      	add	r3, pc, #736	; (adr r3, 80014b8 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff f9b0 	bl	8000540 <__aeabi_dmul>
 80011e0:	4603      	mov	r3, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	4625      	mov	r5, r4
 80011e6:	461c      	mov	r4, r3
 80011e8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80011ec:	f7ff f93e 	bl	800046c <__aeabi_i2d>
 80011f0:	a3b3      	add	r3, pc, #716	; (adr r3, 80014c0 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff f9a3 	bl	8000540 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4620      	mov	r0, r4
 8001200:	4629      	mov	r1, r5
 8001202:	f7fe ffe7 	bl	80001d4 <__adddf3>
 8001206:	4603      	mov	r3, r0
 8001208:	460c      	mov	r4, r1
 800120a:	4618      	mov	r0, r3
 800120c:	4621      	mov	r1, r4
 800120e:	a3ae      	add	r3, pc, #696	; (adr r3, 80014c8 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7fe ffde 	bl	80001d4 <__adddf3>
 8001218:	4603      	mov	r3, r0
 800121a:	460c      	mov	r4, r1
 800121c:	4618      	mov	r0, r3
 800121e:	4621      	mov	r1, r4
 8001220:	f7ff fba0 	bl	8000964 <__aeabi_d2iz>
 8001224:	4603      	mov	r3, r0
 8001226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				u = u_temp+U_MIN;
 800122a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800122e:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 8001232:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8001236:	4aab      	ldr	r2, [pc, #684]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001238:	6013      	str	r3, [r2, #0]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0.5/3.3*4095);
 800123a:	f44f 731b 	mov.w	r3, #620	; 0x26c
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	48a9      	ldr	r0, [pc, #676]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8001244:	f002 fdfa 	bl	8003e3c <HAL_DAC_SetValue>
			if(H11 && H12 && H13 && H14 && H15){
 8001248:	f000 bc86 	b.w	8001b58 <HAL_TIM_PeriodElapsedCallback+0xd88>
				int H21 = 1000*dx0-1000000;          H21 = H21<=0;
 800124c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800125c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfd4      	ite	le
 800126c:	2301      	movle	r3, #1
 800126e:	2300      	movgt	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				int H22 = -1000*dx0;                 H22 = H22<=0;
 8001276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800127a:	4a9c      	ldr	r2, [pc, #624]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x71c>)
 800127c:	fb02 f303 	mul.w	r3, r2, r3
 8001280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001288:	2b00      	cmp	r3, #0
 800128a:	bfd4      	ite	le
 800128c:	2301      	movle	r3, #1
 800128e:	2300      	movgt	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				int H23 = -73*dx0+997*dx1-784222;    H23 = H23<=0;
 8001296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800129a:	f06f 0248 	mvn.w	r2, #72	; 0x48
 800129e:	fb02 f203 	mul.w	r2, r2, r3
 80012a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80012a6:	f240 31e5 	movw	r1, #997	; 0x3e5
 80012aa:	fb01 f303 	mul.w	r3, r1, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	f5a3 233f 	sub.w	r3, r3, #782336	; 0xbf000
 80012b4:	f2a3 735e 	subw	r3, r3, #1886	; 0x75e
 80012b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80012bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bfd4      	ite	le
 80012c4:	2301      	movle	r3, #1
 80012c6:	2300      	movgt	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				int H24 = 674*dx0+738*dx1-1106412;   H24 = H24<=0;
 80012ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012d2:	f240 22a2 	movw	r2, #674	; 0x2a2
 80012d6:	fb02 f203 	mul.w	r2, r2, r3
 80012da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80012de:	f240 21e2 	movw	r1, #738	; 0x2e2
 80012e2:	fb01 f303 	mul.w	r3, r1, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	f5a3 1387 	sub.w	r3, r3, #1105920	; 0x10e000
 80012ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80012f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80012f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bfd4      	ite	le
 80012fc:	2301      	movle	r3, #1
 80012fe:	2300      	movgt	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				int H25 = 84*dx0-996*dx1+357663;     H25 = H25<=0;
 8001306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800130a:	2254      	movs	r2, #84	; 0x54
 800130c:	fb02 f203 	mul.w	r2, r2, r3
 8001310:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001314:	4976      	ldr	r1, [pc, #472]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001316:	fb01 f303 	mul.w	r3, r1, r3
 800131a:	4413      	add	r3, r2
 800131c:	f503 23ae 	add.w	r3, r3, #356352	; 0x57000
 8001320:	f203 531f 	addw	r3, r3, #1311	; 0x51f
 8001324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800132c:	2b00      	cmp	r3, #0
 800132e:	bfd4      	ite	le
 8001330:	2301      	movle	r3, #1
 8001332:	2300      	movgt	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				if(H21 && H22 && H23 && H24 && H25){
 800133a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8112 	beq.w	8001568 <HAL_TIM_PeriodElapsedCallback+0x798>
 8001344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 810d 	beq.w	8001568 <HAL_TIM_PeriodElapsedCallback+0x798>
 800134e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8108 	beq.w	8001568 <HAL_TIM_PeriodElapsedCallback+0x798>
 8001358:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8103 	beq.w	8001568 <HAL_TIM_PeriodElapsedCallback+0x798>
 8001362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80fe 	beq.w	8001568 <HAL_TIM_PeriodElapsedCallback+0x798>
					n1 = 163*dx0-2222*dx1+1747205;
 800136c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001370:	22a3      	movs	r2, #163	; 0xa3
 8001372:	fb02 f203 	mul.w	r2, r2, r3
 8001376:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800137a:	495e      	ldr	r1, [pc, #376]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 800137c:	fb01 f303 	mul.w	r3, r1, r3
 8001380:	4413      	add	r3, r2
 8001382:	f503 13d5 	add.w	r3, r3, #1744896	; 0x1aa000
 8001386:	f603 1305 	addw	r3, r3, #2309	; 0x905
 800138a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					n2 = -1102*dx0-1207*dx1+1808427;
 800138e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001392:	4a59      	ldr	r2, [pc, #356]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001394:	fb02 f203 	mul.w	r2, r2, r3
 8001398:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800139c:	4957      	ldr	r1, [pc, #348]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x72c>)
 800139e:	fb01 f303 	mul.w	r3, r1, r3
 80013a2:	441a      	add	r2, r3
 80013a4:	4b56      	ldr	r3, [pc, #344]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80013a6:	4413      	add	r3, r2
 80013a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					n3 = -220*dx0+2620*dx1-940435;
 80013ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80013b0:	f06f 02db 	mvn.w	r2, #219	; 0xdb
 80013b4:	fb02 f203 	mul.w	r2, r2, r3
 80013b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80013bc:	f640 213c 	movw	r1, #2620	; 0xa3c
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	f5a3 2365 	sub.w	r3, r3, #937984	; 0xe5000
 80013ca:	f6a3 1393 	subw	r3, r3, #2451	; 0x993
 80013ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
					int u_temp = -0.0959*n1+1.0614*n2-0.5676*n3+141619;
 80013d2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80013d6:	f7ff f849 	bl	800046c <__aeabi_i2d>
 80013da:	a337      	add	r3, pc, #220	; (adr r3, 80014b8 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f8ae 	bl	8000540 <__aeabi_dmul>
 80013e4:	4603      	mov	r3, r0
 80013e6:	460c      	mov	r4, r1
 80013e8:	4625      	mov	r5, r4
 80013ea:	461c      	mov	r4, r3
 80013ec:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80013f0:	f7ff f83c 	bl	800046c <__aeabi_i2d>
 80013f4:	a332      	add	r3, pc, #200	; (adr r3, 80014c0 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f8a1 	bl	8000540 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4620      	mov	r0, r4
 8001404:	4629      	mov	r1, r5
 8001406:	f7fe fee5 	bl	80001d4 <__adddf3>
 800140a:	4603      	mov	r3, r0
 800140c:	460c      	mov	r4, r1
 800140e:	4625      	mov	r5, r4
 8001410:	461c      	mov	r4, r3
 8001412:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001416:	f7ff f829 	bl	800046c <__aeabi_i2d>
 800141a:	a32d      	add	r3, pc, #180	; (adr r3, 80014d0 <HAL_TIM_PeriodElapsedCallback+0x700>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f88e 	bl	8000540 <__aeabi_dmul>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7fe fed0 	bl	80001d0 <__aeabi_dsub>
 8001430:	4603      	mov	r3, r0
 8001432:	460c      	mov	r4, r1
 8001434:	4618      	mov	r0, r3
 8001436:	4621      	mov	r1, r4
 8001438:	a323      	add	r3, pc, #140	; (adr r3, 80014c8 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7fe fec9 	bl	80001d4 <__adddf3>
 8001442:	4603      	mov	r3, r0
 8001444:	460c      	mov	r4, r1
 8001446:	4618      	mov	r0, r3
 8001448:	4621      	mov	r1, r4
 800144a:	f7ff fa8b 	bl	8000964 <__aeabi_d2iz>
 800144e:	4603      	mov	r3, r0
 8001450:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					u = u_temp+U_MIN;
 8001454:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001458:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 800145c:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8001460:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8001462:	6013      	str	r3, [r2, #0]
					if(!settled){
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f083 0301 	eor.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d04e      	beq.n	8001510 <HAL_TIM_PeriodElapsedCallback+0x740>
						int diff = x[0]-x0_prev;
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						if(diff > -100 && diff < 100){
 8001480:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001484:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001488:	db11      	blt.n	80014ae <HAL_TIM_PeriodElapsedCallback+0x6de>
 800148a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800148e:	2b63      	cmp	r3, #99	; 0x63
 8001490:	dc0d      	bgt.n	80014ae <HAL_TIM_PeriodElapsedCallback+0x6de>
							settling_iter++;
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x73c>)
 800149c:	701a      	strb	r2, [r3, #0]
							if(settling_iter == 100){
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d158      	bne.n	8001558 <HAL_TIM_PeriodElapsedCallback+0x788>
								settled = true;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x734>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
							if(settling_iter == 100){
 80014ac:	e054      	b.n	8001558 <HAL_TIM_PeriodElapsedCallback+0x788>
							settling_iter = 0;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	e050      	b.n	8001558 <HAL_TIM_PeriodElapsedCallback+0x788>
 80014b6:	bf00      	nop
 80014b8:	03afb7e9 	.word	0x03afb7e9
 80014bc:	bfb88ce7 	.word	0xbfb88ce7
 80014c0:	90ff9724 	.word	0x90ff9724
 80014c4:	3ff0fb7e 	.word	0x3ff0fb7e
 80014c8:	00000000 	.word	0x00000000
 80014cc:	41014998 	.word	0x41014998
 80014d0:	79a6b50b 	.word	0x79a6b50b
 80014d4:	3fe229c7 	.word	0x3fe229c7
 80014d8:	fffffeec 	.word	0xfffffeec
 80014dc:	fffffb2a 	.word	0xfffffb2a
 80014e0:	0012b7f5 	.word	0x0012b7f5
 80014e4:	2000002c 	.word	0x2000002c
 80014e8:	20000060 	.word	0x20000060
 80014ec:	fffffc18 	.word	0xfffffc18
 80014f0:	fffffc1c 	.word	0xfffffc1c
 80014f4:	fffff752 	.word	0xfffff752
 80014f8:	fffffbb2 	.word	0xfffffbb2
 80014fc:	fffffb49 	.word	0xfffffb49
 8001500:	001b982b 	.word	0x001b982b
 8001504:	20000058 	.word	0x20000058
 8001508:	20000034 	.word	0x20000034
 800150c:	20000059 	.word	0x20000059
							int error = 5000-y[1];
 8001510:	4bc3      	ldr	r3, [pc, #780]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5c3 539c 	rsb	r3, r3, #4992	; 0x1380
 8001518:	3308      	adds	r3, #8
 800151a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
							integral += error;
 800151e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001522:	4619      	mov	r1, r3
 8001524:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001528:	4bbe      	ldr	r3, [pc, #760]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800152a:	e9d3 5600 	ldrd	r5, r6, [r3]
 800152e:	186b      	adds	r3, r5, r1
 8001530:	eb46 0402 	adc.w	r4, r6, r2
 8001534:	4abb      	ldr	r2, [pc, #748]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8001536:	e9c2 3400 	strd	r3, r4, [r2]
							u += 40*integral;
 800153a:	4bba      	ldr	r3, [pc, #744]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800153c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001540:	461a      	mov	r2, r3
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	461a      	mov	r2, r3
 800154c:	4bb6      	ldr	r3, [pc, #728]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4413      	add	r3, r2
 8001552:	461a      	mov	r2, r3
 8001554:	4bb4      	ldr	r3, [pc, #720]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8001556:	601a      	str	r2, [r3, #0]
					HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1/3.3*4095);
 8001558:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	48b2      	ldr	r0, [pc, #712]	; (800182c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8001562:	f002 fc6b 	bl	8003e3c <HAL_DAC_SetValue>
				if(H21 && H22 && H23 && H24 && H25){
 8001566:	e2f7      	b.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0xd88>
					int H31 = -948*dx0+317*dx1+939649;    H31 = H31<=0;
 8001568:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800156c:	4ab0      	ldr	r2, [pc, #704]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 800156e:	fb02 f203 	mul.w	r2, r2, r3
 8001572:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001576:	f240 113d 	movw	r1, #317	; 0x13d
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	f503 2365 	add.w	r3, r3, #937984	; 0xe5000
 8001584:	f203 6381 	addw	r3, r3, #1665	; 0x681
 8001588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800158c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001590:	2b00      	cmp	r3, #0
 8001592:	bfd4      	ite	le
 8001594:	2301      	movle	r3, #1
 8001596:	2300      	movgt	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					int H32 = 1000*dx0-1000000;           H32 = H32<=0;
 800159e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80015a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 80015ae:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80015b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80015b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bfd4      	ite	le
 80015be:	2301      	movle	r3, #1
 80015c0:	2300      	movgt	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					int H33 = -1000*dx1;                  H33 = H33<=0;
 80015c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015cc:	4a99      	ldr	r2, [pc, #612]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bfd4      	ite	le
 80015de:	2301      	movle	r3, #1
 80015e0:	2300      	movgt	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if(H31 && H32 && H33){
 80015e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d043      	beq.n	8001678 <HAL_TIM_PeriodElapsedCallback+0x8a8>
 80015f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d03f      	beq.n	8001678 <HAL_TIM_PeriodElapsedCallback+0x8a8>
 80015f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d03b      	beq.n	8001678 <HAL_TIM_PeriodElapsedCallback+0x8a8>
						n1 = 614*dx0-481*dx1+439588;
 8001600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001604:	f240 2266 	movw	r2, #614	; 0x266
 8001608:	fb02 f203 	mul.w	r2, r2, r3
 800160c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001610:	f46f 71f0 	mvn.w	r1, #480	; 0x1e0
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	4413      	add	r3, r2
 800161a:	f503 23d6 	add.w	r3, r3, #438272	; 0x6b000
 800161e:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8001622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						int u_temp = -0.0959*n1+141619;
 8001626:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800162a:	f7fe ff1f 	bl	800046c <__aeabi_i2d>
 800162e:	a374      	add	r3, pc, #464	; (adr r3, 8001800 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe ff84 	bl	8000540 <__aeabi_dmul>
 8001638:	4603      	mov	r3, r0
 800163a:	460c      	mov	r4, r1
 800163c:	4618      	mov	r0, r3
 800163e:	4621      	mov	r1, r4
 8001640:	a371      	add	r3, pc, #452	; (adr r3, 8001808 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe fdc5 	bl	80001d4 <__adddf3>
 800164a:	4603      	mov	r3, r0
 800164c:	460c      	mov	r4, r1
 800164e:	4618      	mov	r0, r3
 8001650:	4621      	mov	r1, r4
 8001652:	f7ff f987 	bl	8000964 <__aeabi_d2iz>
 8001656:	4603      	mov	r3, r0
 8001658:	67fb      	str	r3, [r7, #124]	; 0x7c
						u = u_temp+U_MIN;
 800165a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800165c:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 8001660:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8001664:	4a70      	ldr	r2, [pc, #448]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8001666:	6013      	str	r3, [r2, #0]
						HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1.5/3.3*4095);
 8001668:	f240 7345 	movw	r3, #1861	; 0x745
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	486e      	ldr	r0, [pc, #440]	; (800182c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8001672:	f002 fbe3 	bl	8003e3c <HAL_DAC_SetValue>
					if(H31 && H32 && H33){
 8001676:	e26f      	b.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0xd88>
						int H41 = 73*dx0-997*dx1+784222;       H41 = H41<=0;
 8001678:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	441a      	add	r2, r3
 8001686:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800168a:	f46f 7179 	mvn.w	r1, #996	; 0x3e4
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	4413      	add	r3, r2
 8001694:	f503 233f 	add.w	r3, r3, #782336	; 0xbf000
 8001698:	f203 735e 	addw	r3, r3, #1886	; 0x75e
 800169c:	67bb      	str	r3, [r7, #120]	; 0x78
 800169e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bfd4      	ite	le
 80016a4:	2301      	movle	r3, #1
 80016a6:	2300      	movgt	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	67bb      	str	r3, [r7, #120]	; 0x78
						int H42 = 1000*dx1-1000000;            H42 = H42<=0;
 80016ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 80016bc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80016c0:	677b      	str	r3, [r7, #116]	; 0x74
 80016c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bfd4      	ite	le
 80016c8:	2301      	movle	r3, #1
 80016ca:	2300      	movgt	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	677b      	str	r3, [r7, #116]	; 0x74
						int H43 = -1000*dx0;                   H43 = H43<=0;
 80016d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016d4:	4a57      	ldr	r2, [pc, #348]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0xa64>)
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	673b      	str	r3, [r7, #112]	; 0x70
 80016dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bfd4      	ite	le
 80016e2:	2301      	movle	r3, #1
 80016e4:	2300      	movgt	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	673b      	str	r3, [r7, #112]	; 0x70
						int H44 = 907*dx0-422*dx1-300125;      H44 = H44<=0;
 80016ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016ee:	f240 328b 	movw	r2, #907	; 0x38b
 80016f2:	fb02 f203 	mul.w	r2, r2, r3
 80016f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016fa:	494f      	ldr	r1, [pc, #316]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	f5a3 2392 	sub.w	r3, r3, #299008	; 0x49000
 8001706:	f2a3 435d 	subw	r3, r3, #1117	; 0x45d
 800170a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800170c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800170e:	2b00      	cmp	r3, #0
 8001710:	bfd4      	ite	le
 8001712:	2301      	movle	r3, #1
 8001714:	2300      	movgt	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	66fb      	str	r3, [r7, #108]	; 0x6c
						if(H41 && H42 && H43 && H44){
 800171a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 808d 	beq.w	800183c <HAL_TIM_PeriodElapsedCallback+0xa6c>
 8001722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 8089 	beq.w	800183c <HAL_TIM_PeriodElapsedCallback+0xa6c>
 800172a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8085 	beq.w	800183c <HAL_TIM_PeriodElapsedCallback+0xa6c>
 8001732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8081 	beq.w	800183c <HAL_TIM_PeriodElapsedCallback+0xa6c>
							n2 = -1233*dx0+574*dx1+408098;
 800173a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800173e:	f46f 629a 	mvn.w	r2, #1232	; 0x4d0
 8001742:	fb02 f203 	mul.w	r2, r2, r3
 8001746:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800174a:	f240 213e 	movw	r1, #574	; 0x23e
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	4413      	add	r3, r2
 8001754:	f503 23c7 	add.w	r3, r3, #407552	; 0x63800
 8001758:	f203 2322 	addw	r3, r3, #546	; 0x222
 800175c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
							n3 = -124*dx0+1305*dx1+93435;
 8001760:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001764:	4613      	mov	r3, r2
 8001766:	0152      	lsls	r2, r2, #5
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4619      	mov	r1, r3
 800176e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001772:	f240 5219 	movw	r2, #1305	; 0x519
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	440b      	add	r3, r1
 800177c:	f503 33b6 	add.w	r3, r3, #93184	; 0x16c00
 8001780:	33fb      	adds	r3, #251	; 0xfb
 8001782:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
							int u_temp = 1.0614*n2-0.5676*n3+141619;
 8001786:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800178a:	f7fe fe6f 	bl	800046c <__aeabi_i2d>
 800178e:	a320      	add	r3, pc, #128	; (adr r3, 8001810 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe fed4 	bl	8000540 <__aeabi_dmul>
 8001798:	4603      	mov	r3, r0
 800179a:	460c      	mov	r4, r1
 800179c:	4625      	mov	r5, r4
 800179e:	461c      	mov	r4, r3
 80017a0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80017a4:	f7fe fe62 	bl	800046c <__aeabi_i2d>
 80017a8:	a31b      	add	r3, pc, #108	; (adr r3, 8001818 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe fec7 	bl	8000540 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd09 	bl	80001d0 <__aeabi_dsub>
 80017be:	4603      	mov	r3, r0
 80017c0:	460c      	mov	r4, r1
 80017c2:	4618      	mov	r0, r3
 80017c4:	4621      	mov	r1, r4
 80017c6:	a310      	add	r3, pc, #64	; (adr r3, 8001808 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe fd02 	bl	80001d4 <__adddf3>
 80017d0:	4603      	mov	r3, r0
 80017d2:	460c      	mov	r4, r1
 80017d4:	4618      	mov	r0, r3
 80017d6:	4621      	mov	r1, r4
 80017d8:	f7ff f8c4 	bl	8000964 <__aeabi_d2iz>
 80017dc:	4603      	mov	r3, r0
 80017de:	66bb      	str	r3, [r7, #104]	; 0x68
							u = u_temp+U_MIN;
 80017e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017e2:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 80017e6:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 80017ec:	6013      	str	r3, [r2, #0]
							HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2/3.3*4095);
 80017ee:	f640 13b1 	movw	r3, #2481	; 0x9b1
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 80017f8:	f002 fb20 	bl	8003e3c <HAL_DAC_SetValue>
						if(H41 && H42 && H43 && H44){
 80017fc:	e1ac      	b.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0xd88>
 80017fe:	bf00      	nop
 8001800:	03afb7e9 	.word	0x03afb7e9
 8001804:	bfb88ce7 	.word	0xbfb88ce7
 8001808:	00000000 	.word	0x00000000
 800180c:	41014998 	.word	0x41014998
 8001810:	90ff9724 	.word	0x90ff9724
 8001814:	3ff0fb7e 	.word	0x3ff0fb7e
 8001818:	79a6b50b 	.word	0x79a6b50b
 800181c:	3fe229c7 	.word	0x3fe229c7
 8001820:	2000003c 	.word	0x2000003c
 8001824:	20000050 	.word	0x20000050
 8001828:	2000002c 	.word	0x2000002c
 800182c:	20000060 	.word	0x20000060
 8001830:	fffffc4c 	.word	0xfffffc4c
 8001834:	fffffc18 	.word	0xfffffc18
 8001838:	fffffe5a 	.word	0xfffffe5a
							int H51 = -674*dx0-738*dx1+1106412;     H51 = H51<=0;
 800183c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001840:	4aab      	ldr	r2, [pc, #684]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 8001842:	fb02 f203 	mul.w	r2, r2, r3
 8001846:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800184a:	49aa      	ldr	r1, [pc, #680]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0xd24>)
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	f503 1387 	add.w	r3, r3, #1105920	; 0x10e000
 8001856:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800185a:	667b      	str	r3, [r7, #100]	; 0x64
 800185c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800185e:	2b00      	cmp	r3, #0
 8001860:	bfd4      	ite	le
 8001862:	2301      	movle	r3, #1
 8001864:	2300      	movgt	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	667b      	str	r3, [r7, #100]	; 0x64
							int H52 = 1000*dx0-1000000;             H52 = H52<=0;
 800186a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800186e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800187a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800187e:	663b      	str	r3, [r7, #96]	; 0x60
 8001880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001882:	2b00      	cmp	r3, #0
 8001884:	bfd4      	ite	le
 8001886:	2301      	movle	r3, #1
 8001888:	2300      	movgt	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	663b      	str	r3, [r7, #96]	; 0x60
							int H53 = 1000*dx1-1000000;             H53 = H53<=0;
 800188e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001892:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800189e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80018a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bfd4      	ite	le
 80018aa:	2301      	movle	r3, #1
 80018ac:	2300      	movgt	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	65fb      	str	r3, [r7, #92]	; 0x5c
							int H54 = -544*dx0+839*dx1-311384;      H54 = H54<=0;
 80018b2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018b6:	4613      	mov	r3, r2
 80018b8:	05db      	lsls	r3, r3, #23
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	015b      	lsls	r3, r3, #5
 80018c2:	4619      	mov	r1, r3
 80018c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018c8:	f240 3247 	movw	r2, #839	; 0x347
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	440b      	add	r3, r1
 80018d2:	f5a3 2398 	sub.w	r3, r3, #311296	; 0x4c000
 80018d6:	3b58      	subs	r3, #88	; 0x58
 80018d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80018da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bfd4      	ite	le
 80018e0:	2301      	movle	r3, #1
 80018e2:	2300      	movgt	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	65bb      	str	r3, [r7, #88]	; 0x58
							if(H51 && H52 && H53 && H54){
 80018e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d067      	beq.n	80019be <HAL_TIM_PeriodElapsedCallback+0xbee>
 80018ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d064      	beq.n	80019be <HAL_TIM_PeriodElapsedCallback+0xbee>
 80018f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d061      	beq.n	80019be <HAL_TIM_PeriodElapsedCallback+0xbee>
 80018fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d05e      	beq.n	80019be <HAL_TIM_PeriodElapsedCallback+0xbee>
								n1 = 910*dx0-1404*dx1+520906;
 8001900:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001904:	f240 328e 	movw	r2, #910	; 0x38e
 8001908:	fb02 f203 	mul.w	r2, r2, r3
 800190c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001910:	4979      	ldr	r1, [pc, #484]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	4413      	add	r3, r2
 8001918:	f503 23fe 	add.w	r3, r3, #520192	; 0x7f000
 800191c:	f203 23ca 	addw	r3, r3, #714	; 0x2ca
 8001920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
								n3 = -679*dx0+2117*dx1-186592;
 8001924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001928:	4a74      	ldr	r2, [pc, #464]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 800192a:	fb02 f203 	mul.w	r2, r2, r3
 800192e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001932:	f640 0145 	movw	r1, #2117	; 0x845
 8001936:	fb01 f303 	mul.w	r3, r1, r3
 800193a:	4413      	add	r3, r2
 800193c:	f5a3 3336 	sub.w	r3, r3, #186368	; 0x2d800
 8001940:	3be0      	subs	r3, #224	; 0xe0
 8001942:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
								int u_temp = -0.0959*n1-0.5676*n3+141619;
 8001946:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800194a:	f7fe fd8f 	bl	800046c <__aeabi_i2d>
 800194e:	a360      	add	r3, pc, #384	; (adr r3, 8001ad0 <HAL_TIM_PeriodElapsedCallback+0xd00>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe fdf4 	bl	8000540 <__aeabi_dmul>
 8001958:	4603      	mov	r3, r0
 800195a:	460c      	mov	r4, r1
 800195c:	4625      	mov	r5, r4
 800195e:	461c      	mov	r4, r3
 8001960:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001964:	f7fe fd82 	bl	800046c <__aeabi_i2d>
 8001968:	a35b      	add	r3, pc, #364	; (adr r3, 8001ad8 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7fe fde7 	bl	8000540 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe fc29 	bl	80001d0 <__aeabi_dsub>
 800197e:	4603      	mov	r3, r0
 8001980:	460c      	mov	r4, r1
 8001982:	4618      	mov	r0, r3
 8001984:	4621      	mov	r1, r4
 8001986:	a356      	add	r3, pc, #344	; (adr r3, 8001ae0 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe fc22 	bl	80001d4 <__adddf3>
 8001990:	4603      	mov	r3, r0
 8001992:	460c      	mov	r4, r1
 8001994:	4618      	mov	r0, r3
 8001996:	4621      	mov	r1, r4
 8001998:	f7fe ffe4 	bl	8000964 <__aeabi_d2iz>
 800199c:	4603      	mov	r3, r0
 800199e:	657b      	str	r3, [r7, #84]	; 0x54
								u = u_temp+U_MIN;
 80019a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a2:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 80019a6:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 80019aa:	4a55      	ldr	r2, [pc, #340]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 80019ac:	6013      	str	r3, [r2, #0]
								HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2.5/3.3*4095);
 80019ae:	f640 431e 	movw	r3, #3102	; 0xc1e
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	4853      	ldr	r0, [pc, #332]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0xd34>)
 80019b8:	f002 fa40 	bl	8003e3c <HAL_DAC_SetValue>
							if(H51 && H52 && H53 && H54){
 80019bc:	e0cc      	b.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0xd88>
								int H61 = 544*dx0-839*dx1+311384;     H61 = H61<=0;
 80019be:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019c2:	4613      	mov	r3, r2
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	4413      	add	r3, r2
 80019c8:	015b      	lsls	r3, r3, #5
 80019ca:	4619      	mov	r1, r3
 80019cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019d0:	4a4d      	ldr	r2, [pc, #308]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	440b      	add	r3, r1
 80019d8:	f503 2398 	add.w	r3, r3, #311296	; 0x4c000
 80019dc:	3358      	adds	r3, #88	; 0x58
 80019de:	653b      	str	r3, [r7, #80]	; 0x50
 80019e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bfd4      	ite	le
 80019e6:	2301      	movle	r3, #1
 80019e8:	2300      	movgt	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	653b      	str	r3, [r7, #80]	; 0x50
								int H62 = -907*dx0+422*dx1+300125;    H62 = H62<=0;
 80019ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80019f2:	4a46      	ldr	r2, [pc, #280]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0xd3c>)
 80019f4:	fb02 f203 	mul.w	r2, r2, r3
 80019f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019fc:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8001a0a:	f203 435d 	addw	r3, r3, #1117	; 0x45d
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bfd4      	ite	le
 8001a16:	2301      	movle	r3, #1
 8001a18:	2300      	movgt	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
								int H63 = 1000*dx1-1000000;           H63 = H63<=0;
 8001a1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8001a2e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8001a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	bfd4      	ite	le
 8001a3a:	2301      	movle	r3, #1
 8001a3c:	2300      	movgt	r3, #0
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	64bb      	str	r3, [r7, #72]	; 0x48
								if(H61 && H62 && H63){
 8001a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d063      	beq.n	8001b10 <HAL_TIM_PeriodElapsedCallback+0xd40>
 8001a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d060      	beq.n	8001b10 <HAL_TIM_PeriodElapsedCallback+0xd40>
 8001a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d05d      	beq.n	8001b10 <HAL_TIM_PeriodElapsedCallback+0xd40>
									n3 = -166*dx0+1325*dx1+107379;
 8001a54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a58:	f06f 02a5 	mvn.w	r2, #165	; 0xa5
 8001a5c:	fb02 f203 	mul.w	r2, r2, r3
 8001a60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a64:	f240 512d 	movw	r1, #1325	; 0x52d
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 33d1 	add.w	r3, r3, #107008	; 0x1a200
 8001a72:	f203 1373 	addw	r3, r3, #371	; 0x173
 8001a76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
									int u_temp = -0.5676*n3+141619;
 8001a7a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001a7e:	f7fe fcf5 	bl	800046c <__aeabi_i2d>
 8001a82:	a319      	add	r3, pc, #100	; (adr r3, 8001ae8 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fd5a 	bl	8000540 <__aeabi_dmul>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	460c      	mov	r4, r1
 8001a90:	4618      	mov	r0, r3
 8001a92:	4621      	mov	r1, r4
 8001a94:	a312      	add	r3, pc, #72	; (adr r3, 8001ae0 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fb9b 	bl	80001d4 <__adddf3>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460c      	mov	r4, r1
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	f7fe ff5d 	bl	8000964 <__aeabi_d2iz>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
									u = u_temp+U_MIN;
 8001aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab0:	f5a3 23a4 	sub.w	r3, r3, #335872	; 0x52000
 8001ab4:	f2a3 73ec 	subw	r3, r3, #2028	; 0x7ec
 8001ab8:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8001aba:	6013      	str	r3, [r2, #0]
									HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3/3.3*4095);
 8001abc:	f640 638a 	movw	r3, #3722	; 0xe8a
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	480f      	ldr	r0, [pc, #60]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0xd34>)
 8001ac6:	f002 f9b9 	bl	8003e3c <HAL_DAC_SetValue>
								if(H61 && H62 && H63){
 8001aca:	e045      	b.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0xd88>
 8001acc:	f3af 8000 	nop.w
 8001ad0:	03afb7e9 	.word	0x03afb7e9
 8001ad4:	bfb88ce7 	.word	0xbfb88ce7
 8001ad8:	79a6b50b 	.word	0x79a6b50b
 8001adc:	3fe229c7 	.word	0x3fe229c7
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	41014998 	.word	0x41014998
 8001ae8:	79a6b50b 	.word	0x79a6b50b
 8001aec:	bfe229c7 	.word	0xbfe229c7
 8001af0:	fffffd5e 	.word	0xfffffd5e
 8001af4:	fffffd1e 	.word	0xfffffd1e
 8001af8:	fffffa84 	.word	0xfffffa84
 8001afc:	fffffd59 	.word	0xfffffd59
 8001b00:	2000002c 	.word	0x2000002c
 8001b04:	20000060 	.word	0x20000060
 8001b08:	fffffcb9 	.word	0xfffffcb9
 8001b0c:	fffffc75 	.word	0xfffffc75
									dx0 = x[0] - xs0;
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2232      	movs	r2, #50	; 0x32
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
									dx1 = x[1] - xs1;
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
									u = -4854*dx0; u += 53*dx1;
 8001b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b2e:	4a27      	ldr	r2, [pc, #156]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	4a26      	ldr	r2, [pc, #152]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b3c:	2235      	movs	r2, #53	; 0x35
 8001b3e:	fb02 f203 	mul.w	r2, r2, r3
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a21      	ldr	r2, [pc, #132]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8001b4a:	6013      	str	r3, [r2, #0]
									HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	4820      	ldr	r0, [pc, #128]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xe04>)
 8001b54:	f002 f972 	bl	8003e3c <HAL_DAC_SetValue>
			u += us;  u /= 1000;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xe08>)
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 8001b6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b6e:	1192      	asrs	r2, r2, #6
 8001b70:	17db      	asrs	r3, r3, #31
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	4a16      	ldr	r2, [pc, #88]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8001b76:	6013      	str	r3, [r2, #0]
			int input = u*COUNTER_PERIOD/1000;;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	015b      	lsls	r3, r3, #5
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	01da      	lsls	r2, r3, #7
 8001b84:	4413      	add	r3, r2
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 8001b88:	fb82 1203 	smull	r1, r2, r2, r3
 8001b8c:	1192      	asrs	r2, r2, #6
 8001b8e:	17db      	asrs	r3, r3, #31
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			if(input < 0) input = 0;
 8001b96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	da02      	bge.n	8001ba4 <HAL_TIM_PeriodElapsedCallback+0xdd4>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			if(input > COUNTER_PERIOD) input = COUNTER_PERIOD;
 8001ba4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ba8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001bac:	db03      	blt.n	8001bb6 <HAL_TIM_PeriodElapsedCallback+0xde6>
 8001bae:	f640 739f 	movw	r3, #3999	; 0xf9f
 8001bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			htim2.Instance->CCR2 = input;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0xe10>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001bbe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001bc0:	bf00      	nop
 8001bc2:	37f4      	adds	r7, #244	; 0xf4
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc8:	20000034 	.word	0x20000034
 8001bcc:	ffffed0a 	.word	0xffffed0a
 8001bd0:	2000002c 	.word	0x2000002c
 8001bd4:	20000060 	.word	0x20000060
 8001bd8:	000527ec 	.word	0x000527ec
 8001bdc:	10624dd3 	.word	0x10624dd3
 8001be0:	200001d4 	.word	0x200001d4

08001be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be8:	f000 fdfc 	bl	80027e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bec:	f000 f83c 	bl	8001c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf0:	f000 fade 	bl	80021b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bf4:	f000 fab6 	bl	8002164 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001bf8:	f000 fa84 	bl	8002104 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001bfc:	f000 f8bc 	bl	8001d78 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c00:	f000 f934 	bl	8001e6c <MX_ADC2_Init>
  MX_DAC1_Init();
 8001c04:	f000 f998 	bl	8001f38 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001c08:	f000 f9d4 	bl	8001fb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c0c:	f000 fa2c 	bl	8002068 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001c10:	2100      	movs	r1, #0
 8001c12:	480e      	ldr	r0, [pc, #56]	; (8001c4c <main+0x68>)
 8001c14:	f002 f8c5 	bl	8003da2 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8001c18:	2110      	movs	r1, #16
 8001c1a:	480c      	ldr	r0, [pc, #48]	; (8001c4c <main+0x68>)
 8001c1c:	f002 f8c1 	bl	8003da2 <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf0, SIZE);
 8001c20:	2207      	movs	r2, #7
 8001c22:	490b      	ldr	r1, [pc, #44]	; (8001c50 <main+0x6c>)
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <main+0x70>)
 8001c26:	f001 f993 	bl	8002f50 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf1, SIZE);
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	490a      	ldr	r1, [pc, #40]	; (8001c58 <main+0x74>)
 8001c2e:	480b      	ldr	r0, [pc, #44]	; (8001c5c <main+0x78>)
 8001c30:	f001 f98e 	bl	8002f50 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim3);
 8001c34:	480a      	ldr	r0, [pc, #40]	; (8001c60 <main+0x7c>)
 8001c36:	f004 f923 	bl	8005e80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <main+0x80>)
 8001c3e:	f004 f975 	bl	8005f2c <HAL_TIM_PWM_Start>
  htim2.Instance->CCR2 = 0;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <main+0x80>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <main+0x66>
 8001c4c:	20000060 	.word	0x20000060
 8001c50:	200002dc 	.word	0x200002dc
 8001c54:	20000074 	.word	0x20000074
 8001c58:	20000118 	.word	0x20000118
 8001c5c:	20000128 	.word	0x20000128
 8001c60:	200000d8 	.word	0x200000d8
 8001c64:	200001d4 	.word	0x200001d4

08001c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0b8      	sub	sp, #224	; 0xe0
 8001c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c72:	2244      	movs	r2, #68	; 0x44
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f005 fee6 	bl	8007a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	2288      	movs	r2, #136	; 0x88
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f005 fed8 	bl	8007a48 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ca6:	2310      	movs	r3, #16
 8001ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cac:	2302      	movs	r3, #2
 8001cae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001cbe:	230a      	movs	r3, #10
 8001cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cc4:	2307      	movs	r3, #7
 8001cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fe0a 	bl	80048f4 <HAL_RCC_OscConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ce6:	f000 facd 	bl	8002284 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cea:	230f      	movs	r3, #15
 8001cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d08:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 f9d6 	bl	80050c0 <HAL_RCC_ClockConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001d1a:	f000 fab3 	bl	8002284 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8001d1e:	f244 0302 	movw	r3, #16386	; 0x4002
 8001d22:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d24:	2300      	movs	r3, #0
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d2c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001d36:	2308      	movs	r3, #8
 8001d38:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001d46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d4a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 fbba 	bl	80054c8 <HAL_RCCEx_PeriphCLKConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001d5a:	f000 fa93 	bl	8002284 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d62:	f002 fd71 	bl	8004848 <HAL_PWREx_ControlVoltageScaling>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001d6c:	f000 fa8a 	bl	8002284 <Error_Handler>
  }
}
 8001d70:	bf00      	nop
 8001d72:	37e0      	adds	r7, #224	; 0xe0
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
 8001d98:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001d9c:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <MX_ADC1_Init+0xec>)
 8001d9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001da0:	4b2f      	ldr	r3, [pc, #188]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001da6:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dac:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001db2:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001db8:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001dba:	2204      	movs	r2, #4
 8001dbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001dc4:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e00:	4817      	ldr	r0, [pc, #92]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001e02:	f000 ff51 	bl	8002ca8 <HAL_ADC_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001e0c:	f000 fa3a 	bl	8002284 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4811      	ldr	r0, [pc, #68]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001e1c:	f001 fde2 	bl	80039e4 <HAL_ADCEx_MultiModeConfigChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001e26:	f000 fa2d 	bl	8002284 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <MX_ADC1_Init+0xf0>)
 8001e2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e2e:	2306      	movs	r3, #6
 8001e30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001e32:	2305      	movs	r3, #5
 8001e34:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e36:	237f      	movs	r3, #127	; 0x7f
 8001e38:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <MX_ADC1_Init+0xe8>)
 8001e48:	f001 f954 	bl	80030f4 <HAL_ADC_ConfigChannel>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001e52:	f000 fa17 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000128 	.word	0x20000128
 8001e64:	50040000 	.word	0x50040000
 8001e68:	14f00020 	.word	0x14f00020

08001e6c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e72:	463b      	mov	r3, r7
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
 8001e80:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001e84:	4a2a      	ldr	r2, [pc, #168]	; (8001f30 <MX_ADC2_Init+0xc4>)
 8001e86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e88:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e8e:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e94:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ee8:	4810      	ldr	r0, [pc, #64]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001eea:	f000 fedd 	bl	8002ca8 <HAL_ADC_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8001ef4:	f000 f9c6 	bl	8002284 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_ADC2_Init+0xc8>)
 8001efa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001efc:	2306      	movs	r3, #6
 8001efe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001f00:	2305      	movs	r3, #5
 8001f02:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f04:	237f      	movs	r3, #127	; 0x7f
 8001f06:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f10:	463b      	mov	r3, r7
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_ADC2_Init+0xc0>)
 8001f16:	f001 f8ed 	bl	80030f4 <HAL_ADC_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001f20:	f000 f9b0 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000074 	.word	0x20000074
 8001f30:	50040100 	.word	0x50040100
 8001f34:	19200040 	.word	0x19200040

08001f38 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2224      	movs	r2, #36	; 0x24
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f005 fd7f 	bl	8007a48 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <MX_DAC1_Init+0x74>)
 8001f4c:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <MX_DAC1_Init+0x78>)
 8001f4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001f50:	4816      	ldr	r0, [pc, #88]	; (8001fac <MX_DAC1_Init+0x74>)
 8001f52:	f001 ff04 	bl	8003d5e <HAL_DAC_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001f5c:	f000 f992 	bl	8002284 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	2200      	movs	r2, #0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480c      	ldr	r0, [pc, #48]	; (8001fac <MX_DAC1_Init+0x74>)
 8001f7c:	f001 ff83 	bl	8003e86 <HAL_DAC_ConfigChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001f86:	f000 f97d 	bl	8002284 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	2210      	movs	r2, #16
 8001f92:	4619      	mov	r1, r3
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_DAC1_Init+0x74>)
 8001f96:	f001 ff76 	bl	8003e86 <HAL_DAC_ConfigChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001fa0:	f000 f970 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	3728      	adds	r7, #40	; 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000060 	.word	0x20000060
 8001fb0:	40007400 	.word	0x40007400

08001fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <MX_TIM2_Init+0xb0>)
 8001fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fe0:	4b20      	ldr	r3, [pc, #128]	; (8002064 <MX_TIM2_Init+0xb0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <MX_TIM2_Init+0xb0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <MX_TIM2_Init+0xb0>)
 8001fee:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001ff2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <MX_TIM2_Init+0xb0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MX_TIM2_Init+0xb0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002000:	4818      	ldr	r0, [pc, #96]	; (8002064 <MX_TIM2_Init+0xb0>)
 8002002:	f003 ff67 	bl	8005ed4 <HAL_TIM_PWM_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800200c:	f000 f93a 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4619      	mov	r1, r3
 800201e:	4811      	ldr	r0, [pc, #68]	; (8002064 <MX_TIM2_Init+0xb0>)
 8002020:	f004 ff26 	bl	8006e70 <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800202a:	f000 f92b 	bl	8002284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202e:	2360      	movs	r3, #96	; 0x60
 8002030:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800203e:	463b      	mov	r3, r7
 8002040:	2204      	movs	r2, #4
 8002042:	4619      	mov	r1, r3
 8002044:	4807      	ldr	r0, [pc, #28]	; (8002064 <MX_TIM2_Init+0xb0>)
 8002046:	f004 f8e9 	bl	800621c <HAL_TIM_PWM_ConfigChannel>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002050:	f000 f918 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002054:	4803      	ldr	r0, [pc, #12]	; (8002064 <MX_TIM2_Init+0xb0>)
 8002056:	f000 faa1 	bl	800259c <HAL_TIM_MspPostInit>

}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	; 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200001d4 	.word	0x200001d4

08002068 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206e:	f107 0310 	add.w	r3, r7, #16
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <MX_TIM3_Init+0x94>)
 8002088:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <MX_TIM3_Init+0x98>)
 800208a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <MX_TIM3_Init+0x94>)
 800208e:	224f      	movs	r2, #79	; 0x4f
 8002090:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <MX_TIM3_Init+0x94>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <MX_TIM3_Init+0x94>)
 800209a:	2263      	movs	r2, #99	; 0x63
 800209c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <MX_TIM3_Init+0x94>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <MX_TIM3_Init+0x94>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020aa:	4814      	ldr	r0, [pc, #80]	; (80020fc <MX_TIM3_Init+0x94>)
 80020ac:	f003 febc 	bl	8005e28 <HAL_TIM_Base_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80020b6:	f000 f8e5 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4619      	mov	r1, r3
 80020c6:	480d      	ldr	r0, [pc, #52]	; (80020fc <MX_TIM3_Init+0x94>)
 80020c8:	f004 f9c0 	bl	800644c <HAL_TIM_ConfigClockSource>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80020d2:	f000 f8d7 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4806      	ldr	r0, [pc, #24]	; (80020fc <MX_TIM3_Init+0x94>)
 80020e4:	f004 fec4 	bl	8006e70 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80020ee:	f000 f8c9 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200000d8 	.word	0x200000d8
 8002100:	40000400 	.word	0x40000400

08002104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <MX_USART2_UART_Init+0x58>)
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <MX_USART2_UART_Init+0x5c>)
 800210c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <MX_USART2_UART_Init+0x58>)
 8002110:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_USART2_UART_Init+0x58>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <MX_USART2_UART_Init+0x58>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_USART2_UART_Init+0x58>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MX_USART2_UART_Init+0x58>)
 800212a:	220c      	movs	r2, #12
 800212c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <MX_USART2_UART_Init+0x58>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <MX_USART2_UART_Init+0x58>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <MX_USART2_UART_Init+0x58>)
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_USART2_UART_Init+0x58>)
 8002142:	2200      	movs	r2, #0
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_USART2_UART_Init+0x58>)
 8002148:	f004 ff38 	bl	8006fbc <HAL_UART_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002152:	f000 f897 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000214 	.word	0x20000214
 8002160:	40004400 	.word	0x40004400

08002164 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <MX_DMA_Init+0x48>)
 800216c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216e:	4a0f      	ldr	r2, [pc, #60]	; (80021ac <MX_DMA_Init+0x48>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6493      	str	r3, [r2, #72]	; 0x48
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <MX_DMA_Init+0x48>)
 8002178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	200b      	movs	r0, #11
 8002188:	f001 fdb3 	bl	8003cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800218c:	200b      	movs	r0, #11
 800218e:	f001 fdcc 	bl	8003d2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	200c      	movs	r0, #12
 8002198:	f001 fdab 	bl	8003cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800219c:	200c      	movs	r0, #12
 800219e:	f001 fdc4 	bl	8003d2a <HAL_NVIC_EnableIRQ>

}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000

080021b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <MX_GPIO_Init+0xc8>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <MX_GPIO_Init+0xc8>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d2:	4b29      	ldr	r3, [pc, #164]	; (8002278 <MX_GPIO_Init+0xc8>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <MX_GPIO_Init+0xc8>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a25      	ldr	r2, [pc, #148]	; (8002278 <MX_GPIO_Init+0xc8>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b23      	ldr	r3, [pc, #140]	; (8002278 <MX_GPIO_Init+0xc8>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <MX_GPIO_Init+0xc8>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <MX_GPIO_Init+0xc8>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002202:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <MX_GPIO_Init+0xc8>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <MX_GPIO_Init+0xc8>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	4a19      	ldr	r2, [pc, #100]	; (8002278 <MX_GPIO_Init+0xc8>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <MX_GPIO_Init+0xc8>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800222c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002230:	f002 fae4 	bl	80047fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <MX_GPIO_Init+0xcc>)
 800223c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <MX_GPIO_Init+0xd0>)
 800224a:	f002 f92f 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800224e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226a:	f002 f91f 	bl	80044ac <HAL_GPIO_Init>

}
 800226e:	bf00      	nop
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	10210000 	.word	0x10210000
 8002280:	48000800 	.word	0x48000800

08002284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_MspInit+0x44>)
 800229c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229e:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <HAL_MspInit+0x44>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6613      	str	r3, [r2, #96]	; 0x60
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_MspInit+0x44>)
 80022a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_MspInit+0x44>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <HAL_MspInit+0x44>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6593      	str	r3, [r2, #88]	; 0x58
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_MspInit+0x44>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000

080022dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5f      	ldr	r2, [pc, #380]	; (8002478 <HAL_ADC_MspInit+0x19c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d159      	bne.n	80023b2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80022fe:	4b5f      	ldr	r3, [pc, #380]	; (800247c <HAL_ADC_MspInit+0x1a0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	4a5d      	ldr	r2, [pc, #372]	; (800247c <HAL_ADC_MspInit+0x1a0>)
 8002306:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002308:	4b5c      	ldr	r3, [pc, #368]	; (800247c <HAL_ADC_MspInit+0x1a0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d10b      	bne.n	8002328 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002310:	4b5b      	ldr	r3, [pc, #364]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002314:	4a5a      	ldr	r2, [pc, #360]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 8002316:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800231a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231c:	4b58      	ldr	r3, [pc, #352]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b55      	ldr	r3, [pc, #340]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	4a54      	ldr	r2, [pc, #336]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002334:	4b52      	ldr	r3, [pc, #328]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002340:	2301      	movs	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002344:	230b      	movs	r3, #11
 8002346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4619      	mov	r1, r3
 8002352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002356:	f002 f8a9 	bl	80044ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800235a:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 800235c:	4a4a      	ldr	r2, [pc, #296]	; (8002488 <HAL_ADC_MspInit+0x1ac>)
 800235e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002360:	4b48      	ldr	r3, [pc, #288]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 8002362:	2200      	movs	r2, #0
 8002364:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800236c:	4b45      	ldr	r3, [pc, #276]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002378:	4b42      	ldr	r3, [pc, #264]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 800237a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002380:	4b40      	ldr	r3, [pc, #256]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 8002382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002386:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 800238a:	2220      	movs	r2, #32
 800238c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800238e:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002394:	483b      	ldr	r0, [pc, #236]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 8002396:	f001 fe91 	bl	80040bc <HAL_DMA_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80023a0:	f7ff ff70 	bl	8002284 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a37      	ldr	r2, [pc, #220]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 80023a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80023aa:	4a36      	ldr	r2, [pc, #216]	; (8002484 <HAL_ADC_MspInit+0x1a8>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023b0:	e05d      	b.n	800246e <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a35      	ldr	r2, [pc, #212]	; (800248c <HAL_ADC_MspInit+0x1b0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d158      	bne.n	800246e <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 80023bc:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HAL_ADC_MspInit+0x1a0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	4a2e      	ldr	r2, [pc, #184]	; (800247c <HAL_ADC_MspInit+0x1a0>)
 80023c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80023c6:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_ADC_MspInit+0x1a0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10b      	bne.n	80023e6 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 80023d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	4a25      	ldr	r2, [pc, #148]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f2:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_ADC_MspInit+0x1a4>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023fe:	2302      	movs	r3, #2
 8002400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002402:	230b      	movs	r3, #11
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	4619      	mov	r1, r3
 8002410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002414:	f002 f84a 	bl	80044ac <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 800241a:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <HAL_ADC_MspInit+0x1b8>)
 800241c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 800242c:	2200      	movs	r2, #0
 800242e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002430:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 8002432:	2280      	movs	r2, #128	; 0x80
 8002434:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002436:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 8002438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 8002440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002444:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 8002448:	2220      	movs	r2, #32
 800244a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 800244e:	2200      	movs	r2, #0
 8002450:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002452:	480f      	ldr	r0, [pc, #60]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 8002454:	f001 fe32 	bl	80040bc <HAL_DMA_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_ADC_MspInit+0x186>
      Error_Handler();
 800245e:	f7ff ff11 	bl	8002284 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 8002466:	64da      	str	r2, [r3, #76]	; 0x4c
 8002468:	4a09      	ldr	r2, [pc, #36]	; (8002490 <HAL_ADC_MspInit+0x1b4>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800246e:	bf00      	nop
 8002470:	3730      	adds	r7, #48	; 0x30
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	50040000 	.word	0x50040000
 800247c:	2000005c 	.word	0x2000005c
 8002480:	40021000 	.word	0x40021000
 8002484:	2000018c 	.word	0x2000018c
 8002488:	40020008 	.word	0x40020008
 800248c:	50040100 	.word	0x50040100
 8002490:	20000294 	.word	0x20000294
 8002494:	4002001c 	.word	0x4002001c

08002498 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a15      	ldr	r2, [pc, #84]	; (800250c <HAL_DAC_MspInit+0x74>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d124      	bne.n	8002504 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <HAL_DAC_MspInit+0x78>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	4a14      	ldr	r2, [pc, #80]	; (8002510 <HAL_DAC_MspInit+0x78>)
 80024c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024c4:	6593      	str	r3, [r2, #88]	; 0x58
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_DAC_MspInit+0x78>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_DAC_MspInit+0x78>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <HAL_DAC_MspInit+0x78>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_DAC_MspInit+0x78>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024ea:	2330      	movs	r3, #48	; 0x30
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ee:	2303      	movs	r3, #3
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002500:	f001 ffd4 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	; 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40007400 	.word	0x40007400
 8002510:	40021000 	.word	0x40021000

08002514 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002524:	d10b      	bne.n	800253e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_TIM_PWM_MspInit+0x38>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	4a08      	ldr	r2, [pc, #32]	; (800254c <HAL_TIM_PWM_MspInit+0x38>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6593      	str	r3, [r2, #88]	; 0x58
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_TIM_PWM_MspInit+0x38>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <HAL_TIM_Base_MspInit+0x44>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d113      	bne.n	800258a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_TIM_Base_MspInit+0x48>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <HAL_TIM_Base_MspInit+0x48>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6593      	str	r3, [r2, #88]	; 0x58
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_TIM_Base_MspInit+0x48>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	201d      	movs	r0, #29
 8002580:	f001 fbb7 	bl	8003cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002584:	201d      	movs	r0, #29
 8002586:	f001 fbd0 	bl	8003d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40000400 	.word	0x40000400
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d11b      	bne.n	80025f6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_TIM_MspPostInit+0x64>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <HAL_TIM_MspPostInit+0x64>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ca:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_TIM_MspPostInit+0x64>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025d6:	2308      	movs	r3, #8
 80025d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025e6:	2301      	movs	r3, #1
 80025e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	4619      	mov	r1, r3
 80025f0:	4804      	ldr	r0, [pc, #16]	; (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025f2:	f001 ff5b 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025f6:	bf00      	nop
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	48000400 	.word	0x48000400

08002608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a17      	ldr	r2, [pc, #92]	; (8002684 <HAL_UART_MspInit+0x7c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d128      	bne.n	800267c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HAL_UART_MspInit+0x80>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	4a16      	ldr	r2, [pc, #88]	; (8002688 <HAL_UART_MspInit+0x80>)
 8002630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002634:	6593      	str	r3, [r2, #88]	; 0x58
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_UART_MspInit+0x80>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_UART_MspInit+0x80>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	4a10      	ldr	r2, [pc, #64]	; (8002688 <HAL_UART_MspInit+0x80>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <HAL_UART_MspInit+0x80>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800265a:	230c      	movs	r3, #12
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800266a:	2307      	movs	r3, #7
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002678:	f001 ff18 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40004400 	.word	0x40004400
 8002688:	40021000 	.word	0x40021000

0800268c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800269e:	e7fe      	b.n	800269e <HardFault_Handler+0x4>

080026a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <MemManage_Handler+0x4>

080026a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026aa:	e7fe      	b.n	80026aa <BusFault_Handler+0x4>

080026ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <UsageFault_Handler+0x4>

080026b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e0:	f000 f8da 	bl	8002898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <DMA1_Channel1_IRQHandler+0x10>)
 80026ee:	f001 fdfd 	bl	80042ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000018c 	.word	0x2000018c

080026fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <DMA1_Channel2_IRQHandler+0x10>)
 8002702:	f001 fdf3 	bl	80042ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000294 	.word	0x20000294

08002710 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002714:	4802      	ldr	r0, [pc, #8]	; (8002720 <TIM3_IRQHandler+0x10>)
 8002716:	f003 fc61 	bl	8005fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200000d8 	.word	0x200000d8

08002724 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <SystemInit+0x64>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	4a16      	ldr	r2, [pc, #88]	; (8002788 <SystemInit+0x64>)
 8002730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002738:	4b14      	ldr	r3, [pc, #80]	; (800278c <SystemInit+0x68>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a13      	ldr	r2, [pc, #76]	; (800278c <SystemInit+0x68>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <SystemInit+0x68>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <SystemInit+0x68>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a0f      	ldr	r2, [pc, #60]	; (800278c <SystemInit+0x68>)
 8002750:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002754:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002758:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <SystemInit+0x68>)
 800275c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002760:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <SystemInit+0x68>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <SystemInit+0x68>)
 8002768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800276c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <SystemInit+0x68>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SystemInit+0x64>)
 8002776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800277a:	609a      	str	r2, [r3, #8]
#endif
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00
 800278c:	40021000 	.word	0x40021000

08002790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002794:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002796:	e003      	b.n	80027a0 <LoopCopyDataInit>

08002798 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800279a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800279c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800279e:	3104      	adds	r1, #4

080027a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027a0:	480b      	ldr	r0, [pc, #44]	; (80027d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027a8:	d3f6      	bcc.n	8002798 <CopyDataInit>
	ldr	r2, =_sbss
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027ac:	e002      	b.n	80027b4 <LoopFillZerobss>

080027ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027b0:	f842 3b04 	str.w	r3, [r2], #4

080027b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <LoopForever+0x16>)
	cmp	r2, r3
 80027b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027b8:	d3f9      	bcc.n	80027ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027ba:	f7ff ffb3 	bl	8002724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027be:	f005 f91f 	bl	8007a00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027c2:	f7ff fa0f 	bl	8001be4 <main>

080027c6 <LoopForever>:

LoopForever:
    b LoopForever
 80027c6:	e7fe      	b.n	80027c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027c8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80027cc:	08007ac8 	.word	0x08007ac8
	ldr	r0, =_sdata
 80027d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027d4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80027d8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80027dc:	200002f0 	.word	0x200002f0

080027e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027e0:	e7fe      	b.n	80027e0 <ADC1_2_IRQHandler>
	...

080027e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_Init+0x3c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <HAL_Init+0x3c>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027fa:	2003      	movs	r0, #3
 80027fc:	f001 fa6e 	bl	8003cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002800:	2000      	movs	r0, #0
 8002802:	f000 f80f 	bl	8002824 <HAL_InitTick>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	71fb      	strb	r3, [r7, #7]
 8002810:	e001      	b.n	8002816 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002812:	f7ff fd3f 	bl	8002294 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002816:	79fb      	ldrb	r3, [r7, #7]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40022000 	.word	0x40022000

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002830:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_InitTick+0x68>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d022      	beq.n	800287e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002838:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_InitTick+0x6c>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_InitTick+0x68>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002844:	fbb1 f3f3 	udiv	r3, r1, r3
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	4618      	mov	r0, r3
 800284e:	f001 fa7a 	bl	8003d46 <HAL_SYSTICK_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10f      	bne.n	8002878 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	d809      	bhi.n	8002872 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800285e:	2200      	movs	r2, #0
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	f04f 30ff 	mov.w	r0, #4294967295
 8002866:	f001 fa44 	bl	8003cf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_InitTick+0x70>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e007      	b.n	8002882 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	e004      	b.n	8002882 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
 800287c:	e001      	b.n	8002882 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000008 	.word	0x20000008
 8002890:	20000000 	.word	0x20000000
 8002894:	20000004 	.word	0x20000004

08002898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_IncTick+0x1c>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_IncTick+0x20>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <HAL_IncTick+0x1c>)
 80028a8:	6013      	str	r3, [r2, #0]
}
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	200002ec 	.word	0x200002ec
 80028b8:	20000008 	.word	0x20000008

080028bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_GetTick+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	200002ec 	.word	0x200002ec

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff ffee 	bl	80028bc <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d004      	beq.n	80028f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_Delay+0x40>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4413      	add	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028f8:	bf00      	nop
 80028fa:	f7ff ffdf 	bl	80028bc <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	429a      	cmp	r2, r3
 8002908:	d8f7      	bhi.n	80028fa <HAL_Delay+0x26>
  {
  }
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000008 	.word	0x20000008

08002918 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	609a      	str	r2, [r3, #8]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002980:	b490      	push	{r4, r7}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3360      	adds	r3, #96	; 0x60
 8002992:	461a      	mov	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800299c:	6822      	ldr	r2, [r4, #0]
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <LL_ADC_SetOffset+0x40>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029b2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc90      	pop	{r4, r7}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	03fff000 	.word	0x03fff000

080029c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029c4:	b490      	push	{r4, r7}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3360      	adds	r3, #96	; 0x60
 80029d2:	461a      	mov	r2, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc90      	pop	{r4, r7}
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029ec:	b490      	push	{r4, r7}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3360      	adds	r3, #96	; 0x60
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc90      	pop	{r4, r7}
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a42:	b490      	push	{r4, r7}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3330      	adds	r3, #48	; 0x30
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	4413      	add	r3, r2
 8002a60:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002a62:	6822      	ldr	r2, [r4, #0]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	211f      	movs	r1, #31
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	0e9b      	lsrs	r3, r3, #26
 8002a78:	f003 011f 	and.w	r1, r3, #31
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	4313      	orrs	r3, r2
 8002a88:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc90      	pop	{r4, r7}
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a94:	b490      	push	{r4, r7}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3314      	adds	r3, #20
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	0e5b      	lsrs	r3, r3, #25
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	4413      	add	r3, r2
 8002ab2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002ab4:	6822      	ldr	r2, [r4, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	0d1b      	lsrs	r3, r3, #20
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	2107      	movs	r1, #7
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	0d1b      	lsrs	r3, r3, #20
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc90      	pop	{r4, r7}
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afc:	43db      	mvns	r3, r3
 8002afe:	401a      	ands	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0318 	and.w	r3, r3, #24
 8002b06:	4908      	ldr	r1, [pc, #32]	; (8002b28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b08:	40d9      	lsrs	r1, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	400b      	ands	r3, r1
 8002b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b12:	431a      	orrs	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	0007ffff 	.word	0x0007ffff

08002b2c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 031f 	and.w	r3, r3, #31
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6093      	str	r3, [r2, #8]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b80:	d101      	bne.n	8002b86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ba4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ba8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bd0:	d101      	bne.n	8002bd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bf8:	f043 0201 	orr.w	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <LL_ADC_IsEnabled+0x18>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <LL_ADC_IsEnabled+0x1a>
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c46:	f043 0204 	orr.w	r2, r3, #4
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d101      	bne.n	8002c72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d101      	bne.n	8002c98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e134      	b.n	8002f2c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fb03 	bl	80022dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff3f 	bl	8002b6c <LL_ADC_IsDeepPowerDownEnabled>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff25 	bl	8002b48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ff5a 	bl	8002bbc <LL_ADC_IsInternalRegulatorEnabled>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d113      	bne.n	8002d36 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff3e 	bl	8002b94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d18:	4b86      	ldr	r3, [pc, #536]	; (8002f34 <HAL_ADC_Init+0x28c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	4a86      	ldr	r2, [pc, #536]	; (8002f38 <HAL_ADC_Init+0x290>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	099b      	lsrs	r3, r3, #6
 8002d26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d28:	e002      	b.n	8002d30 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f9      	bne.n	8002d2a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff3e 	bl	8002bbc <LL_ADC_IsInternalRegulatorEnabled>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f043 0210 	orr.w	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ff77 	bl	8002c5a <LL_ADC_REG_IsConversionOngoing>
 8002d6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 80cf 	bne.w	8002f1a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 80cb 	bne.w	8002f1a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d8c:	f043 0202 	orr.w	r2, r3, #2
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff37 	bl	8002c0c <LL_ADC_IsEnabled>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d115      	bne.n	8002dd0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002da4:	4865      	ldr	r0, [pc, #404]	; (8002f3c <HAL_ADC_Init+0x294>)
 8002da6:	f7ff ff31 	bl	8002c0c <LL_ADC_IsEnabled>
 8002daa:	4604      	mov	r4, r0
 8002dac:	4864      	ldr	r0, [pc, #400]	; (8002f40 <HAL_ADC_Init+0x298>)
 8002dae:	f7ff ff2d 	bl	8002c0c <LL_ADC_IsEnabled>
 8002db2:	4603      	mov	r3, r0
 8002db4:	431c      	orrs	r4, r3
 8002db6:	4863      	ldr	r0, [pc, #396]	; (8002f44 <HAL_ADC_Init+0x29c>)
 8002db8:	f7ff ff28 	bl	8002c0c <LL_ADC_IsEnabled>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4323      	orrs	r3, r4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	485f      	ldr	r0, [pc, #380]	; (8002f48 <HAL_ADC_Init+0x2a0>)
 8002dcc:	f7ff fda4 	bl	8002918 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7e5b      	ldrb	r3, [r3, #25]
 8002dd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dda:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002de0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002de6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d106      	bne.n	8002e0c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	3b01      	subs	r3, #1
 8002e04:	045b      	lsls	r3, r3, #17
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_ADC_Init+0x2a4>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff0a 	bl	8002c5a <LL_ADC_REG_IsConversionOngoing>
 8002e46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff17 	bl	8002c80 <LL_ADC_INJ_IsConversionOngoing>
 8002e52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d13d      	bne.n	8002ed6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d13a      	bne.n	8002ed6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e64:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e6c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e7c:	f023 0302 	bic.w	r3, r3, #2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	69b9      	ldr	r1, [r7, #24]
 8002e86:	430b      	orrs	r3, r1
 8002e88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d118      	bne.n	8002ec6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e9e:	f023 0304 	bic.w	r3, r3, #4
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eaa:	4311      	orrs	r1, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002eb0:	4311      	orrs	r1, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	611a      	str	r2, [r3, #16]
 8002ec4:	e007      	b.n	8002ed6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d10c      	bne.n	8002ef8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f023 010f 	bic.w	r1, r3, #15
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	1e5a      	subs	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef6:	e007      	b.n	8002f08 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 020f 	bic.w	r2, r2, #15
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f023 0303 	bic.w	r3, r3, #3
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
 8002f18:	e007      	b.n	8002f2a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	f043 0210 	orr.w	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3724      	adds	r7, #36	; 0x24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd90      	pop	{r4, r7, pc}
 8002f34:	20000000 	.word	0x20000000
 8002f38:	053e2d63 	.word	0x053e2d63
 8002f3c:	50040000 	.word	0x50040000
 8002f40:	50040100 	.word	0x50040100
 8002f44:	50040200 	.word	0x50040200
 8002f48:	50040300 	.word	0x50040300
 8002f4c:	fff0c007 	.word	0xfff0c007

08002f50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f5c:	4850      	ldr	r0, [pc, #320]	; (80030a0 <HAL_ADC_Start_DMA+0x150>)
 8002f5e:	f7ff fde5 	bl	8002b2c <LL_ADC_GetMultimode>
 8002f62:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fe76 	bl	8002c5a <LL_ADC_REG_IsConversionOngoing>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 808e 	bne.w	8003092 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_Start_DMA+0x34>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e089      	b.n	8003098 <HAL_ADC_Start_DMA+0x148>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b05      	cmp	r3, #5
 8002f96:	d002      	beq.n	8002f9e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b09      	cmp	r3, #9
 8002f9c:	d172      	bne.n	8003084 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fc0c 	bl	80037bc <ADC_Enable>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d165      	bne.n	800307a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a37      	ldr	r2, [pc, #220]	; (80030a4 <HAL_ADC_Start_DMA+0x154>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d002      	beq.n	8002fd2 <HAL_ADC_Start_DMA+0x82>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	e000      	b.n	8002fd4 <HAL_ADC_Start_DMA+0x84>
 8002fd2:	4b35      	ldr	r3, [pc, #212]	; (80030a8 <HAL_ADC_Start_DMA+0x158>)
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d002      	beq.n	8002fe2 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d006      	beq.n	8003008 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f023 0206 	bic.w	r2, r3, #6
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	659a      	str	r2, [r3, #88]	; 0x58
 8003006:	e002      	b.n	800300e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	4a26      	ldr	r2, [pc, #152]	; (80030ac <HAL_ADC_Start_DMA+0x15c>)
 8003014:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301a:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <HAL_ADC_Start_DMA+0x160>)
 800301c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	4a24      	ldr	r2, [pc, #144]	; (80030b4 <HAL_ADC_Start_DMA+0x164>)
 8003024:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	221c      	movs	r2, #28
 800302c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0210 	orr.w	r2, r2, #16
 8003044:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3340      	adds	r3, #64	; 0x40
 8003060:	4619      	mov	r1, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f001 f8e1 	bl	800422c <HAL_DMA_Start_IT>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fddd 	bl	8002c32 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003078:	e00d      	b.n	8003096 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003082:	e008      	b.n	8003096 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003090:	e001      	b.n	8003096 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003092:	2302      	movs	r3, #2
 8003094:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003096:	7dfb      	ldrb	r3, [r7, #23]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	50040300 	.word	0x50040300
 80030a4:	50040100 	.word	0x50040100
 80030a8:	50040000 	.word	0x50040000
 80030ac:	08003871 	.word	0x08003871
 80030b0:	08003949 	.word	0x08003949
 80030b4:	08003965 	.word	0x08003965

080030b8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b0a6      	sub	sp, #152	; 0x98
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x22>
 8003112:	2302      	movs	r3, #2
 8003114:	e348      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x6b4>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fd99 	bl	8002c5a <LL_ADC_REG_IsConversionOngoing>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 8329 	bne.w	8003782 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b05      	cmp	r3, #5
 8003136:	d824      	bhi.n	8003182 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	3b02      	subs	r3, #2
 800313e:	2b03      	cmp	r3, #3
 8003140:	d81b      	bhi.n	800317a <HAL_ADC_ConfigChannel+0x86>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <HAL_ADC_ConfigChannel+0x54>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	08003159 	.word	0x08003159
 800314c:	08003161 	.word	0x08003161
 8003150:	08003169 	.word	0x08003169
 8003154:	08003171 	.word	0x08003171
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	220c      	movs	r2, #12
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	e011      	b.n	8003184 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2212      	movs	r2, #18
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	e00d      	b.n	8003184 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2218      	movs	r2, #24
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	e009      	b.n	8003184 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	e004      	b.n	8003184 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2206      	movs	r2, #6
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	e000      	b.n	8003184 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003182:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	f7ff fc56 	bl	8002a42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fd5d 	bl	8002c5a <LL_ADC_REG_IsConversionOngoing>
 80031a0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fd69 	bl	8002c80 <LL_ADC_INJ_IsConversionOngoing>
 80031ae:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 8148 	bne.w	800344c <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 8143 	bne.w	800344c <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7ff fc5e 	bl	8002a94 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	08db      	lsrs	r3, r3, #3
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d00a      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6919      	ldr	r1, [r3, #16]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800320a:	f7ff fbb9 	bl	8002980 <LL_ADC_SetOffset>
 800320e:	e11d      	b.n	800344c <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2100      	movs	r1, #0
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fbd4 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 800321c:	4603      	mov	r3, r0
 800321e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <HAL_ADC_ConfigChannel+0x148>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fbc9 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003232:	4603      	mov	r3, r0
 8003234:	0e9b      	lsrs	r3, r3, #26
 8003236:	f003 021f 	and.w	r2, r3, #31
 800323a:	e012      	b.n	8003262 <HAL_ADC_ConfigChannel+0x16e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fbbe 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003248:	4603      	mov	r3, r0
 800324a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <HAL_ADC_ConfigChannel+0x186>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0e9b      	lsrs	r3, r3, #26
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	e00a      	b.n	8003290 <HAL_ADC_ConfigChannel+0x19c>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8003288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	429a      	cmp	r2, r3
 8003292:	d106      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2200      	movs	r2, #0
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fba5 	bl	80029ec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fb8b 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x1da>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2101      	movs	r1, #1
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fb80 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80032c4:	4603      	mov	r3, r0
 80032c6:	0e9b      	lsrs	r3, r3, #26
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	e010      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x1fc>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2101      	movs	r1, #1
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff fb75 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80032da:	4603      	mov	r3, r0
 80032dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x214>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	0e9b      	lsrs	r3, r3, #26
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	e00a      	b.n	800331e <HAL_ADC_ConfigChannel+0x22a>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	429a      	cmp	r2, r3
 8003320:	d106      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2200      	movs	r2, #0
 8003328:	2101      	movs	r1, #1
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fb5e 	bl	80029ec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2102      	movs	r1, #2
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fb44 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 800333c:	4603      	mov	r3, r0
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <HAL_ADC_ConfigChannel+0x268>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2102      	movs	r1, #2
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fb39 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	0e9b      	lsrs	r3, r3, #26
 8003356:	f003 021f 	and.w	r2, r3, #31
 800335a:	e010      	b.n	800337e <HAL_ADC_ConfigChannel+0x28a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2102      	movs	r1, #2
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fb2e 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003368:	4603      	mov	r3, r0
 800336a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8003374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003386:	2b00      	cmp	r3, #0
 8003388:	d105      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x2a2>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	0e9b      	lsrs	r3, r3, #26
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	e00a      	b.n	80033ac <HAL_ADC_ConfigChannel+0x2b8>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80033a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d106      	bne.n	80033be <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2102      	movs	r1, #2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fb17 	bl	80029ec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2103      	movs	r1, #3
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fafd 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x2f6>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2103      	movs	r1, #3
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff faf2 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80033e0:	4603      	mov	r3, r0
 80033e2:	0e9b      	lsrs	r3, r3, #26
 80033e4:	f003 021f 	and.w	r2, r3, #31
 80033e8:	e010      	b.n	800340c <HAL_ADC_ConfigChannel+0x318>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2103      	movs	r1, #3
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fae7 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80033f6:	4603      	mov	r3, r0
 80033f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003414:	2b00      	cmp	r3, #0
 8003416:	d105      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x330>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	0e9b      	lsrs	r3, r3, #26
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	e00a      	b.n	800343a <HAL_ADC_ConfigChannel+0x346>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	429a      	cmp	r2, r3
 800343c:	d106      	bne.n	800344c <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2200      	movs	r2, #0
 8003444:	2103      	movs	r1, #3
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fad0 	bl	80029ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fbdb 	bl	8002c0c <LL_ADC_IsEnabled>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	f040 810c 	bne.w	8003676 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	461a      	mov	r2, r3
 800346c:	f7ff fb3a 	bl	8002ae4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4aad      	ldr	r2, [pc, #692]	; (800372c <HAL_ADC_ConfigChannel+0x638>)
 8003476:	4293      	cmp	r3, r2
 8003478:	f040 80fd 	bne.w	8003676 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x3b0>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	0e9b      	lsrs	r3, r3, #26
 8003492:	3301      	adds	r3, #1
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	2b09      	cmp	r3, #9
 800349a:	bf94      	ite	ls
 800349c:	2301      	movls	r3, #1
 800349e:	2300      	movhi	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e012      	b.n	80034ca <HAL_ADC_ConfigChannel+0x3d6>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80034b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2b09      	cmp	r3, #9
 80034c2:	bf94      	ite	ls
 80034c4:	2301      	movls	r3, #1
 80034c6:	2300      	movhi	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d064      	beq.n	8003598 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x3f6>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0e9b      	lsrs	r3, r3, #26
 80034e0:	3301      	adds	r3, #1
 80034e2:	069b      	lsls	r3, r3, #26
 80034e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e8:	e00e      	b.n	8003508 <HAL_ADC_ConfigChannel+0x414>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	069b      	lsls	r3, r3, #26
 8003504:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x434>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	0e9b      	lsrs	r3, r3, #26
 800351a:	3301      	adds	r3, #1
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	e010      	b.n	800354a <HAL_ADC_ConfigChannel+0x456>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	2101      	movs	r1, #1
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	ea42 0103 	orr.w	r1, r2, r3
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x47c>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	0e9b      	lsrs	r3, r3, #26
 8003560:	3301      	adds	r3, #1
 8003562:	f003 021f 	and.w	r2, r3, #31
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	051b      	lsls	r3, r3, #20
 800356e:	e011      	b.n	8003594 <HAL_ADC_ConfigChannel+0x4a0>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f003 021f 	and.w	r2, r3, #31
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003594:	430b      	orrs	r3, r1
 8003596:	e069      	b.n	800366c <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d107      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x4c0>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	0e9b      	lsrs	r3, r3, #26
 80035aa:	3301      	adds	r3, #1
 80035ac:	069b      	lsls	r3, r3, #26
 80035ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035b2:	e00e      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x4de>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	61fb      	str	r3, [r7, #28]
  return result;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	3301      	adds	r3, #1
 80035cc:	069b      	lsls	r3, r3, #26
 80035ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x4fe>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0e9b      	lsrs	r3, r3, #26
 80035e4:	3301      	adds	r3, #1
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	e010      	b.n	8003614 <HAL_ADC_ConfigChannel+0x520>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	617b      	str	r3, [r7, #20]
  return result;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	3301      	adds	r3, #1
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	ea42 0103 	orr.w	r1, r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x54c>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0e9b      	lsrs	r3, r3, #26
 800362a:	3301      	adds	r3, #1
 800362c:	f003 021f 	and.w	r2, r3, #31
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	3b1e      	subs	r3, #30
 8003638:	051b      	lsls	r3, r3, #20
 800363a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800363e:	e014      	b.n	800366a <HAL_ADC_ConfigChannel+0x576>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	60fb      	str	r3, [r7, #12]
  return result;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	3301      	adds	r3, #1
 8003658:	f003 021f 	and.w	r2, r3, #31
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	3b1e      	subs	r3, #30
 8003664:	051b      	lsls	r3, r3, #20
 8003666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800366a:	430b      	orrs	r3, r1
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	6892      	ldr	r2, [r2, #8]
 8003670:	4619      	mov	r1, r3
 8003672:	f7ff fa0f 	bl	8002a94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <HAL_ADC_ConfigChannel+0x63c>)
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 808c 	beq.w	800379c <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003684:	482b      	ldr	r0, [pc, #172]	; (8003734 <HAL_ADC_ConfigChannel+0x640>)
 8003686:	f7ff f96d 	bl	8002964 <LL_ADC_GetCommonPathInternalCh>
 800368a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a29      	ldr	r2, [pc, #164]	; (8003738 <HAL_ADC_ConfigChannel+0x644>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d12b      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x5fc>
 8003698:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800369c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d125      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a24      	ldr	r2, [pc, #144]	; (800373c <HAL_ADC_ConfigChannel+0x648>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_ADC_ConfigChannel+0x5c4>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a23      	ldr	r2, [pc, #140]	; (8003740 <HAL_ADC_ConfigChannel+0x64c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d16e      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036c0:	4619      	mov	r1, r3
 80036c2:	481c      	ldr	r0, [pc, #112]	; (8003734 <HAL_ADC_ConfigChannel+0x640>)
 80036c4:	f7ff f93b 	bl	800293e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80036c8:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <HAL_ADC_ConfigChannel+0x650>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <HAL_ADC_ConfigChannel+0x654>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	099a      	lsrs	r2, r3, #6
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80036e0:	e002      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f9      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ee:	e052      	b.n	8003796 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_ADC_ConfigChannel+0x658>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d12a      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x65c>
 80036fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d124      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a0c      	ldr	r2, [pc, #48]	; (800373c <HAL_ADC_ConfigChannel+0x648>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d004      	beq.n	800371a <HAL_ADC_ConfigChannel+0x626>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <HAL_ADC_ConfigChannel+0x64c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d13f      	bne.n	800379a <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800371a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800371e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003722:	4619      	mov	r1, r3
 8003724:	4803      	ldr	r0, [pc, #12]	; (8003734 <HAL_ADC_ConfigChannel+0x640>)
 8003726:	f7ff f90a 	bl	800293e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800372a:	e036      	b.n	800379a <HAL_ADC_ConfigChannel+0x6a6>
 800372c:	407f0000 	.word	0x407f0000
 8003730:	80080000 	.word	0x80080000
 8003734:	50040300 	.word	0x50040300
 8003738:	c7520000 	.word	0xc7520000
 800373c:	50040000 	.word	0x50040000
 8003740:	50040200 	.word	0x50040200
 8003744:	20000000 	.word	0x20000000
 8003748:	053e2d63 	.word	0x053e2d63
 800374c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <HAL_ADC_ConfigChannel+0x6bc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d120      	bne.n	800379c <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800375a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800375e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d11a      	bne.n	800379c <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <HAL_ADC_ConfigChannel+0x6c0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d115      	bne.n	800379c <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003770:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003778:	4619      	mov	r1, r3
 800377a:	480f      	ldr	r0, [pc, #60]	; (80037b8 <HAL_ADC_ConfigChannel+0x6c4>)
 800377c:	f7ff f8df 	bl	800293e <LL_ADC_SetCommonPathInternalCh>
 8003780:	e00c      	b.n	800379c <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003794:	e002      	b.n	800379c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800379a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3798      	adds	r7, #152	; 0x98
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	80000001 	.word	0x80000001
 80037b4:	50040000 	.word	0x50040000
 80037b8:	50040300 	.word	0x50040300

080037bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fa1f 	bl	8002c0c <LL_ADC_IsEnabled>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d146      	bne.n	8003862 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	4b24      	ldr	r3, [pc, #144]	; (800386c <ADC_Enable+0xb0>)
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	f043 0210 	orr.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	f043 0201 	orr.w	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e032      	b.n	8003864 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff f9ee 	bl	8002be4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003808:	f7ff f858 	bl	80028bc <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380e:	e021      	b.n	8003854 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f9f9 	bl	8002c0c <LL_ADC_IsEnabled>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff f9dd 	bl	8002be4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800382a:	f7ff f847 	bl	80028bc <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d90d      	bls.n	8003854 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	f043 0210 	orr.w	r2, r3, #16
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	f043 0201 	orr.w	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e007      	b.n	8003864 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d1d6      	bne.n	8003810 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	8000003f 	.word	0x8000003f

08003870 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003886:	2b00      	cmp	r3, #0
 8003888:	d14b      	bne.n	8003922 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d021      	beq.n	80038e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff f8b7 	bl	8002a1c <LL_ADC_REG_IsTriggerSourceSWStart>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d032      	beq.n	800391a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d12b      	bne.n	800391a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d11f      	bne.n	800391a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f043 0201 	orr.w	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
 80038e6:	e018      	b.n	800391a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d111      	bne.n	800391a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff fbcc 	bl	80030b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003920:	e00e      	b.n	8003940 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff fbd6 	bl	80030e0 <HAL_ADC_ErrorCallback>
}
 8003934:	e004      	b.n	8003940 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff fbb8 	bl	80030cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	f043 0204 	orr.w	r2, r3, #4
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff fba8 	bl	80030e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003990:	bf00      	nop
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <LL_ADC_IsEnabled>:
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <LL_ADC_IsEnabled+0x18>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <LL_ADC_IsEnabled+0x1a>
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_ADC_REG_IsConversionOngoing>:
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d101      	bne.n	80039d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b09f      	sub	sp, #124	; 0x7c
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e08f      	b.n	8003b22 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a47      	ldr	r2, [pc, #284]	; (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d102      	bne.n	8003a1a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003a14:	4b46      	ldr	r3, [pc, #280]	; (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	e001      	b.n	8003a1e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e072      	b.n	8003b22 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ffbd 	bl	80039be <LL_ADC_REG_IsConversionOngoing>
 8003a44:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ffb7 	bl	80039be <LL_ADC_REG_IsConversionOngoing>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d154      	bne.n	8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d151      	bne.n	8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a5c:	4b35      	ldr	r3, [pc, #212]	; (8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a5e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02c      	beq.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a7a:	035b      	lsls	r3, r3, #13
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a84:	4829      	ldr	r0, [pc, #164]	; (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003a86:	f7ff ff87 	bl	8003998 <LL_ADC_IsEnabled>
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	4828      	ldr	r0, [pc, #160]	; (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003a8e:	f7ff ff83 	bl	8003998 <LL_ADC_IsEnabled>
 8003a92:	4603      	mov	r3, r0
 8003a94:	431c      	orrs	r4, r3
 8003a96:	4828      	ldr	r0, [pc, #160]	; (8003b38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a98:	f7ff ff7e 	bl	8003998 <LL_ADC_IsEnabled>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4323      	orrs	r3, r4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d137      	bne.n	8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003aac:	f023 030f 	bic.w	r3, r3, #15
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	6811      	ldr	r1, [r2, #0]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	6892      	ldr	r2, [r2, #8]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac0:	e028      	b.n	8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003acc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ace:	4817      	ldr	r0, [pc, #92]	; (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003ad0:	f7ff ff62 	bl	8003998 <LL_ADC_IsEnabled>
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	4816      	ldr	r0, [pc, #88]	; (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003ad8:	f7ff ff5e 	bl	8003998 <LL_ADC_IsEnabled>
 8003adc:	4603      	mov	r3, r0
 8003ade:	431c      	orrs	r4, r3
 8003ae0:	4815      	ldr	r0, [pc, #84]	; (8003b38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003ae2:	f7ff ff59 	bl	8003998 <LL_ADC_IsEnabled>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	4323      	orrs	r3, r4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d112      	bne.n	8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003af6:	f023 030f 	bic.w	r3, r3, #15
 8003afa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003afc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003afe:	e009      	b.n	8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003b12:	e000      	b.n	8003b16 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	377c      	adds	r7, #124	; 0x7c
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd90      	pop	{r4, r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	50040000 	.word	0x50040000
 8003b30:	50040100 	.word	0x50040100
 8003b34:	50040300 	.word	0x50040300
 8003b38:	50040200 	.word	0x50040200

08003b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <__NVIC_SetPriorityGrouping+0x44>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b58:	4013      	ands	r3, r2
 8003b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b6e:	4a04      	ldr	r2, [pc, #16]	; (8003b80 <__NVIC_SetPriorityGrouping+0x44>)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	60d3      	str	r3, [r2, #12]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <__NVIC_GetPriorityGrouping+0x18>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	f003 0307 	and.w	r3, r3, #7
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	db0b      	blt.n	8003bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	f003 021f 	and.w	r2, r3, #31
 8003bb8:	4907      	ldr	r1, [pc, #28]	; (8003bd8 <__NVIC_EnableIRQ+0x38>)
 8003bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000e100 	.word	0xe000e100

08003bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	6039      	str	r1, [r7, #0]
 8003be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	db0a      	blt.n	8003c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	490c      	ldr	r1, [pc, #48]	; (8003c28 <__NVIC_SetPriority+0x4c>)
 8003bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	440b      	add	r3, r1
 8003c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c04:	e00a      	b.n	8003c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	4908      	ldr	r1, [pc, #32]	; (8003c2c <__NVIC_SetPriority+0x50>)
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	3b04      	subs	r3, #4
 8003c14:	0112      	lsls	r2, r2, #4
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	440b      	add	r3, r1
 8003c1a:	761a      	strb	r2, [r3, #24]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000e100 	.word	0xe000e100
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f1c3 0307 	rsb	r3, r3, #7
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	bf28      	it	cs
 8003c4e:	2304      	movcs	r3, #4
 8003c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3304      	adds	r3, #4
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d902      	bls.n	8003c60 <NVIC_EncodePriority+0x30>
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3b03      	subs	r3, #3
 8003c5e:	e000      	b.n	8003c62 <NVIC_EncodePriority+0x32>
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c64:	f04f 32ff 	mov.w	r2, #4294967295
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	401a      	ands	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c78:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c82:	43d9      	mvns	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	4313      	orrs	r3, r2
         );
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3724      	adds	r7, #36	; 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca8:	d301      	bcc.n	8003cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003caa:	2301      	movs	r3, #1
 8003cac:	e00f      	b.n	8003cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cae:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <SysTick_Config+0x40>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cb6:	210f      	movs	r1, #15
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	f7ff ff8e 	bl	8003bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <SysTick_Config+0x40>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cc6:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <SysTick_Config+0x40>)
 8003cc8:	2207      	movs	r2, #7
 8003cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	e000e010 	.word	0xe000e010

08003cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ff29 	bl	8003b3c <__NVIC_SetPriorityGrouping>
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b086      	sub	sp, #24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d04:	f7ff ff3e 	bl	8003b84 <__NVIC_GetPriorityGrouping>
 8003d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	6978      	ldr	r0, [r7, #20]
 8003d10:	f7ff ff8e 	bl	8003c30 <NVIC_EncodePriority>
 8003d14:	4602      	mov	r2, r0
 8003d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff ff5d 	bl	8003bdc <__NVIC_SetPriority>
}
 8003d22:	bf00      	nop
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	4603      	mov	r3, r0
 8003d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff31 	bl	8003ba0 <__NVIC_EnableIRQ>
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff ffa2 	bl	8003c98 <SysTick_Config>
 8003d54:	4603      	mov	r3, r0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e014      	b.n	8003d9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	791b      	ldrb	r3, [r3, #4]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d105      	bne.n	8003d86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7fe fb89 	bl	8002498 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	795b      	ldrb	r3, [r3, #5]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_DAC_Start+0x16>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e03b      	b.n	8003e30 <HAL_DAC_Start+0x8e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d118      	bne.n	8003e22 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	e00f      	b.n	8003e22 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e10:	d107      	bne.n	8003e22 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0202 	orr.w	r2, r2, #2
 8003e20:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d105      	bne.n	8003e66 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	3308      	adds	r3, #8
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e004      	b.n	8003e70 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3314      	adds	r3, #20
 8003e6e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	461a      	mov	r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b088      	sub	sp, #32
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	795b      	ldrb	r3, [r3, #5]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_DAC_ConfigChannel+0x1c>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e107      	b.n	80040b2 <HAL_DAC_ConfigChannel+0x22c>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d174      	bne.n	8003fa0 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d137      	bne.n	8003f2c <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003ebc:	f7fe fcfe 	bl	80028bc <HAL_GetTick>
 8003ec0:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ec2:	e011      	b.n	8003ee8 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ec4:	f7fe fcfa 	bl	80028bc <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d90a      	bls.n	8003ee8 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f043 0208 	orr.w	r2, r3, #8
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e0e4      	b.n	80040b2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e6      	bne.n	8003ec4 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	f7fe fcec 	bl	80028d4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	6992      	ldr	r2, [r2, #24]
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
 8003f06:	e01e      	b.n	8003f46 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003f08:	f7fe fcd8 	bl	80028bc <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d90a      	bls.n	8003f2c <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f043 0208 	orr.w	r2, r3, #8
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2203      	movs	r2, #3
 8003f26:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0c2      	b.n	80040b2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	dbe8      	blt.n	8003f08 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003f36:	2001      	movs	r0, #1
 8003f38:	f7fe fccc 	bl	80028d4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	6992      	ldr	r2, [r2, #24]
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003f56:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	ea02 0103 	and.w	r1, r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	21ff      	movs	r1, #255	; 0xff
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	ea02 0103 	and.w	r1, r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	409a      	lsls	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d11d      	bne.n	8003fe4 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	221f      	movs	r2, #31
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fea:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2207      	movs	r2, #7
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	431a      	orrs	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6819      	ldr	r1, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43da      	mvns	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	400a      	ands	r2, r1
 8004048:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	f640 72fc 	movw	r2, #4092	; 0xffc
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6819      	ldr	r1, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	22c0      	movs	r2, #192	; 0xc0
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43da      	mvns	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	400a      	ands	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e098      	b.n	8004200 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b4d      	ldr	r3, [pc, #308]	; (800420c <HAL_DMA_Init+0x150>)
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d80f      	bhi.n	80040fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	4b4b      	ldr	r3, [pc, #300]	; (8004210 <HAL_DMA_Init+0x154>)
 80040e2:	4413      	add	r3, r2
 80040e4:	4a4b      	ldr	r2, [pc, #300]	; (8004214 <HAL_DMA_Init+0x158>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	091b      	lsrs	r3, r3, #4
 80040ec:	009a      	lsls	r2, r3, #2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a48      	ldr	r2, [pc, #288]	; (8004218 <HAL_DMA_Init+0x15c>)
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40
 80040f8:	e00e      	b.n	8004118 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	4b46      	ldr	r3, [pc, #280]	; (800421c <HAL_DMA_Init+0x160>)
 8004102:	4413      	add	r3, r2
 8004104:	4a43      	ldr	r2, [pc, #268]	; (8004214 <HAL_DMA_Init+0x158>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	091b      	lsrs	r3, r3, #4
 800410c:	009a      	lsls	r2, r3, #2
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a42      	ldr	r2, [pc, #264]	; (8004220 <HAL_DMA_Init+0x164>)
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800413c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004172:	d039      	beq.n	80041e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	4a27      	ldr	r2, [pc, #156]	; (8004218 <HAL_DMA_Init+0x15c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d11a      	bne.n	80041b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800417e:	4b29      	ldr	r3, [pc, #164]	; (8004224 <HAL_DMA_Init+0x168>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f003 031c 	and.w	r3, r3, #28
 800418a:	210f      	movs	r1, #15
 800418c:	fa01 f303 	lsl.w	r3, r1, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	4924      	ldr	r1, [pc, #144]	; (8004224 <HAL_DMA_Init+0x168>)
 8004194:	4013      	ands	r3, r2
 8004196:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004198:	4b22      	ldr	r3, [pc, #136]	; (8004224 <HAL_DMA_Init+0x168>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6859      	ldr	r1, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	f003 031c 	and.w	r3, r3, #28
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	491d      	ldr	r1, [pc, #116]	; (8004224 <HAL_DMA_Init+0x168>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
 80041b2:	e019      	b.n	80041e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041b4:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <HAL_DMA_Init+0x16c>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	f003 031c 	and.w	r3, r3, #28
 80041c0:	210f      	movs	r1, #15
 80041c2:	fa01 f303 	lsl.w	r3, r1, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	4917      	ldr	r1, [pc, #92]	; (8004228 <HAL_DMA_Init+0x16c>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <HAL_DMA_Init+0x16c>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6859      	ldr	r1, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f003 031c 	and.w	r3, r3, #28
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	4911      	ldr	r1, [pc, #68]	; (8004228 <HAL_DMA_Init+0x16c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	40020407 	.word	0x40020407
 8004210:	bffdfff8 	.word	0xbffdfff8
 8004214:	cccccccd 	.word	0xcccccccd
 8004218:	40020000 	.word	0x40020000
 800421c:	bffdfbf8 	.word	0xbffdfbf8
 8004220:	40020400 	.word	0x40020400
 8004224:	400200a8 	.word	0x400200a8
 8004228:	400204a8 	.word	0x400204a8

0800422c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_DMA_Start_IT+0x20>
 8004248:	2302      	movs	r3, #2
 800424a:	e04b      	b.n	80042e4 <HAL_DMA_Start_IT+0xb8>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d13a      	bne.n	80042d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f8e0 	bl	800444a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 020e 	orr.w	r2, r2, #14
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e00f      	b.n	80042c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0204 	bic.w	r2, r2, #4
 80042b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 020a 	orr.w	r2, r2, #10
 80042c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e005      	b.n	80042e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80042de:	2302      	movs	r3, #2
 80042e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004308:	f003 031c 	and.w	r3, r3, #28
 800430c:	2204      	movs	r2, #4
 800430e:	409a      	lsls	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d026      	beq.n	8004366 <HAL_DMA_IRQHandler+0x7a>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d021      	beq.n	8004366 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d107      	bne.n	8004340 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0204 	bic.w	r2, r2, #4
 800433e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004344:	f003 021c 	and.w	r2, r3, #28
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2104      	movs	r1, #4
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	2b00      	cmp	r3, #0
 800435a:	d071      	beq.n	8004440 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004364:	e06c      	b.n	8004440 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f003 031c 	and.w	r3, r3, #28
 800436e:	2202      	movs	r2, #2
 8004370:	409a      	lsls	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d02e      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xec>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d029      	beq.n	80043d8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 020a 	bic.w	r2, r2, #10
 80043a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f003 021c 	and.w	r2, r3, #28
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2102      	movs	r1, #2
 80043b8:	fa01 f202 	lsl.w	r2, r1, r2
 80043bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d038      	beq.n	8004440 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80043d6:	e033      	b.n	8004440 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	f003 031c 	and.w	r3, r3, #28
 80043e0:	2208      	movs	r2, #8
 80043e2:	409a      	lsls	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02a      	beq.n	8004442 <HAL_DMA_IRQHandler+0x156>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d025      	beq.n	8004442 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 020e 	bic.w	r2, r2, #14
 8004404:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f003 021c 	and.w	r2, r3, #28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004440:	bf00      	nop
 8004442:	bf00      	nop
}
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	f003 021c 	and.w	r2, r3, #28
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f202 	lsl.w	r2, r1, r2
 800446a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b10      	cmp	r3, #16
 800447a:	d108      	bne.n	800448e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800448c:	e007      	b.n	800449e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	60da      	str	r2, [r3, #12]
}
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ba:	e17f      	b.n	80047bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2101      	movs	r1, #1
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8171 	beq.w	80047b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d00b      	beq.n	80044f4 <HAL_GPIO_Init+0x48>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d007      	beq.n	80044f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044e8:	2b11      	cmp	r3, #17
 80044ea:	d003      	beq.n	80044f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b12      	cmp	r3, #18
 80044f2:	d130      	bne.n	8004556 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	2203      	movs	r2, #3
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4013      	ands	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800452a:	2201      	movs	r2, #1
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4013      	ands	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f003 0201 	and.w	r2, r3, #1
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b03      	cmp	r3, #3
 8004560:	d118      	bne.n	8004594 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004568:	2201      	movs	r2, #1
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	08db      	lsrs	r3, r3, #3
 800457e:	f003 0201 	and.w	r2, r3, #1
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	2203      	movs	r2, #3
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x128>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b12      	cmp	r3, #18
 80045d2:	d123      	bne.n	800461c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	08da      	lsrs	r2, r3, #3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3208      	adds	r2, #8
 80045dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	220f      	movs	r2, #15
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	08da      	lsrs	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3208      	adds	r2, #8
 8004616:	6939      	ldr	r1, [r7, #16]
 8004618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2203      	movs	r2, #3
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 0203 	and.w	r2, r3, #3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80ac 	beq.w	80047b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800465e:	4b5e      	ldr	r3, [pc, #376]	; (80047d8 <HAL_GPIO_Init+0x32c>)
 8004660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004662:	4a5d      	ldr	r2, [pc, #372]	; (80047d8 <HAL_GPIO_Init+0x32c>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6613      	str	r3, [r2, #96]	; 0x60
 800466a:	4b5b      	ldr	r3, [pc, #364]	; (80047d8 <HAL_GPIO_Init+0x32c>)
 800466c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004676:	4a59      	ldr	r2, [pc, #356]	; (80047dc <HAL_GPIO_Init+0x330>)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	089b      	lsrs	r3, r3, #2
 800467c:	3302      	adds	r3, #2
 800467e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004682:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	220f      	movs	r2, #15
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4013      	ands	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046a0:	d025      	beq.n	80046ee <HAL_GPIO_Init+0x242>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a4e      	ldr	r2, [pc, #312]	; (80047e0 <HAL_GPIO_Init+0x334>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d01f      	beq.n	80046ea <HAL_GPIO_Init+0x23e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a4d      	ldr	r2, [pc, #308]	; (80047e4 <HAL_GPIO_Init+0x338>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d019      	beq.n	80046e6 <HAL_GPIO_Init+0x23a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a4c      	ldr	r2, [pc, #304]	; (80047e8 <HAL_GPIO_Init+0x33c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <HAL_GPIO_Init+0x236>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a4b      	ldr	r2, [pc, #300]	; (80047ec <HAL_GPIO_Init+0x340>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00d      	beq.n	80046de <HAL_GPIO_Init+0x232>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a4a      	ldr	r2, [pc, #296]	; (80047f0 <HAL_GPIO_Init+0x344>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d007      	beq.n	80046da <HAL_GPIO_Init+0x22e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a49      	ldr	r2, [pc, #292]	; (80047f4 <HAL_GPIO_Init+0x348>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <HAL_GPIO_Init+0x22a>
 80046d2:	2306      	movs	r3, #6
 80046d4:	e00c      	b.n	80046f0 <HAL_GPIO_Init+0x244>
 80046d6:	2307      	movs	r3, #7
 80046d8:	e00a      	b.n	80046f0 <HAL_GPIO_Init+0x244>
 80046da:	2305      	movs	r3, #5
 80046dc:	e008      	b.n	80046f0 <HAL_GPIO_Init+0x244>
 80046de:	2304      	movs	r3, #4
 80046e0:	e006      	b.n	80046f0 <HAL_GPIO_Init+0x244>
 80046e2:	2303      	movs	r3, #3
 80046e4:	e004      	b.n	80046f0 <HAL_GPIO_Init+0x244>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e002      	b.n	80046f0 <HAL_GPIO_Init+0x244>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_GPIO_Init+0x244>
 80046ee:	2300      	movs	r3, #0
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	f002 0203 	and.w	r2, r2, #3
 80046f6:	0092      	lsls	r2, r2, #2
 80046f8:	4093      	lsls	r3, r2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004700:	4936      	ldr	r1, [pc, #216]	; (80047dc <HAL_GPIO_Init+0x330>)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	089b      	lsrs	r3, r3, #2
 8004706:	3302      	adds	r3, #2
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800470e:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <HAL_GPIO_Init+0x34c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	43db      	mvns	r3, r3
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4013      	ands	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004732:	4a31      	ldr	r2, [pc, #196]	; (80047f8 <HAL_GPIO_Init+0x34c>)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004738:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <HAL_GPIO_Init+0x34c>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	43db      	mvns	r3, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800475c:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <HAL_GPIO_Init+0x34c>)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004762:	4b25      	ldr	r3, [pc, #148]	; (80047f8 <HAL_GPIO_Init+0x34c>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	43db      	mvns	r3, r3
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4013      	ands	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004786:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <HAL_GPIO_Init+0x34c>)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <HAL_GPIO_Init+0x34c>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	43db      	mvns	r3, r3
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047b0:	4a11      	ldr	r2, [pc, #68]	; (80047f8 <HAL_GPIO_Init+0x34c>)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	3301      	adds	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	fa22 f303 	lsr.w	r3, r2, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f47f ae78 	bne.w	80044bc <HAL_GPIO_Init+0x10>
  }
}
 80047cc:	bf00      	nop
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40010000 	.word	0x40010000
 80047e0:	48000400 	.word	0x48000400
 80047e4:	48000800 	.word	0x48000800
 80047e8:	48000c00 	.word	0x48000c00
 80047ec:	48001000 	.word	0x48001000
 80047f0:	48001400 	.word	0x48001400
 80047f4:	48001800 	.word	0x48001800
 80047f8:	40010400 	.word	0x40010400

080047fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
 8004808:	4613      	mov	r3, r2
 800480a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800480c:	787b      	ldrb	r3, [r7, #1]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004818:	e002      	b.n	8004820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <HAL_PWREx_GetVoltageRange+0x18>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004838:	4618      	mov	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40007000 	.word	0x40007000

08004848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004856:	d130      	bne.n	80048ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004858:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004864:	d038      	beq.n	80048d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004866:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800486e:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2232      	movs	r2, #50	; 0x32
 800487c:	fb02 f303 	mul.w	r3, r2, r3
 8004880:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	0c9b      	lsrs	r3, r3, #18
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800488c:	e002      	b.n	8004894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3b01      	subs	r3, #1
 8004892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004894:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a0:	d102      	bne.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f2      	bne.n	800488e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048a8:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b4:	d110      	bne.n	80048d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e00f      	b.n	80048da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c6:	d007      	beq.n	80048d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048c8:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048d0:	4a05      	ldr	r2, [pc, #20]	; (80048e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40007000 	.word	0x40007000
 80048ec:	20000000 	.word	0x20000000
 80048f0:	431bde83 	.word	0x431bde83

080048f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e3d4      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004906:	4ba1      	ldr	r3, [pc, #644]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004910:	4b9e      	ldr	r3, [pc, #632]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80e4 	beq.w	8004af0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <HAL_RCC_OscConfig+0x4a>
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b0c      	cmp	r3, #12
 8004932:	f040 808b 	bne.w	8004a4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b01      	cmp	r3, #1
 800493a:	f040 8087 	bne.w	8004a4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800493e:	4b93      	ldr	r3, [pc, #588]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_RCC_OscConfig+0x62>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e3ac      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1a      	ldr	r2, [r3, #32]
 800495a:	4b8c      	ldr	r3, [pc, #560]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <HAL_RCC_OscConfig+0x7c>
 8004966:	4b89      	ldr	r3, [pc, #548]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800496e:	e005      	b.n	800497c <HAL_RCC_OscConfig+0x88>
 8004970:	4b86      	ldr	r3, [pc, #536]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800497c:	4293      	cmp	r3, r2
 800497e:	d223      	bcs.n	80049c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fd3f 	bl	8005408 <RCC_SetFlashLatencyFromMSIRange>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e38d      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004994:	4b7d      	ldr	r3, [pc, #500]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a7c      	ldr	r2, [pc, #496]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 800499a:	f043 0308 	orr.w	r3, r3, #8
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b7a      	ldr	r3, [pc, #488]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	4977      	ldr	r1, [pc, #476]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049b2:	4b76      	ldr	r3, [pc, #472]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	021b      	lsls	r3, r3, #8
 80049c0:	4972      	ldr	r1, [pc, #456]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	604b      	str	r3, [r1, #4]
 80049c6:	e025      	b.n	8004a14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049c8:	4b70      	ldr	r3, [pc, #448]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a6f      	ldr	r2, [pc, #444]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 80049ce:	f043 0308 	orr.w	r3, r3, #8
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b6d      	ldr	r3, [pc, #436]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	496a      	ldr	r1, [pc, #424]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049e6:	4b69      	ldr	r3, [pc, #420]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	4965      	ldr	r1, [pc, #404]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fcff 	bl	8005408 <RCC_SetFlashLatencyFromMSIRange>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e34d      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a14:	f000 fc36 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 8004a18:	4601      	mov	r1, r0
 8004a1a:	4b5c      	ldr	r3, [pc, #368]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	4a5a      	ldr	r2, [pc, #360]	; (8004b90 <HAL_RCC_OscConfig+0x29c>)
 8004a26:	5cd3      	ldrb	r3, [r2, r3]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	fa21 f303 	lsr.w	r3, r1, r3
 8004a30:	4a58      	ldr	r2, [pc, #352]	; (8004b94 <HAL_RCC_OscConfig+0x2a0>)
 8004a32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a34:	4b58      	ldr	r3, [pc, #352]	; (8004b98 <HAL_RCC_OscConfig+0x2a4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fd fef3 	bl	8002824 <HAL_InitTick>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d052      	beq.n	8004aee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	e331      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d032      	beq.n	8004aba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a54:	4b4d      	ldr	r3, [pc, #308]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a4c      	ldr	r2, [pc, #304]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a60:	f7fd ff2c 	bl	80028bc <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a68:	f7fd ff28 	bl	80028bc <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e31a      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a7a:	4b44      	ldr	r3, [pc, #272]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a86:	4b41      	ldr	r3, [pc, #260]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a40      	ldr	r2, [pc, #256]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004a8c:	f043 0308 	orr.w	r3, r3, #8
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	4b3e      	ldr	r3, [pc, #248]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	493b      	ldr	r1, [pc, #236]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aa4:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	4936      	ldr	r1, [pc, #216]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
 8004ab8:	e01a      	b.n	8004af0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004aba:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a33      	ldr	r2, [pc, #204]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ac6:	f7fd fef9 	bl	80028bc <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ace:	f7fd fef5 	bl	80028bc <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e2e7      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ae0:	4b2a      	ldr	r3, [pc, #168]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f0      	bne.n	8004ace <HAL_RCC_OscConfig+0x1da>
 8004aec:	e000      	b.n	8004af0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004aee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d074      	beq.n	8004be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d005      	beq.n	8004b0e <HAL_RCC_OscConfig+0x21a>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d10e      	bne.n	8004b26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d10b      	bne.n	8004b26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d064      	beq.n	8004be4 <HAL_RCC_OscConfig+0x2f0>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d160      	bne.n	8004be4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e2c4      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2e:	d106      	bne.n	8004b3e <HAL_RCC_OscConfig+0x24a>
 8004b30:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e01d      	b.n	8004b7a <HAL_RCC_OscConfig+0x286>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b46:	d10c      	bne.n	8004b62 <HAL_RCC_OscConfig+0x26e>
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a0c      	ldr	r2, [pc, #48]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	e00b      	b.n	8004b7a <HAL_RCC_OscConfig+0x286>
 8004b62:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a06      	ldr	r2, [pc, #24]	; (8004b8c <HAL_RCC_OscConfig+0x298>)
 8004b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01c      	beq.n	8004bbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b82:	f7fd fe9b 	bl	80028bc <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b88:	e011      	b.n	8004bae <HAL_RCC_OscConfig+0x2ba>
 8004b8a:	bf00      	nop
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	08007a70 	.word	0x08007a70
 8004b94:	20000000 	.word	0x20000000
 8004b98:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fd fe8e 	bl	80028bc <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	; 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e280      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bae:	4baf      	ldr	r3, [pc, #700]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x2a8>
 8004bba:	e014      	b.n	8004be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fd fe7e 	bl	80028bc <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc4:	f7fd fe7a 	bl	80028bc <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e26c      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bd6:	4ba5      	ldr	r3, [pc, #660]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x2d0>
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d060      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_OscConfig+0x310>
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	d119      	bne.n	8004c32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d116      	bne.n	8004c32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c04:	4b99      	ldr	r3, [pc, #612]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_OscConfig+0x328>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e249      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1c:	4b93      	ldr	r3, [pc, #588]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	061b      	lsls	r3, r3, #24
 8004c2a:	4990      	ldr	r1, [pc, #576]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c30:	e040      	b.n	8004cb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d023      	beq.n	8004c82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c3a:	4b8c      	ldr	r3, [pc, #560]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a8b      	ldr	r2, [pc, #556]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fd fe39 	bl	80028bc <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4e:	f7fd fe35 	bl	80028bc <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e227      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c60:	4b82      	ldr	r3, [pc, #520]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	4b7f      	ldr	r3, [pc, #508]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	061b      	lsls	r3, r3, #24
 8004c7a:	497c      	ldr	r1, [pc, #496]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
 8004c80:	e018      	b.n	8004cb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c82:	4b7a      	ldr	r3, [pc, #488]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a79      	ldr	r2, [pc, #484]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fd fe15 	bl	80028bc <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c96:	f7fd fe11 	bl	80028bc <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e203      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca8:	4b70      	ldr	r3, [pc, #448]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d03c      	beq.n	8004d3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01c      	beq.n	8004d02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc8:	4b68      	ldr	r3, [pc, #416]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cce:	4a67      	ldr	r2, [pc, #412]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fd fdf0 	bl	80028bc <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce0:	f7fd fdec 	bl	80028bc <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e1de      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cf2:	4b5e      	ldr	r3, [pc, #376]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ef      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x3ec>
 8004d00:	e01b      	b.n	8004d3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d02:	4b5a      	ldr	r3, [pc, #360]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d08:	4a58      	ldr	r2, [pc, #352]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d12:	f7fd fdd3 	bl	80028bc <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1a:	f7fd fdcf 	bl	80028bc <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e1c1      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d2c:	4b4f      	ldr	r3, [pc, #316]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1ef      	bne.n	8004d1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 80a6 	beq.w	8004e94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d4c:	4b47      	ldr	r3, [pc, #284]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10d      	bne.n	8004d74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d58:	4b44      	ldr	r3, [pc, #272]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5c:	4a43      	ldr	r2, [pc, #268]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d62:	6593      	str	r3, [r2, #88]	; 0x58
 8004d64:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d70:	2301      	movs	r3, #1
 8004d72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d74:	4b3e      	ldr	r3, [pc, #248]	; (8004e70 <HAL_RCC_OscConfig+0x57c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d118      	bne.n	8004db2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d80:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <HAL_RCC_OscConfig+0x57c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a3a      	ldr	r2, [pc, #232]	; (8004e70 <HAL_RCC_OscConfig+0x57c>)
 8004d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8c:	f7fd fd96 	bl	80028bc <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d94:	f7fd fd92 	bl	80028bc <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e184      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da6:	4b32      	ldr	r3, [pc, #200]	; (8004e70 <HAL_RCC_OscConfig+0x57c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d108      	bne.n	8004dcc <HAL_RCC_OscConfig+0x4d8>
 8004dba:	4b2c      	ldr	r3, [pc, #176]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc0:	4a2a      	ldr	r2, [pc, #168]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dca:	e024      	b.n	8004e16 <HAL_RCC_OscConfig+0x522>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b05      	cmp	r3, #5
 8004dd2:	d110      	bne.n	8004df6 <HAL_RCC_OscConfig+0x502>
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	4a24      	ldr	r2, [pc, #144]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004ddc:	f043 0304 	orr.w	r3, r3, #4
 8004de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004de4:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	4a20      	ldr	r2, [pc, #128]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004df4:	e00f      	b.n	8004e16 <HAL_RCC_OscConfig+0x522>
 8004df6:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfc:	4a1b      	ldr	r2, [pc, #108]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e06:	4b19      	ldr	r3, [pc, #100]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0c:	4a17      	ldr	r2, [pc, #92]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004e0e:	f023 0304 	bic.w	r3, r3, #4
 8004e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fd fd4d 	bl	80028bc <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7fd fd49 	bl	80028bc <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e139      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCC_OscConfig+0x578>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0ed      	beq.n	8004e26 <HAL_RCC_OscConfig+0x532>
 8004e4a:	e01a      	b.n	8004e82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4c:	f7fd fd36 	bl	80028bc <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e52:	e00f      	b.n	8004e74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e54:	f7fd fd32 	bl	80028bc <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d906      	bls.n	8004e74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e122      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e74:	4b90      	ldr	r3, [pc, #576]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e8      	bne.n	8004e54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e82:	7ffb      	ldrb	r3, [r7, #31]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b8b      	ldr	r3, [pc, #556]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	4a8a      	ldr	r2, [pc, #552]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 8108 	beq.w	80050ae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	f040 80d0 	bne.w	8005048 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ea8:	4b83      	ldr	r3, [pc, #524]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0203 	and.w	r2, r3, #3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d130      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d127      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d11f      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ee8:	2a07      	cmp	r2, #7
 8004eea:	bf14      	ite	ne
 8004eec:	2201      	movne	r2, #1
 8004eee:	2200      	moveq	r2, #0
 8004ef0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d113      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	3b01      	subs	r3, #1
 8004f04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d109      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	3b01      	subs	r3, #1
 8004f18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d06e      	beq.n	8004ffc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	d069      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f24:	4b64      	ldr	r3, [pc, #400]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d105      	bne.n	8004f3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f30:	4b61      	ldr	r3, [pc, #388]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0b7      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f40:	4b5d      	ldr	r3, [pc, #372]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5c      	ldr	r2, [pc, #368]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f4c:	f7fd fcb6 	bl	80028bc <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fd fcb2 	bl	80028bc <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e0a4      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f66:	4b54      	ldr	r3, [pc, #336]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f72:	4b51      	ldr	r3, [pc, #324]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	4b51      	ldr	r3, [pc, #324]	; (80050bc <HAL_RCC_OscConfig+0x7c8>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f82:	3a01      	subs	r2, #1
 8004f84:	0112      	lsls	r2, r2, #4
 8004f86:	4311      	orrs	r1, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f8c:	0212      	lsls	r2, r2, #8
 8004f8e:	4311      	orrs	r1, r2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f94:	0852      	lsrs	r2, r2, #1
 8004f96:	3a01      	subs	r2, #1
 8004f98:	0552      	lsls	r2, r2, #21
 8004f9a:	4311      	orrs	r1, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fa0:	0852      	lsrs	r2, r2, #1
 8004fa2:	3a01      	subs	r2, #1
 8004fa4:	0652      	lsls	r2, r2, #25
 8004fa6:	4311      	orrs	r1, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fac:	0912      	lsrs	r2, r2, #4
 8004fae:	0452      	lsls	r2, r2, #17
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	4941      	ldr	r1, [pc, #260]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fb8:	4b3f      	ldr	r3, [pc, #252]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a3e      	ldr	r2, [pc, #248]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fc4:	4b3c      	ldr	r3, [pc, #240]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4a3b      	ldr	r2, [pc, #236]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fd0:	f7fd fc74 	bl	80028bc <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fd fc70 	bl	80028bc <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e062      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fea:	4b33      	ldr	r3, [pc, #204]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0f0      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ff6:	e05a      	b.n	80050ae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e059      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ffc:	4b2e      	ldr	r3, [pc, #184]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d152      	bne.n	80050ae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005008:	4b2b      	ldr	r3, [pc, #172]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2a      	ldr	r2, [pc, #168]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 800500e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005014:	4b28      	ldr	r3, [pc, #160]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 800501a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800501e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005020:	f7fd fc4c 	bl	80028bc <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fd fc48 	bl	80028bc <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e03a      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800503a:	4b1f      	ldr	r3, [pc, #124]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x734>
 8005046:	e032      	b.n	80050ae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b0c      	cmp	r3, #12
 800504c:	d02d      	beq.n	80050aa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504e:	4b1a      	ldr	r3, [pc, #104]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8005054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005058:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800505a:	4b17      	ldr	r3, [pc, #92]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d105      	bne.n	8005072 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005066:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	4a13      	ldr	r2, [pc, #76]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 800506c:	f023 0303 	bic.w	r3, r3, #3
 8005070:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005072:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	4a10      	ldr	r2, [pc, #64]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 8005078:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800507c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005080:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005082:	f7fd fc1b 	bl	80028bc <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508a:	f7fd fc17 	bl	80028bc <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e009      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_RCC_OscConfig+0x7c4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <HAL_RCC_OscConfig+0x796>
 80050a8:	e001      	b.n	80050ae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40021000 	.word	0x40021000
 80050bc:	f99d808c 	.word	0xf99d808c

080050c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e0c8      	b.n	8005266 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050d4:	4b66      	ldr	r3, [pc, #408]	; (8005270 <HAL_RCC_ClockConfig+0x1b0>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d910      	bls.n	8005104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e2:	4b63      	ldr	r3, [pc, #396]	; (8005270 <HAL_RCC_ClockConfig+0x1b0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 0207 	bic.w	r2, r3, #7
 80050ea:	4961      	ldr	r1, [pc, #388]	; (8005270 <HAL_RCC_ClockConfig+0x1b0>)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	4b5f      	ldr	r3, [pc, #380]	; (8005270 <HAL_RCC_ClockConfig+0x1b0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e0b0      	b.n	8005266 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d04c      	beq.n	80051aa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d107      	bne.n	8005128 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005118:	4b56      	ldr	r3, [pc, #344]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d121      	bne.n	8005168 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e09e      	b.n	8005266 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d107      	bne.n	8005140 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005130:	4b50      	ldr	r3, [pc, #320]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d115      	bne.n	8005168 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e092      	b.n	8005266 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d107      	bne.n	8005158 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005148:	4b4a      	ldr	r3, [pc, #296]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d109      	bne.n	8005168 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e086      	b.n	8005266 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005158:	4b46      	ldr	r3, [pc, #280]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e07e      	b.n	8005266 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005168:	4b42      	ldr	r3, [pc, #264]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f023 0203 	bic.w	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	493f      	ldr	r1, [pc, #252]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800517a:	f7fd fb9f 	bl	80028bc <HAL_GetTick>
 800517e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005180:	e00a      	b.n	8005198 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005182:	f7fd fb9b 	bl	80028bc <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005190:	4293      	cmp	r3, r2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e066      	b.n	8005266 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005198:	4b36      	ldr	r3, [pc, #216]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 020c 	and.w	r2, r3, #12
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d1eb      	bne.n	8005182 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d008      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b6:	4b2f      	ldr	r3, [pc, #188]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	492c      	ldr	r1, [pc, #176]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051c8:	4b29      	ldr	r3, [pc, #164]	; (8005270 <HAL_RCC_ClockConfig+0x1b0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d210      	bcs.n	80051f8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d6:	4b26      	ldr	r3, [pc, #152]	; (8005270 <HAL_RCC_ClockConfig+0x1b0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 0207 	bic.w	r2, r3, #7
 80051de:	4924      	ldr	r1, [pc, #144]	; (8005270 <HAL_RCC_ClockConfig+0x1b0>)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e6:	4b22      	ldr	r3, [pc, #136]	; (8005270 <HAL_RCC_ClockConfig+0x1b0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d001      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e036      	b.n	8005266 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005204:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4918      	ldr	r1, [pc, #96]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 8005212:	4313      	orrs	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005222:	4b14      	ldr	r3, [pc, #80]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4910      	ldr	r1, [pc, #64]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 8005232:	4313      	orrs	r3, r2
 8005234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005236:	f000 f825 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 800523a:	4601      	mov	r1, r0
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <HAL_RCC_ClockConfig+0x1b4>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	4a0c      	ldr	r2, [pc, #48]	; (8005278 <HAL_RCC_ClockConfig+0x1b8>)
 8005248:	5cd3      	ldrb	r3, [r2, r3]
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	fa21 f303 	lsr.w	r3, r1, r3
 8005252:	4a0a      	ldr	r2, [pc, #40]	; (800527c <HAL_RCC_ClockConfig+0x1bc>)
 8005254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005256:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <HAL_RCC_ClockConfig+0x1c0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7fd fae2 	bl	8002824 <HAL_InitTick>
 8005260:	4603      	mov	r3, r0
 8005262:	72fb      	strb	r3, [r7, #11]

  return status;
 8005264:	7afb      	ldrb	r3, [r7, #11]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40022000 	.word	0x40022000
 8005274:	40021000 	.word	0x40021000
 8005278:	08007a70 	.word	0x08007a70
 800527c:	20000000 	.word	0x20000000
 8005280:	20000004 	.word	0x20000004

08005284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005284:	b480      	push	{r7}
 8005286:	b089      	sub	sp, #36	; 0x24
 8005288:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	2300      	movs	r3, #0
 8005290:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005292:	4b3d      	ldr	r3, [pc, #244]	; (8005388 <HAL_RCC_GetSysClockFreq+0x104>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 030c 	and.w	r3, r3, #12
 800529a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800529c:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <HAL_RCC_GetSysClockFreq+0x104>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x34>
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b0c      	cmp	r3, #12
 80052b0:	d121      	bne.n	80052f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d11e      	bne.n	80052f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052b8:	4b33      	ldr	r3, [pc, #204]	; (8005388 <HAL_RCC_GetSysClockFreq+0x104>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d107      	bne.n	80052d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052c4:	4b30      	ldr	r3, [pc, #192]	; (8005388 <HAL_RCC_GetSysClockFreq+0x104>)
 80052c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	e005      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052d4:	4b2c      	ldr	r3, [pc, #176]	; (8005388 <HAL_RCC_GetSysClockFreq+0x104>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052e0:	4a2a      	ldr	r2, [pc, #168]	; (800538c <HAL_RCC_GetSysClockFreq+0x108>)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10d      	bne.n	800530c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052f4:	e00a      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d102      	bne.n	8005302 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052fc:	4b24      	ldr	r3, [pc, #144]	; (8005390 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	e004      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d101      	bne.n	800530c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005308:	4b22      	ldr	r3, [pc, #136]	; (8005394 <HAL_RCC_GetSysClockFreq+0x110>)
 800530a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b0c      	cmp	r3, #12
 8005310:	d133      	bne.n	800537a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005312:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <HAL_RCC_GetSysClockFreq+0x104>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d002      	beq.n	8005328 <HAL_RCC_GetSysClockFreq+0xa4>
 8005322:	2b03      	cmp	r3, #3
 8005324:	d003      	beq.n	800532e <HAL_RCC_GetSysClockFreq+0xaa>
 8005326:	e005      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005328:	4b19      	ldr	r3, [pc, #100]	; (8005390 <HAL_RCC_GetSysClockFreq+0x10c>)
 800532a:	617b      	str	r3, [r7, #20]
      break;
 800532c:	e005      	b.n	800533a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800532e:	4b19      	ldr	r3, [pc, #100]	; (8005394 <HAL_RCC_GetSysClockFreq+0x110>)
 8005330:	617b      	str	r3, [r7, #20]
      break;
 8005332:	e002      	b.n	800533a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	617b      	str	r3, [r7, #20]
      break;
 8005338:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <HAL_RCC_GetSysClockFreq+0x104>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	091b      	lsrs	r3, r3, #4
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	3301      	adds	r3, #1
 8005346:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005348:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <HAL_RCC_GetSysClockFreq+0x104>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	0a1b      	lsrs	r3, r3, #8
 800534e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	fb02 f203 	mul.w	r2, r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <HAL_RCC_GetSysClockFreq+0x104>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	0e5b      	lsrs	r3, r3, #25
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	3301      	adds	r3, #1
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800537a:	69bb      	ldr	r3, [r7, #24]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3724      	adds	r7, #36	; 0x24
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40021000 	.word	0x40021000
 800538c:	08007a88 	.word	0x08007a88
 8005390:	00f42400 	.word	0x00f42400
 8005394:	007a1200 	.word	0x007a1200

08005398 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800539c:	4b03      	ldr	r3, [pc, #12]	; (80053ac <HAL_RCC_GetHCLKFreq+0x14>)
 800539e:	681b      	ldr	r3, [r3, #0]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	20000000 	.word	0x20000000

080053b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053b4:	f7ff fff0 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 80053b8:	4601      	mov	r1, r0
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	0a1b      	lsrs	r3, r3, #8
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	4a04      	ldr	r2, [pc, #16]	; (80053d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053c6:	5cd3      	ldrb	r3, [r2, r3]
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40021000 	.word	0x40021000
 80053d8:	08007a80 	.word	0x08007a80

080053dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053e0:	f7ff ffda 	bl	8005398 <HAL_RCC_GetHCLKFreq>
 80053e4:	4601      	mov	r1, r0
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	0adb      	lsrs	r3, r3, #11
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053f2:	5cd3      	ldrb	r3, [r2, r3]
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40021000 	.word	0x40021000
 8005404:	08007a80 	.word	0x08007a80

08005408 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005410:	2300      	movs	r3, #0
 8005412:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005414:	4b2a      	ldr	r3, [pc, #168]	; (80054c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005420:	f7ff fa04 	bl	800482c <HAL_PWREx_GetVoltageRange>
 8005424:	6178      	str	r0, [r7, #20]
 8005426:	e014      	b.n	8005452 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005428:	4b25      	ldr	r3, [pc, #148]	; (80054c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542c:	4a24      	ldr	r2, [pc, #144]	; (80054c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800542e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005432:	6593      	str	r3, [r2, #88]	; 0x58
 8005434:	4b22      	ldr	r3, [pc, #136]	; (80054c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005440:	f7ff f9f4 	bl	800482c <HAL_PWREx_GetVoltageRange>
 8005444:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005446:	4b1e      	ldr	r3, [pc, #120]	; (80054c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544a:	4a1d      	ldr	r2, [pc, #116]	; (80054c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800544c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005450:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005458:	d10b      	bne.n	8005472 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b80      	cmp	r3, #128	; 0x80
 800545e:	d919      	bls.n	8005494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2ba0      	cmp	r3, #160	; 0xa0
 8005464:	d902      	bls.n	800546c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005466:	2302      	movs	r3, #2
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	e013      	b.n	8005494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800546c:	2301      	movs	r3, #1
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	e010      	b.n	8005494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b80      	cmp	r3, #128	; 0x80
 8005476:	d902      	bls.n	800547e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005478:	2303      	movs	r3, #3
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	e00a      	b.n	8005494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d102      	bne.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005484:	2302      	movs	r3, #2
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	e004      	b.n	8005494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b70      	cmp	r3, #112	; 0x70
 800548e:	d101      	bne.n	8005494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005490:	2301      	movs	r3, #1
 8005492:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005494:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f023 0207 	bic.w	r2, r3, #7
 800549c:	4909      	ldr	r1, [pc, #36]	; (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054a4:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d001      	beq.n	80054b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000
 80054c4:	40022000 	.word	0x40022000

080054c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054d0:	2300      	movs	r3, #0
 80054d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054d4:	2300      	movs	r3, #0
 80054d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d03f      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ec:	d01c      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80054ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f2:	d802      	bhi.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00e      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80054f8:	e01f      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80054fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054fe:	d003      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005500:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005504:	d01c      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005506:	e018      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005508:	4b85      	ldr	r3, [pc, #532]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a84      	ldr	r2, [pc, #528]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800550e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005512:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005514:	e015      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3304      	adds	r3, #4
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fab9 	bl	8005a94 <RCCEx_PLLSAI1_Config>
 8005522:	4603      	mov	r3, r0
 8005524:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005526:	e00c      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3320      	adds	r3, #32
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fba0 	bl	8005c74 <RCCEx_PLLSAI2_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005538:	e003      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	74fb      	strb	r3, [r7, #19]
      break;
 800553e:	e000      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005542:	7cfb      	ldrb	r3, [r7, #19]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10b      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005548:	4b75      	ldr	r3, [pc, #468]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005556:	4972      	ldr	r1, [pc, #456]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800555e:	e001      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d03f      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005578:	d01c      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800557a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800557e:	d802      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00e      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005584:	e01f      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005586:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800558a:	d003      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800558c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005590:	d01c      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005592:	e018      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005594:	4b62      	ldr	r3, [pc, #392]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4a61      	ldr	r2, [pc, #388]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800559a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055a0:	e015      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3304      	adds	r3, #4
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fa73 	bl	8005a94 <RCCEx_PLLSAI1_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055b2:	e00c      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3320      	adds	r3, #32
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fb5a 	bl	8005c74 <RCCEx_PLLSAI2_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055c4:	e003      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	74fb      	strb	r3, [r7, #19]
      break;
 80055ca:	e000      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80055cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055d4:	4b52      	ldr	r3, [pc, #328]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e2:	494f      	ldr	r1, [pc, #316]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055ea:	e001      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ec:	7cfb      	ldrb	r3, [r7, #19]
 80055ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 80a0 	beq.w	800573e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fe:	2300      	movs	r3, #0
 8005600:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005602:	4b47      	ldr	r3, [pc, #284]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00d      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005618:	4b41      	ldr	r3, [pc, #260]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800561a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561c:	4a40      	ldr	r2, [pc, #256]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800561e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005622:	6593      	str	r3, [r2, #88]	; 0x58
 8005624:	4b3e      	ldr	r3, [pc, #248]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005630:	2301      	movs	r3, #1
 8005632:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005634:	4b3b      	ldr	r3, [pc, #236]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a3a      	ldr	r2, [pc, #232]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800563a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005640:	f7fd f93c 	bl	80028bc <HAL_GetTick>
 8005644:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005646:	e009      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005648:	f7fd f938 	bl	80028bc <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d902      	bls.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	74fb      	strb	r3, [r7, #19]
        break;
 800565a:	e005      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800565c:	4b31      	ldr	r3, [pc, #196]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0ef      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d15c      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800566e:	4b2c      	ldr	r3, [pc, #176]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005678:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01f      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	429a      	cmp	r2, r3
 800568a:	d019      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800568c:	4b24      	ldr	r3, [pc, #144]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005696:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005698:	4b21      	ldr	r3, [pc, #132]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569e:	4a20      	ldr	r2, [pc, #128]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056a8:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ae:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056b8:	4a19      	ldr	r2, [pc, #100]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d016      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ca:	f7fd f8f7 	bl	80028bc <HAL_GetTick>
 80056ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d0:	e00b      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d2:	f7fd f8f3 	bl	80028bc <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d902      	bls.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	74fb      	strb	r3, [r7, #19]
            break;
 80056e8:	e006      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ea:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0ec      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80056f8:	7cfb      	ldrb	r3, [r7, #19]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10c      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800570e:	4904      	ldr	r1, [pc, #16]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005716:	e009      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005718:	7cfb      	ldrb	r3, [r7, #19]
 800571a:	74bb      	strb	r3, [r7, #18]
 800571c:	e006      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800571e:	bf00      	nop
 8005720:	40021000 	.word	0x40021000
 8005724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005728:	7cfb      	ldrb	r3, [r7, #19]
 800572a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800572c:	7c7b      	ldrb	r3, [r7, #17]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d105      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005732:	4b9e      	ldr	r3, [pc, #632]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005736:	4a9d      	ldr	r2, [pc, #628]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800573c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800574a:	4b98      	ldr	r3, [pc, #608]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800574c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005750:	f023 0203 	bic.w	r2, r3, #3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	4994      	ldr	r1, [pc, #592]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800576c:	4b8f      	ldr	r3, [pc, #572]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f023 020c 	bic.w	r2, r3, #12
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577a:	498c      	ldr	r1, [pc, #560]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800578e:	4b87      	ldr	r3, [pc, #540]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005794:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	4983      	ldr	r1, [pc, #524]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057b0:	4b7e      	ldr	r3, [pc, #504]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	497b      	ldr	r1, [pc, #492]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057d2:	4b76      	ldr	r3, [pc, #472]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e0:	4972      	ldr	r1, [pc, #456]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057f4:	4b6d      	ldr	r3, [pc, #436]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005802:	496a      	ldr	r1, [pc, #424]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005816:	4b65      	ldr	r3, [pc, #404]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005824:	4961      	ldr	r1, [pc, #388]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005838:	4b5c      	ldr	r3, [pc, #368]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005846:	4959      	ldr	r1, [pc, #356]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800585a:	4b54      	ldr	r3, [pc, #336]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800585c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005860:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005868:	4950      	ldr	r1, [pc, #320]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800587c:	4b4b      	ldr	r3, [pc, #300]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588a:	4948      	ldr	r1, [pc, #288]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800589e:	4b43      	ldr	r3, [pc, #268]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ac:	493f      	ldr	r1, [pc, #252]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d028      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058c0:	4b3a      	ldr	r3, [pc, #232]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ce:	4937      	ldr	r1, [pc, #220]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058de:	d106      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058e0:	4b32      	ldr	r3, [pc, #200]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4a31      	ldr	r2, [pc, #196]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80058e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058ea:	60d3      	str	r3, [r2, #12]
 80058ec:	e011      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058f6:	d10c      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	2101      	movs	r1, #1
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f8c8 	bl	8005a94 <RCCEx_PLLSAI1_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005908:	7cfb      	ldrb	r3, [r7, #19]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d028      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800591e:	4b23      	ldr	r3, [pc, #140]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005924:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592c:	491f      	ldr	r1, [pc, #124]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800593c:	d106      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800593e:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	4a1a      	ldr	r2, [pc, #104]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005948:	60d3      	str	r3, [r2, #12]
 800594a:	e011      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005954:	d10c      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3304      	adds	r3, #4
 800595a:	2101      	movs	r1, #1
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f899 	bl	8005a94 <RCCEx_PLLSAI1_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005966:	7cfb      	ldrb	r3, [r7, #19]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800596c:	7cfb      	ldrb	r3, [r7, #19]
 800596e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d02b      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598a:	4908      	ldr	r1, [pc, #32]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800599a:	d109      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800599c:	4b03      	ldr	r3, [pc, #12]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4a02      	ldr	r2, [pc, #8]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80059a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a6:	60d3      	str	r3, [r2, #12]
 80059a8:	e014      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80059aa:	bf00      	nop
 80059ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059b8:	d10c      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3304      	adds	r3, #4
 80059be:	2101      	movs	r1, #1
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 f867 	bl	8005a94 <RCCEx_PLLSAI1_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059ca:	7cfb      	ldrb	r3, [r7, #19]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80059d0:	7cfb      	ldrb	r3, [r7, #19]
 80059d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d02f      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059e0:	4b2b      	ldr	r3, [pc, #172]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ee:	4928      	ldr	r1, [pc, #160]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059fe:	d10d      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	2102      	movs	r1, #2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f844 	bl	8005a94 <RCCEx_PLLSAI1_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a10:	7cfb      	ldrb	r3, [r7, #19]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d014      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005a16:	7cfb      	ldrb	r3, [r7, #19]
 8005a18:	74bb      	strb	r3, [r7, #18]
 8005a1a:	e011      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a24:	d10c      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3320      	adds	r3, #32
 8005a2a:	2102      	movs	r1, #2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 f921 	bl	8005c74 <RCCEx_PLLSAI2_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005a3c:	7cfb      	ldrb	r3, [r7, #19]
 8005a3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a4c:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a5a:	490d      	ldr	r1, [pc, #52]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a6e:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a7e:	4904      	ldr	r1, [pc, #16]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a86:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40021000 	.word	0x40021000

08005a94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005aa2:	4b73      	ldr	r3, [pc, #460]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d018      	beq.n	8005ae0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005aae:	4b70      	ldr	r3, [pc, #448]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0203 	and.w	r2, r3, #3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d10d      	bne.n	8005ada <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ac6:	4b6a      	ldr	r3, [pc, #424]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	091b      	lsrs	r3, r3, #4
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
       ||
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d044      	beq.n	8005b64 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
 8005ade:	e041      	b.n	8005b64 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d00c      	beq.n	8005b02 <RCCEx_PLLSAI1_Config+0x6e>
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d013      	beq.n	8005b14 <RCCEx_PLLSAI1_Config+0x80>
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d120      	bne.n	8005b32 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005af0:	4b5f      	ldr	r3, [pc, #380]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d11d      	bne.n	8005b38 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b00:	e01a      	b.n	8005b38 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b02:	4b5b      	ldr	r3, [pc, #364]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d116      	bne.n	8005b3c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b12:	e013      	b.n	8005b3c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b14:	4b56      	ldr	r3, [pc, #344]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10f      	bne.n	8005b40 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b20:	4b53      	ldr	r3, [pc, #332]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b30:	e006      	b.n	8005b40 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	73fb      	strb	r3, [r7, #15]
      break;
 8005b36:	e004      	b.n	8005b42 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005b38:	bf00      	nop
 8005b3a:	e002      	b.n	8005b42 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005b3c:	bf00      	nop
 8005b3e:	e000      	b.n	8005b42 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005b40:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10d      	bne.n	8005b64 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b48:	4b49      	ldr	r3, [pc, #292]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	4944      	ldr	r1, [pc, #272]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d17d      	bne.n	8005c66 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b6a:	4b41      	ldr	r3, [pc, #260]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a40      	ldr	r2, [pc, #256]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b76:	f7fc fea1 	bl	80028bc <HAL_GetTick>
 8005b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b7c:	e009      	b.n	8005b92 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b7e:	f7fc fe9d 	bl	80028bc <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d902      	bls.n	8005b92 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	73fb      	strb	r3, [r7, #15]
        break;
 8005b90:	e005      	b.n	8005b9e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b92:	4b37      	ldr	r3, [pc, #220]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1ef      	bne.n	8005b7e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d160      	bne.n	8005c66 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d111      	bne.n	8005bce <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005baa:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6892      	ldr	r2, [r2, #8]
 8005bba:	0211      	lsls	r1, r2, #8
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68d2      	ldr	r2, [r2, #12]
 8005bc0:	0912      	lsrs	r2, r2, #4
 8005bc2:	0452      	lsls	r2, r2, #17
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	492a      	ldr	r1, [pc, #168]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	610b      	str	r3, [r1, #16]
 8005bcc:	e027      	b.n	8005c1e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d112      	bne.n	8005bfa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bd4:	4b26      	ldr	r3, [pc, #152]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005bdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6892      	ldr	r2, [r2, #8]
 8005be4:	0211      	lsls	r1, r2, #8
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6912      	ldr	r2, [r2, #16]
 8005bea:	0852      	lsrs	r2, r2, #1
 8005bec:	3a01      	subs	r2, #1
 8005bee:	0552      	lsls	r2, r2, #21
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	491f      	ldr	r1, [pc, #124]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	610b      	str	r3, [r1, #16]
 8005bf8:	e011      	b.n	8005c1e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bfa:	4b1d      	ldr	r3, [pc, #116]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6892      	ldr	r2, [r2, #8]
 8005c0a:	0211      	lsls	r1, r2, #8
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6952      	ldr	r2, [r2, #20]
 8005c10:	0852      	lsrs	r2, r2, #1
 8005c12:	3a01      	subs	r2, #1
 8005c14:	0652      	lsls	r2, r2, #25
 8005c16:	430a      	orrs	r2, r1
 8005c18:	4915      	ldr	r1, [pc, #84]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c1e:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a13      	ldr	r2, [pc, #76]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2a:	f7fc fe47 	bl	80028bc <HAL_GetTick>
 8005c2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c30:	e009      	b.n	8005c46 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c32:	f7fc fe43 	bl	80028bc <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d902      	bls.n	8005c46 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	73fb      	strb	r3, [r7, #15]
          break;
 8005c44:	e005      	b.n	8005c52 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c46:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0ef      	beq.n	8005c32 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	4903      	ldr	r1, [pc, #12]	; (8005c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40021000 	.word	0x40021000

08005c74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c82:	4b68      	ldr	r3, [pc, #416]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d018      	beq.n	8005cc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c8e:	4b65      	ldr	r3, [pc, #404]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0203 	and.w	r2, r3, #3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d10d      	bne.n	8005cba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d009      	beq.n	8005cba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ca6:	4b5f      	ldr	r3, [pc, #380]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
       ||
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d044      	beq.n	8005d44 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	73fb      	strb	r3, [r7, #15]
 8005cbe:	e041      	b.n	8005d44 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d00c      	beq.n	8005ce2 <RCCEx_PLLSAI2_Config+0x6e>
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d013      	beq.n	8005cf4 <RCCEx_PLLSAI2_Config+0x80>
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d120      	bne.n	8005d12 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cd0:	4b54      	ldr	r3, [pc, #336]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d11d      	bne.n	8005d18 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ce0:	e01a      	b.n	8005d18 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ce2:	4b50      	ldr	r3, [pc, #320]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d116      	bne.n	8005d1c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf2:	e013      	b.n	8005d1c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cf4:	4b4b      	ldr	r3, [pc, #300]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10f      	bne.n	8005d20 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d00:	4b48      	ldr	r3, [pc, #288]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d10:	e006      	b.n	8005d20 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	73fb      	strb	r3, [r7, #15]
      break;
 8005d16:	e004      	b.n	8005d22 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005d18:	bf00      	nop
 8005d1a:	e002      	b.n	8005d22 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005d1c:	bf00      	nop
 8005d1e:	e000      	b.n	8005d22 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005d20:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10d      	bne.n	8005d44 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d28:	4b3e      	ldr	r3, [pc, #248]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6819      	ldr	r1, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	4939      	ldr	r1, [pc, #228]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d167      	bne.n	8005e1a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d4a:	4b36      	ldr	r3, [pc, #216]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a35      	ldr	r2, [pc, #212]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d56:	f7fc fdb1 	bl	80028bc <HAL_GetTick>
 8005d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d5c:	e009      	b.n	8005d72 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d5e:	f7fc fdad 	bl	80028bc <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d902      	bls.n	8005d72 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	73fb      	strb	r3, [r7, #15]
        break;
 8005d70:	e005      	b.n	8005d7e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d72:	4b2c      	ldr	r3, [pc, #176]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1ef      	bne.n	8005d5e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d14a      	bne.n	8005e1a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d111      	bne.n	8005dae <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d8a:	4b26      	ldr	r3, [pc, #152]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6892      	ldr	r2, [r2, #8]
 8005d9a:	0211      	lsls	r1, r2, #8
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	68d2      	ldr	r2, [r2, #12]
 8005da0:	0912      	lsrs	r2, r2, #4
 8005da2:	0452      	lsls	r2, r2, #17
 8005da4:	430a      	orrs	r2, r1
 8005da6:	491f      	ldr	r1, [pc, #124]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	614b      	str	r3, [r1, #20]
 8005dac:	e011      	b.n	8005dd2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005dae:	4b1d      	ldr	r3, [pc, #116]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005db6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6892      	ldr	r2, [r2, #8]
 8005dbe:	0211      	lsls	r1, r2, #8
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6912      	ldr	r2, [r2, #16]
 8005dc4:	0852      	lsrs	r2, r2, #1
 8005dc6:	3a01      	subs	r2, #1
 8005dc8:	0652      	lsls	r2, r2, #25
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	4915      	ldr	r1, [pc, #84]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005dd2:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a13      	ldr	r2, [pc, #76]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dde:	f7fc fd6d 	bl	80028bc <HAL_GetTick>
 8005de2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005de4:	e009      	b.n	8005dfa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005de6:	f7fc fd69 	bl	80028bc <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d902      	bls.n	8005dfa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	73fb      	strb	r3, [r7, #15]
          break;
 8005df8:	e005      	b.n	8005e06 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0ef      	beq.n	8005de6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e0c:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	4903      	ldr	r1, [pc, #12]	; (8005e24 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40021000 	.word	0x40021000

08005e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e01d      	b.n	8005e76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fc fb7e 	bl	8002550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3304      	adds	r3, #4
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f000 fbd2 	bl	8006610 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <HAL_TIM_Base_Start_IT+0x50>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_TIM_Base_Start_IT+0x42>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb0:	d007      	beq.n	8005ec2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0201 	orr.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	00010007 	.word	0x00010007

08005ed4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e01d      	b.n	8005f22 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fc fb0a 	bl	8002514 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3304      	adds	r3, #4
 8005f10:	4619      	mov	r1, r3
 8005f12:	4610      	mov	r0, r2
 8005f14:	f000 fb7c 	bl	8006610 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 ff70 	bl	8006e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <HAL_TIM_PWM_Start+0x98>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x4a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a1d      	ldr	r2, [pc, #116]	; (8005fc8 <HAL_TIM_PWM_Start+0x9c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00e      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x4a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a1b      	ldr	r2, [pc, #108]	; (8005fcc <HAL_TIM_PWM_Start+0xa0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d009      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x4a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a1a      	ldr	r2, [pc, #104]	; (8005fd0 <HAL_TIM_PWM_Start+0xa4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x4a>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a18      	ldr	r2, [pc, #96]	; (8005fd4 <HAL_TIM_PWM_Start+0xa8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d101      	bne.n	8005f7a <HAL_TIM_PWM_Start+0x4e>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <HAL_TIM_PWM_Start+0x50>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <HAL_TIM_PWM_Start+0xac>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b06      	cmp	r3, #6
 8005fa0:	d00b      	beq.n	8005fba <HAL_TIM_PWM_Start+0x8e>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa8:	d007      	beq.n	8005fba <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0201 	orr.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40013400 	.word	0x40013400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800
 8005fd8:	00010007 	.word	0x00010007

08005fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d122      	bne.n	8006038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d11b      	bne.n	8006038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0202 	mvn.w	r2, #2
 8006008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fad7 	bl	80065d2 <HAL_TIM_IC_CaptureCallback>
 8006024:	e005      	b.n	8006032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fac9 	bl	80065be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fada 	bl	80065e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b04      	cmp	r3, #4
 8006044:	d122      	bne.n	800608c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b04      	cmp	r3, #4
 8006052:	d11b      	bne.n	800608c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0204 	mvn.w	r2, #4
 800605c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 faad 	bl	80065d2 <HAL_TIM_IC_CaptureCallback>
 8006078:	e005      	b.n	8006086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa9f 	bl	80065be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fab0 	bl	80065e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b08      	cmp	r3, #8
 8006098:	d122      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d11b      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0208 	mvn.w	r2, #8
 80060b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2204      	movs	r2, #4
 80060b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa83 	bl	80065d2 <HAL_TIM_IC_CaptureCallback>
 80060cc:	e005      	b.n	80060da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fa75 	bl	80065be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fa86 	bl	80065e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0310 	and.w	r3, r3, #16
 80060ea:	2b10      	cmp	r3, #16
 80060ec:	d122      	bne.n	8006134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d11b      	bne.n	8006134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0210 	mvn.w	r2, #16
 8006104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2208      	movs	r2, #8
 800610a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fa59 	bl	80065d2 <HAL_TIM_IC_CaptureCallback>
 8006120:	e005      	b.n	800612e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa4b 	bl	80065be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fa5c 	bl	80065e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b01      	cmp	r3, #1
 8006140:	d10e      	bne.n	8006160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b01      	cmp	r3, #1
 800614e:	d107      	bne.n	8006160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0201 	mvn.w	r2, #1
 8006158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fa fe38 	bl	8000dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616a:	2b80      	cmp	r3, #128	; 0x80
 800616c:	d10e      	bne.n	800618c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006178:	2b80      	cmp	r3, #128	; 0x80
 800617a:	d107      	bne.n	800618c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 ff04 	bl	8006f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619a:	d10e      	bne.n	80061ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a6:	2b80      	cmp	r3, #128	; 0x80
 80061a8:	d107      	bne.n	80061ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fef7 	bl	8006fa8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b40      	cmp	r3, #64	; 0x40
 80061c6:	d10e      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d107      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fa0a 	bl	80065fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d10e      	bne.n	8006212 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d107      	bne.n	8006212 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f06f 0220 	mvn.w	r2, #32
 800620a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 feb7 	bl	8006f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006212:	bf00      	nop
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006232:	2302      	movs	r3, #2
 8006234:	e105      	b.n	8006442 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2202      	movs	r2, #2
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b14      	cmp	r3, #20
 800624a:	f200 80f0 	bhi.w	800642e <HAL_TIM_PWM_ConfigChannel+0x212>
 800624e:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	080062a9 	.word	0x080062a9
 8006258:	0800642f 	.word	0x0800642f
 800625c:	0800642f 	.word	0x0800642f
 8006260:	0800642f 	.word	0x0800642f
 8006264:	080062e9 	.word	0x080062e9
 8006268:	0800642f 	.word	0x0800642f
 800626c:	0800642f 	.word	0x0800642f
 8006270:	0800642f 	.word	0x0800642f
 8006274:	0800632b 	.word	0x0800632b
 8006278:	0800642f 	.word	0x0800642f
 800627c:	0800642f 	.word	0x0800642f
 8006280:	0800642f 	.word	0x0800642f
 8006284:	0800636b 	.word	0x0800636b
 8006288:	0800642f 	.word	0x0800642f
 800628c:	0800642f 	.word	0x0800642f
 8006290:	0800642f 	.word	0x0800642f
 8006294:	080063ad 	.word	0x080063ad
 8006298:	0800642f 	.word	0x0800642f
 800629c:	0800642f 	.word	0x0800642f
 80062a0:	0800642f 	.word	0x0800642f
 80062a4:	080063ed 	.word	0x080063ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fa48 	bl	8006744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0208 	orr.w	r2, r2, #8
 80062c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0204 	bic.w	r2, r2, #4
 80062d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6999      	ldr	r1, [r3, #24]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	619a      	str	r2, [r3, #24]
      break;
 80062e6:	e0a3      	b.n	8006430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fab8 	bl	8006864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6999      	ldr	r1, [r3, #24]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	021a      	lsls	r2, r3, #8
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	619a      	str	r2, [r3, #24]
      break;
 8006328:	e082      	b.n	8006430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fb21 	bl	8006978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0208 	orr.w	r2, r2, #8
 8006344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0204 	bic.w	r2, r2, #4
 8006354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69d9      	ldr	r1, [r3, #28]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	61da      	str	r2, [r3, #28]
      break;
 8006368:	e062      	b.n	8006430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68b9      	ldr	r1, [r7, #8]
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fb89 	bl	8006a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69da      	ldr	r2, [r3, #28]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69d9      	ldr	r1, [r3, #28]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	021a      	lsls	r2, r3, #8
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	61da      	str	r2, [r3, #28]
      break;
 80063aa:	e041      	b.n	8006430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fbd2 	bl	8006b5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0208 	orr.w	r2, r2, #8
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0204 	bic.w	r2, r2, #4
 80063d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063ea:	e021      	b.n	8006430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f000 fc16 	bl	8006c24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006406:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006416:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	021a      	lsls	r2, r3, #8
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800642c:	e000      	b.n	8006430 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800642e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop

0800644c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_TIM_ConfigClockSource+0x18>
 8006460:	2302      	movs	r3, #2
 8006462:	e0a8      	b.n	80065b6 <HAL_TIM_ConfigClockSource+0x16a>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006482:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800648e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d067      	beq.n	8006570 <HAL_TIM_ConfigClockSource+0x124>
 80064a0:	2b40      	cmp	r3, #64	; 0x40
 80064a2:	d80b      	bhi.n	80064bc <HAL_TIM_ConfigClockSource+0x70>
 80064a4:	2b10      	cmp	r3, #16
 80064a6:	d073      	beq.n	8006590 <HAL_TIM_ConfigClockSource+0x144>
 80064a8:	2b10      	cmp	r3, #16
 80064aa:	d802      	bhi.n	80064b2 <HAL_TIM_ConfigClockSource+0x66>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d06f      	beq.n	8006590 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80064b0:	e078      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d06c      	beq.n	8006590 <HAL_TIM_ConfigClockSource+0x144>
 80064b6:	2b30      	cmp	r3, #48	; 0x30
 80064b8:	d06a      	beq.n	8006590 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80064ba:	e073      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80064bc:	2b70      	cmp	r3, #112	; 0x70
 80064be:	d00d      	beq.n	80064dc <HAL_TIM_ConfigClockSource+0x90>
 80064c0:	2b70      	cmp	r3, #112	; 0x70
 80064c2:	d804      	bhi.n	80064ce <HAL_TIM_ConfigClockSource+0x82>
 80064c4:	2b50      	cmp	r3, #80	; 0x50
 80064c6:	d033      	beq.n	8006530 <HAL_TIM_ConfigClockSource+0xe4>
 80064c8:	2b60      	cmp	r3, #96	; 0x60
 80064ca:	d041      	beq.n	8006550 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80064cc:	e06a      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d2:	d066      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x156>
 80064d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d8:	d017      	beq.n	800650a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80064da:	e063      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	6899      	ldr	r1, [r3, #8]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f000 fc7a 	bl	8006de4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	609a      	str	r2, [r3, #8]
      break;
 8006508:	e04c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6899      	ldr	r1, [r3, #8]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f000 fc63 	bl	8006de4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800652c:	609a      	str	r2, [r3, #8]
      break;
 800652e:	e039      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	6859      	ldr	r1, [r3, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	461a      	mov	r2, r3
 800653e:	f000 fbd7 	bl	8006cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2150      	movs	r1, #80	; 0x50
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fc30 	bl	8006dae <TIM_ITRx_SetConfig>
      break;
 800654e:	e029      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	6859      	ldr	r1, [r3, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	461a      	mov	r2, r3
 800655e:	f000 fbf6 	bl	8006d4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2160      	movs	r1, #96	; 0x60
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fc20 	bl	8006dae <TIM_ITRx_SetConfig>
      break;
 800656e:	e019      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6818      	ldr	r0, [r3, #0]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	6859      	ldr	r1, [r3, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	461a      	mov	r2, r3
 800657e:	f000 fbb7 	bl	8006cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2140      	movs	r1, #64	; 0x40
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fc10 	bl	8006dae <TIM_ITRx_SetConfig>
      break;
 800658e:	e009      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f000 fc07 	bl	8006dae <TIM_ITRx_SetConfig>
      break;
 80065a0:	e000      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80065a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a40      	ldr	r2, [pc, #256]	; (8006724 <TIM_Base_SetConfig+0x114>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d013      	beq.n	8006650 <TIM_Base_SetConfig+0x40>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662e:	d00f      	beq.n	8006650 <TIM_Base_SetConfig+0x40>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a3d      	ldr	r2, [pc, #244]	; (8006728 <TIM_Base_SetConfig+0x118>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00b      	beq.n	8006650 <TIM_Base_SetConfig+0x40>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a3c      	ldr	r2, [pc, #240]	; (800672c <TIM_Base_SetConfig+0x11c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d007      	beq.n	8006650 <TIM_Base_SetConfig+0x40>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a3b      	ldr	r2, [pc, #236]	; (8006730 <TIM_Base_SetConfig+0x120>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_Base_SetConfig+0x40>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a3a      	ldr	r2, [pc, #232]	; (8006734 <TIM_Base_SetConfig+0x124>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d108      	bne.n	8006662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a2f      	ldr	r2, [pc, #188]	; (8006724 <TIM_Base_SetConfig+0x114>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d01f      	beq.n	80066aa <TIM_Base_SetConfig+0x9a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006670:	d01b      	beq.n	80066aa <TIM_Base_SetConfig+0x9a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a2c      	ldr	r2, [pc, #176]	; (8006728 <TIM_Base_SetConfig+0x118>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d017      	beq.n	80066aa <TIM_Base_SetConfig+0x9a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a2b      	ldr	r2, [pc, #172]	; (800672c <TIM_Base_SetConfig+0x11c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d013      	beq.n	80066aa <TIM_Base_SetConfig+0x9a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a2a      	ldr	r2, [pc, #168]	; (8006730 <TIM_Base_SetConfig+0x120>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00f      	beq.n	80066aa <TIM_Base_SetConfig+0x9a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a29      	ldr	r2, [pc, #164]	; (8006734 <TIM_Base_SetConfig+0x124>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00b      	beq.n	80066aa <TIM_Base_SetConfig+0x9a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a28      	ldr	r2, [pc, #160]	; (8006738 <TIM_Base_SetConfig+0x128>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d007      	beq.n	80066aa <TIM_Base_SetConfig+0x9a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a27      	ldr	r2, [pc, #156]	; (800673c <TIM_Base_SetConfig+0x12c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d003      	beq.n	80066aa <TIM_Base_SetConfig+0x9a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a26      	ldr	r2, [pc, #152]	; (8006740 <TIM_Base_SetConfig+0x130>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d108      	bne.n	80066bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a10      	ldr	r2, [pc, #64]	; (8006724 <TIM_Base_SetConfig+0x114>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00f      	beq.n	8006708 <TIM_Base_SetConfig+0xf8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a12      	ldr	r2, [pc, #72]	; (8006734 <TIM_Base_SetConfig+0x124>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00b      	beq.n	8006708 <TIM_Base_SetConfig+0xf8>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a11      	ldr	r2, [pc, #68]	; (8006738 <TIM_Base_SetConfig+0x128>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d007      	beq.n	8006708 <TIM_Base_SetConfig+0xf8>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a10      	ldr	r2, [pc, #64]	; (800673c <TIM_Base_SetConfig+0x12c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_Base_SetConfig+0xf8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a0f      	ldr	r2, [pc, #60]	; (8006740 <TIM_Base_SetConfig+0x130>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d103      	bne.n	8006710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	615a      	str	r2, [r3, #20]
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40012c00 	.word	0x40012c00
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40013400 	.word	0x40013400
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800

08006744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	f023 0201 	bic.w	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f023 0302 	bic.w	r3, r3, #2
 8006790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a2c      	ldr	r2, [pc, #176]	; (8006850 <TIM_OC1_SetConfig+0x10c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00f      	beq.n	80067c4 <TIM_OC1_SetConfig+0x80>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a2b      	ldr	r2, [pc, #172]	; (8006854 <TIM_OC1_SetConfig+0x110>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00b      	beq.n	80067c4 <TIM_OC1_SetConfig+0x80>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a2a      	ldr	r2, [pc, #168]	; (8006858 <TIM_OC1_SetConfig+0x114>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d007      	beq.n	80067c4 <TIM_OC1_SetConfig+0x80>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a29      	ldr	r2, [pc, #164]	; (800685c <TIM_OC1_SetConfig+0x118>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d003      	beq.n	80067c4 <TIM_OC1_SetConfig+0x80>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a28      	ldr	r2, [pc, #160]	; (8006860 <TIM_OC1_SetConfig+0x11c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d10c      	bne.n	80067de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f023 0308 	bic.w	r3, r3, #8
 80067ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 0304 	bic.w	r3, r3, #4
 80067dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1b      	ldr	r2, [pc, #108]	; (8006850 <TIM_OC1_SetConfig+0x10c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00f      	beq.n	8006806 <TIM_OC1_SetConfig+0xc2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a1a      	ldr	r2, [pc, #104]	; (8006854 <TIM_OC1_SetConfig+0x110>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00b      	beq.n	8006806 <TIM_OC1_SetConfig+0xc2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a19      	ldr	r2, [pc, #100]	; (8006858 <TIM_OC1_SetConfig+0x114>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d007      	beq.n	8006806 <TIM_OC1_SetConfig+0xc2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a18      	ldr	r2, [pc, #96]	; (800685c <TIM_OC1_SetConfig+0x118>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC1_SetConfig+0xc2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a17      	ldr	r2, [pc, #92]	; (8006860 <TIM_OC1_SetConfig+0x11c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d111      	bne.n	800682a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	621a      	str	r2, [r3, #32]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40013400 	.word	0x40013400
 8006858:	40014000 	.word	0x40014000
 800685c:	40014400 	.word	0x40014400
 8006860:	40014800 	.word	0x40014800

08006864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	f023 0210 	bic.w	r2, r3, #16
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	021b      	lsls	r3, r3, #8
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0320 	bic.w	r3, r3, #32
 80068b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a28      	ldr	r2, [pc, #160]	; (8006964 <TIM_OC2_SetConfig+0x100>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_OC2_SetConfig+0x6c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a27      	ldr	r2, [pc, #156]	; (8006968 <TIM_OC2_SetConfig+0x104>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10d      	bne.n	80068ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a1d      	ldr	r2, [pc, #116]	; (8006964 <TIM_OC2_SetConfig+0x100>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00f      	beq.n	8006914 <TIM_OC2_SetConfig+0xb0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a1c      	ldr	r2, [pc, #112]	; (8006968 <TIM_OC2_SetConfig+0x104>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00b      	beq.n	8006914 <TIM_OC2_SetConfig+0xb0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a1b      	ldr	r2, [pc, #108]	; (800696c <TIM_OC2_SetConfig+0x108>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d007      	beq.n	8006914 <TIM_OC2_SetConfig+0xb0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a1a      	ldr	r2, [pc, #104]	; (8006970 <TIM_OC2_SetConfig+0x10c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_OC2_SetConfig+0xb0>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a19      	ldr	r2, [pc, #100]	; (8006974 <TIM_OC2_SetConfig+0x110>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d113      	bne.n	800693c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800691a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40012c00 	.word	0x40012c00
 8006968:	40013400 	.word	0x40013400
 800696c:	40014000 	.word	0x40014000
 8006970:	40014400 	.word	0x40014400
 8006974:	40014800 	.word	0x40014800

08006978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0303 	bic.w	r3, r3, #3
 80069b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	021b      	lsls	r3, r3, #8
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a27      	ldr	r2, [pc, #156]	; (8006a74 <TIM_OC3_SetConfig+0xfc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d003      	beq.n	80069e2 <TIM_OC3_SetConfig+0x6a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a26      	ldr	r2, [pc, #152]	; (8006a78 <TIM_OC3_SetConfig+0x100>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d10d      	bne.n	80069fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1c      	ldr	r2, [pc, #112]	; (8006a74 <TIM_OC3_SetConfig+0xfc>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00f      	beq.n	8006a26 <TIM_OC3_SetConfig+0xae>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1b      	ldr	r2, [pc, #108]	; (8006a78 <TIM_OC3_SetConfig+0x100>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <TIM_OC3_SetConfig+0xae>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a1a      	ldr	r2, [pc, #104]	; (8006a7c <TIM_OC3_SetConfig+0x104>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d007      	beq.n	8006a26 <TIM_OC3_SetConfig+0xae>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a19      	ldr	r2, [pc, #100]	; (8006a80 <TIM_OC3_SetConfig+0x108>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_OC3_SetConfig+0xae>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a18      	ldr	r2, [pc, #96]	; (8006a84 <TIM_OC3_SetConfig+0x10c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d113      	bne.n	8006a4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	621a      	str	r2, [r3, #32]
}
 8006a68:	bf00      	nop
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40013400 	.word	0x40013400
 8006a7c:	40014000 	.word	0x40014000
 8006a80:	40014400 	.word	0x40014400
 8006a84:	40014800 	.word	0x40014800

08006a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	031b      	lsls	r3, r3, #12
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a18      	ldr	r2, [pc, #96]	; (8006b48 <TIM_OC4_SetConfig+0xc0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00f      	beq.n	8006b0c <TIM_OC4_SetConfig+0x84>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a17      	ldr	r2, [pc, #92]	; (8006b4c <TIM_OC4_SetConfig+0xc4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d00b      	beq.n	8006b0c <TIM_OC4_SetConfig+0x84>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a16      	ldr	r2, [pc, #88]	; (8006b50 <TIM_OC4_SetConfig+0xc8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d007      	beq.n	8006b0c <TIM_OC4_SetConfig+0x84>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a15      	ldr	r2, [pc, #84]	; (8006b54 <TIM_OC4_SetConfig+0xcc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_OC4_SetConfig+0x84>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a14      	ldr	r2, [pc, #80]	; (8006b58 <TIM_OC4_SetConfig+0xd0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d109      	bne.n	8006b20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	019b      	lsls	r3, r3, #6
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40013400 	.word	0x40013400
 8006b50:	40014000 	.word	0x40014000
 8006b54:	40014400 	.word	0x40014400
 8006b58:	40014800 	.word	0x40014800

08006b5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ba0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	041b      	lsls	r3, r3, #16
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a17      	ldr	r2, [pc, #92]	; (8006c10 <TIM_OC5_SetConfig+0xb4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00f      	beq.n	8006bd6 <TIM_OC5_SetConfig+0x7a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a16      	ldr	r2, [pc, #88]	; (8006c14 <TIM_OC5_SetConfig+0xb8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00b      	beq.n	8006bd6 <TIM_OC5_SetConfig+0x7a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <TIM_OC5_SetConfig+0xbc>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d007      	beq.n	8006bd6 <TIM_OC5_SetConfig+0x7a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a14      	ldr	r2, [pc, #80]	; (8006c1c <TIM_OC5_SetConfig+0xc0>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d003      	beq.n	8006bd6 <TIM_OC5_SetConfig+0x7a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a13      	ldr	r2, [pc, #76]	; (8006c20 <TIM_OC5_SetConfig+0xc4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d109      	bne.n	8006bea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	621a      	str	r2, [r3, #32]
}
 8006c04:	bf00      	nop
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40013400 	.word	0x40013400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40014400 	.word	0x40014400
 8006c20:	40014800 	.word	0x40014800

08006c24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	051b      	lsls	r3, r3, #20
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a18      	ldr	r2, [pc, #96]	; (8006cdc <TIM_OC6_SetConfig+0xb8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00f      	beq.n	8006ca0 <TIM_OC6_SetConfig+0x7c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <TIM_OC6_SetConfig+0xbc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00b      	beq.n	8006ca0 <TIM_OC6_SetConfig+0x7c>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a16      	ldr	r2, [pc, #88]	; (8006ce4 <TIM_OC6_SetConfig+0xc0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d007      	beq.n	8006ca0 <TIM_OC6_SetConfig+0x7c>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a15      	ldr	r2, [pc, #84]	; (8006ce8 <TIM_OC6_SetConfig+0xc4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d003      	beq.n	8006ca0 <TIM_OC6_SetConfig+0x7c>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a14      	ldr	r2, [pc, #80]	; (8006cec <TIM_OC6_SetConfig+0xc8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d109      	bne.n	8006cb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	029b      	lsls	r3, r3, #10
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	621a      	str	r2, [r3, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	40012c00 	.word	0x40012c00
 8006ce0:	40013400 	.word	0x40013400
 8006ce4:	40014000 	.word	0x40014000
 8006ce8:	40014400 	.word	0x40014400
 8006cec:	40014800 	.word	0x40014800

08006cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f023 0201 	bic.w	r2, r3, #1
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f023 030a 	bic.w	r3, r3, #10
 8006d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	621a      	str	r2, [r3, #32]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b087      	sub	sp, #28
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	f023 0210 	bic.w	r2, r3, #16
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	031b      	lsls	r3, r3, #12
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	621a      	str	r2, [r3, #32]
}
 8006da2:	bf00      	nop
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b085      	sub	sp, #20
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dc6:	683a      	ldr	r2, [r7, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	f043 0307 	orr.w	r3, r3, #7
 8006dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	609a      	str	r2, [r3, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	021a      	lsls	r2, r3, #8
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	431a      	orrs	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	609a      	str	r2, [r3, #8]
}
 8006e18:	bf00      	nop
 8006e1a:	371c      	adds	r7, #28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f003 031f 	and.w	r3, r3, #31
 8006e36:	2201      	movs	r2, #1
 8006e38:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a1a      	ldr	r2, [r3, #32]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	43db      	mvns	r3, r3
 8006e46:	401a      	ands	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a1a      	ldr	r2, [r3, #32]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f003 031f 	and.w	r3, r3, #31
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	621a      	str	r2, [r3, #32]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
	...

08006e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e068      	b.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a2e      	ldr	r2, [pc, #184]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d004      	beq.n	8006ebc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a2d      	ldr	r2, [pc, #180]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d108      	bne.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ec2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1e      	ldr	r2, [pc, #120]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d01d      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efa:	d018      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1b      	ldr	r2, [pc, #108]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d013      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a1a      	ldr	r2, [pc, #104]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a18      	ldr	r2, [pc, #96]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a13      	ldr	r2, [pc, #76]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a14      	ldr	r2, [pc, #80]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d10c      	bne.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40013400 	.word	0x40013400
 8006f70:	40000400 	.word	0x40000400
 8006f74:	40000800 	.word	0x40000800
 8006f78:	40000c00 	.word	0x40000c00
 8006f7c:	40014000 	.word	0x40014000

08006f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e040      	b.n	8007050 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fb fb12 	bl	8002608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2224      	movs	r2, #36	; 0x24
 8006fe8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0201 	bic.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f82c 	bl	8007058 <UART_SetConfig>
 8007000:	4603      	mov	r3, r0
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e022      	b.n	8007050 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fb92 	bl	800773c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689a      	ldr	r2, [r3, #8]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fc19 	bl	8007880 <UART_CheckIdleState>
 800704e:	4603      	mov	r3, r0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007058:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800705c:	b08a      	sub	sp, #40	; 0x28
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007062:	2300      	movs	r3, #0
 8007064:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800706a:	2300      	movs	r3, #0
 800706c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	4313      	orrs	r3, r2
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	4bb8      	ldr	r3, [pc, #736]	; (8007370 <UART_SetConfig+0x318>)
 800708e:	4013      	ands	r3, r2
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	6812      	ldr	r2, [r2, #0]
 8007094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007096:	430b      	orrs	r3, r1
 8007098:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4aae      	ldr	r2, [pc, #696]	; (8007374 <UART_SetConfig+0x31c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d004      	beq.n	80070ca <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c6:	4313      	orrs	r3, r2
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070da:	430a      	orrs	r2, r1
 80070dc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4aa5      	ldr	r2, [pc, #660]	; (8007378 <UART_SetConfig+0x320>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d126      	bne.n	8007136 <UART_SetConfig+0xde>
 80070e8:	4ba4      	ldr	r3, [pc, #656]	; (800737c <UART_SetConfig+0x324>)
 80070ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d81a      	bhi.n	800712c <UART_SetConfig+0xd4>
 80070f6:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <UART_SetConfig+0xa4>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	0800710d 	.word	0x0800710d
 8007100:	0800711d 	.word	0x0800711d
 8007104:	08007115 	.word	0x08007115
 8007108:	08007125 	.word	0x08007125
 800710c:	2301      	movs	r3, #1
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007112:	e105      	b.n	8007320 <UART_SetConfig+0x2c8>
 8007114:	2302      	movs	r3, #2
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711a:	e101      	b.n	8007320 <UART_SetConfig+0x2c8>
 800711c:	2304      	movs	r3, #4
 800711e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007122:	e0fd      	b.n	8007320 <UART_SetConfig+0x2c8>
 8007124:	2308      	movs	r3, #8
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800712a:	e0f9      	b.n	8007320 <UART_SetConfig+0x2c8>
 800712c:	2310      	movs	r3, #16
 800712e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007132:	bf00      	nop
 8007134:	e0f4      	b.n	8007320 <UART_SetConfig+0x2c8>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a91      	ldr	r2, [pc, #580]	; (8007380 <UART_SetConfig+0x328>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d138      	bne.n	80071b2 <UART_SetConfig+0x15a>
 8007140:	4b8e      	ldr	r3, [pc, #568]	; (800737c <UART_SetConfig+0x324>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	f003 030c 	and.w	r3, r3, #12
 800714a:	2b0c      	cmp	r3, #12
 800714c:	d82c      	bhi.n	80071a8 <UART_SetConfig+0x150>
 800714e:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <UART_SetConfig+0xfc>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	08007189 	.word	0x08007189
 8007158:	080071a9 	.word	0x080071a9
 800715c:	080071a9 	.word	0x080071a9
 8007160:	080071a9 	.word	0x080071a9
 8007164:	08007199 	.word	0x08007199
 8007168:	080071a9 	.word	0x080071a9
 800716c:	080071a9 	.word	0x080071a9
 8007170:	080071a9 	.word	0x080071a9
 8007174:	08007191 	.word	0x08007191
 8007178:	080071a9 	.word	0x080071a9
 800717c:	080071a9 	.word	0x080071a9
 8007180:	080071a9 	.word	0x080071a9
 8007184:	080071a1 	.word	0x080071a1
 8007188:	2300      	movs	r3, #0
 800718a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800718e:	e0c7      	b.n	8007320 <UART_SetConfig+0x2c8>
 8007190:	2302      	movs	r3, #2
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007196:	e0c3      	b.n	8007320 <UART_SetConfig+0x2c8>
 8007198:	2304      	movs	r3, #4
 800719a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800719e:	e0bf      	b.n	8007320 <UART_SetConfig+0x2c8>
 80071a0:	2308      	movs	r3, #8
 80071a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071a6:	e0bb      	b.n	8007320 <UART_SetConfig+0x2c8>
 80071a8:	2310      	movs	r3, #16
 80071aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ae:	bf00      	nop
 80071b0:	e0b6      	b.n	8007320 <UART_SetConfig+0x2c8>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a73      	ldr	r2, [pc, #460]	; (8007384 <UART_SetConfig+0x32c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d125      	bne.n	8007208 <UART_SetConfig+0x1b0>
 80071bc:	4b6f      	ldr	r3, [pc, #444]	; (800737c <UART_SetConfig+0x324>)
 80071be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071c6:	2b10      	cmp	r3, #16
 80071c8:	d011      	beq.n	80071ee <UART_SetConfig+0x196>
 80071ca:	2b10      	cmp	r3, #16
 80071cc:	d802      	bhi.n	80071d4 <UART_SetConfig+0x17c>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <UART_SetConfig+0x186>
 80071d2:	e014      	b.n	80071fe <UART_SetConfig+0x1a6>
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d006      	beq.n	80071e6 <UART_SetConfig+0x18e>
 80071d8:	2b30      	cmp	r3, #48	; 0x30
 80071da:	d00c      	beq.n	80071f6 <UART_SetConfig+0x19e>
 80071dc:	e00f      	b.n	80071fe <UART_SetConfig+0x1a6>
 80071de:	2300      	movs	r3, #0
 80071e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e4:	e09c      	b.n	8007320 <UART_SetConfig+0x2c8>
 80071e6:	2302      	movs	r3, #2
 80071e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ec:	e098      	b.n	8007320 <UART_SetConfig+0x2c8>
 80071ee:	2304      	movs	r3, #4
 80071f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071f4:	e094      	b.n	8007320 <UART_SetConfig+0x2c8>
 80071f6:	2308      	movs	r3, #8
 80071f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071fc:	e090      	b.n	8007320 <UART_SetConfig+0x2c8>
 80071fe:	2310      	movs	r3, #16
 8007200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007204:	bf00      	nop
 8007206:	e08b      	b.n	8007320 <UART_SetConfig+0x2c8>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a5e      	ldr	r2, [pc, #376]	; (8007388 <UART_SetConfig+0x330>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d125      	bne.n	800725e <UART_SetConfig+0x206>
 8007212:	4b5a      	ldr	r3, [pc, #360]	; (800737c <UART_SetConfig+0x324>)
 8007214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007218:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	d011      	beq.n	8007244 <UART_SetConfig+0x1ec>
 8007220:	2b40      	cmp	r3, #64	; 0x40
 8007222:	d802      	bhi.n	800722a <UART_SetConfig+0x1d2>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <UART_SetConfig+0x1dc>
 8007228:	e014      	b.n	8007254 <UART_SetConfig+0x1fc>
 800722a:	2b80      	cmp	r3, #128	; 0x80
 800722c:	d006      	beq.n	800723c <UART_SetConfig+0x1e4>
 800722e:	2bc0      	cmp	r3, #192	; 0xc0
 8007230:	d00c      	beq.n	800724c <UART_SetConfig+0x1f4>
 8007232:	e00f      	b.n	8007254 <UART_SetConfig+0x1fc>
 8007234:	2300      	movs	r3, #0
 8007236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800723a:	e071      	b.n	8007320 <UART_SetConfig+0x2c8>
 800723c:	2302      	movs	r3, #2
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007242:	e06d      	b.n	8007320 <UART_SetConfig+0x2c8>
 8007244:	2304      	movs	r3, #4
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800724a:	e069      	b.n	8007320 <UART_SetConfig+0x2c8>
 800724c:	2308      	movs	r3, #8
 800724e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007252:	e065      	b.n	8007320 <UART_SetConfig+0x2c8>
 8007254:	2310      	movs	r3, #16
 8007256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800725a:	bf00      	nop
 800725c:	e060      	b.n	8007320 <UART_SetConfig+0x2c8>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a4a      	ldr	r2, [pc, #296]	; (800738c <UART_SetConfig+0x334>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d129      	bne.n	80072bc <UART_SetConfig+0x264>
 8007268:	4b44      	ldr	r3, [pc, #272]	; (800737c <UART_SetConfig+0x324>)
 800726a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007276:	d014      	beq.n	80072a2 <UART_SetConfig+0x24a>
 8007278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727c:	d802      	bhi.n	8007284 <UART_SetConfig+0x22c>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d007      	beq.n	8007292 <UART_SetConfig+0x23a>
 8007282:	e016      	b.n	80072b2 <UART_SetConfig+0x25a>
 8007284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007288:	d007      	beq.n	800729a <UART_SetConfig+0x242>
 800728a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800728e:	d00c      	beq.n	80072aa <UART_SetConfig+0x252>
 8007290:	e00f      	b.n	80072b2 <UART_SetConfig+0x25a>
 8007292:	2300      	movs	r3, #0
 8007294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007298:	e042      	b.n	8007320 <UART_SetConfig+0x2c8>
 800729a:	2302      	movs	r3, #2
 800729c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072a0:	e03e      	b.n	8007320 <UART_SetConfig+0x2c8>
 80072a2:	2304      	movs	r3, #4
 80072a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072a8:	e03a      	b.n	8007320 <UART_SetConfig+0x2c8>
 80072aa:	2308      	movs	r3, #8
 80072ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072b0:	e036      	b.n	8007320 <UART_SetConfig+0x2c8>
 80072b2:	2310      	movs	r3, #16
 80072b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072b8:	bf00      	nop
 80072ba:	e031      	b.n	8007320 <UART_SetConfig+0x2c8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a2c      	ldr	r2, [pc, #176]	; (8007374 <UART_SetConfig+0x31c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d129      	bne.n	800731a <UART_SetConfig+0x2c2>
 80072c6:	4b2d      	ldr	r3, [pc, #180]	; (800737c <UART_SetConfig+0x324>)
 80072c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d4:	d014      	beq.n	8007300 <UART_SetConfig+0x2a8>
 80072d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072da:	d802      	bhi.n	80072e2 <UART_SetConfig+0x28a>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d007      	beq.n	80072f0 <UART_SetConfig+0x298>
 80072e0:	e016      	b.n	8007310 <UART_SetConfig+0x2b8>
 80072e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e6:	d007      	beq.n	80072f8 <UART_SetConfig+0x2a0>
 80072e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072ec:	d00c      	beq.n	8007308 <UART_SetConfig+0x2b0>
 80072ee:	e00f      	b.n	8007310 <UART_SetConfig+0x2b8>
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072f6:	e013      	b.n	8007320 <UART_SetConfig+0x2c8>
 80072f8:	2302      	movs	r3, #2
 80072fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072fe:	e00f      	b.n	8007320 <UART_SetConfig+0x2c8>
 8007300:	2304      	movs	r3, #4
 8007302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007306:	e00b      	b.n	8007320 <UART_SetConfig+0x2c8>
 8007308:	2308      	movs	r3, #8
 800730a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800730e:	e007      	b.n	8007320 <UART_SetConfig+0x2c8>
 8007310:	2310      	movs	r3, #16
 8007312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007316:	bf00      	nop
 8007318:	e002      	b.n	8007320 <UART_SetConfig+0x2c8>
 800731a:	2310      	movs	r3, #16
 800731c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a13      	ldr	r2, [pc, #76]	; (8007374 <UART_SetConfig+0x31c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	f040 80fe 	bne.w	8007528 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800732c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007330:	2b08      	cmp	r3, #8
 8007332:	d837      	bhi.n	80073a4 <UART_SetConfig+0x34c>
 8007334:	a201      	add	r2, pc, #4	; (adr r2, 800733c <UART_SetConfig+0x2e4>)
 8007336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733a:	bf00      	nop
 800733c:	08007361 	.word	0x08007361
 8007340:	080073a5 	.word	0x080073a5
 8007344:	08007369 	.word	0x08007369
 8007348:	080073a5 	.word	0x080073a5
 800734c:	08007395 	.word	0x08007395
 8007350:	080073a5 	.word	0x080073a5
 8007354:	080073a5 	.word	0x080073a5
 8007358:	080073a5 	.word	0x080073a5
 800735c:	0800739d 	.word	0x0800739d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007360:	f7fe f826 	bl	80053b0 <HAL_RCC_GetPCLK1Freq>
 8007364:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007366:	e020      	b.n	80073aa <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8007368:	4b09      	ldr	r3, [pc, #36]	; (8007390 <UART_SetConfig+0x338>)
 800736a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800736c:	e01d      	b.n	80073aa <UART_SetConfig+0x352>
 800736e:	bf00      	nop
 8007370:	efff69f3 	.word	0xefff69f3
 8007374:	40008000 	.word	0x40008000
 8007378:	40013800 	.word	0x40013800
 800737c:	40021000 	.word	0x40021000
 8007380:	40004400 	.word	0x40004400
 8007384:	40004800 	.word	0x40004800
 8007388:	40004c00 	.word	0x40004c00
 800738c:	40005000 	.word	0x40005000
 8007390:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007394:	f7fd ff76 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 8007398:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800739a:	e006      	b.n	80073aa <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800739c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80073a2:	e002      	b.n	80073aa <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	76fb      	strb	r3, [r7, #27]
        break;
 80073a8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 81b9 	beq.w	8007724 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	4413      	add	r3, r2
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d305      	bcc.n	80073ce <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d902      	bls.n	80073d4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	76fb      	strb	r3, [r7, #27]
 80073d2:	e1a7      	b.n	8007724 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80073d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073d8:	2b08      	cmp	r3, #8
 80073da:	f200 8092 	bhi.w	8007502 <UART_SetConfig+0x4aa>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <UART_SetConfig+0x38c>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	08007409 	.word	0x08007409
 80073e8:	08007503 	.word	0x08007503
 80073ec:	08007457 	.word	0x08007457
 80073f0:	08007503 	.word	0x08007503
 80073f4:	0800748b 	.word	0x0800748b
 80073f8:	08007503 	.word	0x08007503
 80073fc:	08007503 	.word	0x08007503
 8007400:	08007503 	.word	0x08007503
 8007404:	080074d9 	.word	0x080074d9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8007408:	f7fd ffd2 	bl	80053b0 <HAL_RCC_GetPCLK1Freq>
 800740c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	4619      	mov	r1, r3
 8007412:	f04f 0200 	mov.w	r2, #0
 8007416:	f04f 0300 	mov.w	r3, #0
 800741a:	f04f 0400 	mov.w	r4, #0
 800741e:	0214      	lsls	r4, r2, #8
 8007420:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007424:	020b      	lsls	r3, r1, #8
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6852      	ldr	r2, [r2, #4]
 800742a:	0852      	lsrs	r2, r2, #1
 800742c:	4611      	mov	r1, r2
 800742e:	f04f 0200 	mov.w	r2, #0
 8007432:	eb13 0b01 	adds.w	fp, r3, r1
 8007436:	eb44 0c02 	adc.w	ip, r4, r2
 800743a:	4658      	mov	r0, fp
 800743c:	4661      	mov	r1, ip
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f04f 0400 	mov.w	r4, #0
 8007446:	461a      	mov	r2, r3
 8007448:	4623      	mov	r3, r4
 800744a:	f7f9 fab3 	bl	80009b4 <__aeabi_uldivmod>
 800744e:	4603      	mov	r3, r0
 8007450:	460c      	mov	r4, r1
 8007452:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007454:	e058      	b.n	8007508 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	f04f 0400 	mov.w	r4, #0
 8007460:	49ae      	ldr	r1, [pc, #696]	; (800771c <UART_SetConfig+0x6c4>)
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	eb13 0b01 	adds.w	fp, r3, r1
 800746a:	eb44 0c02 	adc.w	ip, r4, r2
 800746e:	4658      	mov	r0, fp
 8007470:	4661      	mov	r1, ip
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f04f 0400 	mov.w	r4, #0
 800747a:	461a      	mov	r2, r3
 800747c:	4623      	mov	r3, r4
 800747e:	f7f9 fa99 	bl	80009b4 <__aeabi_uldivmod>
 8007482:	4603      	mov	r3, r0
 8007484:	460c      	mov	r4, r1
 8007486:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007488:	e03e      	b.n	8007508 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800748a:	f7fd fefb 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 800748e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	4619      	mov	r1, r3
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	f04f 0300 	mov.w	r3, #0
 800749c:	f04f 0400 	mov.w	r4, #0
 80074a0:	0214      	lsls	r4, r2, #8
 80074a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80074a6:	020b      	lsls	r3, r1, #8
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6852      	ldr	r2, [r2, #4]
 80074ac:	0852      	lsrs	r2, r2, #1
 80074ae:	4611      	mov	r1, r2
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	eb13 0b01 	adds.w	fp, r3, r1
 80074b8:	eb44 0c02 	adc.w	ip, r4, r2
 80074bc:	4658      	mov	r0, fp
 80074be:	4661      	mov	r1, ip
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f04f 0400 	mov.w	r4, #0
 80074c8:	461a      	mov	r2, r3
 80074ca:	4623      	mov	r3, r4
 80074cc:	f7f9 fa72 	bl	80009b4 <__aeabi_uldivmod>
 80074d0:	4603      	mov	r3, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80074d6:	e017      	b.n	8007508 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	085b      	lsrs	r3, r3, #1
 80074de:	f04f 0400 	mov.w	r4, #0
 80074e2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80074e6:	f144 0100 	adc.w	r1, r4, #0
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f04f 0400 	mov.w	r4, #0
 80074f2:	461a      	mov	r2, r3
 80074f4:	4623      	mov	r3, r4
 80074f6:	f7f9 fa5d 	bl	80009b4 <__aeabi_uldivmod>
 80074fa:	4603      	mov	r3, r0
 80074fc:	460c      	mov	r4, r1
 80074fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8007500:	e002      	b.n	8007508 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	76fb      	strb	r3, [r7, #27]
            break;
 8007506:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800750e:	d308      	bcc.n	8007522 <UART_SetConfig+0x4ca>
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007516:	d204      	bcs.n	8007522 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	60da      	str	r2, [r3, #12]
 8007520:	e100      	b.n	8007724 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	76fb      	strb	r3, [r7, #27]
 8007526:	e0fd      	b.n	8007724 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007530:	f040 8084 	bne.w	800763c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8007534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007538:	2b08      	cmp	r3, #8
 800753a:	d85f      	bhi.n	80075fc <UART_SetConfig+0x5a4>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <UART_SetConfig+0x4ec>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007569 	.word	0x08007569
 8007548:	08007589 	.word	0x08007589
 800754c:	080075a9 	.word	0x080075a9
 8007550:	080075fd 	.word	0x080075fd
 8007554:	080075c5 	.word	0x080075c5
 8007558:	080075fd 	.word	0x080075fd
 800755c:	080075fd 	.word	0x080075fd
 8007560:	080075fd 	.word	0x080075fd
 8007564:	080075e5 	.word	0x080075e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007568:	f7fd ff22 	bl	80053b0 <HAL_RCC_GetPCLK1Freq>
 800756c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	005a      	lsls	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	085b      	lsrs	r3, r3, #1
 8007578:	441a      	add	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007582:	b29b      	uxth	r3, r3
 8007584:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8007586:	e03c      	b.n	8007602 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007588:	f7fd ff28 	bl	80053dc <HAL_RCC_GetPCLK2Freq>
 800758c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	005a      	lsls	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	085b      	lsrs	r3, r3, #1
 8007598:	441a      	add	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075a6:	e02c      	b.n	8007602 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	085b      	lsrs	r3, r3, #1
 80075ae:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80075b2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6852      	ldr	r2, [r2, #4]
 80075ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80075be:	b29b      	uxth	r3, r3
 80075c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075c2:	e01e      	b.n	8007602 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075c4:	f7fd fe5e 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 80075c8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	005a      	lsls	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	085b      	lsrs	r3, r3, #1
 80075d4:	441a      	add	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	fbb2 f3f3 	udiv	r3, r2, r3
 80075de:	b29b      	uxth	r3, r3
 80075e0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075e2:	e00e      	b.n	8007602 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	085b      	lsrs	r3, r3, #1
 80075ea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80075fa:	e002      	b.n	8007602 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	76fb      	strb	r3, [r7, #27]
        break;
 8007600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	2b0f      	cmp	r3, #15
 8007606:	d916      	bls.n	8007636 <UART_SetConfig+0x5de>
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800760e:	d212      	bcs.n	8007636 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f023 030f 	bic.w	r3, r3, #15
 8007618:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	085b      	lsrs	r3, r3, #1
 800761e:	b29b      	uxth	r3, r3
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	b29a      	uxth	r2, r3
 8007626:	89fb      	ldrh	r3, [r7, #14]
 8007628:	4313      	orrs	r3, r2
 800762a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	89fa      	ldrh	r2, [r7, #14]
 8007632:	60da      	str	r2, [r3, #12]
 8007634:	e076      	b.n	8007724 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	76fb      	strb	r3, [r7, #27]
 800763a:	e073      	b.n	8007724 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800763c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007640:	2b08      	cmp	r3, #8
 8007642:	d85c      	bhi.n	80076fe <UART_SetConfig+0x6a6>
 8007644:	a201      	add	r2, pc, #4	; (adr r2, 800764c <UART_SetConfig+0x5f4>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	08007671 	.word	0x08007671
 8007650:	0800768f 	.word	0x0800768f
 8007654:	080076ad 	.word	0x080076ad
 8007658:	080076ff 	.word	0x080076ff
 800765c:	080076c9 	.word	0x080076c9
 8007660:	080076ff 	.word	0x080076ff
 8007664:	080076ff 	.word	0x080076ff
 8007668:	080076ff 	.word	0x080076ff
 800766c:	080076e7 	.word	0x080076e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007670:	f7fd fe9e 	bl	80053b0 <HAL_RCC_GetPCLK1Freq>
 8007674:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	085a      	lsrs	r2, r3, #1
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	441a      	add	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	fbb2 f3f3 	udiv	r3, r2, r3
 8007688:	b29b      	uxth	r3, r3
 800768a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800768c:	e03a      	b.n	8007704 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800768e:	f7fd fea5 	bl	80053dc <HAL_RCC_GetPCLK2Freq>
 8007692:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	085a      	lsrs	r2, r3, #1
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	441a      	add	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076aa:	e02b      	b.n	8007704 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	085b      	lsrs	r3, r3, #1
 80076b2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80076b6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6852      	ldr	r2, [r2, #4]
 80076be:	fbb3 f3f2 	udiv	r3, r3, r2
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076c6:	e01d      	b.n	8007704 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076c8:	f7fd fddc 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 80076cc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	085a      	lsrs	r2, r3, #1
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	441a      	add	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076e4:	e00e      	b.n	8007704 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	085b      	lsrs	r3, r3, #1
 80076ec:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80076fc:	e002      	b.n	8007704 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	76fb      	strb	r3, [r7, #27]
        break;
 8007702:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2b0f      	cmp	r3, #15
 8007708:	d90a      	bls.n	8007720 <UART_SetConfig+0x6c8>
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007710:	d206      	bcs.n	8007720 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	60da      	str	r2, [r3, #12]
 800771a:	e003      	b.n	8007724 <UART_SetConfig+0x6cc>
 800771c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007730:	7efb      	ldrb	r3, [r7, #27]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3728      	adds	r7, #40	; 0x28
 8007736:	46bd      	mov	sp, r7
 8007738:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800773c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00a      	beq.n	80077ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01a      	beq.n	8007852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800783a:	d10a      	bne.n	8007852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
  }
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af02      	add	r7, sp, #8
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800788e:	f7fb f815 	bl	80028bc <HAL_GetTick>
 8007892:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b08      	cmp	r3, #8
 80078a0:	d10e      	bne.n	80078c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f82a 	bl	800790a <UART_WaitOnFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e020      	b.n	8007902 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d10e      	bne.n	80078ec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f814 	bl	800790a <UART_WaitOnFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e00a      	b.n	8007902 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2220      	movs	r2, #32
 80078f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	603b      	str	r3, [r7, #0]
 8007916:	4613      	mov	r3, r2
 8007918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800791a:	e05d      	b.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007922:	d059      	beq.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007924:	f7fa ffca 	bl	80028bc <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	429a      	cmp	r2, r3
 8007932:	d302      	bcc.n	800793a <UART_WaitOnFlagUntilTimeout+0x30>
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d11b      	bne.n	8007972 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007948:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0201 	bic.w	r2, r2, #1
 8007958:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2220      	movs	r2, #32
 800795e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e042      	b.n	80079f8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0304 	and.w	r3, r3, #4
 800797c:	2b00      	cmp	r3, #0
 800797e:	d02b      	beq.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800798a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800798e:	d123      	bne.n	80079d8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007998:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079a8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0201 	bic.w	r2, r2, #1
 80079b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2220      	movs	r2, #32
 80079be:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2220      	movs	r2, #32
 80079c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e00f      	b.n	80079f8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	69da      	ldr	r2, [r3, #28]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	4013      	ands	r3, r2
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	bf0c      	ite	eq
 80079e8:	2301      	moveq	r3, #1
 80079ea:	2300      	movne	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	461a      	mov	r2, r3
 80079f0:	79fb      	ldrb	r3, [r7, #7]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d092      	beq.n	800791c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <__libc_init_array>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	4e0d      	ldr	r6, [pc, #52]	; (8007a38 <__libc_init_array+0x38>)
 8007a04:	4c0d      	ldr	r4, [pc, #52]	; (8007a3c <__libc_init_array+0x3c>)
 8007a06:	1ba4      	subs	r4, r4, r6
 8007a08:	10a4      	asrs	r4, r4, #2
 8007a0a:	2500      	movs	r5, #0
 8007a0c:	42a5      	cmp	r5, r4
 8007a0e:	d109      	bne.n	8007a24 <__libc_init_array+0x24>
 8007a10:	4e0b      	ldr	r6, [pc, #44]	; (8007a40 <__libc_init_array+0x40>)
 8007a12:	4c0c      	ldr	r4, [pc, #48]	; (8007a44 <__libc_init_array+0x44>)
 8007a14:	f000 f820 	bl	8007a58 <_init>
 8007a18:	1ba4      	subs	r4, r4, r6
 8007a1a:	10a4      	asrs	r4, r4, #2
 8007a1c:	2500      	movs	r5, #0
 8007a1e:	42a5      	cmp	r5, r4
 8007a20:	d105      	bne.n	8007a2e <__libc_init_array+0x2e>
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a28:	4798      	blx	r3
 8007a2a:	3501      	adds	r5, #1
 8007a2c:	e7ee      	b.n	8007a0c <__libc_init_array+0xc>
 8007a2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a32:	4798      	blx	r3
 8007a34:	3501      	adds	r5, #1
 8007a36:	e7f2      	b.n	8007a1e <__libc_init_array+0x1e>
 8007a38:	08007ac0 	.word	0x08007ac0
 8007a3c:	08007ac0 	.word	0x08007ac0
 8007a40:	08007ac0 	.word	0x08007ac0
 8007a44:	08007ac4 	.word	0x08007ac4

08007a48 <memset>:
 8007a48:	4402      	add	r2, r0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d100      	bne.n	8007a52 <memset+0xa>
 8007a50:	4770      	bx	lr
 8007a52:	f803 1b01 	strb.w	r1, [r3], #1
 8007a56:	e7f9      	b.n	8007a4c <memset+0x4>

08007a58 <_init>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	bf00      	nop
 8007a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5e:	bc08      	pop	{r3}
 8007a60:	469e      	mov	lr, r3
 8007a62:	4770      	bx	lr

08007a64 <_fini>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	bf00      	nop
 8007a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6a:	bc08      	pop	{r3}
 8007a6c:	469e      	mov	lr, r3
 8007a6e:	4770      	bx	lr
